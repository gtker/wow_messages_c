#ifndef WOW_WORLD_MESSAGES_CPP_WRATH_HPP
#define WOW_WORLD_MESSAGES_CPP_WRATH_HPP

/* clang-format off */

#include "wow_world_messages_cpp/wow_world_messages.hpp"
#include "wow_world_messages_cpp/all.hpp"

namespace wow_world_messages {
namespace wrath {
enum class AchievementNameLinkType : uint8_t {
    NORMAL = 0,
    CLICKABLE = 1,
};

enum class ActionBarBehavior : uint8_t {
    INITIAL = 0,
    SET = 1,
    CLEAR = 2,
};

enum class ActivateTaxiReply : uint32_t {
    OK = 0,
    UNSPECIFIED_SERVER_ERROR = 1,
    NO_SUCH_PATH = 2,
    NOT_ENOUGH_MONEY = 3,
    TOO_FAR_AWAY = 4,
    NO_VENDOR_NEARBY = 5,
    NOT_VISITED = 6,
    PLAYER_BUSY = 7,
    PLAYER_ALREADY_MOUNTED = 8,
    PLAYER_SHAPE_SHIFTED = 9,
    PLAYER_MOVING = 10,
    SAME_NODE = 11,
    NOT_STANDING = 12,
};

enum class AiReaction : uint32_t {
    ALERT = 0,
    FRIENDLY = 1,
    HOSTILE = 2,
    AFRAID = 3,
    DESTROY = 4,
};

enum class Area : uint32_t {
    NONE = 0,
    DUN_MOROGH = 1,
    LONGSHORE = 2,
    BADLANDS = 3,
    BLASTED_LANDS = 4,
    BLACKWATER_COVE = 7,
    SWAMP_OF_SORROWS = 8,
    NORTHSHIRE_VALLEY = 9,
    DUSKWOOD = 10,
    WETLANDS = 11,
    ELWYNN_FOREST = 12,
    THE_WORLD_TREE = 13,
    DUROTAR = 14,
    DUSTWALLOW_MARSH = 15,
    AZSHARA = 16,
    THE_BARRENS = 17,
    CRYSTAL_LAKE = 18,
    ZUL_GURUB = 19,
    MOONBROOK = 20,
    KUL_TIRAS = 21,
    PROGRAMMER_ISLE = 22,
    NORTHSHIRE_RIVER = 23,
    NORTHSHIRE_ABBEY = 24,
    BLACKROCK_MOUNTAIN = 25,
    LIGHTHOUSE = 26,
    WESTERN_PLAGUELANDS = 28,
    NINE = 30,
    THE_CEMETARY = 32,
    STRANGLETHORN_VALE = 33,
    ECHO_RIDGE_MINE = 34,
    BOOTY_BAY = 35,
    ALTERAC_MOUNTAINS = 36,
    LAKE_NAZFERITI = 37,
    LOCH_MODAN = 38,
    WESTFALL = 40,
    DEADWIND_PASS = 41,
    DARKSHIRE = 42,
    WILD_SHORE = 43,
    REDRIDGE_MOUNTAINS = 44,
    ARATHI_HIGHLANDS = 45,
    BURNING_STEPPES = 46,
    THE_HINTERLANDS = 47,
    DEAD_MANS_HOLE = 49,
    SEARING_GORGE = 51,
    THIEVES_CAMP = 53,
    JASPERLODE_MINE = 54,
    VALLEY_OF_HEROES_UNUSED = 55,
    HEROES_VIGIL = 56,
    FARGODEEP_MINE = 57,
    NORTHSHIRE_VINEYARDS = 59,
    FORESTS_EDGE = 60,
    THUNDER_FALLS = 61,
    BRACKWELL_PUMPKIN_PATCH = 62,
    THE_STONEFIELD_FARM = 63,
    THE_MACLURE_VINEYARDS = 64,
    DRAGONBLIGHT = 65,
    ZUL_DRAK = 66,
    THE_STORM_PEAKS = 67,
    LAKE_EVERSTILL = 68,
    LAKESHIRE = 69,
    STONEWATCH = 70,
    STONEWATCH_FALLS = 71,
    THE_DARK_PORTAL = 72,
    THE_TAINTED_SCAR = 73,
    POOL_OF_TEARS = 74,
    STONARD = 75,
    FALLOW_SANCTUARY = 76,
    ANVILMAR = 77,
    STORMWIND_MOUNTAINS = 80,
    JEFF_NE_QUADRANT_CHANGED = 81,
    JEFF_NW_QUADRANT = 82,
    JEFF_SE_QUADRANT = 83,
    JEFF_SW_QUADRANT = 84,
    TIRISFAL_GLADES = 85,
    STONE_CAIRN_LAKE = 86,
    GOLDSHIRE = 87,
    EASTVALE_LOGGING_CAMP = 88,
    MIRROR_LAKE_ORCHARD = 89,
    TOWER_OF_AZORA = 91,
    MIRROR_LAKE = 92,
    VUL_GOL_OGRE_MOUND = 93,
    RAVEN_HILL = 94,
    REDRIDGE_CANYONS = 95,
    TOWER_OF_ILGALAR = 96,
    ALTHERS_MILL = 97,
    RETHBAN_CAVERNS = 98,
    REBEL_CAMP = 99,
    NESINGWARYS_EXPEDITION = 100,
    KURZENS_COMPOUND = 101,
    RUINS_OF_ZUL_KUNDA = 102,
    RUINS_OF_ZUL_MAMWE = 103,
    THE_VILE_REEF = 104,
    MOSH_OGG_OGRE_MOUND = 105,
    THE_STOCKPILE = 106,
    SALDEANS_FARM = 107,
    SENTINEL_HILL = 108,
    FURLBROWS_PUMPKIN_FARM = 109,
    JANGOLODE_MINE = 111,
    GOLD_COAST_QUARRY = 113,
    WESTFALL_LIGHTHOUSE = 115,
    MISTY_VALLEY = 116,
    GROM_GOL_BASE_CAMP = 117,
    WHELGARS_EXCAVATION_SITE = 118,
    WESTBROOK_GARRISON = 120,
    TRANQUIL_GARDENS_CEMETERY = 121,
    ZUULDAIA_RUINS = 122,
    BAL_LAL_RUINS = 123,
    KAL_AI_RUINS = 125,
    TKASHI_RUINS = 126,
    BALIA_MAH_RUINS = 127,
    ZIATA_JAI_RUINS = 128,
    MIZJAH_RUINS = 129,
    SILVERPINE_FOREST = 130,
    KHARANOS = 131,
    COLDRIDGE_VALLEY = 132,
    GNOMEREGAN = 133,
    GOL_BOLAR_QUARRY = 134,
    FROSTMANE_HOLD = 135,
    THE_GRIZZLED_DEN = 136,
    BREWNALL_VILLAGE = 137,
    MISTY_PINE_REFUGE = 138,
    EASTERN_PLAGUELANDS = 139,
    TELDRASSIL = 141,
    IRONBANDS_EXCAVATION_SITE = 142,
    MO_GROSH_STRONGHOLD = 143,
    THELSAMAR = 144,
    ALGAZ_GATE = 145,
    STONEWROUGHT_DAM = 146,
    THE_FARSTRIDER_LODGE = 147,
    DARKSHORE = 148,
    SILVER_STREAM_MINE = 149,
    MENETHIL_HARBOR = 150,
    DESIGNER_ISLAND = 151,
    THE_BULWARK = 152,
    RUINS_OF_LORDAERON = 153,
    DEATHKNELL = 154,
    NIGHT_WEBS_HOLLOW = 155,
    SOLLIDEN_FARMSTEAD = 156,
    AGAMAND_MILLS = 157,
    AGAMAND_FAMILY_CRYPT = 158,
    BRILL = 159,
    WHISPERING_GARDENS = 160,
    TERRACE_OF_REPOSE = 161,
    BRIGHTWATER_LAKE = 162,
    GUNTHERS_RETREAT = 163,
    GARRENS_HAUNT = 164,
    BALNIR_FARMSTEAD = 165,
    COLD_HEARTH_MANOR = 166,
    CRUSADER_OUTPOST = 167,
    THE_NORTH_COAST = 168,
    WHISPERING_SHORE = 169,
    LORDAMERE_LAKE = 170,
    FENRIS_ISLE = 172,
    FAOLS_REST = 173,
    DOLANAAR = 186,
    DARNASSUS_UNUSED = 187,
    SHADOWGLEN = 188,
    STEELGRILLS_DEPOT = 189,
    HEARTHGLEN = 190,
    NORTHRIDGE_LUMBER_CAMP = 192,
    RUINS_OF_ANDORHAL = 193,
    SCHOOL_OF_NECROMANCY = 195,
    UTHERS_TOMB = 196,
    SORROW_HILL = 197,
    THE_WEEPING_CAVE = 198,
    FELSTONE_FIELD = 199,
    DALSONS_TEARS = 200,
    GAHRRONS_WITHERING = 201,
    THE_WRITHING_HAUNT = 202,
    MARDENHOLDE_KEEP = 203,
    PYREWOOD_VILLAGE = 204,
    DUN_MODR = 205,
    UTGARDE_KEEP = 206,
    THE_GREAT_SEA = 207,
    UNUSED_IRONCLADCOVE = 208,
    SHADOWFANG_KEEP = 209,
    ICECROWN = 210,
    ICEFLOW_LAKE = 211,
    HELMS_BED_LAKE = 212,
    DEEP_ELEM_MINE = 213,
    THE_GREAT_SEA1 = 214,
    MULGORE = 215,
    ALEXSTON_FARMSTEAD = 219,
    RED_CLOUD_MESA = 220,
    CAMP_NARACHE = 221,
    BLOODHOOF_VILLAGE = 222,
    STONEBULL_LAKE = 223,
    RAVAGED_CARAVAN = 224,
    RED_ROCKS = 225,
    THE_SKITTERING_DARK = 226,
    VALGANS_FIELD = 227,
    THE_SEPULCHER = 228,
    OLSENS_FARTHING = 229,
    THE_GREYMANE_WALL = 230,
    BERENS_PERIL = 231,
    THE_DAWNING_ISLES = 232,
    AMBERMILL = 233,
    FENRIS_KEEP = 235,
    SHADOWFANG_KEEP1 = 236,
    THE_DECREPIT_FERRY = 237,
    MALDENS_ORCHARD = 238,
    THE_IVAR_PATCH = 239,
    THE_DEAD_FIELD = 240,
    THE_ROTTING_ORCHARD = 241,
    BRIGHTWOOD_GROVE = 242,
    FORLORN_ROWE = 243,
    THE_WHIPPLE_ESTATE = 244,
    THE_YORGEN_FARMSTEAD = 245,
    THE_CAULDRON = 246,
    GRIMESILT_DIG_SITE = 247,
    DREADMAUL_ROCK = 249,
    RUINS_OF_THAURISSAN = 250,
    FLAME_CREST = 251,
    BLACKROCK_STRONGHOLD = 252,
    THE_PILLAR_OF_ASH = 253,
    BLACKROCK_MOUNTAIN1 = 254,
    ALTAR_OF_STORMS = 255,
    ALDRASSIL = 256,
    SHADOWTHREAD_CAVE = 257,
    FEL_ROCK = 258,
    LAKE_AL_AMETH = 259,
    STARBREEZE_VILLAGE = 260,
    GNARLPINE_HOLD = 261,
    BAN_ETHIL_BARROW_DEN = 262,
    THE_CLEFT = 263,
    THE_ORACLE_GLADE = 264,
    WELLSPRING_RIVER = 265,
    WELLSPRING_LAKE = 266,
    HILLSBRAD_FOOTHILLS = 267,
    AZSHARA_CRATER = 268,
    DUN_ALGAZ = 269,
    SOUTHSHORE = 271,
    TARREN_MILL = 272,
    DURNHOLDE_KEEP = 275,
    UNUSED_STONEWROUGHT_PASS = 276,
    THE_FOOTHILL_CAVERNS = 277,
    LORDAMERE_INTERNMENT_CAMP = 278,
    DALARAN_CRATER = 279,
    STRAHNBRAD = 280,
    RUINS_OF_ALTERAC = 281,
    CRUSHRIDGE_HOLD = 282,
    SLAUGHTER_HOLLOW = 283,
    THE_UPLANDS = 284,
    SOUTHPOINT_TOWER = 285,
    HILLSBRAD_FIELDS = 286,
    HILLSBRAD = 287,
    AZURELODE_MINE = 288,
    NETHANDER_STEAD = 289,
    DUN_GAROK = 290,
    THORADINS_WALL = 293,
    EASTERN_STRAND = 294,
    WESTERN_STRAND = 295,
    SOUTH_SEAS_UNUSED = 296,
    JAGUERO_ISLE = 297,
    BARADIN_BAY = 298,
    MENETHIL_BAY = 299,
    MISTY_REED_STRAND = 300,
    THE_SAVAGE_COAST = 301,
    THE_CRYSTAL_SHORE = 302,
    SHELL_BEACH = 303,
    NORTH_TIDES_RUN = 305,
    SOUTH_TIDES_RUN = 306,
    THE_OVERLOOK_CLIFFS = 307,
    THE_FORBIDDING_SEA = 308,
    IRONBEARDS_TOMB = 309,
    CRYSTALVEIN_MINE = 310,
    RUINS_OF_ABORAZ = 311,
    JANEIROS_POINT = 312,
    NORTHFOLD_MANOR = 313,
    GOSHEK_FARM = 314,
    DABYRIES_FARMSTEAD = 315,
    BOULDERFIST_HALL = 316,
    WITHERBARK_VILLAGE = 317,
    DRYWHISKER_GORGE = 318,
    REFUGE_POINTE = 320,
    HAMMERFALL = 321,
    BLACKWATER_SHIPWRECKS = 322,
    O_BREENS_CAMP = 323,
    STROMGARDE_KEEP = 324,
    THE_TOWER_OF_ARATHOR = 325,
    THE_SANCTUM = 326,
    FALDIRS_COVE = 327,
    THE_DROWNED_REEF = 328,
    THANDOL_SPAN = 330,
    ASHENVALE = 331,
    THE_GREAT_SEA2 = 332,
    CIRCLE_OF_EAST_BINDING = 333,
    CIRCLE_OF_WEST_BINDING = 334,
    CIRCLE_OF_INNER_BINDING = 335,
    CIRCLE_OF_OUTER_BINDING = 336,
    APOCRYPHANS_REST = 337,
    ANGOR_FORTRESS = 338,
    LETHLOR_RAVINE = 339,
    KARGATH = 340,
    CAMP_KOSH = 341,
    CAMP_BOFF = 342,
    CAMP_WURG = 343,
    CAMP_CAGG = 344,
    AGMONDS_END = 345,
    HAMMERTOES_DIGSITE = 346,
    DUSTBELCH_GROTTO = 347,
    AERIE_PEAK = 348,
    WILDHAMMER_KEEP = 349,
    QUEL_DANIL_LODGE = 350,
    SKULK_ROCK = 351,
    ZUN_WATHA = 352,
    SHADRA_ALOR = 353,
    JINTHA_ALOR = 354,
    THE_ALTAR_OF_ZUL = 355,
    SERADANE = 356,
    FERALAS = 357,
    BRAMBLEBLADE_RAVINE = 358,
    BAEL_MODAN = 359,
    THE_VENTURE_CO_MINE = 360,
    FELWOOD = 361,
    RAZOR_HILL = 362,
    VALLEY_OF_TRIALS = 363,
    THE_DEN = 364,
    BURNING_BLADE_COVEN = 365,
    KOLKAR_CRAG = 366,
    SEN_JIN_VILLAGE = 367,
    ECHO_ISLES = 368,
    THUNDER_RIDGE = 369,
    DRYGULCH_RAVINE = 370,
    DUSTWIND_CAVE = 371,
    TIRAGARDE_KEEP = 372,
    SCUTTLE_COAST = 373,
    BLADEFIST_BAY = 374,
    DEADEYE_SHORE = 375,
    SOUTHFURY_RIVER = 377,
    CAMP_TAURAJO = 378,
    FAR_WATCH_POST = 379,
    THE_CROSSROADS = 380,
    BOULDER_LODE_MINE = 381,
    THE_SLUDGE_FEN = 382,
    THE_DRY_HILLS = 383,
    DREADMIST_PEAK = 384,
    NORTHWATCH_HOLD = 385,
    THE_FORGOTTEN_POOLS = 386,
    LUSHWATER_OASIS = 387,
    THE_STAGNANT_OASIS = 388,
    FIELD_OF_GIANTS = 390,
    THE_MERCHANT_COAST = 391,
    RATCHET = 392,
    DARKSPEAR_STRAND = 393,
    GRIZZLY_HILLS = 394,
    GRIZZLEMAW = 395,
    WINTERHOOF_WATER_WELL = 396,
    THUNDERHORN_WATER_WELL = 397,
    WILDMANE_WATER_WELL = 398,
    SKYLINE_RIDGE = 399,
    THOUSAND_NEEDLES = 400,
    THE_TIDUS_STAIR = 401,
    SHADY_REST_INN = 403,
    BAEL_DUN_DIGSITE = 404,
    DESOLACE = 405,
    STONETALON_MOUNTAINS = 406,
    ORGRIMMAR_UNUSED = 407,
    GILLIJIMS_ISLE = 408,
    ISLAND_OF_DOCTOR_LAPIDIS = 409,
    RAZORWIND_CANYON = 410,
    BATHRANS_HAUNT = 411,
    THE_RUINS_OF_ORDIL_ARAN = 412,
    MAESTRAS_POST = 413,
    THE_ZORAM_STRAND = 414,
    ASTRANAAR = 415,
    THE_SHRINE_OF_AESSINA = 416,
    FIRE_SCAR_SHRINE = 417,
    THE_RUINS_OF_STARDUST = 418,
    THE_HOWLING_VALE = 419,
    SILVERWIND_REFUGE = 420,
    MYSTRAL_LAKE = 421,
    FALLEN_SKY_LAKE = 422,
    IRIS_LAKE = 424,
    MOONWELL = 425,
    RAYNEWOOD_RETREAT = 426,
    THE_SHADY_NOOK = 427,
    NIGHT_RUN = 428,
    XAVIAN = 429,
    SATYRNAAR = 430,
    SPLINTERTREE_POST = 431,
    THE_DOR_DANIL_BARROW_DEN = 432,
    FALFARREN_RIVER = 433,
    FELFIRE_HILL = 434,
    DEMON_FALL_CANYON = 435,
    DEMON_FALL_RIDGE = 436,
    WARSONG_LUMBER_CAMP = 437,
    BOUGH_SHADOW = 438,
    THE_SHIMMERING_FLATS = 439,
    TANARIS = 440,
    LAKE_FALATHIM = 441,
    AUBERDINE = 442,
    RUINS_OF_MATHYSTRA = 443,
    TOWER_OF_ALTHALAXX = 444,
    CLIFFSPRING_FALLS = 445,
    BASHAL_ARAN = 446,
    AMETH_ARAN = 447,
    GROVE_OF_THE_ANCIENTS = 448,
    THE_MASTERS_GLAIVE = 449,
    REMTRAVELS_EXCAVATION = 450,
    MISTS_EDGE = 452,
    THE_LONG_WASH = 453,
    WILDBEND_RIVER = 454,
    BLACKWOOD_DEN = 455,
    CLIFFSPRING_RIVER = 456,
    THE_VEILED_SEA = 457,
    GOLD_ROAD = 458,
    SCARLET_WATCH_POST = 459,
    SUN_ROCK_RETREAT = 460,
    WINDSHEAR_CRAG = 461,
    CRAGPOOL_LAKE = 463,
    MIRKFALLON_LAKE = 464,
    THE_CHARRED_VALE = 465,
    VALLEY_OF_THE_BLOODFURIES = 466,
    STONETALON_PEAK = 467,
    THE_TALON_DEN = 468,
    GREATWOOD_VALE = 469,
    THUNDER_BLUFF_UNUSED = 470,
    BRAVE_WIND_MESA = 471,
    FIRE_STONE_MESA = 472,
    MANTLE_ROCK = 473,
    HUNTER_RISE_UNUSED = 474,
    SPIRIT_RISEUNUSED = 475,
    ELDER_RISEUNUSED = 476,
    RUINS_OF_JUBUWAL = 477,
    POOLS_OF_ARLITHRIEN = 478,
    THE_RUSTMAUL_DIG_SITE = 479,
    CAMP_E_THOK = 480,
    SPLITHOOF_CRAG = 481,
    HIGHPERCH = 482,
    THE_SCREECHING_CANYON = 483,
    FREEWIND_POST = 484,
    THE_GREAT_LIFT = 485,
    GALAK_HOLD = 486,
    ROGUEFEATHER_DEN = 487,
    THE_WEATHERED_NOOK = 488,
    THALANAAR = 489,
    UN_GORO_CRATER = 490,
    RAZORFEN_KRAUL = 491,
    RAVEN_HILL_CEMETERY = 492,
    MOONGLADE = 493,
    HOWLING_FJORD = 495,
    BRACKENWALL_VILLAGE = 496,
    SWAMPLIGHT_MANOR = 497,
    BLOODFEN_BURROW = 498,
    DARKMIST_CAVERN = 499,
    MOGGLE_POINT = 500,
    BEEZILS_WRECK = 501,
    WITCH_HILL = 502,
    SENTRY_POINT = 503,
    NORTH_POINT_TOWER = 504,
    WEST_POINT_TOWER = 505,
    LOST_POINT = 506,
    BLUEFEN = 507,
    STONEMAUL_RUINS = 508,
    THE_DEN_OF_FLAME = 509,
    THE_DRAGONMURK = 510,
    WYRMBOG = 511,
    BLACKHOOF_VILLAGE = 512,
    THERAMORE_ISLE = 513,
    FOOTHOLD_CITADEL = 514,
    IRONCLAD_PRISON = 515,
    DUSTWALLOW_BAY = 516,
    TIDEFURY_COVE = 517,
    DREADMURK_SHORE = 518,
    ADDLES_STEAD = 536,
    FIRE_PLUME_RIDGE = 537,
    LAKKARI_TAR_PITS = 538,
    TERROR_RUN = 539,
    THE_SLITHERING_SCAR = 540,
    MARSHALS_REFUGE = 541,
    FUNGAL_ROCK = 542,
    GOLAKKA_HOT_SPRINGS = 543,
    THE_LOCH = 556,
    BEGGARS_HAUNT = 576,
    KODO_GRAVEYARD = 596,
    GHOST_WALKER_POST = 597,
    SAR_THERIS_STRAND = 598,
    THUNDER_AXE_FORTRESS = 599,
    BOLGANS_HOLE = 600,
    MANNOROC_COVEN = 602,
    SARGERON = 603,
    MAGRAM_VILLAGE = 604,
    GELKIS_VILLAGE = 606,
    VALLEY_OF_SPEARS = 607,
    NIJELS_POINT = 608,
    KOLKAR_VILLAGE = 609,
    HYJAL = 616,
    WINTERSPRING = 618,
    BLACKWOLF_RIVER = 636,
    KODO_ROCK = 637,
    HIDDEN_PATH = 638,
    SPIRIT_ROCK = 639,
    SHRINE_OF_THE_DORMANT_FLAME = 640,
    LAKE_ELUNE_ARA = 656,
    THE_HARBORAGE = 657,
    OUTLAND = 676,
    CRAFTSMENS_TERRACE_UNUSED = 696,
    TRADESMENS_TERRACE_UNUSED = 697,
    THE_TEMPLE_GARDENS_UNUSED = 698,
    TEMPLE_OF_ELUNE_UNUSED = 699,
    CENARION_ENCLAVE_UNUSED = 700,
    WARRIORS_TERRACE_UNUSED = 701,
    RUT_THERAN_VILLAGE = 702,
    IRONBANDS_COMPOUND = 716,
    THE_STOCKADE = 717,
    WAILING_CAVERNS = 718,
    BLACKFATHOM_DEEPS = 719,
    FRAY_ISLAND = 720,
    GNOMEREGAN1 = 721,
    RAZORFEN_DOWNS = 722,
    BAN_ETHIL_HOLLOW = 736,
    SCARLET_MONASTERY = 796,
    JERODS_LANDING = 797,
    RIDGEPOINT_TOWER = 798,
    THE_DARKENED_BANK = 799,
    COLDRIDGE_PASS = 800,
    CHILL_BREEZE_VALLEY = 801,
    SHIMMER_RIDGE = 802,
    AMBERSTILL_RANCH = 803,
    THE_TUNDRID_HILLS = 804,
    SOUTH_GATE_PASS = 805,
    SOUTH_GATE_OUTPOST = 806,
    NORTH_GATE_PASS = 807,
    NORTH_GATE_OUTPOST = 808,
    GATES_OF_IRONFORGE = 809,
    STILLWATER_POND = 810,
    NIGHTMARE_VALE = 811,
    VENOMWEB_VALE = 812,
    THE_BULWARK1 = 813,
    SOUTHFURY_RIVER1 = 814,
    SOUTHFURY_RIVER2 = 815,
    RAZORMANE_GROUNDS = 816,
    SKULL_ROCK = 817,
    PALEMANE_ROCK = 818,
    WINDFURY_RIDGE = 819,
    THE_GOLDEN_PLAINS = 820,
    THE_ROLLING_PLAINS = 821,
    DUN_ALGAZ1 = 836,
    DUN_ALGAZ2 = 837,
    NORTH_GATE_PASS1 = 838,
    SOUTH_GATE_PASS1 = 839,
    TWILIGHT_GROVE = 856,
    GM_ISLAND = 876,
    DELETE_ME = 877,
    SOUTHFURY_RIVER3 = 878,
    SOUTHFURY_RIVER4 = 879,
    THANDOL_SPAN1 = 880,
    THANDOL_SPAN2 = 881,
    PURGATION_ISLE = 896,
    THE_JANSEN_STEAD = 916,
    THE_DEAD_ACRE = 917,
    THE_MOLSEN_FARM = 918,
    STENDELS_POND = 919,
    THE_DAGGER_HILLS = 920,
    DEMONTS_PLACE = 921,
    THE_DUST_PLAINS = 922,
    STONESPLINTER_VALLEY = 923,
    VALLEY_OF_KINGS = 924,
    ALGAZ_STATION = 925,
    BUCKLEBREE_FARM = 926,
    THE_SHINING_STRAND = 927,
    NORTH_TIDES_HOLLOW = 928,
    GRIZZLEPAW_RIDGE = 936,
    THE_VERDANT_FIELDS = 956,
    GADGETZAN = 976,
    STEAMWHEEDLE_PORT = 977,
    ZUL_FARRAK = 978,
    SANDSORROW_WATCH = 979,
    THISTLESHRUB_VALLEY = 980,
    THE_GAPING_CHASM = 981,
    THE_NOXIOUS_LAIR = 982,
    DUNEMAUL_COMPOUND = 983,
    EASTMOON_RUINS = 984,
    WATERSPRING_FIELD = 985,
    ZALASHJIS_DEN = 986,
    LANDS_END_BEACH = 987,
    WAVESTRIDER_BEACH = 988,
    ULDUM = 989,
    VALLEY_OF_THE_WATCHERS = 990,
    GUNSTANS_POST = 991,
    SOUTHMOON_RUINS = 992,
    RENDERS_CAMP = 996,
    RENDERS_VALLEY = 997,
    RENDERS_ROCK = 998,
    STONEWATCH_TOWER = 999,
    GALARDELL_VALLEY = 1000,
    LAKERIDGE_HIGHWAY = 1001,
    THREE_CORNERS = 1002,
    DIREFORGE_HILL = 1016,
    RAPTOR_RIDGE = 1017,
    BLACK_CHANNEL_MARSH = 1018,
    THE_GREEN_BELT = 1019,
    MOSSHIDE_FEN = 1020,
    THELGEN_ROCK = 1021,
    BLUEGILL_MARSH = 1022,
    SALTSPRAY_GLEN = 1023,
    SUNDOWN_MARSH = 1024,
    THE_GREEN_BELT1 = 1025,
    ANGERFANG_ENCAMPMENT = 1036,
    GRIM_BATOL = 1037,
    DRAGONMAW_GATES = 1038,
    THE_LOST_FLEET = 1039,
    DARROW_HILL = 1056,
    THORADINS_WALL1 = 1057,
    WEBWINDER_PATH = 1076,
    THE_HUSHED_BANK = 1097,
    MANOR_MISTMANTLE = 1098,
    CAMP_MOJACHE = 1099,
    GRIMTOTEM_COMPOUND = 1100,
    THE_WRITHING_DEEP = 1101,
    WILDWIND_LAKE = 1102,
    GORDUNNI_OUTPOST = 1103,
    MOK_GORDUN = 1104,
    FERAL_SCAR_VALE = 1105,
    FRAYFEATHER_HIGHLANDS = 1106,
    IDLEWIND_LAKE = 1107,
    THE_FORGOTTEN_COAST = 1108,
    EAST_PILLAR = 1109,
    WEST_PILLAR = 1110,
    DREAM_BOUGH = 1111,
    JADEMIR_LAKE = 1112,
    ONEIROS = 1113,
    RUINS_OF_RAVENWIND = 1114,
    RAGE_SCAR_HOLD = 1115,
    FEATHERMOON_STRONGHOLD = 1116,
    RUINS_OF_SOLARSAL = 1117,
    LOWER_WILDS_UNUSED = 1118,
    THE_TWIN_COLOSSALS = 1119,
    SARDOR_ISLE = 1120,
    ISLE_OF_DREAD = 1121,
    HIGH_WILDERNESS = 1136,
    LOWER_WILDS = 1137,
    SOUTHERN_BARRENS = 1156,
    SOUTHERN_GOLD_ROAD = 1157,
    ZUL_FARRAK1 = 1176,
    UTGARDE_PINNACLE = 1196,
    TIMBERMAW_HOLD = 1216,
    VANNDIR_ENCAMPMENT = 1217,
    TESTAZSHARA = 1218,
    LEGASH_ENCAMPMENT = 1219,
    THALASSIAN_BASE_CAMP = 1220,
    RUINS_OF_ELDARATH = 1221,
    HETAERAS_CLUTCH = 1222,
    TEMPLE_OF_ZIN_MALOR = 1223,
    BEARS_HEAD = 1224,
    URSOLAN = 1225,
    TEMPLE_OF_ARKKORAN = 1226,
    BAY_OF_STORMS = 1227,
    THE_SHATTERED_STRAND = 1228,
    TOWER_OF_ELDARA = 1229,
    JAGGED_REEF = 1230,
    SOUTHRIDGE_BEACH = 1231,
    RAVENCREST_MONUMENT = 1232,
    FORLORN_RIDGE = 1233,
    LAKE_MENNAR = 1234,
    SHADOWSONG_SHRINE = 1235,
    HALDARR_ENCAMPMENT = 1236,
    VALORMOK = 1237,
    THE_RUINED_REACHES = 1256,
    THE_TALONDEEP_PATH = 1276,
    THE_TALONDEEP_PATH1 = 1277,
    ROCKTUSK_FARM = 1296,
    JAGGEDSWINE_FARM = 1297,
    RAZORFEN_DOWNS1 = 1316,
    LOST_RIGGER_COVE = 1336,
    ULDAMAN = 1337,
    LORDAMERE_LAKE1 = 1338,
    LORDAMERE_LAKE2 = 1339,
    GALLOWS_CORNER = 1357,
    SILITHUS = 1377,
    EMERALD_FOREST = 1397,
    SUNKEN_TEMPLE = 1417,
    DREADMAUL_HOLD = 1437,
    NETHERGARDE_KEEP = 1438,
    DREADMAUL_POST = 1439,
    SERPENTS_COIL = 1440,
    ALTAR_OF_STORMS1 = 1441,
    FIREWATCH_RIDGE = 1442,
    THE_SLAG_PIT = 1443,
    THE_SEA_OF_CINDERS = 1444,
    BLACKROCK_MOUNTAIN2 = 1445,
    THORIUM_POINT = 1446,
    GARRISON_ARMORY = 1457,
    THE_TEMPLE_OF_ATAL_HAKKAR = 1477,
    UNDERCITY = 1497,
    ULDAMAN1 = 1517,
    NOT_USED_DEADMINES = 1518,
    STORMWIND_CITY = 1519,
    IRONFORGE = 1537,
    SPLITHOOF_HOLD = 1557,
    THE_CAPE_OF_STRANGLETHORN = 1577,
    SOUTHERN_SAVAGE_COAST = 1578,
    UNUSED_THE_DEADMINES_002 = 1579,
    UNUSED_IRONCLAD_COVE_003 = 1580,
    THE_DEADMINES = 1581,
    IRONCLAD_COVE = 1582,
    BLACKROCK_SPIRE = 1583,
    BLACKROCK_DEPTHS = 1584,
    RAPTOR_GROUNDS_UNUSED = 1597,
    GROL_DOM_FARM_UNUSED = 1598,
    MORSHAN_BASE_CAMP = 1599,
    HONORS_STAND_UNUSED = 1600,
    BLACKTHORN_RIDGE_UNUSED = 1601,
    BRAMBLESCAR_UNUSED = 1602,
    AGAMA_GOR_UNUSED = 1603,
    VALLEY_OF_HEROES = 1617,
    ORGRIMMAR = 1637,
    THUNDER_BLUFF = 1638,
    ELDER_RISE = 1639,
    SPIRIT_RISE = 1640,
    HUNTER_RISE = 1641,
    DARNASSUS = 1657,
    CENARION_ENCLAVE = 1658,
    CRAFTSMENS_TERRACE = 1659,
    WARRIORS_TERRACE = 1660,
    THE_TEMPLE_GARDENS = 1661,
    TRADESMENS_TERRACE = 1662,
    GAVINS_NAZE = 1677,
    SOFERAS_NAZE = 1678,
    CORRAHNS_DAGGER = 1679,
    THE_HEADLAND = 1680,
    MISTY_SHORE = 1681,
    DANDREDS_FOLD = 1682,
    GROWLESS_CAVE = 1683,
    CHILLWIND_POINT = 1684,
    RAPTOR_GROUNDS = 1697,
    BRAMBLESCAR = 1698,
    THORN_HILL = 1699,
    AGAMA_GOR = 1700,
    BLACKTHORN_RIDGE = 1701,
    HONORS_STAND = 1702,
    THE_MORSHAN_RAMPART = 1703,
    GROL_DOM_FARM = 1704,
    RAZORFEN_KRAUL1 = 1717,
    THE_GREAT_LIFT1 = 1718,
    MISTVALE_VALLEY = 1737,
    NEK_MANI_WELLSPRING = 1738,
    BLOODSAIL_COMPOUND = 1739,
    VENTURE_CO_BASE_CAMP = 1740,
    GURUBASHI_ARENA = 1741,
    SPIRIT_DEN = 1742,
    THE_CRIMSON_VEIL = 1757,
    THE_RIPTIDE = 1758,
    THE_DAMSELS_LUCK = 1759,
    VENTURE_CO_OPERATIONS_CENTER = 1760,
    DEADWOOD_VILLAGE = 1761,
    FELPAW_VILLAGE = 1762,
    JAEDENAR = 1763,
    BLOODVENOM_RIVER = 1764,
    BLOODVENOM_FALLS = 1765,
    SHATTER_SCAR_VALE = 1766,
    IRONTREE_WOODS = 1767,
    IRONTREE_CAVERN = 1768,
    TIMBERMAW_HOLD1 = 1769,
    SHADOW_HOLD = 1770,
    SHRINE_OF_THE_DECEIVER = 1771,
    ITHARIUSS_CAVE = 1777,
    SORROWMURK = 1778,
    DRAENIL_DUR_VILLAGE = 1779,
    SPLINTERSPEAR_JUNCTION = 1780,
    STAGALBOG = 1797,
    THE_SHIFTING_MIRE = 1798,
    STAGALBOG_CAVE = 1817,
    WITHERBARK_CAVERNS = 1837,
    THORADINS_WALL2 = 1857,
    BOULDER_GOR = 1858,
    VALLEY_OF_FANGS = 1877,
    THE_DUSTBOWL = 1878,
    MIRAGE_FLATS = 1879,
    FEATHERBEARDS_HOVEL = 1880,
    SHINDIGGERS_CAMP = 1881,
    PLAGUEMIST_RAVINE = 1882,
    VALORWIND_LAKE = 1883,
    AGOL_WATHA = 1884,
    HIRI_WATHA = 1885,
    THE_CREEPING_RUIN = 1886,
    BOGENS_LEDGE = 1887,
    THE_MAKERS_TERRACE = 1897,
    DUSTWIND_GULCH = 1898,
    SHAOL_WATHA = 1917,
    NOONSHADE_RUINS = 1937,
    BROKEN_PILLAR = 1938,
    ABYSSAL_SANDS = 1939,
    SOUTHBREAK_SHORE = 1940,
    CAVERNS_OF_TIME = 1941,
    THE_MARSHLANDS = 1942,
    IRONSTONE_PLATEAU = 1943,
    BLACKCHAR_CAVE = 1957,
    TANNER_CAMP = 1958,
    DUSTFIRE_VALLEY = 1959,
    ZUL_GURUB1 = 1977,
    MISTY_REED_POST = 1978,
    BLOODVENOM_POST = 1997,
    TALONBRANCH_GLADE_ = 1998,
    STRATHOLME = 2017,
    QUEL_THALAS = 2037,
    SCHOLOMANCE = 2057,
    TWILIGHT_VALE = 2077,
    TWILIGHT_SHORE = 2078,
    ALCAZ_ISLAND = 2079,
    DARKCLOUD_PINNACLE = 2097,
    DAWNING_WOOD_CATACOMBS = 2098,
    STONEWATCH_KEEP = 2099,
    MARAUDON = 2100,
    STOUTLAGER_INN = 2101,
    THUNDERBREW_DISTILLERY = 2102,
    MENETHIL_KEEP = 2103,
    DEEPWATER_TAVERN = 2104,
    SHADOW_GRAVE = 2117,
    BRILL_TOWN_HALL = 2118,
    GALLOWS_END_TAVERN = 2119,
    THE_POOLS_OF_VISIONUNUSED = 2137,
    DREADMIST_DEN = 2138,
    BAEL_DUN_KEEP = 2157,
    EMBERSTRIFES_DEN = 2158,
    ONYXIAS_LAIR = 2159,
    WINDSHEAR_MINE = 2160,
    ROLANDS_DOOM = 2161,
    BATTLE_RING = 2177,
    THE_POOLS_OF_VISION = 2197,
    SHADOWBREAK_RAVINE = 2198,
    BROKEN_SPEAR_VILLAGE = 2217,
    WHITEREACH_POST = 2237,
    GORNIA = 2238,
    ZANES_EYE_CRATER = 2239,
    MIRAGE_RACEWAY = 2240,
    FROSTSABER_ROCK = 2241,
    THE_HIDDEN_GROVE = 2242,
    TIMBERMAW_POST = 2243,
    WINTERFALL_VILLAGE = 2244,
    MAZTHORIL = 2245,
    FROSTFIRE_HOT_SPRINGS = 2246,
    ICE_THISTLE_HILLS = 2247,
    DUN_MANDARR = 2248,
    FROSTWHISPER_GORGE = 2249,
    OWL_WING_THICKET = 2250,
    LAKE_KEL_THERIL = 2251,
    THE_RUINS_OF_KEL_THERIL = 2252,
    STARFALL_VILLAGE = 2253,
    BAN_THALLOW_BARROW_DEN = 2254,
    EVERLOOK = 2255,
    DARKWHISPER_GORGE = 2256,
    DEEPRUN_TRAM = 2257,
    THE_FUNGAL_VALE = 2258,
    UNUSEDTHE_MARRIS_STEAD = 2259,
    THE_MARRIS_STEAD = 2260,
    THE_UNDERCROFT = 2261,
    DARROWSHIRE = 2262,
    CROWN_GUARD_TOWER = 2263,
    CORINS_CROSSING = 2264,
    SCARLET_BASE_CAMP = 2265,
    TYRS_HAND = 2266,
    THE_SCARLET_BASILICA = 2267,
    LIGHTS_HOPE_CHAPEL = 2268,
    BROWMAN_MILL = 2269,
    THE_NOXIOUS_GLADE = 2270,
    EASTWALL_TOWER = 2271,
    NORTHDALE = 2272,
    ZUL_MASHAR = 2273,
    MAZRA_ALOR = 2274,
    NORTHPASS_TOWER = 2275,
    QUEL_LITHIEN_LODGE = 2276,
    PLAGUEWOOD = 2277,
    SCOURGEHOLD = 2278,
    STRATHOLME1 = 2279,
    DO_NOT_USE = 2280,
    DARROWMERE_LAKE = 2297,
    CAER_DARROW = 2298,
    DARROWMERE_LAKE1 = 2299,
    CAVERNS_OF_TIME1 = 2300,
    THISTLEFUR_VILLAGE = 2301,
    THE_QUAGMIRE = 2302,
    WINDBREAK_CANYON = 2303,
    SOUTH_SEAS = 2317,
    THE_GREAT_SEA3 = 2318,
    THE_GREAT_SEA4 = 2319,
    THE_GREAT_SEA5 = 2320,
    THE_GREAT_SEA6 = 2321,
    THE_VEILED_SEA1 = 2322,
    THE_VEILED_SEA2 = 2323,
    THE_VEILED_SEA3 = 2324,
    THE_VEILED_SEA4 = 2325,
    THE_VEILED_SEA5 = 2326,
    RAZOR_HILL_BARRACKS = 2337,
    SOUTH_SEAS1 = 2338,
    THE_GREAT_SEA7 = 2339,
    BLOODTOOTH_CAMP = 2357,
    FOREST_SONG = 2358,
    GREENPAW_VILLAGE = 2359,
    SILVERWING_OUTPOST = 2360,
    NIGHTHAVEN = 2361,
    SHRINE_OF_REMULOS = 2362,
    STORMRAGE_BARROW_DENS = 2363,
    THE_GREAT_SEA8 = 2364,
    THE_GREAT_SEA9 = 2365,
    THE_BLACK_MORASS = 2366,
    OLD_HILLSBRAD_FOOTHILLS = 2367,
    TARREN_MILL1 = 2368,
    SOUTHSHORE1 = 2369,
    DURNHOLDE_KEEP1 = 2370,
    DUN_GAROK1 = 2371,
    HILLSBRAD_FIELDS1 = 2372,
    EASTERN_STRAND1 = 2373,
    NETHANDER_STEAD1 = 2374,
    DARROW_HILL1 = 2375,
    SOUTHPOINT_TOWER1 = 2376,
    THORADINS_WALL3 = 2377,
    WESTERN_STRAND1 = 2378,
    AZURELODE_MINE1 = 2379,
    THE_GREAT_SEA10 = 2397,
    THE_GREAT_SEA11 = 2398,
    THE_GREAT_SEA12 = 2399,
    THE_FORBIDDING_SEA1 = 2400,
    THE_FORBIDDING_SEA2 = 2401,
    THE_FORBIDDING_SEA3 = 2402,
    THE_FORBIDDING_SEA4 = 2403,
    TETHRIS_ARAN = 2404,
    ETHEL_RETHOR = 2405,
    RANAZJAR_ISLE = 2406,
    KORMEKS_HUT = 2407,
    SHADOWPREY_VILLAGE = 2408,
    BLACKROCK_PASS = 2417,
    MORGANS_VIGIL = 2418,
    SLITHER_ROCK = 2419,
    TERROR_WING_PATH = 2420,
    DRACO_DAR = 2421,
    RAGEFIRE_CHASM = 2437,
    NIGHTSONG_WOODS = 2457,
    THE_VEILED_SEA6 = 2477,
    MORLOS_ARAN = 2478,
    EMERALD_SANCTUARY = 2479,
    JADEFIRE_GLEN = 2480,
    RUINS_OF_CONSTELLAS = 2481,
    BITTER_REACHES = 2497,
    RISE_OF_THE_DEFILER = 2517,
    LARISS_PAVILION = 2518,
    WOODPAW_HILLS = 2519,
    WOODPAW_DEN = 2520,
    VERDANTIS_RIVER = 2521,
    RUINS_OF_ISILDIEN = 2522,
    GRIMTOTEM_POST = 2537,
    CAMP_APARAJE = 2538,
    MALAKA_JIN = 2539,
    BOULDERSLIDE_RAVINE = 2540,
    SISHIR_CANYON = 2541,
    DIRE_MAUL = 2557,
    DEADWIND_RAVINE = 2558,
    DIAMONDHEAD_RIVER = 2559,
    ARIDENS_CAMP = 2560,
    THE_VICE = 2561,
    KARAZHAN = 2562,
    MORGANS_PLOT = 2563,
    DIRE_MAUL1 = 2577,
    ALTERAC_VALLEY = 2597,
    SCRABBLESCREWS_CAMP = 2617,
    JADEFIRE_RUN = 2618,
    THONDRORIL_RIVER = 2619,
    THONDRORIL_RIVER1 = 2620,
    LAKE_MERELDAR = 2621,
    PESTILENT_SCAR = 2622,
    THE_INFECTIS_SCAR = 2623,
    BLACKWOOD_LAKE = 2624,
    EASTWALL_GATE = 2625,
    TERRORWEB_TUNNEL = 2626,
    TERRORDALE = 2627,
    KARGATHIA_KEEP = 2637,
    VALLEY_OF_BONES = 2657,
    BLACKWING_LAIR = 2677,
    DEADMANS_CROSSING = 2697,
    MOLTEN_CORE = 2717,
    THE_SCARAB_WALL = 2737,
    SOUTHWIND_VILLAGE = 2738,
    TWILIGHT_BASE_CAMP = 2739,
    THE_CRYSTAL_VALE = 2740,
    THE_SCARAB_DAIS = 2741,
    HIVE_ASHI = 2742,
    HIVE_ZORA = 2743,
    HIVE_REGAL = 2744,
    SHRINE_OF_THE_FALLEN_WARRIOR = 2757,
    UNUSED_ALTERAC_VALLEY = 2777,
    BLACKFATHOM_DEEPS1 = 2797,
    CRYSTALSONG_FOREST = 2817,
    THE_MASTERS_CELLAR = 2837,
    STONEWROUGHT_PASS = 2838,
    ALTERAC_VALLEY1 = 2839,
    THE_RUMBLE_CAGE = 2857,
    CHUNK_TEST = 2877,
    ZORAM_GAR_OUTPOST = 2897,
    HALL_OF_LEGENDS = 2917,
    CHAMPIONS_HALL = 2918,
    GROSH_GOK_COMPOUND = 2937,
    SLEEPING_GORGE = 2938,
    IRONDEEP_MINE = 2957,
    STONEHEARTH_OUTPOST = 2958,
    DUN_BALDAR = 2959,
    ICEWING_PASS = 2960,
    FROSTWOLF_VILLAGE = 2961,
    TOWER_POINT = 2962,
    COLDTOOTH_MINE = 2963,
    WINTERAX_HOLD = 2964,
    ICEBLOOD_GARRISON = 2977,
    FROSTWOLF_KEEP = 2978,
    TOR_KREN_FARM = 2979,
    FROST_DAGGER_PASS = 3017,
    IRONSTONE_CAMP = 3037,
    WEAZELS_CRATER = 3038,
    TAHONDA_RUINS = 3039,
    FIELD_OF_STRIFE = 3057,
    ICEWING_CAVERN = 3058,
    VALORS_REST = 3077,
    THE_SWARMING_PILLAR = 3097,
    TWILIGHT_POST = 3098,
    TWILIGHT_OUTPOST = 3099,
    RAVAGED_TWILIGHT_CAMP = 3100,
    SHALZARUS_LAIR = 3117,
    TALRENDIS_POINT = 3137,
    RETHRESS_SANCTUM = 3138,
    MOON_HORROR_DEN = 3139,
    SCALEBEARDS_CAVE = 3140,
    BOULDERSLIDE_CAVERN = 3157,
    WARSONG_LABOR_CAMP = 3177,
    CHILLWIND_CAMP = 3197,
    THE_MAUL = 3217,
    THE_MAUL_UNUSED = 3237,
    BONES_OF_GRAKKAROND = 3257,
    WARSONG_GULCH = 3277,
    FROSTWOLF_GRAVEYARD = 3297,
    FROSTWOLF_PASS = 3298,
    DUN_BALDAR_PASS = 3299,
    ICEBLOOD_GRAVEYARD = 3300,
    SNOWFALL_GRAVEYARD = 3301,
    STONEHEARTH_GRAVEYARD = 3302,
    STORMPIKE_GRAVEYARD = 3303,
    ICEWING_BUNKER = 3304,
    STONEHEARTH_BUNKER = 3305,
    WILDPAW_RIDGE = 3306,
    REVANTUSK_VILLAGE = 3317,
    ROCK_OF_DUROTAN = 3318,
    SILVERWING_GROVE = 3319,
    WARSONG_LUMBER_MILL = 3320,
    SILVERWING_HOLD = 3321,
    WILDPAW_CAVERN = 3337,
    THE_VEILED_CLEFT = 3338,
    YOJAMBA_ISLE = 3357,
    ARATHI_BASIN = 3358,
    THE_COIL = 3377,
    ALTAR_OF_HIR_EEK = 3378,
    SHADRA_ZAAR = 3379,
    HAKKARI_GROUNDS = 3380,
    NAZE_OF_SHIRVALLAH = 3381,
    TEMPLE_OF_BETHEKK = 3382,
    THE_BLOODFIRE_PIT = 3383,
    ALTAR_OF_THE_BLOOD_GOD = 3384,
    ZANZAS_RISE = 3397,
    EDGE_OF_MADNESS = 3398,
    TROLLBANE_HALL = 3417,
    DEFILERS_DEN = 3418,
    PAGLES_POINTE = 3419,
    FARM = 3420,
    BLACKSMITH = 3421,
    LUMBER_MILL = 3422,
    GOLD_MINE = 3423,
    STABLES = 3424,
    CENARION_HOLD = 3425,
    STAGHELM_POINT = 3426,
    BRONZEBEARD_ENCAMPMENT = 3427,
    AHN_QIRAJ = 3428,
    RUINS_OF_AHN_QIRAJ = 3429,
    EVERSONG_WOODS = 3430,
    SUNSTRIDER_ISLE = 3431,
    SHRINE_OF_DATH_REMAR = 3432,
    GHOSTLANDS = 3433,
    SCARAB_TERRACE = 3434,
    GENERALS_TERRACE = 3435,
    THE_RESERVOIR = 3436,
    THE_HATCHERY = 3437,
    THE_COMB = 3438,
    WATCHERS_TERRACE = 3439,
    SCARAB_TERRACE1 = 3440,
    GENERALS_TERRACE1 = 3441,
    THE_RESERVOIR1 = 3442,
    THE_HATCHERY1 = 3443,
    THE_COMB1 = 3444,
    WATCHERS_TERRACE1 = 3445,
    TWILIGHTS_RUN = 3446,
    ORTELLS_HIDEOUT = 3447,
    SCARAB_TERRACE2 = 3448,
    GENERALS_TERRACE2 = 3449,
    THE_RESERVOIR2 = 3450,
    THE_HATCHERY2 = 3451,
    THE_COMB2 = 3452,
    WATCHERS_TERRACE2 = 3453,
    RUINS_OF_AHN_QIRAJ1 = 3454,
    THE_NORTH_SEA = 3455,
    NAXXRAMAS = 3456,
    KARAZHAN1 = 3457,
    CITY = 3459,
    GOLDEN_STRAND = 3460,
    SUNSAIL_ANCHORAGE = 3461,
    FAIRBREEZE_VILLAGE = 3462,
    MAGISTERS_GATE = 3463,
    FARSTRIDER_RETREAT = 3464,
    NORTH_SANCTUM = 3465,
    WEST_SANCTUM = 3466,
    EAST_SANCTUM = 3467,
    SALTHERILS_HAVEN = 3468,
    THURONS_LIVERY = 3469,
    STILLWHISPER_POND = 3470,
    THE_LIVING_WOOD = 3471,
    AZUREBREEZE_COAST = 3472,
    LAKE_ELRENDAR = 3473,
    THE_SCORCHED_GROVE = 3474,
    ZEB_WATHA = 3475,
    TOR_WATHA = 3476,
    AZJOL_NERUB = 3477,
    GATES_OF_AHN_QIRAJ = 3478,
    THE_VEILED_SEA7 = 3479,
    DUSKWITHER_GROUNDS = 3480,
    DUSKWITHER_SPIRE = 3481,
    THE_DEAD_SCAR = 3482,
    HELLFIRE_PENINSULA = 3483,
    THE_SUNSPIRE = 3484,
    FALTHRIEN_ACADEMY = 3485,
    RAVENHOLDT_MANOR = 3486,
    SILVERMOON_CITY = 3487,
    TRANQUILLIEN = 3488,
    SUNCROWN_VILLAGE = 3489,
    GOLDENMIST_VILLAGE = 3490,
    WINDRUNNER_VILLAGE = 3491,
    WINDRUNNER_SPIRE = 3492,
    SANCTUM_OF_THE_SUN = 3493,
    SANCTUM_OF_THE_MOON = 3494,
    DAWNSTAR_SPIRE = 3495,
    FARSTRIDER_ENCLAVE = 3496,
    AN_DAROTH = 3497,
    AN_TELAS = 3498,
    AN_OWYN = 3499,
    DEATHOLME = 3500,
    BLEEDING_ZIGGURAT = 3501,
    HOWLING_ZIGGURAT = 3502,
    SHALANDIS_ISLE = 3503,
    TORYL_ESTATE = 3504,
    UNDERLIGHT_MINES = 3505,
    ANDILIEN_ESTATE = 3506,
    HATCHET_HILLS = 3507,
    AMANI_PASS = 3508,
    SUNGRAZE_PEAK = 3509,
    AMANI_CATACOMBS = 3510,
    TOWER_OF_THE_DAMNED = 3511,
    ZEB_SORA = 3512,
    LAKE_ELRENDAR1 = 3513,
    THE_DEAD_SCAR1 = 3514,
    ELRENDAR_RIVER = 3515,
    ZEB_TELA = 3516,
    ZEB_NOWA = 3517,
    NAGRAND = 3518,
    TEROKKAR_FOREST = 3519,
    SHADOWMOON_VALLEY = 3520,
    ZANGARMARSH = 3521,
    BLADES_EDGE_MOUNTAINS = 3522,
    NETHERSTORM = 3523,
    AZUREMYST_ISLE = 3524,
    BLOODMYST_ISLE = 3525,
    AMMEN_VALE = 3526,
    CRASH_SITE = 3527,
    SILVERLINE_LAKE = 3528,
    NESTLEWOOD_THICKET = 3529,
    SHADOW_RIDGE = 3530,
    SKULKING_ROW = 3531,
    DAWNING_LANE = 3532,
    RUINS_OF_SILVERMOON = 3533,
    FETHS_WAY = 3534,
    HELLFIRE_CITADEL = 3535,
    THRALLMAR = 3536,
    BOREAN_TUNDRA = 3537,
    HONOR_HOLD = 3538,
    THE_STAIR_OF_DESTINY = 3539,
    TWISTING_NETHER = 3540,
    FORGE_CAMP_MAGEDDON = 3541,
    THE_PATH_OF_GLORY = 3542,
    THE_GREAT_FISSURE = 3543,
    PLAIN_OF_SHARDS = 3544,
    HELLFIRE_CITADEL1 = 3545,
    EXPEDITION_ARMORY = 3546,
    THRONE_OF_KIL_JAEDEN = 3547,
    FORGE_CAMP_RAGE = 3548,
    INVASION_POINT_ANNIHILATOR = 3549,
    BORUNE_RUINS = 3550,
    RUINS_OF_SHA_NAAR = 3551,
    TEMPLE_OF_TELHAMAT = 3552,
    POOLS_OF_AGGONAR = 3553,
    FALCON_WATCH = 3554,
    MAG_HAR_POST = 3555,
    DEN_OF_HAAL_ESH = 3556,
    THE_EXODAR = 3557,
    ELRENDAR_FALLS = 3558,
    NESTLEWOOD_HILLS = 3559,
    AMMEN_FIELDS = 3560,
    THE_SACRED_GROVE = 3561,
    HELLFIRE_RAMPARTS = 3562,
    HELLFIRE_CITADEL2 = 3563,
    EMBERGLADE = 3564,
    CENARION_REFUGE = 3565,
    MOONWING_DEN = 3566,
    POD_CLUSTER = 3567,
    POD_WRECKAGE = 3568,
    TIDES_HOLLOW = 3569,
    WRATHSCALE_POINT = 3570,
    BRISTLELIMB_VILLAGE = 3571,
    STILLPINE_HOLD = 3572,
    ODESYUS_LANDING = 3573,
    VALAARS_BERTH = 3574,
    SILTING_SHORE = 3575,
    AZURE_WATCH = 3576,
    GEEZLES_CAMP = 3577,
    MENAGERIE_WRECKAGE = 3578,
    TRAITORS_COVE = 3579,
    WILDWIND_PEAK = 3580,
    WILDWIND_PATH = 3581,
    ZETH_GOR = 3582,
    BERYL_COAST = 3583,
    BLOOD_WATCH = 3584,
    BLADEWOOD = 3585,
    THE_VECTOR_COIL = 3586,
    THE_WARP_PISTON = 3587,
    THE_CRYO_CORE = 3588,
    THE_CRIMSON_REACH = 3589,
    WRATHSCALE_LAIR = 3590,
    RUINS_OF_LORETH_ARAN = 3591,
    NAZZIVIAN = 3592,
    AXXARIEN = 3593,
    BLACKSILT_SHORE = 3594,
    THE_FOUL_POOL = 3595,
    THE_HIDDEN_REEF = 3596,
    AMBERWEB_PASS = 3597,
    WYRMSCAR_ISLAND = 3598,
    TALON_STAND = 3599,
    BRISTLELIMB_ENCLAVE = 3600,
    RAGEFEATHER_RIDGE = 3601,
    KESSELS_CROSSING = 3602,
    TEL_ATHIONS_CAMP = 3603,
    THE_BLOODCURSED_REEF = 3604,
    HYJAL_PAST = 3605,
    HYJAL_SUMMIT = 3606,
    SERPENTSHRINE_CAVERN = 3607,
    VINDICATORS_REST = 3608,
    UNUSED3 = 3609,
    BURNING_BLADE_RUINS = 3610,
    CLAN_WATCH = 3611,
    BLOODCURSE_ISLE = 3612,
    GARADAR = 3613,
    SKYSONG_LAKE = 3614,
    THRONE_OF_THE_ELEMENTS = 3615,
    LAUGHING_SKULL_RUINS = 3616,
    WARMAUL_HILL = 3617,
    GRUULS_LAIR = 3618,
    AUREN_RIDGE = 3619,
    AUREN_FALLS = 3620,
    LAKE_SUNSPRING = 3621,
    SUNSPRING_POST = 3622,
    AERIS_LANDING = 3623,
    FORGE_CAMP_FEAR = 3624,
    FORGE_CAMP_HATE = 3625,
    TELAAR = 3626,
    NORTHWIND_CLEFT = 3627,
    HALAA = 3628,
    SOUTHWIND_CLEFT = 3629,
    OSHU_GUN = 3630,
    SPIRIT_FIELDS = 3631,
    SHAMANAR = 3632,
    ANCESTRAL_GROUNDS = 3633,
    WINDYREED_VILLAGE = 3634,
    UNUSED2 = 3635,
    ELEMENTAL_PLATEAU = 3636,
    KILSORROW_FORTRESS = 3637,
    THE_RING_OF_TRIALS = 3638,
    SILVERMYST_ISLE = 3639,
    DAGGERFEN_VILLAGE = 3640,
    UMBRAFEN_VILLAGE = 3641,
    FERALFEN_VILLAGE = 3642,
    BLOODSCALE_ENCLAVE = 3643,
    TELREDOR = 3644,
    ZABRA_JIN = 3645,
    QUAGG_RIDGE = 3646,
    THE_SPAWNING_GLEN = 3647,
    THE_DEAD_MIRE = 3648,
    SPOREGGAR = 3649,
    ANGO_ROSH_GROUNDS = 3650,
    ANGO_ROSH_STRONGHOLD = 3651,
    FUNGGOR_CAVERN = 3652,
    SERPENT_LAKE = 3653,
    THE_DRAIN = 3654,
    UMBRAFEN_LAKE = 3655,
    MARSHLIGHT_LAKE = 3656,
    PORTAL_CLEARING = 3657,
    SPOREWIND_LAKE = 3658,
    THE_LAGOON = 3659,
    BLADES_RUN = 3660,
    BLADE_TOOTH_CANYON = 3661,
    COMMONS_HALL = 3662,
    DERELICT_MANOR = 3663,
    HUNTRESS_OF_THE_SUN = 3664,
    FALCONWING_SQUARE = 3665,
    HALAANI_BASIN = 3666,
    HEWN_BOG = 3667,
    BOHA_MU_RUINS = 3668,
    THE_STADIUM = 3669,
    THE_OVERLOOK = 3670,
    BROKEN_HILL = 3671,
    MAG_HARI_PROCESSION = 3672,
    NESINGWARY_SAFARI = 3673,
    CENARION_THICKET = 3674,
    TUUREM = 3675,
    VEIL_SHIENOR = 3676,
    VEIL_SKITH = 3677,
    VEIL_SHALAS = 3678,
    SKETTIS = 3679,
    BLACKWIND_VALLEY = 3680,
    FIREWING_POINT = 3681,
    GRANGOL_VAR_VILLAGE = 3682,
    STONEBREAKER_HOLD = 3683,
    ALLERIAN_STRONGHOLD = 3684,
    BONECHEWER_RUINS = 3685,
    VEIL_LITHIC = 3686,
    OLEMBAS = 3687,
    AUCHINDOUN = 3688,
    VEIL_RESKK = 3689,
    BLACKWIND_LAKE = 3690,
    LAKE_ERE_NORU = 3691,
    LAKE_JORUNE = 3692,
    SKETHYL_MOUNTAINS = 3693,
    MISTY_RIDGE = 3694,
    THE_BROKEN_HILLS = 3695,
    THE_BARRIER_HILLS = 3696,
    THE_BONE_WASTES = 3697,
    NAGRAND_ARENA = 3698,
    LAUGHING_SKULL_COURTYARD = 3699,
    THE_RING_OF_BLOOD = 3700,
    ARENA_FLOOR = 3701,
    BLADES_EDGE_ARENA = 3702,
    SHATTRATH_CITY = 3703,
    THE_SHEPHERDS_GATE = 3704,
    TELAARI_BASIN = 3705,
    THE_DARK_PORTAL1 = 3706,
    ALLIANCE_BASE = 3707,
    HORDE_ENCAMPMENT = 3708,
    NIGHT_ELF_VILLAGE = 3709,
    NORDRASSIL = 3710,
    SHOLAZAR_BASIN = 3711,
    AREA_52 = 3712,
    THE_BLOOD_FURNACE = 3713,
    THE_SHATTERED_HALLS = 3714,
    THE_STEAMVAULT = 3715,
    THE_UNDERBOG = 3716,
    THE_SLAVE_PENS = 3717,
    SWAMPRAT_POST = 3718,
    BLEEDING_HOLLOW_RUINS = 3719,
    TWIN_SPIRE_RUINS = 3720,
    THE_CRUMBLING_WASTE = 3721,
    MANAFORGE_ARA = 3722,
    ARKLON_RUINS = 3723,
    COSMOWRENCH = 3724,
    RUINS_OF_ENKAAT = 3725,
    MANAFORGE_B_NAAR = 3726,
    THE_SCRAP_FIELD = 3727,
    THE_VORTEX_FIELDS = 3728,
    THE_HEAP = 3729,
    MANAFORGE_CORUU = 3730,
    THE_TEMPEST_RIFT = 3731,
    KIRIN_VAR_VILLAGE = 3732,
    THE_VIOLET_TOWER = 3733,
    MANAFORGE_DURO = 3734,
    VOIDWIND_PLATEAU = 3735,
    MANAFORGE_ULTRIS = 3736,
    CELESTIAL_RIDGE = 3737,
    THE_STORMSPIRE = 3738,
    FORGE_BASE_OBLIVION = 3739,
    FORGE_BASE_GEHENNA = 3740,
    RUINS_OF_FARAHLON = 3741,
    SOCRETHARS_SEAT = 3742,
    LEGION_HOLD = 3743,
    SHADOWMOON_VILLAGE = 3744,
    WILDHAMMER_STRONGHOLD = 3745,
    THE_HAND_OF_GUL_DAN = 3746,
    THE_FEL_PITS = 3747,
    THE_DEATHFORGE = 3748,
    COILSKAR_CISTERN = 3749,
    COILSKAR_POINT = 3750,
    SUNFIRE_POINT = 3751,
    ILLIDARI_POINT = 3752,
    RUINS_OF_BAA_RI = 3753,
    ALTAR_OF_SHA_TAR = 3754,
    THE_STAIR_OF_DOOM = 3755,
    RUINS_OF_KARABOR = 3756,
    ATA_MAL_TERRACE = 3757,
    NETHERWING_FIELDS = 3758,
    NETHERWING_LEDGE = 3759,
    THE_BARRIER_HILLS1 = 3760,
    THE_HIGH_PATH = 3761,
    WINDYREED_PASS = 3762,
    ZANGAR_RIDGE = 3763,
    THE_TWILIGHT_RIDGE = 3764,
    RAZORTHORN_TRAIL = 3765,
    OREBOR_HARBORAGE = 3766,
    BLADES_RUN1 = 3767,
    JAGGED_RIDGE = 3768,
    THUNDERLORD_STRONGHOLD = 3769,
    BLADE_TOOTH_CANYON1 = 3770,
    THE_LIVING_GROVE = 3771,
    SYLVANAAR = 3772,
    BLADESPIRE_HOLD = 3773,
    GRUULS_LAIR1 = 3774,
    CIRCLE_OF_BLOOD = 3775,
    BLOODMAUL_OUTPOST = 3776,
    BLOODMAUL_CAMP = 3777,
    DRAENETHYST_MINE = 3778,
    TROGMAS_CLAIM = 3779,
    BLACKWING_COVEN = 3780,
    GRISHNATH = 3781,
    VEIL_LASHH = 3782,
    VEIL_VEKH = 3783,
    FORGE_CAMP_TERROR = 3784,
    FORGE_CAMP_WRATH = 3785,
    OGRI_LA = 3786,
    FORGE_CAMP_ANGER = 3787,
    THE_LOW_PATH = 3788,
    SHADOW_LABYRINTH = 3789,
    AUCHENAI_CRYPTS = 3790,
    SETHEKK_HALLS = 3791,
    MANA_TOMBS = 3792,
    FELSPARK_RAVINE = 3793,
    VALLEY_OF_BONES1 = 3794,
    SHA_NAARI_WASTES = 3795,
    THE_WARP_FIELDS = 3796,
    FALLEN_SKY_RIDGE = 3797,
    HAAL_ESHI_GORGE = 3798,
    STONEWALL_CANYON = 3799,
    THORNFANG_HILL = 3800,
    MAG_HAR_GROUNDS = 3801,
    VOID_RIDGE = 3802,
    THE_ABYSSAL_SHELF = 3803,
    THE_LEGION_FRONT = 3804,
    ZUL_AMAN = 3805,
    SUPPLY_CARAVAN = 3806,
    REAVERS_FALL = 3807,
    CENARION_POST = 3808,
    SOUTHERN_RAMPART = 3809,
    NORTHERN_RAMPART = 3810,
    GOR_GAZ_OUTPOST = 3811,
    SPINEBREAKER_POST = 3812,
    THE_PATH_OF_ANGUISH = 3813,
    EAST_SUPPLY_CARAVAN = 3814,
    EXPEDITION_POINT = 3815,
    ZEPPELIN_CRASH = 3816,
    TESTING = 3817,
    BLOODSCALE_GROUNDS = 3818,
    DARKCREST_ENCLAVE = 3819,
    EYE_OF_THE_STORM = 3820,
    WARDENS_CAGE = 3821,
    ECLIPSE_POINT = 3822,
    ISLE_OF_TRIBULATIONS = 3823,
    BLOODMAUL_RAVINE = 3824,
    DRAGONS_END = 3825,
    DAGGERMAW_CANYON = 3826,
    VEKHAAR_STAND = 3827,
    RUUAN_WEALD = 3828,
    VEIL_RUUAN = 3829,
    RAVENS_WOOD = 3830,
    DEATHS_DOOR = 3831,
    VORTEX_PINNACLE = 3832,
    RAZOR_RIDGE = 3833,
    RIDGE_OF_MADNESS = 3834,
    DUSTQUILL_RAVINE = 3835,
    MAGTHERIDONS_LAIR = 3836,
    SUNFURY_HOLD = 3837,
    SPINEBREAKER_MOUNTAINS = 3838,
    ABANDONED_ARMORY = 3839,
    THE_BLACK_TEMPLE = 3840,
    DARKCREST_SHORE = 3841,
    TEMPEST_KEEP = 3842,
    MOK_NATHAL_VILLAGE = 3844,
    TEMPEST_KEEP1 = 3845,
    THE_ARCATRAZ = 3846,
    THE_BOTANICA = 3847,
    THE_ARCATRAZ1 = 3848,
    THE_MECHANAR = 3849,
    NETHERSTONE = 3850,
    MIDREALM_POST = 3851,
    TULUMANS_LANDING = 3852,
    PROTECTORATE_WATCH_POST = 3854,
    CIRCLE_OF_BLOOD_ARENA = 3855,
    ELRENDAR_CROSSING = 3856,
    AMMEN_FORD = 3857,
    RAZORTHORN_SHELF = 3858,
    SILMYR_LAKE = 3859,
    RAASTOK_GLADE = 3860,
    THALASSIAN_PASS = 3861,
    CHURNING_GULCH = 3862,
    BROKEN_WILDS = 3863,
    BASH_IR_LANDING = 3864,
    CRYSTAL_SPINE = 3865,
    SKALD = 3866,
    BLADED_GULCH = 3867,
    GYRO_PLANK_BRIDGE = 3868,
    MAGE_TOWER = 3869,
    BLOOD_ELF_TOWER = 3870,
    DRAENEI_RUINS = 3871,
    FEL_REAVER_RUINS = 3872,
    THE_PROVING_GROUNDS = 3873,
    ECO_DOME_FARFIELD = 3874,
    ECO_DOME_SKYPERCH = 3875,
    ECO_DOME_SUTHERON = 3876,
    ECO_DOME_MIDREALM = 3877,
    ETHEREUM_STAGING_GROUNDS = 3878,
    CHAPEL_YARD = 3879,
    ACCESS_SHAFT_ZEON = 3880,
    TRELLEUM_MINE = 3881,
    INVASION_POINT_DESTROYER = 3882,
    CAMP_OF_BOOM = 3883,
    SPINEBREAKER_PASS = 3884,
    NETHERWEB_RIDGE = 3885,
    DERELICT_CARAVAN = 3886,
    REFUGEE_CARAVAN = 3887,
    SHADOW_TOMB = 3888,
    VEIL_RHAZE = 3889,
    TOMB_OF_LIGHTS = 3890,
    CARRION_HILL = 3891,
    WRITHING_MOUND = 3892,
    RING_OF_OBSERVANCE = 3893,
    AUCHENAI_GROUNDS = 3894,
    CENARION_WATCHPOST = 3895,
    ALDOR_RISE = 3896,
    TERRACE_OF_LIGHT = 3897,
    SCRYERS_TIER = 3898,
    LOWER_CITY = 3899,
    INVASION_POINT_OVERLORD = 3900,
    ALLERIAN_POST = 3901,
    STONEBREAKER_CAMP = 3902,
    BOULDER_MOK = 3903,
    CURSED_HOLLOW = 3904,
    COILFANG_RESERVOIR = 3905,
    THE_BLOODWASH = 3906,
    VERIDIAN_POINT = 3907,
    MIDDENVALE = 3908,
    THE_LOST_FOLD = 3909,
    MYSTWOOD = 3910,
    TRANQUIL_SHORE = 3911,
    GOLDENBOUGH_PASS = 3912,
    RUNESTONE_FALITHAS = 3913,
    RUNESTONE_SHAN_DOR = 3914,
    FAIRBRIDGE_STRAND = 3915,
    MOONGRAZE_WOODS = 3916,
    AUCHINDOUN1 = 3917,
    TOSHLEYS_STATION = 3918,
    SINGING_RIDGE = 3919,
    SHATTER_POINT = 3920,
    ARKLONIS_RIDGE = 3921,
    BLADESPIRE_OUTPOST = 3922,
    GRUULS_LAIR2 = 3923,
    NORTHMAUL_TOWER = 3924,
    SOUTHMAUL_TOWER = 3925,
    SHATTERED_PLAINS = 3926,
    ORONOKS_FARM = 3927,
    THE_ALTAR_OF_DAMNATION = 3928,
    THE_PATH_OF_CONQUEST = 3929,
    ECLIPSION_FIELDS = 3930,
    BLADESPIRE_GROUNDS = 3931,
    SKETH_LON_BASE_CAMP = 3932,
    SKETH_LON_WRECKAGE = 3933,
    TOWN_SQUARE = 3934,
    WIZARD_ROW = 3935,
    DEATHFORGE_TOWER = 3936,
    SLAG_WATCH = 3937,
    SANCTUM_OF_THE_STARS = 3938,
    DRAGONMAW_FORTRESS = 3939,
    THE_FETID_POOL = 3940,
    TEST = 3941,
    RAZAANS_LANDING = 3942,
    INVASION_POINT_CATACLYSM = 3943,
    THE_ALTAR_OF_SHADOWS = 3944,
    NETHERWING_PASS = 3945,
    WAYNES_REFUGE = 3946,
    THE_SCALDING_POOLS = 3947,
    BRIAN_AND_PAT_TEST = 3948,
    MAGMA_FIELDS = 3949,
    CRIMSON_WATCH = 3950,
    EVERGROVE = 3951,
    WYRMSKULL_BRIDGE = 3952,
    SCALEWING_SHELF = 3953,
    WYRMSKULL_TUNNEL = 3954,
    HELLFIRE_BASIN = 3955,
    THE_SHADOW_STAIR = 3956,
    SHA_TARI_OUTPOST = 3957,
    SHA_TARI_BASE_CAMP = 3958,
    BLACK_TEMPLE = 3959,
    SOULGRINDERS_BARROW = 3960,
    SORROW_WING_POINT = 3961,
    VIM_GOLS_CIRCLE = 3962,
    DRAGONSPINE_RIDGE = 3963,
    SKYGUARD_OUTPOST = 3964,
    NETHERWING_MINES = 3965,
    DRAGONMAW_BASE_CAMP = 3966,
    DRAGONMAW_SKYWAY = 3967,
    RUINS_OF_LORDAERON1 = 3968,
    RIVENDARKS_PERCH = 3969,
    OBSIDIAS_PERCH = 3970,
    INSIDIONS_PERCH = 3971,
    FURYWINGS_PERCH = 3972,
    BLACKWIND_LANDING = 3973,
    VEIL_HARR_IK = 3974,
    TEROKKS_REST = 3975,
    VEIL_ALA_RAK = 3976,
    UPPER_VEIL_SHIL_AK = 3977,
    LOWER_VEIL_SHIL_AK = 3978,
    THE_FROZEN_SEA = 3979,
    DAGGERCAP_BAY = 3980,
    VALGARDE = 3981,
    WYRMSKULL_VILLAGE = 3982,
    UTGARDE_KEEP1 = 3983,
    NIFFLEVAR = 3984,
    FALLS_OF_YMIRON = 3985,
    ECHO_REACH = 3986,
    THE_ISLE_OF_SPEARS = 3987,
    KAMAGUA = 3988,
    GARVANS_REEF = 3989,
    SCALAWAG_POINT = 3990,
    NEW_AGAMAND = 3991,
    THE_ANCIENT_LIFT = 3992,
    WESTGUARD_TURRET = 3993,
    HALGRIND = 3994,
    THE_LAUGHING_STAND = 3995,
    BAELGUNS_EXCAVATION_SITE = 3996,
    EXPLORERS_LEAGUE_OUTPOST = 3997,
    WESTGUARD_KEEP = 3998,
    STEEL_GATE = 3999,
    VENGEANCE_LANDING = 4000,
    BALEHEIM = 4001,
    SKORN = 4002,
    FORT_WILDERVAR = 4003,
    VILEPREY_VILLAGE = 4004,
    IVALDS_RUIN = 4005,
    GJALERBRON = 4006,
    TOMB_OF_THE_LOST_KINGS = 4007,
    SHARTUULS_TRANSPORTER = 4008,
    ILLIDARI_TRAINING_GROUNDS = 4009,
    MUDSPROCKET = 4010,
    CAMP_WINTERHOOF = 4018,
    DEVELOPMENT_LAND = 4019,
    MIGHTSTONE_QUARRY = 4020,
    BLOODSPORE_PLAINS = 4021,
    GAMMOTH = 4022,
    AMBER_LEDGE = 4023,
    COLDARRA = 4024,
    THE_WESTRIFT = 4025,
    THE_TRANSITUS_STAIR = 4026,
    COAST_OF_ECHOES = 4027,
    RIPLASH_STRAND = 4028,
    RIPLASH_RUINS = 4029,
    COAST_OF_IDOLS = 4030,
    PAL_EA = 4031,
    VALIANCE_KEEP = 4032,
    WINTERFIN_VILLAGE = 4033,
    THE_BOREAN_WALL = 4034,
    THE_GEYSER_FIELDS = 4035,
    FIZZCRANK_PUMPING_STATION = 4036,
    TAUNKA_LE_VILLAGE = 4037,
    MAGNAMOTH_CAVERNS = 4038,
    COLDROCK_QUARRY = 4039,
    NJORDS_BREATH_BAY = 4040,
    KASKALA = 4041,
    TRANSBOREA = 4042,
    THE_FLOOD_PLAINS = 4043,
    DIREHORN_POST = 4046,
    NATS_LANDING = 4047,
    EMBER_CLUTCH = 4048,
    TABETHAS_FARM = 4049,
    DERELICT_STRAND = 4050,
    THE_FROZEN_GLADE = 4051,
    THE_VIBRANT_GLADE = 4052,
    THE_TWISTED_GLADE = 4053,
    RIVENWOOD = 4054,
    CALDEMERE_LAKE = 4055,
    UTGARDE_CATACOMBS = 4056,
    SHIELD_HILL = 4057,
    LAKE_CAULDROS = 4058,
    CAULDROS_ISLE = 4059,
    BLEEDING_VALE = 4060,
    GIANTS_RUN = 4061,
    APOTHECARY_CAMP = 4062,
    EMBER_SPEAR_TOWER = 4063,
    SHATTERED_STRAITS = 4064,
    GJALERHORN = 4065,
    FROSTBLADE_PEAK = 4066,
    PLAGUEWOOD_TOWER = 4067,
    WEST_SPEAR_TOWER = 4068,
    NORTH_SPEAR_TOWER = 4069,
    CHILLMERE_COAST = 4070,
    WHISPER_GULCH = 4071,
    SUB_ZONE = 4072,
    WINTERS_TERRACE = 4073,
    THE_WAKING_HALLS = 4074,
    SUNWELL_PLATEAU = 4075,
    REUSE_ME_SEVEN = 4076,
    SORLOFS_STRAND = 4077,
    RAZORTHORN_RISE = 4078,
    FROSTBLADE_PASS = 4079,
    ISLE_OF_QUEL_DANAS = 4080,
    THE_DAWNCHASER = 4081,
    THE_SIN_LOREN = 4082,
    SILVERMOONS_PRIDE = 4083,
    THE_BLOODOATH = 4084,
    SHATTERED_SUN_STAGING_AREA = 4085,
    SUNS_REACH_SANCTUM = 4086,
    SUNS_REACH_HARBOR = 4087,
    SUNS_REACH_ARMORY = 4088,
    DAWNSTAR_VILLAGE = 4089,
    THE_DAWNING_SQUARE = 4090,
    GREENGILL_COAST = 4091,
    THE_DEAD_SCAR2 = 4092,
    THE_SUN_FORGE = 4093,
    SUNWELL_PLATEAU1 = 4094,
    MAGISTERS_TERRACE = 4095,
    CLAYTONS_WOWEDIT_LAND = 4096,
    WINTERFIN_CAVERNS = 4097,
    GLIMMER_BAY = 4098,
    WINTERFIN_RETREAT = 4099,
    THE_CULLING_OF_STRATHOLME = 4100,
    SANDS_OF_NASAM = 4101,
    KROMS_LANDING = 4102,
    NASAMS_TALON = 4103,
    ECHO_COVE = 4104,
    BERYL_POINT = 4105,
    GARROSHS_LANDING = 4106,
    WARSONG_JETTY = 4107,
    FIZZCRANK_AIRSTRIP = 4108,
    LAKE_KUM_UYA = 4109,
    FARSHIRE_FIELDS = 4110,
    FARSHIRE = 4111,
    FARSHIRE_LIGHTHOUSE = 4112,
    UNU_PE = 4113,
    DEATHS_STAND = 4114,
    THE_ABANDONED_REACH = 4115,
    SCALDING_POOLS = 4116,
    STEAM_SPRINGS = 4117,
    TALRAMAS = 4118,
    FESTERING_POOLS = 4119,
    THE_NEXUS = 4120,
    TRANSITUS_SHIELD = 4121,
    BOR_GOROK_OUTPOST = 4122,
    MAGMOTH = 4123,
    THE_DENS_OF_DYING = 4124,
    TEMPLE_CITY_OF_EN_KILAH = 4125,
    THE_WAILING_ZIGGURAT = 4126,
    STEELJAWS_CARAVAN = 4127,
    NAXXANAR = 4128,
    WARSONG_HOLD = 4129,
    PLAINS_OF_NASAM = 4130,
    MAGISTERS_TERRACE1 = 4131,
    RUINS_OF_ELDRA_NATH = 4132,
    CHARRED_RISE = 4133,
    BLISTERING_POOL = 4134,
    SPIRE_OF_BLOOD = 4135,
    SPIRE_OF_DECAY = 4136,
    SPIRE_OF_PAIN = 4137,
    FROZEN_REACH = 4138,
    PARHELION_PLAZA = 4139,
    THE_DEAD_SCAR3 = 4140,
    TORPS_FARM = 4141,
    WARSONG_GRANARY = 4142,
    WARSONG_SLAUGHTERHOUSE = 4143,
    WARSONG_FARMS_OUTPOST = 4144,
    WEST_POINT_STATION = 4145,
    NORTH_POINT_STATION = 4146,
    MID_POINT_STATION = 4147,
    SOUTH_POINT_STATION = 4148,
    DEHTA_ENCAMPMENT = 4149,
    KAWS_ROOST = 4150,
    WESTWIND_REFUGEE_CAMP = 4151,
    MOA_KI_HARBOR = 4152,
    INDU_LE_VILLAGE = 4153,
    SNOWFALL_GLADE = 4154,
    THE_HALF_SHELL = 4155,
    SURGE_NEEDLE = 4156,
    MOONREST_GARDENS = 4157,
    STARS_REST = 4158,
    WESTFALL_BRIGADE_ENCAMPMENT = 4159,
    LOTHALOR_WOODLANDS = 4160,
    WYRMREST_TEMPLE = 4161,
    ICEMIST_FALLS = 4162,
    ICEMIST_VILLAGE = 4163,
    THE_PIT_OF_NARJUN = 4164,
    AGMARS_HAMMER = 4165,
    LAKE_INDU_LE = 4166,
    OBSIDIAN_DRAGONSHRINE = 4167,
    RUBY_DRAGONSHRINE = 4168,
    FORDRAGON_HOLD = 4169,
    KOR_KRON_VANGUARD = 4170,
    THE_COURT_OF_SKULLS = 4171,
    ANGRATHAR_THE_WRATHGATE = 4172,
    GALAKRONDS_REST = 4173,
    THE_WICKED_COIL = 4174,
    BRONZE_DRAGONSHRINE = 4175,
    THE_MIRROR_OF_DAWN = 4176,
    WINTERGARDE_KEEP = 4177,
    WINTERGARDE_MINE = 4178,
    EMERALD_DRAGONSHRINE = 4179,
    NEW_HEARTHGLEN = 4180,
    CRUSADERS_LANDING = 4181,
    SINNERS_FOLLY = 4182,
    AZURE_DRAGONSHRINE = 4183,
    PATH_OF_THE_TITANS = 4184,
    THE_FORGOTTEN_SHORE = 4185,
    VENOMSPITE = 4186,
    THE_CRYSTAL_VICE = 4187,
    THE_CARRION_FIELDS = 4188,
    ONSLAUGHT_BASE_CAMP = 4189,
    THORSONS_POST = 4190,
    LIGHTS_TRUST = 4191,
    FROSTMOURNE_CAVERN = 4192,
    SCARLET_POINT = 4193,
    JINTHA_KALAR = 4194,
    ICE_HEART_CAVERN = 4195,
    DRAK_THARON_KEEP = 4196,
    WINTERGRASP = 4197,
    KILI_UAS_ATOLL = 4198,
    SILVERBROOK = 4199,
    VORDRASSILS_HEART = 4200,
    VORDRASSILS_TEARS = 4201,
    VORDRASSILS_TEARS1 = 4202,
    VORDRASSILS_LIMB = 4203,
    AMBERPINE_LODGE = 4204,
    SOLSTICE_VILLAGE = 4205,
    CONQUEST_HOLD = 4206,
    VOLDRUNE = 4207,
    GRANITE_SPRINGS = 4208,
    ZEB_HALAK = 4209,
    DRAK_THARON_KEEP1 = 4210,
    CAMP_ONEQWAH = 4211,
    EASTWIND_SHORE = 4212,
    THE_BROKEN_BLUFFS = 4213,
    BOULDER_HILLS = 4214,
    RAGE_FANG_SHRINE = 4215,
    DRAKIL_JIN_RUINS = 4216,
    BLACKRIVER_LOGGING_CAMP = 4217,
    HEARTS_BLOOD_SHRINE = 4218,
    HOLLOWSTONE_MINE = 4219,
    DUN_ARGOL = 4220,
    THOR_MODAN = 4221,
    BLUE_SKY_LOGGING_GROUNDS = 4222,
    MAW_OF_NELTHARION = 4223,
    THE_BRINY_PINNACLE = 4224,
    GLITTERING_STRAND = 4225,
    ISKAAL = 4226,
    DRAGONS_FALL = 4227,
    THE_OCULUS = 4228,
    PROSPECTORS_POINT = 4229,
    COLDWIND_HEIGHTS = 4230,
    REDWOOD_TRADING_POST = 4231,
    VENGEANCE_PASS = 4232,
    DAWNS_REACH = 4233,
    NAXXRAMAS1 = 4234,
    HEARTWOOD_TRADING_POST = 4235,
    EVERGREEN_TRADING_POST = 4236,
    SPRUCE_POINT_POST = 4237,
    WHITE_PINE_TRADING_POST = 4238,
    ASPEN_GROVE_POST = 4239,
    FORESTS_EDGE_POST = 4240,
    ELDRITCH_HEIGHTS = 4241,
    VENTURE_BAY = 4242,
    WINTERGARDE_CRYPT = 4243,
    BLOODMOON_ISLE = 4244,
    SHADOWFANG_TOWER = 4245,
    WINTERGARDE_MAUSOLEUM = 4246,
    DUSKHOWL_DEN = 4247,
    THE_CONQUEST_PIT = 4248,
    THE_PATH_OF_IRON = 4249,
    RUINS_OF_TETHYS = 4250,
    SILVERBROOK_HILLS = 4251,
    THE_BROKEN_BLUFFS1 = 4252,
    SEVENTH_LEGION_FRONT = 4253,
    THE_DRAGON_WASTES = 4254,
    RUINS_OF_DRAK_ZIN = 4255,
    DRAK_MAR_LAKE = 4256,
    DRAGONSPINE_TRIBUTARY = 4257,
    THE_NORTH_SEA1 = 4258,
    DRAK_URAL = 4259,
    THORVALDS_CAMP = 4260,
    GHOSTBLADE_POST = 4261,
    ASHWOOD_POST = 4262,
    LYDELLS_AMBUSH = 4263,
    HALLS_OF_STONE = 4264,
    THE_NEXUS1 = 4265,
    HARKORS_CAMP = 4266,
    VORDRASSIL_PASS = 4267,
    RUUNAS_CAMP = 4268,
    SHRINE_OF_SCALES = 4269,
    DRAK_ATAL_PASSAGE = 4270,
    UTGARDE_PINNACLE1 = 4271,
    HALLS_OF_LIGHTNING = 4272,
    ULDUAR = 4273,
    THE_ARGENT_STAND = 4275,
    ALTAR_OF_SSERATUS = 4276,
    AZJOL_NERUB1 = 4277,
    DRAKSOTRA_FIELDS = 4278,
    DRAKSOTRA = 4279,
    DRAK_AGAL = 4280,
    ACHERUS_THE_EBON_HOLD = 4281,
    THE_AVALANCHE = 4282,
    THE_LOST_LANDS = 4283,
    NESINGWARY_BASE_CAMP = 4284,
    THE_SEABREACH_FLOW = 4285,
    THE_BONES_OF_NOZRONN = 4286,
    KARTAKS_HOLD = 4287,
    SPARKTOUCHED_HAVEN = 4288,
    THE_PATH_OF_THE_LIFEWARDEN = 4289,
    RIVERS_HEART = 4290,
    RAINSPEAKER_CANOPY = 4291,
    FRENZYHEART_HILL = 4292,
    WILDGROWTH_MANGAL = 4293,
    HEB_VALOK = 4294,
    THE_SUNDERED_SHARD = 4295,
    THE_LIFEBLOOD_PILLAR = 4296,
    MOSSWALKER_VILLAGE = 4297,
    PLAGUELANDS_THE_SCARLET_ENCLAVE = 4298,
    KOLRAMAS = 4299,
    WAYGATE = 4300,
    THE_SKYREACH_PILLAR = 4302,
    HARDKNUCKLE_CLEARING = 4303,
    SAPPHIRE_HIVE = 4304,
    MISTWHISPER_REFUGE = 4306,
    THE_GLIMMERING_PILLAR = 4307,
    SPEARBORN_ENCAMPMENT = 4308,
    DRAK_THARON_KEEP2 = 4309,
    ZERAMAS = 4310,
    RELIQUARY_OF_AGONY = 4311,
    EBON_WATCH = 4312,
    THRYMS_END = 4313,
    VOLTARUS = 4314,
    RELIQUARY_OF_PAIN = 4315,
    RAGECLAW_DEN = 4316,
    LIGHTS_BREACH = 4317,
    POOLS_OF_ZHA_JIN = 4318,
    ZIM_ABWA = 4319,
    AMPHITHEATER_OF_ANGUISH = 4320,
    ALTAR_OF_RHUNOK = 4321,
    ALTAR_OF_HAR_KOA = 4322,
    ZIM_TORGA = 4323,
    POOLS_OF_JIN_ALAI = 4324,
    ALTAR_OF_QUETZ_LUN = 4325,
    HEB_DRAKKAR = 4326,
    DRAK_MABWA = 4327,
    ZIM_RHUK = 4328,
    ALTAR_OF_MAM_TOTH = 4329,
    ACHERUS_THE_EBON_HOLD1 = 4342,
    NEW_AVALON = 4343,
    NEW_AVALON_FIELDS = 4344,
    NEW_AVALON_ORCHARD = 4345,
    NEW_AVALON_TOWN_HALL = 4346,
    HAVENSHIRE = 4347,
    HAVENSHIRE_FARMS = 4348,
    HAVENSHIRE_LUMBER_MILL = 4349,
    HAVENSHIRE_STABLES = 4350,
    SCARLET_HOLD = 4351,
    CHAPEL_OF_THE_CRIMSON_FLAME = 4352,
    LIGHTS_POINT_TOWER = 4353,
    LIGHTS_POINT = 4354,
    CRYPT_OF_REMEMBRANCE = 4355,
    DEATHS_BREACH = 4356,
    THE_NOXIOUS_GLADE1 = 4357,
    TYRS_HAND1 = 4358,
    KINGS_HARBOR = 4359,
    SCARLET_OVERLOOK = 4360,
    LIGHTS_HOPE_CHAPEL1 = 4361,
    SINNERS_FOLLY1 = 4362,
    PESTILENT_SCAR1 = 4363,
    BROWMAN_MILL1 = 4364,
    HAVENSHIRE_MINE = 4365,
    URSOCS_DEN = 4366,
    THE_BLIGHT_LINE = 4367,
    THE_BONEFIELDS = 4368,
    DORIANS_OUTPOST = 4369,
    MAM_TOTH_CRATER = 4371,
    ZOL_MAZ_STRONGHOLD = 4372,
    ZOL_HEB = 4373,
    RAGECLAW_LAKE = 4374,
    GUNDRAK = 4375,
    THE_SAVAGE_THICKET = 4376,
    NEW_AVALON_FORGE = 4377,
    DALARAN_ARENA = 4378,
    VALGARDE1 = 4379,
    WESTGUARD_INN = 4380,
    WAYGATE1 = 4381,
    THE_SHAPERS_TERRACE = 4382,
    LAKESIDE_LANDING = 4383,
    STRAND_OF_THE_ANCIENTS = 4384,
    BITTERTIDE_LAKE = 4385,
    RAINSPEAKER_RAPIDS = 4386,
    FRENZYHEART_RIVER = 4387,
    WINTERGRASP_RIVER = 4388,
    THE_SUNTOUCHED_PILLAR = 4389,
    FRIGID_BREACH = 4390,
    SWINDLEGRINS_DIG = 4391,
    THE_STORMWRIGHTS_SHELF = 4392,
    DEATHS_HAND_ENCAMPMENT = 4393,
    SCARLET_TAVERN = 4394,
    DALARAN = 4395,
    NOZZLERUST_POST = 4396,
    FARSHIRE_MINE = 4399,
    THE_MOSSLIGHT_PILLAR = 4400,
    SARAGOSAS_LANDING = 4401,
    VENGEANCE_LIFT = 4402,
    BALEJAR_WATCH = 4403,
    NEW_AGAMAND_INN = 4404,
    PASSAGE_OF_LOST_FIENDS = 4405,
    THE_RING_OF_VALOR = 4406,
    HALL_OF_THE_FROSTWOLF = 4407,
    HALL_OF_THE_STORMPIKE = 4408,
    STORMWIND_HARBOR = 4411,
    THE_MAKERS_OVERLOOK = 4412,
    THE_MAKERS_PERCH = 4413,
    SCARLET_TOWER = 4414,
    THE_VIOLET_HOLD = 4415,
    GUNDRAK1 = 4416,
    ONSLAUGHT_HARBOR = 4417,
    K3 = 4418,
    SNOWBLIND_HILLS = 4419,
    SNOWBLIND_TERRACE = 4420,
    GARM = 4421,
    BRUNNHILDAR_VILLAGE = 4422,
    SIFRELDAR_VILLAGE = 4423,
    VALKYRION = 4424,
    THE_FORLORN_MINE = 4425,
    BORS_BREATH_RIVER = 4426,
    ARGENT_VANGUARD = 4427,
    FROSTHOLD = 4428,
    GROM_ARSH_CRASH_SITE = 4429,
    TEMPLE_OF_STORMS = 4430,
    ENGINE_OF_THE_MAKERS = 4431,
    THE_FOOT_STEPPES = 4432,
    DRAGONSPINE_PEAKS = 4433,
    NIDAVELIR = 4434,
    NARVIRS_CRADLE = 4435,
    SNOWDRIFT_PLAINS = 4436,
    VALLEY_OF_ANCIENT_WINTERS = 4437,
    DUN_NIFFELEM = 4438,
    FROSTFIELD_LAKE = 4439,
    THUNDERFALL = 4440,
    CAMP_TUNKA_LO = 4441,
    BRANNS_BASE_CAMP = 4442,
    GATE_OF_ECHOES = 4443,
    PLAIN_OF_ECHOES = 4444,
    ULDUAR1 = 4445,
    TERRACE_OF_THE_MAKERS = 4446,
    GATE_OF_LIGHTNING = 4447,
    PATH_OF_THE_TITANS1 = 4448,
    ULDIS = 4449,
    LOKENS_BARGAIN = 4450,
    BORS_FALL = 4451,
    BORS_BREATH = 4452,
    ROHEMDAL_PASS = 4453,
    THE_STORM_FOUNDRY = 4454,
    HIBERNAL_CAVERN = 4455,
    VOLDRUNE_DWELLING = 4456,
    TORSEGS_REST = 4457,
    SPARKSOCKET_MINEFIELD = 4458,
    RICKETS_FOLLY = 4459,
    GARMS_BANE = 4460,
    GARMS_RISE = 4461,
    CRYSTALWEB_CAVERN = 4462,
    TEMPLE_OF_LIFE = 4463,
    TEMPLE_OF_ORDER = 4464,
    TEMPLE_OF_WINTER = 4465,
    TEMPLE_OF_INVENTION = 4466,
    DEATHS_RISE = 4467,
    THE_DEAD_FIELDS = 4468,
    DARGATHS_DEMISE = 4469,
    THE_HIDDEN_HOLLOW = 4470,
    BERNAUS_HAPPY_FUN_LAND = 4471,
    FROSTGRIPS_HOLLOW = 4472,
    THE_FRIGID_TOMB = 4473,
    TWIN_SHORES = 4474,
    ZIM_BOS_HIDEOUT = 4475,
    ABANDONED_CAMP = 4476,
    THE_SHADOW_VAULT = 4477,
    COLDWIND_PASS = 4478,
    WINTERS_BREATH_LAKE = 4479,
    THE_FORGOTTEN_OVERLOOK = 4480,
    JINTHA_KALAR_PASSAGE = 4481,
    ARRIGA_FOOTBRIDGE = 4482,
    THE_LOST_PASSAGE = 4483,
    BOULDERCRAGS_REFUGE = 4484,
    THE_INVENTORS_LIBRARY = 4485,
    THE_FROZEN_MINE = 4486,
    FROSTFLOE_DEEP = 4487,
    THE_HOWLING_HOLLOW = 4488,
    CRUSADER_FORWARD_CAMP = 4489,
    STORMCREST = 4490,
    BONESNAPS_CAMP = 4491,
    UFRANGS_HALL = 4492,
    THE_OBSIDIAN_SANCTUM = 4493,
    AHN_KAHET_THE_OLD_KINGDOM = 4494,
    FJORNS_ANVIL = 4495,
    JOTUNHEIM = 4496,
    SAVAGE_LEDGE = 4497,
    HALLS_OF_THE_ANCESTORS = 4498,
    THE_BLIGHTED_POOL = 4499,
    THE_EYE_OF_ETERNITY = 4500,
    THE_ARGENT_VANGUARD = 4501,
    MIMIRS_WORKSHOP = 4502,
    IRONWALL_DAM = 4503,
    VALLEY_OF_ECHOES = 4504,
    THE_BREACH = 4505,
    SCOURGEHOLME = 4506,
    THE_BROKEN_FRONT = 4507,
    MORD_RETHAR_THE_DEATH_GATE = 4508,
    THE_BOMBARDMENT = 4509,
    ALDUR_THAR_THE_DESOLATION_GATE = 4510,
    THE_SKYBREAKER = 4511,
    ORGRIMS_HAMMER = 4512,
    YMIRHEIM = 4513,
    SARONITE_MINES = 4514,
    THE_CONFLAGRATION = 4515,
    IRONWALL_RAMPART = 4516,
    WEEPING_QUARRY = 4517,
    CORP_RETHAR_THE_HORROR_GATE = 4518,
    THE_COURT_OF_BONES = 4519,
    MALYKRISS_THE_VILE_HOLD = 4520,
    CATHEDRAL_OF_DARKNESS = 4521,
    ICECROWN_CITADEL = 4522,
    ICECROWN_GLACIER = 4523,
    VALHALAS = 4524,
    THE_UNDERHALLS = 4525,
    NJORNDAR_VILLAGE = 4526,
    BALARGARDE_FORTRESS = 4527,
    KUL_GALAR_KEEP = 4528,
    THE_CRIMSON_CATHEDRAL = 4529,
    SANCTUM_OF_REANIMATION = 4530,
    THE_FLESHWERKS = 4531,
    VENGEANCE_LANDING_INN = 4532,
    SINDRAGOSAS_FALL = 4533,
    WILDERVAR_MINE = 4534,
    THE_PIT_OF_THE_FANG = 4535,
    FROSTHOWL_CAVERN = 4536,
    THE_VALLEY_OF_LOST_HOPE = 4537,
    THE_SUNKEN_RING = 4538,
    THE_BROKEN_TEMPLE = 4539,
    THE_VALLEY_OF_FALLEN_HEROES = 4540,
    VANGUARD_INFIRMARY = 4541,
    HALL_OF_THE_SHAPER = 4542,
    TEMPLE_OF_WISDOM = 4543,
    DEATHS_BREACH1 = 4544,
    ABANDONED_MINE = 4545,
    RUINS_OF_THE_SCARLET_ENCLAVE = 4546,
    HALLS_OF_STONE1 = 4547,
    HALLS_OF_LIGHTNING1 = 4548,
    THE_GREAT_TREE = 4549,
    THE_MIRROR_OF_TWILIGHT = 4550,
    THE_TWILIGHT_RIVULET = 4551,
    THE_DECREPIT_FLOW = 4552,
    FORLORN_WOODS = 4553,
    RUINS_OF_SHANDARAL = 4554,
    THE_AZURE_FRONT = 4555,
    VIOLET_STAND = 4556,
    THE_UNBOUND_THICKET = 4557,
    SUNREAVERS_COMMAND = 4558,
    WINDRUNNERS_OVERLOOK = 4559,
    THE_UNDERBELLY = 4560,
    KRASUS_LANDING = 4564,
    THE_VIOLET_HOLD1 = 4567,
    THE_EVENTIDE = 4568,
    SEWER_EXIT_PIPE = 4569,
    CIRCLE_OF_WILLS = 4570,
    SILVERWING_FLAG_ROOM = 4571,
    WARSONG_FLAG_ROOM = 4572,
    WINTERGRASP_FORTRESS = 4575,
    CENTRAL_BRIDGE = 4576,
    EASTERN_BRIDGE = 4577,
    WESTERN_BRIDGE = 4578,
    DUBRA_JIN = 4579,
    CRUSADERS_PINNACLE = 4580,
    FLAMEWATCH_TOWER = 4581,
    WINTERS_EDGE_TOWER = 4582,
    SHADOWSIGHT_TOWER = 4583,
    THE_CAULDRON_OF_FLAMES = 4584,
    GLACIAL_FALLS = 4585,
    WINDY_BLUFFS = 4586,
    THE_FOREST_OF_SHADOWS = 4587,
    BLACKWATCH = 4588,
    THE_CHILLED_QUAGMIRE = 4589,
    THE_STEPPE_OF_LIFE = 4590,
    SILENT_VIGIL = 4591,
    GIMORAKS_DEN = 4592,
    THE_PIT_OF_FIENDS = 4593,
    BATTLESCAR_SPIRE = 4594,
    HALL_OF_HORRORS = 4595,
    THE_CIRCLE_OF_SUFFERING = 4596,
    RISE_OF_SUFFERING = 4597,
    KRASUS_LANDING1 = 4598,
    SEWER_EXIT_PIPE1 = 4599,
    DALARAN_ISLAND = 4601,
    FORCE_INTERIOR = 4602,
    VAULT_OF_ARCHAVON = 4603,
    GATE_OF_THE_RED_SUN = 4604,
    GATE_OF_THE_BLUE_SAPPHIRE = 4605,
    GATE_OF_THE_GREEN_EMERALD = 4606,
    GATE_OF_THE_PURPLE_AMETHYST = 4607,
    GATE_OF_THE_YELLOW_MOON = 4608,
    COURTYARD_OF_THE_ANCIENTS = 4609,
    LANDING_BEACH = 4610,
    WESTSPARK_WORKSHOP = 4611,
    EASTSPARK_WORKSHOP = 4612,
    DALARAN_CITY = 4613,
    THE_VIOLET_CITADEL_SPIRE = 4614,
    NAZ_ANAK_THE_FORGOTTEN_DEPTHS = 4615,
    SUNREAVERS_SANCTUARY = 4616,
    ELEVATOR = 4617,
    ANTONIDAS_MEMORIAL = 4618,
    THE_VIOLET_CITADEL = 4619,
    MAGUS_COMMERCE_EXCHANGE = 4620,
    UNUSED = 4621,
    FIRST_LEGION_FORWARD_CAMP = 4622,
    HALL_OF_THE_CONQUERED_KINGS = 4623,
    BEFOULED_TERRACE = 4624,
    THE_DESECRATED_ALTAR = 4625,
    SHIMMERING_BOG = 4626,
    FALLEN_TEMPLE_OF_AHN_KAHET = 4627,
    HALLS_OF_BINDING = 4628,
    WINTERS_HEART = 4629,
    THE_NORTH_SEA2 = 4630,
    THE_BROODMOTHERS_NEST = 4631,
    DALARAN_FLOATING_ROCKS = 4632,
    RAPTOR_PENS = 4633,
    DRAK_THARON_KEEP3 = 4635,
    THE_NOXIOUS_PASS = 4636,
    VARGOTHS_RETREAT = 4637,
    VIOLET_CITADEL_BALCONY = 4638,
    BAND_OF_VARIANCE = 4639,
    BAND_OF_ACCELERATION = 4640,
    BAND_OF_TRANSMUTATION = 4641,
    BAND_OF_ALIGNMENT = 4642,
    ASHWOOD_LAKE = 4646,
    IRON_CONCOURSE = 4650,
    FORMATION_GROUNDS = 4652,
    RAZORSCALES_AERIE = 4653,
    THE_COLOSSAL_FORGE = 4654,
    THE_SCRAPYARD = 4655,
    THE_CONSERVATORY_OF_LIFE = 4656,
    THE_ARCHIVUM = 4657,
    ARGENT_TOURNAMENT_GROUNDS = 4658,
    EXPEDITION_BASE_CAMP = 4665,
    SUNREAVER_PAVILION = 4666,
    SILVER_COVENANT_PAVILION = 4667,
    THE_COOPER_RESIDENCE = 4668,
    THE_RING_OF_CHAMPIONS = 4669,
    THE_ASPIRANTS_RING = 4670,
    THE_ARGENT_VALIANTS_RING = 4671,
    THE_ALLIANCE_VALIANTS_RING = 4672,
    THE_HORDE_VALIANTS_RING = 4673,
    ARGENT_PAVILION = 4674,
    SUNREAVER_PAVILION1 = 4676,
    SILVER_COVENANT_PAVILION1 = 4677,
    THE_FORLORN_CAVERN = 4679,
    CLAYTONIO_TEST_AREA = 4688,
    QUEL_DELARS_REST = 4692,
    ISLE_OF_CONQUEST = 4710,
    TRIAL_OF_THE_CRUSADER = 4722,
    TRIAL_OF_THE_CHAMPION = 4723,
    RUNEWEAVER_SQUARE = 4739,
    THE_SILVER_ENCLAVE = 4740,
    ISLE_OF_CONQUEST_NO_MANS_LAND = 4741,
    HROTHGARS_LANDING = 4742,
    DEATHSPEAKERS_WATCH = 4743,
    WORKSHOP = 4747,
    QUARRY = 4748,
    DOCKS = 4749,
    HANGAR = 4750,
    REFINERY = 4751,
    HORDE_KEEP = 4752,
    ALLIANCE_KEEP = 4753,
    THE_SEA_REAVERS_RUN = 4760,
    TRANSPORT_ALLIANCE_GUNSHIP = 4763,
    TRANSPORT_HORDE_GUNSHIP = 4764,
    HROTHGARS_LANDING1 = 4769,
    THE_FORGE_OF_SOULS = 4809,
    ICECROWN_CITADEL1 = 4812,
    PIT_OF_SARON = 4813,
    HALLS_OF_REFLECTION = 4820,
    TRANSPORT_ALLIANCE_GUNSHIP_IGB = 4832,
    TRANSPORT_HORDE_GUNSHIP_IGB = 4833,
    THE_FROZEN_THRONE = 4859,
    THE_FROZEN_HALLS = 4862,
    THE_FROST_QUEENS_LAIR = 4889,
    PUTRICIDES_LABORATORY_OF_ALCHEMICAL_HORRORS_AND_FUN = 4890,
    THE_SANCTUM_OF_BLOOD = 4891,
    THE_CRIMSON_HALL = 4892,
    THE_FROST_QUEENS_LAIR1 = 4893,
    PUTRICIDES_LABORATORY_OF_ALCHEMICAL_HORRORS_AND_FUN1 = 4894,
    THE_CRIMSON_HALL1 = 4895,
    THE_FROZEN_THRONE1 = 4896,
    THE_SANCTUM_OF_BLOOD1 = 4897,
    FROSTMOURNE = 4898,
    THE_DARK_APPROACH = 4904,
    SCOURGELORDS_COMMAND = 4905,
    THE_SHADOW_THRONE = 4906,
    THE_HIDDEN_PASSAGE = 4908,
    FROSTMOURNE1 = 4910,
    THE_RUBY_SANCTUM = 4987,
};

enum class ArenaFaction : uint8_t {
    HORDE = 0,
    ALLIANCE = 1,
};

enum class ArenaTeamCommand : uint32_t {
    TEAM_CREATE_S = 0,
    TEAM_INVITE_SS = 1,
    TEAM_QUIT_S = 3,
    TEAM_FOUNDER_S = 14,
};

enum class ArenaTeamCommandError : uint32_t {
    ARENA_TEAM_INTERNAL = 1,
    ALREADY_IN_ARENA_TEAM = 2,
    ALREADY_IN_ARENA_TEAM_S = 3,
    INVITED_TO_ARENA_TEAM = 4,
    ALREADY_INVITED_TO_ARENA_TEAM_S = 5,
    ARENA_TEAM_NAME_INVALID = 6,
    ARENA_TEAM_NAME_EXISTS_S = 7,
    ARENA_TEAM_LEADER_LEAVE_S = 8,
    ARENA_TEAM_PLAYER_NOT_IN_TEAM = 9,
    ARENA_TEAM_PLAYER_NOT_IN_TEAM_SS = 10,
    ARENA_TEAM_PLAYER_NOT_FOUND_S = 11,
    ARENA_TEAM_NOT_ALLIED = 12,
    ARENA_TEAM_IGNORING_YOU_S = 19,
    ARENA_TEAM_TARGET_TOO_LOW_S = 21,
    ARENA_TEAM_TOO_MANY_MEMBERS_S = 22,
};

enum class ArenaTeamEvent : uint8_t {
    JOIN = 3,
    LEAVE = 4,
    REMOVE = 5,
    LEADER_IS = 6,
    LEADER_CHANGED = 7,
    DISBANDED = 8,
};

enum class ArenaTeamRole : uint8_t {
    CAPTAIN = 0,
    MEMBER = 1,
};

enum class ArenaType : uint8_t {
    NOT_ARENA = 0,
    TWO_VS_TWO = 2,
    THREE_VS_THREE = 3,
    FIVE_VS_FIVE = 5,
};

enum class AuctionCommandAction : uint32_t {
    STARTED = 0,
    REMOVED = 1,
    BID_PLACED = 2,
};

enum class AuctionCommandResult : uint32_t {
    OK = 0,
    ERR_INVENTORY = 1,
    ERR_DATABASE = 2,
    ERR_NOT_ENOUGH_MONEY = 3,
    ERR_ITEM_NOT_FOUND = 4,
    ERR_HIGHER_BID = 5,
    ERR_BID_INCREMENT = 7,
    ERR_BID_OWN = 10,
    ERR_RESTRICTED_ACCOUNT = 13,
};

enum class AuctionCommandResultTwo : uint32_t {
    OK = 0,
    ERR_INVENTORY = 1,
    ERR_DATABASE = 2,
    ERR_NOT_ENOUGH_MONEY = 3,
    ERR_ITEM_NOT_FOUND = 4,
    ERR_HIGHER_BID = 5,
    ERR_BID_INCREMENT = 7,
    ERR_BID_OWN = 10,
    ERR_RESTRICTED_ACCOUNT = 13,
};

enum class AuctionHouse : uint32_t {
    STORMWIND = 1,
    ALLIANCE = 2,
    DARNASSUS = 3,
    UNDERCITY = 4,
    THUNDER_BLUFF = 5,
    HORDE = 6,
    GOBLIN = 7,
};

enum class AuraMod : uint32_t {
    NONE = 0,
    BIND_SIGHT = 1,
    MOD_POSSESS = 2,
    PERIODIC_DAMAGE = 3,
    DUMMY = 4,
    MOD_CONFUSE = 5,
    MOD_CHARM = 6,
    MOD_FEAR = 7,
    PERIODIC_HEAL = 8,
    MOD_ATTACKSPEED = 9,
    MOD_THREAT = 10,
    MOD_TAUNT = 11,
    MOD_STUN = 12,
    MOD_DAMAGE_DONE = 13,
    MOD_DAMAGE_TAKEN = 14,
    DAMAGE_SHIELD = 15,
    MOD_STEALTH = 16,
    MOD_STEALTH_DETECT = 17,
    MOD_INVISIBILITY = 18,
    MOD_INVISIBILITY_DETECT = 19,
    OBS_MOD_HEALTH = 20,
    OBS_MOD_POWER = 21,
    MOD_RESISTANCE = 22,
    PERIODIC_TRIGGER_SPELL = 23,
    PERIODIC_ENERGIZE = 24,
    MOD_PACIFY = 25,
    MOD_ROOT = 26,
    MOD_SILENCE = 27,
    REFLECT_SPELLS = 28,
    MOD_STAT = 29,
    MOD_SKILL = 30,
    MOD_INCREASE_SPEED = 31,
    MOD_INCREASE_MOUNTED_SPEED = 32,
    MOD_DECREASE_SPEED = 33,
    MOD_INCREASE_HEALTH = 34,
    MOD_INCREASE_ENERGY = 35,
    MOD_SHAPESHIFT = 36,
    EFFECT_IMMUNITY = 37,
    STATE_IMMUNITY = 38,
    SCHOOL_IMMUNITY = 39,
    DAMAGE_IMMUNITY = 40,
    DISPEL_IMMUNITY = 41,
    PROC_TRIGGER_SPELL = 42,
    PROC_TRIGGER_DAMAGE = 43,
    TRACK_CREATURES = 44,
    TRACK_RESOURCES = 45,
    UNKNOWN46 = 46,
    MOD_PARRY_PERCENT = 47,
    PERIODIC_TRIGGER_SPELL_FROM_CLIENT = 48,
    MOD_DODGE_PERCENT = 49,
    MOD_CRITICAL_HEALING_AMOUNT = 50,
    MOD_BLOCK_PERCENT = 51,
    MOD_WEAPON_CRIT_PERCENT = 52,
    PERIODIC_LEECH = 53,
    MOD_HIT_CHANCE = 54,
    MOD_SPELL_HIT_CHANCE = 55,
    TRANSFORM = 56,
    MOD_SPELL_CRIT_CHANCE = 57,
    MOD_INCREASE_SWIM_SPEED = 58,
    MOD_DAMAGE_DONE_CREATURE = 59,
    MOD_PACIFY_SILENCE = 60,
    MOD_SCALE = 61,
    PERIODIC_HEALTH_FUNNEL = 62,
    UNKNOWN63 = 63,
    PERIODIC_MANA_LEECH = 64,
    MOD_CASTING_SPEED_NOT_STACK = 65,
    FEIGN_DEATH = 66,
    MOD_DISARM = 67,
    MOD_STALKED = 68,
    SCHOOL_ABSORB = 69,
    EXTRA_ATTACKS = 70,
    MOD_SPELL_CRIT_CHANCE_SCHOOL = 71,
    MOD_POWER_COST_SCHOOL_PCT = 72,
    MOD_POWER_COST_SCHOOL = 73,
    REFLECT_SPELLS_SCHOOL = 74,
    MOD_LANGUAGE = 75,
    FAR_SIGHT = 76,
    MECHANIC_IMMUNITY = 77,
    MOUNTED = 78,
    MOD_DAMAGE_PERCENT_DONE = 79,
    MOD_PERCENT_STAT = 80,
    SPLIT_DAMAGE_PCT = 81,
    WATER_BREATHING = 82,
    MOD_BASE_RESISTANCE = 83,
    MOD_REGEN = 84,
    MOD_POWER_REGEN = 85,
    CHANNEL_DEATH_ITEM = 86,
    MOD_DAMAGE_PERCENT_TAKEN = 87,
    MOD_HEALTH_REGEN_PERCENT = 88,
    PERIODIC_DAMAGE_PERCENT = 89,
    UNKNOWN90 = 90,
    MOD_DETECT_RANGE = 91,
    PREVENTS_FLEEING = 92,
    MOD_UNATTACKABLE = 93,
    INTERRUPT_REGEN = 94,
    GHOST = 95,
    SPELL_MAGNET = 96,
    MANA_SHIELD = 97,
    MOD_SKILL_TALENT = 98,
    MOD_ATTACK_POWER = 99,
    AURAS_VISIBLE = 100,
    MOD_RESISTANCE_PCT = 101,
    MOD_MELEE_ATTACK_POWER_VERSUS = 102,
    MOD_TOTAL_THREAT = 103,
    WATER_WALK = 104,
    FEATHER_FALL = 105,
    HOVER = 106,
    ADD_FLAT_MODIFIER = 107,
    ADD_PCT_MODIFIER = 108,
    ADD_TARGET_TRIGGER = 109,
    MOD_POWER_REGEN_PERCENT = 110,
    ADD_CASTER_HIT_TRIGGER = 111,
    OVERRIDE_CLASS_SCRIPTS = 112,
    MOD_RANGED_DAMAGE_TAKEN = 113,
    MOD_RANGED_DAMAGE_TAKEN_PCT = 114,
    MOD_HEALING = 115,
    MOD_REGEN_DURING_COMBAT = 116,
    MOD_MECHANIC_RESISTANCE = 117,
    MOD_HEALING_PCT = 118,
    UNKNOWN119 = 119,
    UNTRACKABLE = 120,
    EMPATHY = 121,
    MOD_OFFHAND_DAMAGE_PCT = 122,
    MOD_TARGET_RESISTANCE = 123,
    MOD_RANGED_ATTACK_POWER = 124,
    MOD_MELEE_DAMAGE_TAKEN = 125,
    MOD_MELEE_DAMAGE_TAKEN_PCT = 126,
    RANGED_ATTACK_POWER_ATTACKER_BONUS = 127,
    MOD_POSSESS_PET = 128,
    MOD_SPEED_ALWAYS = 129,
    MOD_MOUNTED_SPEED_ALWAYS = 130,
    MOD_RANGED_ATTACK_POWER_VERSUS = 131,
    MOD_INCREASE_ENERGY_PERCENT = 132,
    MOD_INCREASE_HEALTH_PERCENT = 133,
    MOD_MANA_REGEN_INTERRUPT = 134,
    MOD_HEALING_DONE = 135,
    MOD_HEALING_DONE_PERCENT = 136,
    MOD_TOTAL_STAT_PERCENTAGE = 137,
    MOD_MELEE_HASTE = 138,
    FORCE_REACTION = 139,
    MOD_RANGED_HASTE = 140,
    MOD_RANGED_AMMO_HASTE = 141,
    MOD_BASE_RESISTANCE_PCT = 142,
    MOD_RESISTANCE_EXCLUSIVE = 143,
    SAFE_FALL = 144,
    MOD_PET_TALENT_POINTS = 145,
    ALLOW_TAME_PET_TYPE = 146,
    MECHANIC_IMMUNITY_MASK = 147,
    RETAIN_COMBO_POINTS = 148,
    REDUCE_PUSHBACK = 149,
    MOD_SHIELD_BLOCKVALUE_PCT = 150,
    TRACK_STEALTHED = 151,
    MOD_DETECTED_RANGE = 152,
    SPLIT_DAMAGE_FLAT = 153,
    MOD_STEALTH_LEVEL = 154,
    MOD_WATER_BREATHING = 155,
    MOD_REPUTATION_GAIN = 156,
    PET_DAMAGE_MULTI = 157,
    MOD_SHIELD_BLOCKVALUE = 158,
    NO_PVP_CREDIT = 159,
    MOD_AOE_AVOIDANCE = 160,
    MOD_HEALTH_REGEN_IN_COMBAT = 161,
    POWER_BURN = 162,
    MOD_CRIT_DAMAGE_BONUS = 163,
    UNKNOWN164 = 164,
    MELEE_ATTACK_POWER_ATTACKER_BONUS = 165,
    MOD_ATTACK_POWER_PCT = 166,
    MOD_RANGED_ATTACK_POWER_PCT = 167,
    MOD_DAMAGE_DONE_VERSUS = 168,
    MOD_CRIT_PERCENT_VERSUS = 169,
    DETECT_AMORE = 170,
    MOD_SPEED_NOT_STACK = 171,
    MOD_MOUNTED_SPEED_NOT_STACK = 172,
    UNKNOWN173 = 173,
    MOD_SPELL_DAMAGE_OF_STAT_PERCENT = 174,
    MOD_SPELL_HEALING_OF_STAT_PERCENT = 175,
    SPIRIT_OF_REDEMPTION = 176,
    AOE_CHARM = 177,
    MOD_DEBUFF_RESISTANCE = 178,
    MOD_ATTACKER_SPELL_CRIT_CHANCE = 179,
    MOD_FLAT_SPELL_DAMAGE_VERSUS = 180,
    UNKNOWN181 = 181,
    MOD_RESISTANCE_OF_STAT_PERCENT = 182,
    MOD_CRITICAL_THREAT = 183,
    MOD_ATTACKER_MELEE_HIT_CHANCE = 184,
    MOD_ATTACKER_RANGED_HIT_CHANCE = 185,
    MOD_ATTACKER_SPELL_HIT_CHANCE = 186,
    MOD_ATTACKER_MELEE_CRIT_CHANCE = 187,
    MOD_ATTACKER_RANGED_CRIT_CHANCE = 188,
    MOD_RATING = 189,
    MOD_FACTION_REPUTATION_GAIN = 190,
    USE_NORMAL_MOVEMENT_SPEED = 191,
    MOD_MELEE_RANGED_HASTE = 192,
    MELEE_SLOW = 193,
    MOD_TARGET_ABSORB_SCHOOL = 194,
    MOD_TARGET_ABILITY_ABSORB_SCHOOL = 195,
    MOD_COOLDOWN = 196,
    MOD_ATTACKER_SPELL_AND_WEAPON_CRIT_CHANCE = 197,
    UNKNOWN198 = 198,
    MOD_INCREASES_SPELL_PCT_TO_HIT = 199,
    MOD_XP_PCT = 200,
    FLY = 201,
    IGNORE_COMBAT_RESULT = 202,
    MOD_ATTACKER_MELEE_CRIT_DAMAGE = 203,
    MOD_ATTACKER_RANGED_CRIT_DAMAGE = 204,
    MOD_SCHOOL_CRIT_DMG_TAKEN = 205,
    MOD_INCREASE_VEHICLE_FLIGHT_SPEED = 206,
    MOD_INCREASE_MOUNTED_FLIGHT_SPEED = 207,
    MOD_INCREASE_FLIGHT_SPEED = 208,
    MOD_MOUNTED_FLIGHT_SPEED_ALWAYS = 209,
    MOD_VEHICLE_SPEED_ALWAYS = 210,
    MOD_FLIGHT_SPEED_NOT_STACK = 211,
    MOD_RANGED_ATTACK_POWER_OF_STAT_PERCENT = 212,
    MOD_RAGE_FROM_DAMAGE_DEALT = 213,
    UNKNOWN214 = 214,
    ARENA_PREPARATION = 215,
    HASTE_SPELLS = 216,
    MOD_MELEE_HASTE_2 = 217,
    HASTE_RANGED = 218,
    MOD_MANA_REGEN_FROM_STAT = 219,
    MOD_RATING_FROM_STAT = 220,
    MOD_DETAUNT = 221,
    UNKNOWN222 = 222,
    RAID_PROC_FROM_CHARGE = 223,
    UNKNOWN224 = 224,
    RAID_PROC_FROM_CHARGE_WITH_VALUE = 225,
    PERIODIC_DUMMY = 226,
    PERIODIC_TRIGGER_SPELL_WITH_VALUE = 227,
    DETECT_STEALTH = 228,
    MOD_AOE_DAMAGE_AVOIDANCE = 229,
    UNKNOWN230 = 230,
    PROC_TRIGGER_SPELL_WITH_VALUE = 231,
    MECHANIC_DURATION_MOD = 232,
    CHANGE_MODEL_FOR_ALL_HUMANOIDS = 233,
    MECHANIC_DURATION_MOD_NOT_STACK = 234,
    MOD_DISPEL_RESIST = 235,
    CONTROL_VEHICLE = 236,
    MOD_SPELL_DAMAGE_OF_ATTACK_POWER = 237,
    MOD_SPELL_HEALING_OF_ATTACK_POWER = 238,
    MOD_SCALE_2 = 239,
    MOD_EXPERTISE = 240,
    FORCE_MOVE_FORWARD = 241,
    MOD_SPELL_DAMAGE_FROM_HEALING = 242,
    MOD_FACTION = 243,
    COMPREHEND_LANGUAGE = 244,
    MOD_AURA_DURATION_BY_DISPEL = 245,
    MOD_AURA_DURATION_BY_DISPEL_NOT_STACK = 246,
    CLONE_CASTER = 247,
    MOD_COMBAT_RESULT_CHANCE = 248,
    CONVERT_RUNE = 249,
    MOD_INCREASE_HEALTH_2 = 250,
    MOD_ENEMY_DODGE = 251,
    MOD_SPEED_SLOW_ALL = 252,
    MOD_BLOCK_CRIT_CHANCE = 253,
    MOD_DISARM_OFFHAND = 254,
    MOD_MECHANIC_DAMAGE_TAKEN_PERCENT = 255,
    NO_REAGENT_USE = 256,
    MOD_TARGET_RESIST_BY_SPELL_CLASS = 257,
    UNKNOWN258 = 258,
    MOD_HOT_PCT = 259,
    SCREEN_EFFECT = 260,
    PHASE = 261,
    ABILITY_IGNORE_AURASTATE = 262,
    ALLOW_ONLY_ABILITY = 263,
    UNKNOWN264 = 264,
    UNKNOWN265 = 265,
    UNKNOWN266 = 266,
    MOD_IMMUNE_AURA_APPLY_SCHOOL = 267,
    MOD_ATTACK_POWER_OF_STAT_PERCENT = 268,
    MOD_IGNORE_TARGET_RESIST = 269,
    MOD_ABILITY_IGNORE_TARGET_RESIST = 270,
    MOD_DAMAGE_FROM_CASTER = 271,
    IGNORE_MELEE_RESET = 272,
    X_RAY = 273,
    ABILITY_CONSUME_NO_AMMO = 274,
    MOD_IGNORE_SHAPESHIFT = 275,
    MOD_DAMAGE_DONE_FOR_MECHANIC = 276,
    MOD_MAX_AFFECTED_TARGETS = 277,
    MOD_DISARM_RANGED = 278,
    INITIALIZE_IMAGES = 279,
    MOD_ARMOR_PENETRATION_PCT = 280,
    MOD_HONOR_GAIN_PCT = 281,
    MOD_BASE_HEALTH_PCT = 282,
    MOD_HEALING_RECEIVED = 283,
    LINKED = 284,
    MOD_ATTACK_POWER_OF_ARMOR = 285,
    ABILITY_PERIODIC_CRIT = 286,
    DEFLECT_SPELLS = 287,
    IGNORE_HIT_DIRECTION = 288,
    PREVENT_DURABILITY_LOSS = 289,
    MOD_CRIT_PCT = 290,
    MOD_XP_QUEST_PCT = 291,
    OPEN_STABLE = 292,
    OVERRIDE_SPELLS = 293,
    PREVENT_REGENERATE_POWER = 294,
    UNKNOWN295 = 295,
    SET_VEHICLE_ID = 296,
    BLOCK_SPELL_FAMILY = 297,
    STRANGULATE = 298,
    UNKNOWN299 = 299,
    SHARE_DAMAGE_PCT = 300,
    SCHOOL_HEAL_ABSORB = 301,
    UNKNOWN302 = 302,
    MOD_DAMAGE_DONE_VERSUS_AURASTATE = 303,
    MOD_FAKE_INEBRIATE = 304,
    MOD_MINIMUM_SPEED = 305,
    UNKNOWN306 = 306,
    HEAL_ABSORB_TEST = 307,
    MOD_CRIT_CHANCE_FOR_CASTER = 308,
    UNKNOWN309 = 309,
    MOD_CREATURE_AOE_DAMAGE_AVOIDANCE = 310,
    UNKNOWN311 = 311,
    UNKNOWN312 = 312,
    UNKNOWN313 = 313,
    PREVENT_RESURRECTION = 314,
    UNDERWATER_WALKING = 315,
    PERIODIC_HASTE = 316,
};

enum class AuraType : uint32_t {
    NONE = 0,
    BIND_SIGHT = 1,
    MOD_POSSESS = 2,
    PERIODIC_DAMAGE = 3,
    DUMMY = 4,
    MOD_CONFUSE = 5,
    MOD_CHARM = 6,
    MOD_FEAR = 7,
    PERIODIC_HEAL = 8,
    MOD_ATTACKSPEED = 9,
    MOD_THREAT = 10,
    MOD_TAUNT = 11,
    MOD_STUN = 12,
    MOD_DAMAGE_DONE = 13,
    MOD_DAMAGE_TAKEN = 14,
    DAMAGE_SHIELD = 15,
    MOD_STEALTH = 16,
    MOD_STEALTH_DETECT = 17,
    MOD_INVISIBILITY = 18,
    MOD_INVISIBILITY_DETECT = 19,
    OBS_MOD_HEALTH = 20,
    OBS_MOD_POWER = 21,
    MOD_RESISTANCE = 22,
    PERIODIC_TRIGGER_SPELL = 23,
    PERIODIC_ENERGIZE = 24,
    MOD_PACIFY = 25,
    MOD_ROOT = 26,
    MOD_SILENCE = 27,
    REFLECT_SPELLS = 28,
    MOD_STAT = 29,
    MOD_SKILL = 30,
    MOD_INCREASE_SPEED = 31,
    MOD_INCREASE_MOUNTED_SPEED = 32,
    MOD_DECREASE_SPEED = 33,
    MOD_INCREASE_HEALTH = 34,
    MOD_INCREASE_ENERGY = 35,
    MOD_SHAPESHIFT = 36,
    EFFECT_IMMUNITY = 37,
    STATE_IMMUNITY = 38,
    SCHOOL_IMMUNITY = 39,
    DAMAGE_IMMUNITY = 40,
    DISPEL_IMMUNITY = 41,
    PROC_TRIGGER_SPELL = 42,
    PROC_TRIGGER_DAMAGE = 43,
    TRACK_CREATURES = 44,
    TRACK_RESOURCES = 45,
    UNKNOWN46 = 46,
    MOD_PARRY_PERCENT = 47,
    PERIODIC_TRIGGER_SPELL_FROM_CLIENT = 48,
    MOD_DODGE_PERCENT = 49,
    MOD_CRITICAL_HEALING_AMOUNT = 50,
    MOD_BLOCK_PERCENT = 51,
    MOD_WEAPON_CRIT_PERCENT = 52,
    PERIODIC_LEECH = 53,
    MOD_HIT_CHANCE = 54,
    MOD_SPELL_HIT_CHANCE = 55,
    TRANSFORM = 56,
    MOD_SPELL_CRIT_CHANCE = 57,
    MOD_INCREASE_SWIM_SPEED = 58,
    MOD_DAMAGE_DONE_CREATURE = 59,
    MOD_PACIFY_SILENCE = 60,
    MOD_SCALE = 61,
    PERIODIC_HEALTH_FUNNEL = 62,
    UNKNOWN63 = 63,
    PERIODIC_MANA_LEECH = 64,
    MOD_CASTING_SPEED_NOT_STACK = 65,
    FEIGN_DEATH = 66,
    MOD_DISARM = 67,
    MOD_STALKED = 68,
    SCHOOL_ABSORB = 69,
    EXTRA_ATTACKS = 70,
    MOD_SPELL_CRIT_CHANCE_SCHOOL = 71,
    MOD_POWER_COST_SCHOOL_PCT = 72,
    MOD_POWER_COST_SCHOOL = 73,
    REFLECT_SPELLS_SCHOOL = 74,
    MOD_LANGUAGE = 75,
    FAR_SIGHT = 76,
    MECHANIC_IMMUNITY = 77,
    MOUNTED = 78,
    MOD_DAMAGE_PERCENT_DONE = 79,
    MOD_PERCENT_STAT = 80,
    SPLIT_DAMAGE_PCT = 81,
    WATER_BREATHING = 82,
    MOD_BASE_RESISTANCE = 83,
    MOD_REGEN = 84,
    MOD_POWER_REGEN = 85,
    CHANNEL_DEATH_ITEM = 86,
    MOD_DAMAGE_PERCENT_TAKEN = 87,
    MOD_HEALTH_REGEN_PERCENT = 88,
    PERIODIC_DAMAGE_PERCENT = 89,
    UNKNOWN90 = 90,
    MOD_DETECT_RANGE = 91,
    PREVENTS_FLEEING = 92,
    MOD_UNATTACKABLE = 93,
    INTERRUPT_REGEN = 94,
    GHOST = 95,
    SPELL_MAGNET = 96,
    MANA_SHIELD = 97,
    MOD_SKILL_TALENT = 98,
    MOD_ATTACK_POWER = 99,
    AURAS_VISIBLE = 100,
    MOD_RESISTANCE_PCT = 101,
    MOD_MELEE_ATTACK_POWER_VERSUS = 102,
    MOD_TOTAL_THREAT = 103,
    WATER_WALK = 104,
    FEATHER_FALL = 105,
    HOVER = 106,
    ADD_FLAT_MODIFIER = 107,
    ADD_PCT_MODIFIER = 108,
    ADD_TARGET_TRIGGER = 109,
    MOD_POWER_REGEN_PERCENT = 110,
    ADD_CASTER_HIT_TRIGGER = 111,
    OVERRIDE_CLASS_SCRIPTS = 112,
    MOD_RANGED_DAMAGE_TAKEN = 113,
    MOD_RANGED_DAMAGE_TAKEN_PCT = 114,
    MOD_HEALING = 115,
    MOD_REGEN_DURING_COMBAT = 116,
    MOD_MECHANIC_RESISTANCE = 117,
    MOD_HEALING_PCT = 118,
    UNKNOWN119 = 119,
    UNTRACKABLE = 120,
    EMPATHY = 121,
    MOD_OFFHAND_DAMAGE_PCT = 122,
    MOD_TARGET_RESISTANCE = 123,
    MOD_RANGED_ATTACK_POWER = 124,
    MOD_MELEE_DAMAGE_TAKEN = 125,
    MOD_MELEE_DAMAGE_TAKEN_PCT = 126,
    RANGED_ATTACK_POWER_ATTACKER_BONUS = 127,
    MOD_POSSESS_PET = 128,
    MOD_SPEED_ALWAYS = 129,
    MOD_MOUNTED_SPEED_ALWAYS = 130,
    MOD_RANGED_ATTACK_POWER_VERSUS = 131,
    MOD_INCREASE_ENERGY_PERCENT = 132,
    MOD_INCREASE_HEALTH_PERCENT = 133,
    MOD_MANA_REGEN_INTERRUPT = 134,
    MOD_HEALING_DONE = 135,
    MOD_HEALING_DONE_PERCENT = 136,
    MOD_TOTAL_STAT_PERCENTAGE = 137,
    MOD_MELEE_HASTE = 138,
    FORCE_REACTION = 139,
    MOD_RANGED_HASTE = 140,
    MOD_RANGED_AMMO_HASTE = 141,
    MOD_BASE_RESISTANCE_PCT = 142,
    MOD_RESISTANCE_EXCLUSIVE = 143,
    SAFE_FALL = 144,
    MOD_PET_TALENT_POINTS = 145,
    ALLOW_TAME_PET_TYPE = 146,
    MECHANIC_IMMUNITY_MASK = 147,
    RETAIN_COMBO_POINTS = 148,
    REDUCE_PUSHBACK = 149,
    MOD_SHIELD_BLOCKVALUE_PCT = 150,
    TRACK_STEALTHED = 151,
    MOD_DETECTED_RANGE = 152,
    SPLIT_DAMAGE_FLAT = 153,
    MOD_STEALTH_LEVEL = 154,
    MOD_WATER_BREATHING = 155,
    MOD_REPUTATION_GAIN = 156,
    PET_DAMAGE_MULTI = 157,
    MOD_SHIELD_BLOCKVALUE = 158,
    NO_PVP_CREDIT = 159,
    MOD_AOE_AVOIDANCE = 160,
    MOD_HEALTH_REGEN_IN_COMBAT = 161,
    POWER_BURN = 162,
    MOD_CRIT_DAMAGE_BONUS = 163,
    UNKNOWN164 = 164,
    MELEE_ATTACK_POWER_ATTACKER_BONUS = 165,
    MOD_ATTACK_POWER_PCT = 166,
    MOD_RANGED_ATTACK_POWER_PCT = 167,
    MOD_DAMAGE_DONE_VERSUS = 168,
    MOD_CRIT_PERCENT_VERSUS = 169,
    DETECT_AMORE = 170,
    MOD_SPEED_NOT_STACK = 171,
    MOD_MOUNTED_SPEED_NOT_STACK = 172,
    UNKNOWN173 = 173,
    MOD_SPELL_DAMAGE_OF_STAT_PERCENT = 174,
    MOD_SPELL_HEALING_OF_STAT_PERCENT = 175,
    SPIRIT_OF_REDEMPTION = 176,
    AOE_CHARM = 177,
    MOD_DEBUFF_RESISTANCE = 178,
    MOD_ATTACKER_SPELL_CRIT_CHANCE = 179,
    MOD_FLAT_SPELL_DAMAGE_VERSUS = 180,
    UNKNOWN181 = 181,
    MOD_RESISTANCE_OF_STAT_PERCENT = 182,
    MOD_CRITICAL_THREAT = 183,
    MOD_ATTACKER_MELEE_HIT_CHANCE = 184,
    MOD_ATTACKER_RANGED_HIT_CHANCE = 185,
    MOD_ATTACKER_SPELL_HIT_CHANCE = 186,
    MOD_ATTACKER_MELEE_CRIT_CHANCE = 187,
    MOD_ATTACKER_RANGED_CRIT_CHANCE = 188,
    MOD_RATING = 189,
    MOD_FACTION_REPUTATION_GAIN = 190,
    USE_NORMAL_MOVEMENT_SPEED = 191,
    MOD_MELEE_RANGED_HASTE = 192,
    MELEE_SLOW = 193,
    MOD_TARGET_ABSORB_SCHOOL = 194,
    MOD_TARGET_ABILITY_ABSORB_SCHOOL = 195,
    MOD_COOLDOWN = 196,
    MOD_ATTACKER_SPELL_AND_WEAPON_CRIT_CHANCE = 197,
    UNKNOWN198 = 198,
    MOD_INCREASES_SPELL_PCT_TO_HIT = 199,
    MOD_XP_PCT = 200,
    FLY = 201,
    IGNORE_COMBAT_RESULT = 202,
    MOD_ATTACKER_MELEE_CRIT_DAMAGE = 203,
    MOD_ATTACKER_RANGED_CRIT_DAMAGE = 204,
    MOD_SCHOOL_CRIT_DMG_TAKEN = 205,
    MOD_INCREASE_VEHICLE_FLIGHT_SPEED = 206,
    MOD_INCREASE_MOUNTED_FLIGHT_SPEED = 207,
    MOD_INCREASE_FLIGHT_SPEED = 208,
    MOD_MOUNTED_FLIGHT_SPEED_ALWAYS = 209,
    MOD_VEHICLE_SPEED_ALWAYS = 210,
    MOD_FLIGHT_SPEED_NOT_STACK = 211,
    MOD_RANGED_ATTACK_POWER_OF_STAT_PERCENT = 212,
    MOD_RAGE_FROM_DAMAGE_DEALT = 213,
    UNKNOWN214 = 214,
    ARENA_PREPARATION = 215,
    HASTE_SPELLS = 216,
    MOD_MELEE_HASTE_2 = 217,
    HASTE_RANGED = 218,
    MOD_MANA_REGEN_FROM_STAT = 219,
    MOD_RATING_FROM_STAT = 220,
    MOD_DETAUNT = 221,
    UNKNOWN222 = 222,
    RAID_PROC_FROM_CHARGE = 223,
    UNKNOWN224 = 224,
    RAID_PROC_FROM_CHARGE_WITH_VALUE = 225,
    PERIODIC_DUMMY = 226,
    PERIODIC_TRIGGER_SPELL_WITH_VALUE = 227,
    DETECT_STEALTH = 228,
    MOD_AOE_DAMAGE_AVOIDANCE = 229,
    UNKNOWN230 = 230,
    PROC_TRIGGER_SPELL_WITH_VALUE = 231,
    MECHANIC_DURATION_MOD = 232,
    CHANGE_MODEL_FOR_ALL_HUMANOIDS = 233,
    MECHANIC_DURATION_MOD_NOT_STACK = 234,
    MOD_DISPEL_RESIST = 235,
    CONTROL_VEHICLE = 236,
    MOD_SPELL_DAMAGE_OF_ATTACK_POWER = 237,
    MOD_SPELL_HEALING_OF_ATTACK_POWER = 238,
    MOD_SCALE_2 = 239,
    MOD_EXPERTISE = 240,
    FORCE_MOVE_FORWARD = 241,
    MOD_SPELL_DAMAGE_FROM_HEALING = 242,
    MOD_FACTION = 243,
    COMPREHEND_LANGUAGE = 244,
    MOD_AURA_DURATION_BY_DISPEL = 245,
    MOD_AURA_DURATION_BY_DISPEL_NOT_STACK = 246,
    CLONE_CASTER = 247,
    MOD_COMBAT_RESULT_CHANCE = 248,
    CONVERT_RUNE = 249,
    MOD_INCREASE_HEALTH_2 = 250,
    MOD_ENEMY_DODGE = 251,
    MOD_SPEED_SLOW_ALL = 252,
    MOD_BLOCK_CRIT_CHANCE = 253,
    MOD_DISARM_OFFHAND = 254,
    MOD_MECHANIC_DAMAGE_TAKEN_PERCENT = 255,
    NO_REAGENT_USE = 256,
    MOD_TARGET_RESIST_BY_SPELL_CLASS = 257,
    UNKNOWN258 = 258,
    MOD_HOT_PCT = 259,
    SCREEN_EFFECT = 260,
    PHASE = 261,
    ABILITY_IGNORE_AURASTATE = 262,
    ALLOW_ONLY_ABILITY = 263,
    UNKNOWN264 = 264,
    UNKNOWN265 = 265,
    UNKNOWN266 = 266,
    MOD_IMMUNE_AURA_APPLY_SCHOOL = 267,
    MOD_ATTACK_POWER_OF_STAT_PERCENT = 268,
    MOD_IGNORE_TARGET_RESIST = 269,
    MOD_ABILITY_IGNORE_TARGET_RESIST = 270,
    MOD_DAMAGE_FROM_CASTER = 271,
    IGNORE_MELEE_RESET = 272,
    X_RAY = 273,
    ABILITY_CONSUME_NO_AMMO = 274,
    MOD_IGNORE_SHAPESHIFT = 275,
    MOD_DAMAGE_DONE_FOR_MECHANIC = 276,
    MOD_MAX_AFFECTED_TARGETS = 277,
    MOD_DISARM_RANGED = 278,
    INITIALIZE_IMAGES = 279,
    MOD_ARMOR_PENETRATION_PCT = 280,
    MOD_HONOR_GAIN_PCT = 281,
    MOD_BASE_HEALTH_PCT = 282,
    MOD_HEALING_RECEIVED = 283,
    LINKED = 284,
    MOD_ATTACK_POWER_OF_ARMOR = 285,
    ABILITY_PERIODIC_CRIT = 286,
    DEFLECT_SPELLS = 287,
    IGNORE_HIT_DIRECTION = 288,
    PREVENT_DURABILITY_LOSS = 289,
    MOD_CRIT_PCT = 290,
    MOD_XP_QUEST_PCT = 291,
    OPEN_STABLE = 292,
    OVERRIDE_SPELLS = 293,
    PREVENT_REGENERATE_POWER = 294,
    UNKNOWN295 = 295,
    SET_VEHICLE_ID = 296,
    BLOCK_SPELL_FAMILY = 297,
    STRANGULATE = 298,
    UNKNOWN299 = 299,
    SHARE_DAMAGE_PCT = 300,
    SCHOOL_HEAL_ABSORB = 301,
    UNKNOWN302 = 302,
    MOD_DAMAGE_DONE_VERSUS_AURASTATE = 303,
    MOD_FAKE_INEBRIATE = 304,
    MOD_MINIMUM_SPEED = 305,
    UNKNOWN306 = 306,
    HEAL_ABSORB_TEST = 307,
    MOD_CRIT_CHANCE_FOR_CASTER = 308,
    UNKNOWN309 = 309,
    MOD_CREATURE_AOE_DAMAGE_AVOIDANCE = 310,
    UNKNOWN311 = 311,
    UNKNOWN312 = 312,
    UNKNOWN313 = 313,
    PREVENT_RESURRECTION = 314,
    UNDERWATER_WALKING = 315,
    PERIODIC_HASTE = 316,
};

enum class BankSwapSource : uint8_t {
    INVENTORY = 0,
    BANK = 1,
};

enum class BankSwapStoreMode : uint8_t {
    MANUAL = 0,
    AUTOMATIC = 1,
};

enum class BarberShopResult : uint8_t {
    OK = 0,
    NOT_ENOUGH_MONEY = 1,
    MUST_BE_SEATED_IN_BARBER_CHAIR = 2,
    NOT_ENOUGH_MONEY2 = 3,
};

enum class BattlefieldListLocation : uint8_t {
    BATTLEMASTER = 0,
    UI = 1,
};

enum class BattlefieldPortAction : uint8_t {
    LEAVE_QUEUE = 0,
    ENTER_BATTLE = 1,
};

enum class BattlegroundType : uint32_t {
    NONE = 0,
    ALTERAC_VALLEY = 1,
    WARSONG_GULCH = 2,
    ARATHI_BASIN = 3,
    NAGRAND_ARENA = 4,
    BLADES_EDGE_ARENA = 5,
    ARENA = 6,
    EYE_OF_THE_STORM = 7,
    RUINS_OF_LORDAERON = 8,
    STRAND_OF_THE_ANCIENT = 9,
    DALARAN_SEWERS = 10,
    RING_OF_VALOR = 11,
    ISLE_OF_CONQUEST = 30,
    RANDOM = 32,
};

enum class BgTypeId : uint32_t {
    NOT_ELIGIBLE = 0,
    QUEUED_FOR_AV = 1,
    QUEUED_FOR_WSG = 2,
    QUEUED_FOR_AB = 3,
    QUEUED_FOR_NETHERSTORM = 4,
    QUEUED_FOR_BLADES_EDGE_ARENA = 5,
    QUEUED_FOR_ARENA = 6,
    QUEUED_FOR_EYE_OF_THE_STORM = 7,
    QUEUED_FOR_RUINS_OF_LORDAERON = 8,
    QUEUED_FOR_STRAND_OF_THE_ANCIENT = 9,
    QUEUED_FOR_DALARAN_SEWERS = 10,
    QUEUED_FOR_RING_OF_VALOR = 11,
    QUEUED_FOR_ISLE_OF_CONQUEST = 30,
    REMOVE_FROM_QUEUE = 4294967294,
};

enum class Bonding : uint8_t {
    NO_BIND = 0,
    PICK_UP = 1,
    EQUIP = 2,
    USE = 3,
    QUEST_ITEM = 4,
    QUEST_ITEM1 = 5,
};

enum class BuyBankSlotResult : uint32_t {
    FAILED_TOO_MANY = 0,
    INSUFFICIENT_FUNDS = 1,
    NOT_BANKER = 2,
    OK = 3,
};

enum class BuyResult : uint8_t {
    CANT_FIND_ITEM = 0,
    ITEM_ALREADY_SOLD = 1,
    NOT_ENOUGH_MONEY = 2,
    SELLER_DONT_LIKE_YOU = 4,
    DISTANCE_TOO_FAR = 5,
    ITEM_SOLD_OUT = 7,
    CANT_CARRY_MORE = 8,
    RANK_REQUIRE = 11,
    REPUTATION_REQUIRE = 12,
};

enum class BuybackSlot : uint32_t {
    SLOT1 = 69,
    SLOT2 = 70,
    SLOT3 = 71,
    SLOT4 = 72,
    SLOT5 = 73,
    SLOT6 = 74,
    SLOT7 = 75,
    SLOT8 = 76,
    SLOT9 = 77,
    SLOT10 = 78,
    SLOT11 = 79,
    SLOT12 = 80,
    SLOT13 = 81,
};

enum class CalendarModeratorRank : uint8_t {
    PLAYER = 0,
    MODERATOR = 1,
    OWNER = 2,
};

enum class CalendarStatus : uint8_t {
    INVITED = 0,
    ACCEPTED = 1,
    DECLINED = 2,
    CONFIRMED = 3,
    OUT = 4,
    STANDBY = 5,
    SIGNED_UP = 6,
    NOT_SIGNED_UP = 7,
    TENTATIVE = 8,
    REMOVED = 9,
};

enum class CalendarStatusTime : uint8_t {
    NOT_PRESENT = 0,
    PRESENT = 1,
};

enum class CharterType : uint8_t {
    GUILD = 0,
    ARENA = 1,
};

enum class ChatNotify : uint8_t {
    JOINED_NOTICE = 0,
    LEFT_NOTICE = 1,
    YOU_JOINED_NOTICE = 2,
    YOU_LEFT_NOTICE = 3,
    WRONG_PASSWORD_NOTICE = 4,
    NOT_MEMBER_NOTICE = 5,
    NOT_MODERATOR_NOTICE = 6,
    PASSWORD_CHANGED_NOTICE = 7,
    OWNER_CHANGED_NOTICE = 8,
    PLAYER_NOT_FOUND_NOTICE = 9,
    NOT_OWNER_NOTICE = 10,
    CHANNEL_OWNER_NOTICE = 11,
    MODE_CHANGE_NOTICE = 12,
    ANNOUNCEMENTS_ON_NOTICE = 13,
    ANNOUNCEMENTS_OFF_NOTICE = 14,
    MODERATION_ON_NOTICE = 15,
    MODERATION_OFF_NOTICE = 16,
    MUTED_NOTICE = 17,
    PLAYER_KICKED_NOTICE = 18,
    BANNED_NOTICE = 19,
    PLAYER_BANNED_NOTICE = 20,
    PLAYER_UNBANNED_NOTICE = 21,
    PLAYER_NOT_BANNED_NOTICE = 22,
    PLAYER_ALREADY_MEMBER_NOTICE = 23,
    INVITE_NOTICE = 24,
    INVITE_WRONG_FACTION_NOTICE = 25,
    WRONG_FACTION_NOTICE = 26,
    INVALID_NAME_NOTICE = 27,
    NOT_MODERATED_NOTICE = 28,
    PLAYER_INVITED_NOTICE = 29,
    PLAYER_INVITE_BANNED_NOTICE = 30,
    THROTTLED_NOTICE = 31,
    NOT_IN_AREA_NOTICE = 32,
    NOT_IN_LFG_NOTICE = 33,
    VOICE_ON_NOTICE = 34,
    VOICE_OFF_NOTICE = 35,
};

enum class ChatRestrictionType : uint8_t {
    CHAT_RESTRICTED = 0,
    CHAT_THROTTLED = 1,
    USER_SQUELCHED = 2,
    YELL_RESTRICTED = 3,
};

enum class ChatType : uint8_t {
    SYSTEM = 0,
    SAY = 1,
    PARTY = 2,
    RAID = 3,
    GUILD = 4,
    OFFICER = 5,
    YELL = 6,
    WHISPER = 7,
    WHISPER_FOREIGN = 8,
    WHISPER_INFORM = 9,
    EMOTE = 10,
    TEXT_EMOTE = 11,
    MONSTER_SAY = 12,
    MONSTER_PARTY = 13,
    MONSTER_YELL = 14,
    MONSTER_WHISPER = 15,
    MONSTER_EMOTE = 16,
    CHANNEL = 17,
    CHANNEL_JOIN = 18,
    CHANNEL_LEAVE = 19,
    CHANNEL_LIST = 20,
    CHANNEL_NOTICE = 21,
    CHANNEL_NOTICE_USER = 22,
    AFK = 23,
    DND = 24,
    IGNORED = 25,
    SKILL = 26,
    LOOT = 27,
    MONEY = 28,
    OPENING = 29,
    TRADESKILLS = 30,
    PET_INFO = 31,
    COMBAT_MISC_INFO = 32,
    COMBAT_XP_GAIN = 33,
    COMBAT_HONOR_GAIN = 34,
    COMBAT_FACTION_CHANGE = 35,
    BG_SYSTEM_NEUTRAL = 36,
    BG_SYSTEM_ALLIANCE = 37,
    BG_SYSTEM_HORDE = 38,
    RAID_LEADER = 39,
    RAID_WARNING = 40,
    RAID_BOSS_EMOTE = 41,
    RAID_BOSS_WHISPER = 42,
    FILTERED = 43,
    BATTLEGROUND = 44,
    BATTLEGROUND_LEADER = 45,
    RESTRICTED = 46,
    BATTLENET = 47,
    ACHIEVEMENT = 48,
    GUILD_ACHIEVEMENT = 49,
    ARENA_POINTS = 50,
    PARTY_LEADER = 51,
};

enum class CinematicSequenceId : uint32_t {
    GOBLIN = 0,
    PALANTIR_OF_AZORA = 1,
    UNDEAD = 2,
    ORC = 21,
    DWARF = 41,
    NIGHT_ELF = 61,
    HUMAN = 81,
    GNOME = 101,
    TROLL = 121,
    TAUREN = 141,
    SCRY_CAM = 161,
    BLOOD_ELF = 162,
    DRAENEI = 163,
    SUNWELL_FIVE_MAN = 164,
    DEATH_KNIGHT = 165,
};

enum class Class : uint8_t {
    WARRIOR = 1,
    PALADIN = 2,
    HUNTER = 3,
    ROGUE = 4,
    PRIEST = 5,
    DEATH_KNIGHT = 6,
    SHAMAN = 7,
    MAGE = 8,
    WARLOCK = 9,
    DRUID = 11,
};

enum class ClientCastFlags : uint8_t {
    NONE = 0,
    EXTRA = 2,
};

enum class ClientMovementData : uint8_t {
    NOT_PRESENT = 0,
    PRESENT = 1,
};

enum class CommentatorEnableOption : uint32_t {
    DISABLE = 0,
    ENABLE = 1,
    TOGGLE = 2,
};

enum class ComplainResultWindow : uint8_t {
    DO_NOT_SHOW = 0,
    SHOW = 1,
};

enum class ComplaintStatus : uint8_t {
    DISABLED = 0,
    ENABLED_WITHOUT_AUTO_IGNORE = 1,
    ENABLED_WITH_AUTO_IGNORE = 2,
};

enum class CorpseQueryResult : uint8_t {
    NOT_FOUND = 0,
    FOUND = 1,
};

enum class CreatureFamily : uint8_t {
    NONE = 0,
    WOLF = 1,
    CAT = 2,
    SPIDER = 3,
    BEAR = 4,
    BOAR = 5,
    CROCOLISK = 6,
    CARRION_BIRD = 7,
    CRAB = 8,
    GORILLA = 9,
    RAPTOR = 11,
    TALLSTRIDER = 12,
    FELHUNTER = 15,
    VOIDWALKER = 16,
    SUCCUBUS = 17,
    DOOMGUARD = 19,
    SCORPID = 20,
    TURTLE = 21,
    IMP = 23,
    BAT = 24,
    HYENA = 25,
    BIRD_OF_PREY = 26,
    WIND_SERPENT = 27,
    REMOTE_CONTROL = 28,
    FELGUARD = 29,
    DRAGONHAWK = 30,
    RAVAGER = 31,
    WARP_STALKER = 32,
    SPOREBAT = 33,
    NETHER_RAY = 34,
    SERPENT = 35,
    MOTH = 37,
    CHIMAERA = 38,
    DEVILSAUR = 39,
    GHOUL = 40,
    SILITHID = 41,
    WORM = 42,
    RHINO = 43,
    WASP = 44,
    CORE_HOUND = 45,
    SPIRIT_BEAST = 46,
};

enum class DeclinedNames : uint8_t {
    NO = 0,
    YES = 1,
};

enum class DeclinedPetNameIncluded : uint8_t {
    NOT_INCLUDED = 0,
    INCLUDED = 1,
};

enum class DispelMethod : uint8_t {
    DISPELLED = 0,
    CLEANSED = 1,
};

enum class DuelWinnerReason : uint8_t {
    WON = 0,
    FLED = 1,
};

enum class DungeonDifficulty : uint8_t {
    NORMAL = 0,
    HEROIC = 1,
};

enum class Emote : uint32_t {
    ONESHOT_NONE = 0,
    ONESHOT_TALK = 1,
    ONESHOT_BOW = 2,
    ONESHOT_WAVE = 3,
    ONESHOT_CHEER = 4,
    ONESHOT_EXCLAMATION = 5,
    ONESHOT_QUESTION = 6,
    ONESHOT_EAT = 7,
    STATE_DANCE = 10,
    ONESHOT_LAUGH = 11,
    STATE_SLEEP = 12,
    STATE_SIT = 13,
    ONESHOT_RUDE = 14,
    ONESHOT_ROAR = 15,
    ONESHOT_KNEEL = 16,
    ONESHOT_KISS = 17,
    ONESHOT_CRY = 18,
    ONESHOT_CHICKEN = 19,
    ONESHOT_BEG = 20,
    ONESHOT_APPLAUD = 21,
    ONESHOT_SHOUT = 22,
    ONESHOT_FLEX = 23,
    ONESHOT_SHY = 24,
    ONESHOT_POINT = 25,
    STATE_STAND = 26,
    STATE_READY_UNARMED = 27,
    STATE_WORK_SHEATHED = 28,
    STATE_POINT = 29,
    STATE_NONE = 30,
    ONESHOT_WOUND = 33,
    ONESHOT_WOUND_CRITICAL = 34,
    ONESHOT_ATTACK_UNARMED = 35,
    ONESHOT_ATTACK1H = 36,
    ONESHOT_ATTACK2HTIGHT = 37,
    ONESHOT_ATTACK2H_LOOSE = 38,
    ONESHOT_PARRY_UNARMED = 39,
    ONESHOT_PARRY_SHIELD = 43,
    ONESHOT_READY_UNARMED = 44,
    ONESHOT_READY1H = 45,
    ONESHOT_READY_BOW = 48,
    ONESHOT_SPELL_PRECAST = 50,
    ONESHOT_SPELL_CAST = 51,
    ONESHOT_BATTLE_ROAR = 53,
    ONESHOT_SPECIALATTACK1H = 54,
    ONESHOT_KICK = 60,
    ONESHOT_ATTACK_THROWN = 61,
    STATE_STUN = 64,
    STATE_DEAD = 65,
    ONESHOT_SALUTE = 66,
    STATE_KNEEL = 68,
    STATE_USE_STANDING = 69,
    ONESHOT_WAVE_NO_SHEATHE = 70,
    ONESHOT_CHEER_NO_SHEATHE = 71,
    ONESHOT_EAT_NO_SHEATHE = 92,
    STATE_STUN_NO_SHEATHE = 93,
    ONESHOT_DANCE = 94,
    ONESHOT_SALUTE_NO_SHEATH = 113,
    STATE_USE_STANDING_NO_SHEATHE = 133,
    ONESHOT_LAUGH_NO_SHEATHE = 153,
    STATE_WORK = 173,
    STATE_SPELL_PRECAST = 193,
    ONESHOT_READY_RIFLE = 213,
    STATE_READY_RIFLE = 214,
    STATE_WORK_MINING = 233,
    STATE_WORK_CHOPWOOD = 234,
    STATE_APPLAUD = 253,
    ONESHOT_LIFTOFF = 254,
    ONESHOT_YES = 273,
    ONESHOT_NO = 274,
    ONESHOT_TRAIN = 275,
    ONESHOT_LAND = 293,
    STATE_AT_EASE = 313,
    STATE_READY1H = 333,
    STATE_SPELL_KNEEL_START = 353,
    STATE_SUBMERGED = 373,
    ONESHOT_SUBMERGE = 374,
    STATE_READY2H = 375,
    STATE_READY_BOW = 376,
    ONESHOT_MOUNT_SPECIAL = 377,
    STATE_TALK = 378,
    STATE_FISHING = 379,
    ONESHOT_FISHING = 380,
    ONESHOT_LOOT = 381,
    STATE_WHIRLWIND = 382,
    STATE_DROWNED = 383,
    STATE_HOLD_BOW = 384,
    STATE_HOLD_RIFLE = 385,
    STATE_HOLD_THROWN = 386,
    ONESHOT_DROWN = 387,
    ONESHOT_STOMP = 388,
    ONESHOT_ATTACK_OFF = 389,
    ONESHOT_ATTACK_OFF_PIERCE = 390,
    STATE_ROAR = 391,
    STATE_LAUGH = 392,
    ONESHOT_CREATURE_SPECIAL = 393,
    ONESHOT_JUMPLANDRUN = 394,
    ONESHOT_JUMPEND = 395,
    ONESHOT_TALK_NO_SHEATHE = 396,
    ONESHOT_POINT_NO_SHEATHE = 397,
    STATE_CANNIBALIZE = 398,
    ONESHOT_JUMPSTART = 399,
    STATE_DANCESPECIAL = 400,
    ONESHOT_DANCESPECIAL = 401,
    ONESHOT_CUSTOM_SPELL_01 = 402,
    ONESHOT_CUSTOM_SPELL_02 = 403,
    ONESHOT_CUSTOM_SPELL_03 = 404,
    ONESHOT_CUSTOM_SPELL_04 = 405,
    ONESHOT_CUSTOM_SPELL_05 = 406,
    ONESHOT_CUSTOM_SPELL_06 = 407,
    ONESHOT_CUSTOM_SPELL_07 = 408,
    ONESHOT_CUSTOM_SPELL_08 = 409,
    ONESHOT_CUSTOM_SPELL_09 = 410,
    ONESHOT_CUSTOM_SPELL_10 = 411,
    STATE_EXCLAIM = 412,
    STATE_DANCE_CUSTOM = 413,
    STATE_SIT_CHAIR_MED = 415,
    STATE_CUSTOM_SPELL_01 = 416,
    STATE_CUSTOM_SPELL_02 = 417,
    STATE_EAT = 418,
    STATE_CUSTOM_SPELL_04 = 419,
    STATE_CUSTOM_SPELL_03 = 420,
    STATE_CUSTOM_SPELL_05 = 421,
    STATE_SPELLEFFECT_HOLD = 422,
    STATE_EAT_NO_SHEATHE = 423,
    STATE_MOUNT = 424,
    STATE_READY2HL = 425,
    STATE_SIT_CHAIR_HIGH = 426,
    STATE_FALL = 427,
    STATE_LOOT = 428,
    STATE_SUBMERGED_NEW = 429,
    ONESHOT_COWER = 430,
    STATE_COWER = 431,
    ONESHOT_USE_STANDING = 432,
    STATE_STEALTH_STAND = 433,
    ONESHOT_OMNICAST_GHOUL = 434,
    ONESHOT_ATTACK_BOW = 435,
    ONESHOT_ATTACK_RIFLE = 436,
    STATE_SWIM_IDLE = 437,
    STATE_ATTACK_UNARMED = 438,
    ONESHOT_SPELL_CAST_W_SOUND = 439,
    ONESHOT_DODGE = 440,
    ONESHOT_PARRY1H = 441,
    ONESHOT_PARRY2H = 442,
    ONESHOT_PARRY2HL = 443,
    STATE_FLYFALL = 444,
    ONESHOT_FLYDEATH = 445,
    STATE_FLY_FALL = 446,
    ONESHOT_FLY_SIT_GROUND_DOWN = 447,
    ONESHOT_FLY_SIT_GROUND_UP = 448,
    ONESHOT_EMERGE = 449,
    ONESHOT_DRAGON_SPIT = 450,
    STATE_SPECIAL_UNARMED = 451,
    ONESHOT_FLYGRAB = 452,
    STATE_FLYGRABCLOSED = 453,
    ONESHOT_FLYGRABTHROWN = 454,
    STATE_FLY_SIT_GROUND = 455,
    STATE_WALK_BACKWARDS = 456,
    ONESHOT_FLYTALK = 457,
    ONESHOT_FLYATTACK1H = 458,
    STATE_CUSTOM_SPELL_08 = 459,
    ONESHOT_FLY_DRAGON_SPIT = 460,
    STATE_SIT_CHAIR_LOW = 461,
    ONESHOT_STUN = 462,
    ONESHOT_SPELL_CAST_OMNI = 463,
    STATE_READY_THROWN = 465,
    ONESHOT_WORK_CHOPWOOD = 466,
    ONESHOT_WORK_MINING = 467,
    STATE_SPELL_CHANNEL_OMNI = 468,
    STATE_SPELL_CHANNEL_DIRECTED = 469,
    STAND_STATE_NONE = 470,
    STATE_READYJOUST = 471,
    STATE_STRANGULATE = 473,
    STATE_READY_SPELL_OMNI = 474,
    STATE_HOLD_JOUST = 475,
    ONESHOT_CRY_JAINA = 476,
};

enum class EncounterFrame : uint32_t {
    ENGAGE = 0,
    DISENGAGE = 1,
    UPDATE_PRIORITY = 2,
    ADD_TIMER = 3,
    ENABLE_OBJECTIVE = 4,
    UPDATE_OBJECTIVE = 5,
    DISABLE_OBJECTIVE = 6,
    REFRESH_FRAMES = 7,
};

enum class EnvironmentalDamageType : uint8_t {
    EXHAUSTED = 0,
    DROWNING = 1,
    FALL = 2,
    LAVA = 3,
    SLIME = 4,
    FIRE = 5,
};

enum class Expansion : uint8_t {
    VANILLA = 0,
    THE_BURNING_CRUSADE = 1,
    WRATH_OF_THE_LICH_KING = 2,
};

enum class ExperienceAwardType : uint8_t {
    KILL = 0,
    NON_KILL = 1,
};

enum class Faction : uint16_t {
    NONE = 0,
    PLAYER_HUMAN = 1,
    PLAYER_ORC = 2,
    PLAYER_DWARF = 3,
    PLAYER_NIGHT_ELF = 4,
    PLAYER_UNDEAD = 5,
    PLAYER_TAUREN = 6,
    CREATURE = 7,
    PLAYER_GNOME = 8,
    PLAYER_TROLL = 9,
    MONSTER = 14,
    DEFIAS_BROTHERHOOD = 15,
    GNOLL_RIVERPAW = 16,
    GNOLL_REDRIDGE = 17,
    GNOLL_SHADOWHIDE = 18,
    MURLOC = 19,
    UNDEAD_SCOURGE = 20,
    BOOTY_BAY = 21,
    BEAST_SPIDER = 22,
    BEAST_BOAR = 23,
    WORGEN = 24,
    KOBOLD = 25,
    TROLL_BLOODSCALP = 26,
    TROLL_SKULLSPLITTER = 27,
    PREY = 28,
    BEAST_WOLF = 29,
    DEFIAS_BROTHERHOOD_TRAITOR = 30,
    FRIENDLY = 31,
    TROGG = 32,
    TROLL_FROSTMANE = 33,
    ORC_BLACKROCK = 34,
    VILLIAN = 35,
    VICTIM = 36,
    BEAST_BEAR = 37,
    OGRE = 38,
    KURZENS_MERCENARIES = 39,
    ESCORTEE = 40,
    VENTURE_COMPANY = 41,
    BEAST_RAPTOR = 42,
    BASILISK = 43,
    DRAGONFLIGHT_GREEN = 44,
    LOST_ONES = 45,
    BLACKSMITHING_ARMORSMITHING = 46,
    IRONFORGE = 47,
    DARK_IRON_DWARVES = 48,
    HUMAN_NIGHT_WATCH = 49,
    DRAGONFLIGHT_RED = 50,
    GNOLL_MOSSHIDE = 51,
    ORC_DRAGONMAW = 52,
    GNOME_LEPER = 53,
    GNOMEREGAN_EXILES = 54,
    LEOPARD = 55,
    SCARLET_CRUSADE = 56,
    GNOLL_ROTHIDE = 57,
    BEAST_GORILLA = 58,
    THORIUM_BROTHERHOOD = 59,
    NAGA = 60,
    DALARAN = 61,
    FORLORN_SPIRIT = 62,
    DARKHOWL = 63,
    GRELL = 64,
    FURBOLG = 65,
    HORDE_GENERIC = 66,
    HORDE = 67,
    UNDERCITY = 68,
    DARNASSUS = 69,
    SYNDICATE = 70,
    HILLSBRAD_MILITIA = 71,
    STORMWIND = 72,
    DEMON = 73,
    ELEMENTAL = 74,
    SPIRIT = 75,
    ORGRIMMAR = 76,
    TREASURE = 77,
    GNOLL_MUDSNOUT = 78,
    HILLSBRAD_SOUTHSHORE_MAYOR = 79,
    DRAGONFLIGHT_BLACK = 80,
    THUNDER_BLUFF = 81,
    TROLL_WITHERBARK = 82,
    LEATHERWORKING_ELEMENTAL = 83,
    QUILBOAR_RAZORMANE = 84,
    QUILBOAR_BRISTLEBACK = 85,
    LEATHERWORKING_DRAGONSCALE = 86,
    BLOODSAIL_BUCCANEERS = 87,
    BLACKFATHOM = 88,
    MAKRURA = 89,
    CENTAUR_KOLKAR = 90,
    CENTAUR_GALAK = 91,
    GELKIS_CLAN_CENTAUR = 92,
    MAGRAM_CLAN_CENTAUR = 93,
    MARAUDINE = 94,
    THERAMORE = 108,
    QUILBOAR_RAZORFEN = 109,
    QUILBOAR_RAZORMANE_2 = 110,
    QUILBOAR_DEATHSHEAD = 111,
    ENEMY = 128,
    AMBIENT = 148,
    NETHERGARDE_CARAVAN = 168,
    STEAMWHEEDLE_CARTEL = 169,
    ALLIANCE_GENERIC = 189,
    NETHERGARDE = 209,
    WAILING_CAVERNS = 229,
    SILITHID = 249,
    SILVERMOON_REMNANT = 269,
    ZANDALAR_TRIBE = 270,
    BLACKSMITHING_WEAPONSMITHING = 289,
    SCORPID = 309,
    BEAST_BAT = 310,
    TITAN = 311,
    TASKMASTER_FIZZULE = 329,
    RAVENHOLDT = 349,
    GADGETZAN = 369,
    GNOMEREGAN_BUG = 389,
    HARPY = 409,
    BURNING_BLADE = 429,
    SHADOWSILK_POACHER = 449,
    SEARING_SPIDER = 450,
    ALLIANCE = 469,
    RATCHET = 470,
    WILDHAMMER_CLAN = 471,
    GOBLIN_DARK_IRON_BAR_PATRON = 489,
    THE_LEAGUE_OF_ARATHOR = 509,
    THE_DEFILERS = 510,
    GIANT = 511,
    ARGENT_DAWN = 529,
    DARKSPEAR_TROLLS = 530,
    DRAGONFLIGHT_BRONZE = 531,
    DRAGONFLIGHT_BLUE = 532,
    LEATHERWORKING_TRIBAL = 549,
    ENGINEERING_GOBLIN = 550,
    ENGINEERING_GNOME = 551,
    BLACKSMITHING_HAMMERSMITHING = 569,
    BLACKSMITHING_AXESMITHING = 570,
    BLACKSMITHING_SWORDSMITHING = 571,
    TROLL_VILEBRANCH = 572,
    SOUTHSEA_FREEBOOTERS = 573,
    CAER_DARROW = 574,
    FURBOLG_UNCORRUPTED = 575,
    TIMBERMAW_HOLD = 576,
    EVERLOOK = 577,
    WINTERSABER_TRAINERS = 589,
    CENARION_CIRCLE = 609,
    SHATTERSPEAR_TROLLS = 629,
    RAVASAUR_TRAINERS = 630,
    MAJORDOMO_EXECUTUS = 649,
    BEAST_CARRION_BIRD = 669,
    BEAST_CAT = 670,
    BEAST_CRAB = 671,
    BEAST_CROCILISK = 672,
    BEAST_HYENA = 673,
    BEAST_OWL = 674,
    BEAST_SCORPID = 675,
    BEAST_TALLSTRIDER = 676,
    BEAST_TURTLE = 677,
    BEAST_WIND_SERPENT = 678,
    TRAINING_DUMMY = 679,
    DRAGONFLIGHT_BLACK_BAIT = 689,
    BATTLEGROUND_NEUTRAL = 709,
    FROSTWOLF_CLAN = 729,
    STORMPIKE_GUARD = 730,
    HYDRAXIAN_WATERLORDS = 749,
    SULFURON_FIRELORDS = 750,
    GIZLOCKS_DUMMY = 769,
    GIZLOCKS_CHARM = 770,
    GIZLOCK = 771,
    MORO_GAI = 789,
    SPIRIT_GUIDE_ALLIANCE = 790,
    SHEN_DRALAR = 809,
    OGRE_CAPTAIN_KROMCRUSH = 829,
    SPIRIT_GUIDE_HORDE = 849,
    JAEDENAR = 869,
    WARSONG_OUTRIDERS = 889,
    SILVERWING_SENTINELS = 890,
    ALLIANCE_FORCES = 891,
    HORDE_FORCES = 892,
    REVANTUSK_TROLLS = 893,
    DARKMOON_FAIRE = 909,
    BROOD_OF_NOZDORMU = 910,
    SILVERMOON_CITY = 911,
    MIGHT_OF_KALIMDOR = 912,
    PLAYER_BLOOD_ELF = 914,
    ARMIES_OF_C_THUN = 915,
    SILITHID_ATTACKERS = 916,
    THE_IRONFORGE_BRIGADE = 917,
    RC_ENEMIES = 918,
    RC_OBJECTS = 919,
    RED = 920,
    BLUE = 921,
    TRANQUILLIEN = 922,
    FARSTRIDERS = 923,
    DEPRECATED = 924,
    SUNSTRIDERS = 925,
    MAGISTERS_GUILD = 926,
    PLAYER_DRAENEI = 927,
    SCOURGE_INVADERS = 928,
    BLOODMAUL_CLAN = 929,
    EXODAR = 930,
    TEST_FACTION_NOT_A_REAL_FACTION = 931,
    THE_ALDOR = 932,
    THE_CONSORTIUM = 933,
    THE_SCRYERS = 934,
    THE_SHA_TAR = 935,
    SHATTRATH_CITY = 936,
    TROLL_FOREST = 937,
    THE_OMENAI = 938,
    DEPRECATED1 = 939,
    THE_SONS_OF_LOTHAR = 940,
    THE_MAG_HAR = 941,
    CENARION_EXPEDITION = 942,
    FEL_ORC = 943,
    FEL_ORC_GHOST = 944,
    SONS_OF_LOTHAR_GHOSTS = 945,
    HONOR_HOLD = 946,
    THRALLMAR = 947,
    TEST_FACTION_2 = 948,
    TEST_FACTION_1 = 949,
    TOWOW_FLAG = 950,
    TOWOW_FLAG_TRIGGER_ALLIANCE_DND = 951,
    TEST_FACTION_3 = 952,
    TEST_FACTION_4 = 953,
    TOWOW_FLAG_TRIGGER_HORDE_DND = 954,
    BROKEN = 955,
    ETHEREUM = 956,
    EARTH_ELEMENTAL = 957,
    FIGHTING_ROBOTS = 958,
    ACTOR_GOOD = 959,
    ACTOR_EVIL = 960,
    STILLPINE_FURBOLG = 961,
    CRAZED_OWLKIN = 962,
    CHESS_ALLIANCE = 963,
    CHESS_HORDE = 964,
    MONSTER_SPAR = 965,
    MONSTER_SPAR_BUDDY = 966,
    THE_VIOLET_EYE = 967,
    SUNHAWKS = 968,
    HAND_OF_ARGUS = 969,
    SPOREGGAR = 970,
    FUNGAL_GIANT = 971,
    SPORE_BAT = 972,
    MONSTER_PREDATOR = 973,
    MONSTER_PREY = 974,
    VOID_ANOMALY = 975,
    HYJAL_DEFENDERS = 976,
    HYJAL_INVADERS = 977,
    KURENAI = 978,
    EARTHEN_RING = 979,
    THE_BURNING_CRUSADE = 980,
    ARAKKOA = 981,
    ZANGARMARSH_BANNER_ALLIANCE = 982,
    ZANGARMARSH_BANNER_HORDE = 983,
    ZANGARMARSH_BANNER_NEUTRAL = 984,
    CAVERNS_OF_TIME_THRALL = 985,
    CAVERNS_OF_TIME_DURNHOLDE = 986,
    CAVERNS_OF_TIME_SOUTHSHORE_GUARDS = 987,
    SHADOW_COUNCIL_COVERT = 988,
    KEEPERS_OF_TIME = 989,
    THE_SCALE_OF_THE_SANDS = 990,
    DARK_PORTAL_DEFENDER_ALLIANCE = 991,
    DARK_PORTAL_DEFENDER_HORDE = 992,
    DARK_PORTAL_ATTACKER_LEGION = 993,
    INCITER_TRIGGER = 994,
    INCITER_TRIGGER_2 = 995,
    INCITER_TRIGGER_3 = 996,
    INCITER_TRIGGER_4 = 997,
    INCITER_TRIGGER_5 = 998,
    MANA_CREATURE = 999,
    KHADGARS_SERVANT = 1000,
    BLADESPIRE_CLAN = 1001,
    ETHEREUM_SPARBUDDY = 1002,
    PROTECTORATE = 1003,
    ARCANE_ANNIHILATOR_DNR = 1004,
    FRIENDLY_HIDDEN = 1005,
    KIRIN_VAR_DATHRIC = 1006,
    KIRIN_VAR_BELMARA = 1007,
    KIRIN_VAR_LUMINRATH = 1008,
    KIRIN_VAR_COHLIEN = 1009,
    SERVANT_OF_ILLIDAN = 1010,
    LOWER_CITY = 1011,
    ASHTONGUE_DEATHSWORN = 1012,
    SPIRITS_OF_SHADOWMOON_1 = 1013,
    SPIRITS_OF_SHADOWMOON_2 = 1014,
    NETHERWING = 1015,
    WYRMCULT = 1016,
    TREANT = 1017,
    LEOTHERAS_DEMON_I = 1018,
    LEOTHERAS_DEMON_II = 1019,
    LEOTHERAS_DEMON_III = 1020,
    LEOTHERAS_DEMON_IV = 1021,
    LEOTHERAS_DEMON_V = 1022,
    AZALOTH = 1023,
    ROCK_FLAYER = 1024,
    FLAYER_HUNTER = 1025,
    SHADOWMOON_SHADE = 1026,
    LEGION_COMMUNICATOR = 1027,
    RAVENSWOOD_ANCIENTS = 1028,
    CHESS_FRIENDLY_TO_ALL_CHESS = 1029,
    BLACK_TEMPLE_GATES_ILLIDARI = 1030,
    SHA_TARI_SKYGUARD = 1031,
    AREA_52 = 1032,
    MAIEV = 1033,
    SKETTIS_SHADOWY_ARAKKOA = 1034,
    SKETTIS_ARAKKOA = 1035,
    DRAGONMAW_ENEMY = 1036,
    ALLIANCE_VANGUARD = 1037,
    OGRI_LA = 1038,
    RAVAGER = 1039,
    REUSE = 1040,
    FRENZY = 1041,
    SKYGUARD_ENEMY = 1042,
    SKUNK_PETUNIA = 1043,
    THERAMORE_DESERTER = 1044,
    VRYKUL = 1045,
    NORTHSEA_PIRATES = 1046,
    TUSKARR = 1047,
    UNUSED = 1048,
    TROLL_AMANI = 1049,
    VALIANCE_EXPEDITION = 1050,
    UNUSED1 = 1051,
    HORDE_EXPEDITION = 1052,
    WESTGUARD = 1053,
    SPOTTED_GRYPHON = 1054,
    TAMED_PLAGUEHOUND = 1055,
    VRYKUL_ANCIENT_SPIRIT_1 = 1056,
    VRYKUL_ANCIENT_SIPRIT_2 = 1057,
    VRYKUL_ANCIENT_SIPRIT_3 = 1058,
    CTF_FLAG_ALLIANCE = 1059,
    TEST = 1060,
    VRYKUL1 = 1061,
    VRYKUL_GLADIATOR = 1062,
    VALGARDE_COMBATANT = 1063,
    THE_TAUNKA = 1064,
    MONSTER_ZONE_FORCE_REACTION_1 = 1065,
    MONSTER_ZONE_FORCE_REACTION_2 = 1066,
    THE_HAND_OF_VENGEANCE = 1067,
    EXPLORERS__LEAGUE = 1068,
    RAM_RACING_POWERUP_DND = 1069,
    RAM_RACING_TRAP_DND = 1070,
    CRAIGS_SQUIRRELS = 1071,
    REUSE1 = 1072,
    THE_KALU_AK = 1073,
    HOLIDAY_WATER_BARREL = 1074,
    HOLIDAY_GENERIC = 1075,
    IRON_DWARVES = 1076,
    SHATTERED_SUN_OFFENSIVE = 1077,
    FIGHTING_VANITY_PET = 1078,
    MURLOC_WINTERFIN = 1079,
    FRIENDLY_FORCE_REACTION = 1080,
    OBJECT_FORCE_REACTION = 1081,
    REUSE2 = 1082,
    REUSE4 = 1083,
    VRYKUL_SEA = 1084,
    WARSONG_OFFENSIVE = 1085,
    POACHER = 1086,
    HOLIDAY_MONSTER = 1087,
    FURBOLG_REDFANG = 1088,
    FURBOLG_FROSTPAW = 1089,
    KIRIN_TOR = 1090,
    THE_WYRMREST_ACCORD = 1091,
    AZJOL_NERUB = 1092,
    REUSE8 = 1093,
    THE_SILVER_COVENANT = 1094,
    GRIZZLY_HILLS_TRAPPER = 1095,
    REUSE16 = 1096,
    WRATH_OF_THE_LICH_KING = 1097,
    KNIGHTS_OF_THE_EBON_BLADE = 1098,
    WRATHGATE_SCOURGE = 1099,
    WRATHGATE_ALLIANCE = 1100,
    WRATHGATE_HORDE = 1101,
    CTF_FLAG_HORDE = 1102,
    CTF_FLAG_NEUTRAL = 1103,
    FRENZYHEART_TRIBE = 1104,
    THE_ORACLES = 1105,
    ARGENT_CRUSADE = 1106,
    TROLL_DRAKKARI = 1107,
    COT_ARTHAS = 1108,
    COT_STRATHOLME_CITIZEN = 1109,
    COT_SCOURGE = 1110,
    FREYA = 1111,
    MOUNT_TAXI_ALLIANCE = 1112,
    MOUNT_TAXI_HORDE = 1113,
    MOUNT_TAXI_NEUTRAL = 1114,
    ELEMENTAL_WATER = 1115,
    ELEMENTAL_AIR = 1116,
    SHOLAZAR_BASIN = 1117,
    CLASSIC = 1118,
    THE_SONS_OF_HODIR = 1119,
    IRON_GIANTS = 1120,
    FROST_VRYKUL = 1121,
    EARTHEN = 1122,
    MONSTER_REFEREE = 1123,
    THE_SUNREAVERS = 1124,
    HYLDSMEET = 1125,
    THE_FROSTBORN = 1126,
    ORGRIMMAR_ALEX_TEST = 1127,
    TRANQUILLIEN_CONVERSION = 1136,
    WINTERSABER_CONVERSION = 1137,
    HATES_EVERYTHING = 1145,
    SILVER_COVENANT_CONVERSION = 1154,
    SUNREAVERS_CONVERSION = 1155,
    THE_ASHEN_VERDICT = 1156,
    CTF_FLAG_ALLIANCE_2 = 1159,
    CTF_FLAG_HORDE_2 = 1160,
};

enum class FarSightOperation : uint8_t {
    REMOVE = 0,
    ADD = 1,
};

enum class FriendResult : uint8_t {
    DB_ERROR = 0,
    LIST_FULL = 1,
    ONLINE = 2,
    OFFLINE = 3,
    NOT_FOUND = 4,
    REMOVED = 5,
    ADDED_ONLINE = 6,
    ADDED_OFFLINE = 7,
    ALREADY = 8,
    SELF = 9,
    ENEMY = 10,
    IGNORE_FULL = 11,
    IGNORE_SELF = 12,
    IGNORE_NOT_FOUND = 13,
    IGNORE_ALREADY = 14,
    IGNORE_ADDED = 15,
    IGNORE_REMOVED = 16,
};

enum class FriendStatus : uint8_t {
    OFFLINE = 0,
    ONLINE = 1,
    AFK = 2,
    UNKNOWN3 = 3,
    DND = 4,
};

enum class Gender : uint8_t {
    MALE = 0,
    FEMALE = 1,
    NONE = 2,
};

enum class GmTicketEscalationStatus : uint8_t {
    GMTICKET_ASSIGNEDTOGM_STATUS_NOT_ASSIGNED = 0,
    GMTICKET_ASSIGNEDTOGM_STATUS_ASSIGNED = 1,
    GMTICKET_ASSIGNEDTOGM_STATUS_ESCALATED = 2,
};

enum class GmTicketQueueStatus : uint32_t {
    ENABLED = 1,
    DISABLED = 0,
};

enum class GmTicketResponse : uint32_t {
    NOT_EXIST = 0,
    ALREADY_EXIST = 1,
    CREATE_SUCCESS = 2,
    CREATE_ERROR = 3,
    UPDATE_SUCCESS = 4,
    UPDATE_ERROR = 5,
    TICKET_DELETED = 9,
};

enum class GmTicketStatus : uint32_t {
    DB_ERROR = 0,
    HAS_TEXT = 6,
    DEFAULT = 10,
};

enum class GmTicketStatusResponse : uint32_t {
    UPDATED = 1,
    CLOSED = 2,
    SURVEY = 3,
};

enum class GroupLootSetting : uint8_t {
    FREE_FOR_ALL = 0,
    ROUND_ROBIN = 1,
    MASTER_LOOT = 2,
    GROUP_LOOT = 3,
    NEED_BEFORE_GREED = 4,
};

enum class GuildBankContentResult : uint8_t {
    NOT_PRESENT = 0,
    PRESENT = 1,
};

enum class GuildBankTabResult : uint8_t {
    NOT_PRESENT = 0,
    PRESENT = 1,
};

enum class GuildCommand : uint8_t {
    CREATE = 0,
    INVITE = 1,
    QUIT = 2,
    PROMOTE = 3,
    FOUNDER = 12,
    MEMBER = 13,
    PUBLIC_NOTE_CHANGED = 19,
    OFFICER_NOTE_CHANGED = 20,
};

enum class GuildCommandResult : uint8_t {
    PLAYER_NO_MORE_IN_GUILD = 0,
    GUILD_INTERNAL = 1,
    ALREADY_IN_GUILD = 2,
    ALREADY_IN_GUILD_S = 3,
    INVITED_TO_GUILD = 4,
    ALREADY_INVITED_TO_GUILD_S = 5,
    GUILD_NAME_INVALID = 6,
    GUILD_NAME_EXISTS_S = 7,
    GUILD_LEADER_LEAVE_OR_PERMISSIONS = 8,
    GUILD_PLAYER_NOT_IN_GUILD = 9,
    GUILD_PLAYER_NOT_IN_GUILD_S = 10,
    GUILD_PLAYER_NOT_FOUND_S = 11,
    GUILD_NOT_ALLIED = 12,
    GUILD_RANK_TOO_HIGH_S = 13,
    GUILD_RANK_TOO_LOW_S = 14,
    GUILD_RANKS_LOCKED = 17,
    GUILD_RANK_IN_USE = 18,
    GUILD_IGNORING_YOU_S = 19,
    GUILD_UNK1 = 20,
    GUILD_WITHDRAW_LIMIT = 25,
    GUILD_NOT_ENOUGH_MONEY = 26,
    GUILD_BANK_FULL = 28,
    GUILD_ITEM_NOT_FOUND = 29,
};

enum class GuildEmblemResult : uint32_t {
    SUCCESS = 0,
    INVALID_TABARD_COLORS = 1,
    NO_GUILD = 2,
    NOT_GUILD_MASTER = 3,
    NOT_ENOUGH_MONEY = 4,
    INVALID_VENDOR = 5,
};

enum class GuildEvent : uint8_t {
    PROMOTION = 0,
    DEMOTION = 1,
    MOTD = 2,
    JOINED = 3,
    LEFT = 4,
    REMOVED = 5,
    LEADER_IS = 6,
    LEADER_CHANGED = 7,
    DISBANDED = 8,
    TABARD_CHANGED = 9,
    UNK1 = 10,
    UNK2 = 11,
    SIGNED_ON = 12,
    SIGNED_OFF = 13,
    GUILD_BANK_BAG_SLOTS_CHANGED = 14,
    BANKTAB_PURCHASED = 15,
    UNK5 = 16,
    GUILD_BANK_UPDATE_MONEY = 17,
    GUILD_BANK_MONEY_WITHDRAWN = 18,
    GUILD_BANK_TEXT_CHANGED = 19,
};

enum class GuildMemberStatus : uint8_t {
    OFFLINE = 0,
    ONLINE = 1,
};

enum class InstanceResetFailedReason : uint8_t {
    GENERAL = 0,
    OFFLINE = 1,
    ZONING = 2,
    SILENTLY = 3,
};

enum class InventoryResult : uint8_t {
    OK = 0,
    CANT_EQUIP_LEVEL_I = 1,
    CANT_EQUIP_SKILL = 2,
    ITEM_DOESNT_GO_TO_SLOT = 3,
    BAG_FULL = 4,
    NONEMPTY_BAG_OVER_OTHER_BAG = 5,
    CANT_TRADE_EQUIP_BAGS = 6,
    ONLY_AMMO_CAN_GO_HERE = 7,
    NO_REQUIRED_PROFICIENCY = 8,
    NO_EQUIPMENT_SLOT_AVAILABLE = 9,
    YOU_CAN_NEVER_USE_THAT_ITEM = 10,
    YOU_CAN_NEVER_USE_THAT_ITEM2 = 11,
    NO_EQUIPMENT_SLOT_AVAILABLE2 = 12,
    CANT_EQUIP_WITH_TWOHANDED = 13,
    CANT_DUAL_WIELD = 14,
    ITEM_DOESNT_GO_INTO_BAG = 15,
    ITEM_DOESNT_GO_INTO_BAG2 = 16,
    CANT_CARRY_MORE_OF_THIS = 17,
    NO_EQUIPMENT_SLOT_AVAILABLE3 = 18,
    ITEM_CANT_STACK = 19,
    ITEM_CANT_BE_EQUIPPED = 20,
    ITEMS_CANT_BE_SWAPPED = 21,
    SLOT_IS_EMPTY = 22,
    ITEM_NOT_FOUND = 23,
    CANT_DROP_SOULBOUND = 24,
    OUT_OF_RANGE = 25,
    TRIED_TO_SPLIT_MORE_THAN_COUNT = 26,
    COULDNT_SPLIT_ITEMS = 27,
    MISSING_REAGENT = 28,
    NOT_ENOUGH_MONEY = 29,
    NOT_A_BAG = 30,
    CAN_ONLY_DO_WITH_EMPTY_BAGS = 31,
    DONT_OWN_THAT_ITEM = 32,
    CAN_EQUIP_ONLY1_QUIVER = 33,
    MUST_PURCHASE_THAT_BAG_SLOT = 34,
    TOO_FAR_AWAY_FROM_BANK = 35,
    ITEM_LOCKED = 36,
    YOU_ARE_STUNNED = 37,
    YOU_ARE_DEAD = 38,
    CANT_DO_RIGHT_NOW = 39,
    INT_BAG_ERROR = 40,
    CAN_EQUIP_ONLY1_BOLT = 41,
    CAN_EQUIP_ONLY1_AMMOPOUCH = 42,
    STACKABLE_CANT_BE_WRAPPED = 43,
    EQUIPPED_CANT_BE_WRAPPED = 44,
    WRAPPED_CANT_BE_WRAPPED = 45,
    BOUND_CANT_BE_WRAPPED = 46,
    UNIQUE_CANT_BE_WRAPPED = 47,
    BAGS_CANT_BE_WRAPPED = 48,
    ALREADY_LOOTED = 49,
    INVENTORY_FULL = 50,
    BANK_FULL = 51,
    ITEM_IS_CURRENTLY_SOLD_OUT = 52,
    BAG_FULL3 = 53,
    ITEM_NOT_FOUND2 = 54,
    ITEM_CANT_STACK2 = 55,
    BAG_FULL4 = 56,
    ITEM_SOLD_OUT = 57,
    OBJECT_IS_BUSY = 58,
    NONE = 59,
    NOT_IN_COMBAT = 60,
    NOT_WHILE_DISARMED = 61,
    BAG_FULL6 = 62,
    CANT_EQUIP_RANK = 63,
    CANT_EQUIP_REPUTATION = 64,
    TOO_MANY_SPECIAL_BAGS = 65,
    LOOT_CANT_LOOT_THAT_NOW = 66,
    ITEM_UNIQUE_EQUIPABLE = 67,
    VENDOR_MISSING_TURNINS = 68,
    NOT_ENOUGH_HONOR_POINTS = 69,
    NOT_ENOUGH_ARENA_POINTS = 70,
    ITEM_MAX_COUNT_SOCKETED = 71,
    MAIL_BOUND_ITEM = 72,
    NO_SPLIT_WHILE_PROSPECTING = 73,
    ITEM_MAX_COUNT_EQUIPPED_SOCKETED = 75,
    ITEM_UNIQUE_EQUIPPABLE_SOCKETED = 76,
    TOO_MUCH_GOLD = 77,
    NOT_DURING_ARENA_MATCH = 78,
    CANNOT_TRADE_THAT = 79,
    PERSONAL_ARENA_RATING_TOO_LOW = 80,
    EVENT_AUTOEQUIP_BIND_CONFIRM = 81,
    ARTEFACTS_ONLY_FOR_OWN_CHARACTERS = 82,
    ITEM_MAX_LIMIT_CATEGORY_COUNT_EXCEEDED = 84,
    ITEM_MAX_LIMIT_CATEGORY_SOCKETED_EXCEEDED = 85,
    SCALING_STAT_ITEM_LEVEL_EXCEEDED = 86,
    PURCHASE_LEVEL_TOO_LOW = 87,
    CANT_EQUIP_NEED_TALENT = 88,
    ITEM_MAX_LIMIT_CATEGORY_EQUIPPED_EXCEEDED = 89,
};

enum class InventoryType : uint8_t {
    NON_EQUIP = 0,
    HEAD = 1,
    NECK = 2,
    SHOULDERS = 3,
    BODY = 4,
    CHEST = 5,
    WAIST = 6,
    LEGS = 7,
    FEET = 8,
    WRISTS = 9,
    HANDS = 10,
    FINGER = 11,
    TRINKET = 12,
    WEAPON = 13,
    SHIELD = 14,
    RANGED = 15,
    CLOAK = 16,
    TWO_HANDED_WEAPON = 17,
    BAG = 18,
    TABARD = 19,
    ROBE = 20,
    WEAPON_MAIN_HAND = 21,
    WEAPON_OFF_HAND = 22,
    HOLDABLE = 23,
    AMMO = 24,
    THROWN = 25,
    RANGED_RIGHT = 26,
    QUIVER = 27,
    RELIC = 28,
};

enum class ItemClass : uint8_t {
    CONSUMABLE = 0,
    CONTAINER = 1,
    WEAPON = 2,
    GEM = 3,
    ARMOR = 4,
    REAGENT = 5,
    PROJECTILE = 6,
    TRADE_GOODS = 7,
    GENERIC = 8,
    RECIPE = 9,
    MONEY = 10,
    QUIVER = 11,
    QUEST = 12,
    KEY = 13,
    PERMANENT = 14,
    MISC = 15,
    GLYPH = 16,
};

enum class ItemClassAndSubClass : uint64_t {
    CONSUMABLE = 0,
    FOOD_AND_DRINK = 21474836480,
    POTION = 4294967296,
    ELIXIR = 8589934592,
    FLASK = 12884901888,
    BANDAGE = 30064771072,
    ITEM_ENHANCEMENT = 25769803776,
    SCROLL = 17179869184,
    OTHER_CONSUMABLE = 34359738368,
    BAG = 1,
    SOUL_BAG = 4294967297,
    HERB_BAG = 8589934593,
    ENCHANTING_BAG = 12884901889,
    ENGINEERING_BAG = 17179869185,
    GEM_BAG = 21474836481,
    MINING_BAG = 25769803777,
    LEATHERWORKING_BAG = 30064771073,
    INSCRIPTION_BAG = 34359738369,
    ONE_HANDED_AXE = 2,
    TWO_HANDED_AXE = 4294967298,
    BOW = 8589934594,
    GUN = 12884901890,
    ONE_HANDED_MACE = 17179869186,
    TWO_HANDED_MACE = 21474836482,
    POLEARM = 25769803778,
    ONE_HANDED_SWORD = 30064771074,
    TWO_HANDED_SWORD = 34359738370,
    OBSOLETE_WEAPON = 38654705666,
    STAFF = 42949672962,
    ONE_HANDED_EXOTIC = 47244640258,
    TWO_HANDED_EXOTIC = 51539607554,
    FIST_WEAPON = 55834574850,
    MISCELLANEOUS_WEAPON = 60129542146,
    DAGGER = 64424509442,
    THROWN = 68719476738,
    SPEAR = 73014444034,
    CROSSBOW = 77309411330,
    WAND = 81604378626,
    FISHING_POLE = 85899345922,
    GEM_RED = 3,
    GEM_BLUE = 4294967299,
    GEM_YELLOW = 8589934595,
    GEM_PURPLE = 12884901891,
    GEM_GREEN = 17179869187,
    GEM_ORANGE = 21474836483,
    GEM_META = 25769803779,
    GEM_SIMPLE = 30064771075,
    GEM_PRISMATIC = 34359738371,
    MISCELLANEOUS_ARMOR = 4,
    CLOTH_ARMOR = 4294967300,
    LEATHER_ARMOR = 8589934596,
    MAIL_ARMOR = 12884901892,
    PLATE_ARMOR = 17179869188,
    BUCKLER_OBSOLETE = 21474836484,
    SHIELD = 25769803780,
    LIBRAM = 30064771076,
    IDOL = 34359738372,
    TOTEM = 38654705668,
    SIGIL = 42949672964,
    REAGENT = 5,
    WAND_OBSOLETE = 6,
    BOLT_OBSOLETE = 4294967302,
    ARROW = 8589934598,
    BULLET = 12884901894,
    THROWN_OBSOLETE = 17179869190,
    TRADE_GOOD = 7,
    ELEMENTAL_TRADE_GOOD = 42949672967,
    CLOTH_TRADE_GOOD = 21474836487,
    LEATHER_TRADE_GOOD = 25769803783,
    METAL_AND_STONE_TRADE_GOOD = 30064771079,
    MEAT_TRADE_GOOD = 34359738375,
    HERB_TRADE_GOOD = 38654705671,
    ENCHANTING_TRADE_GOOD = 51539607559,
    JEWELCRAFTING_TRADE_GOOD = 17179869191,
    PART_TRADE_GOOD = 4294967303,
    DEVICE_TRADE_GOOD = 12884901895,
    EXPLOSIVE_TRADE_GOOD = 8589934599,
    MATERIAL_TRADE_GOOD = 55834574855,
    OTHER_TRADE_GOOD = 47244640263,
    ARMOR_ENCHANTMENT_TRADE_GOOD = 60129542151,
    WEAPON_ENCHANTMENT_TRADE_GOOD = 64424509447,
    GENERIC_OBSOLETE = 8,
    BOOK = 9,
    LEATHERWORKING_RECIPE = 4294967305,
    TAILORING_RECIPE = 8589934601,
    ENGINEERING_RECIPE = 12884901897,
    BLACKSMITHING_RECIPE = 17179869193,
    COOKING_RECIPE = 21474836489,
    ALCHEMY_RECIPE = 25769803785,
    FIRST_AID_RECIPE = 30064771081,
    ENCHANTING_RECIPE = 34359738377,
    FISHING_RECIPE = 38654705673,
    JEWELCRAFTING_RECIPE = 42949672969,
    INSCRIPTION_RECIPE = 47244640265,
    MONEY_OBSOLETE = 10,
    QUIVER_OBSOLETE = 11,
    QUIVER_OBSOLETE1 = 4294967307,
    QUIVER = 8589934603,
    AMMO_POUCH = 12884901899,
    QUEST = 12,
    KEY = 13,
    LOCKPICK = 4294967309,
    PERMANENT_OBSOLETE = 14,
    MISCELLANEOUS_JUNK = 15,
    MISCELLANEOUS_REAGENT = 4294967311,
    MISCELLANEOUS_PET = 8589934607,
    MISCELLANEOUS_HOLIDAY = 12884901903,
    MISCELLANEOUS_OTHER = 17179869199,
    MISCELLANEOUS_MOUNT = 21474836495,
    WARRIOR_GLYPH = 4294967312,
    PALADIN_GLYPH = 8589934608,
    HUNTER_GLYPH = 12884901904,
    ROGUE_GLYPH = 17179869200,
    PRIEST_GLYPH = 21474836496,
    DEATH_KNIGHT_GLYPH = 25769803792,
    SHAMAN_GLYPH = 30064771088,
    MAGE_GLYPH = 34359738384,
    WARLOCK_GLYPH = 38654705680,
    DRUID_GLYPH = 47244640272,
};

enum class ItemQuality : uint8_t {
    POOR = 0,
    NORMAL = 1,
    UNCOMMON = 2,
    RARE = 3,
    EPIC = 4,
    LEGENDARY = 5,
    ARTIFACT = 6,
    HEIRLOOM = 7,
};

enum class ItemRefundResult : uint8_t {
    SUCCESS = 0,
    FAILURE = 10,
};

enum class ItemSet : uint16_t {
    NONE = 0,
    THE_GLADIATOR = 1,
    DAL_RENDS_ARMS = 41,
    SPIDERS_KISS = 65,
    THE_POSTMASTER = 81,
    CADAVEROUS_GARB = 121,
    NECROPILE_RAIMENT = 122,
    BLOODMAIL_REGALIA = 123,
    DEATHBONE_GUARDIAN = 124,
    VOLCANIC_ARMOR = 141,
    STORMSHROUD_ARMOR = 142,
    DEVILSAUR_ARMOR = 143,
    IRONFEATHER_ARMOR = 144,
    DEFIAS_LEATHER = 161,
    EMBRACE_OF_THE_VIPER = 162,
    CHAIN_OF_THE_SCARLET_CRUSADE = 163,
    MAGISTERS_REGALIA = 181,
    VESTMENTS_OF_THE_DEVOUT = 182,
    DREADMIST_RAIMENT = 183,
    SHADOWCRAFT_ARMOR = 184,
    WILDHEART_RAIMENT = 185,
    BEASTSTALKER_ARMOR = 186,
    THE_ELEMENTS = 187,
    LIGHTFORGE_ARMOR = 188,
    BATTLEGEAR_OF_VALOR = 189,
    ARCANIST_REGALIA = 201,
    VESTMENTS_OF_PROPHECY = 202,
    FELHEART_RAIMENT = 203,
    NIGHTSLAYER_ARMOR = 204,
    CENARION_RAIMENT = 205,
    GIANTSTALKER_ARMOR = 206,
    THE_EARTHFURY = 207,
    LAWBRINGER_ARMOR = 208,
    BATTLEGEAR_OF_MIGHT = 209,
    NETHERWIND_REGALIA = 210,
    VESTMENTS_OF_TRANSCENDENCE = 211,
    NEMESIS_RAIMENT = 212,
    BLOODFANG_ARMOR = 213,
    STORMRAGE_RAIMENT = 214,
    DRAGONSTALKER_ARMOR = 215,
    THE_TEN_STORMS = 216,
    JUDGEMENT_ARMOR = 217,
    BATTLEGEAR_OF_WRATH = 218,
    GARB_OF_THERO_SHAN = 221,
    SHARD_OF_THE_GODS = 241,
    SPIRIT_OF_ESKHANDAR = 261,
    CHAMPIONS_BATTLEGEAR = 281,
    LIEUTENANT_COMMANDERS_BATTLEGEAR = 282,
    CHAMPIONS_EARTHSHAKER = 301,
    IMPERIAL_PLATE = 321,
    CHAMPIONS_REGALIA = 341,
    CHAMPIONS_RAIMENT = 342,
    LIEUTENANT_COMMANDERS_REGALIA = 343,
    LIEUTENANT_COMMANDERS_RAIMENT = 344,
    CHAMPIONS_THREADS = 345,
    LIEUTENANT_COMMANDERS_THREADS = 346,
    CHAMPIONS_VESTMENTS = 347,
    LIEUTENANT_COMMANDERS_VESTMENTS = 348,
    CHAMPIONS_PURSUIT = 361,
    LIEUTENANT_COMMANDERS_PURSUIT = 362,
    LIEUTENANT_COMMANDERS_SANCTUARY = 381,
    CHAMPIONS_SANCTUARY = 382,
    WARLORDS_BATTLEGEAR = 383,
    FIELD_MARSHALS_BATTLEGEAR = 384,
    WARLORDS_EARTHSHAKER = 386,
    WARLORDS_REGALIA = 387,
    FIELD_MARSHALS_REGALIA = 388,
    FIELD_MARSHALS_RAIMENT = 389,
    WARLORDS_RAIMENT = 390,
    WARLORDS_THREADS = 391,
    FIELD_MARSHALS_THREADS = 392,
    WARLORDS_VESTMENTS = 393,
    FIELD_MARSHALS_VESTMENTS = 394,
    FIELD_MARSHALS_PURSUIT = 395,
    WARLORDS_PURSUIT = 396,
    FIELD_MARSHALS_SANCTUARY = 397,
    WARLORDS_SANCTUARY = 398,
    LIEUTENANT_COMMANDERS_AEGIS = 401,
    FIELD_MARSHALS_AEGIS = 402,
    BLOODVINE_GARB = 421,
    PRIMAL_BATSKIN = 441,
    BLOOD_TIGER_HARNESS = 442,
    BLOODSOUL_EMBRACE = 443,
    THE_DARKSOUL = 444,
    THE_TWIN_BLADES_OF_HAKKARI = 461,
    ZANZILS_CONCENTRATION = 462,
    PRIMAL_BLESSING = 463,
    OVERLORDS_RESOLUTION = 464,
    PRAYER_OF_THE_PRIMAL = 465,
    MAJOR_MOJO_INFUSION = 466,
    THE_HIGHLANDERS_RESOLUTION = 467,
    THE_HIGHLANDERS_RESOLVE = 468,
    THE_HIGHLANDERS_DETERMINATION = 469,
    THE_HIGHLANDERS_FORTITUDE = 470,
    THE_HIGHLANDERS_PURPOSE = 471,
    THE_HIGHLANDERS_WILL = 472,
    THE_HIGHLANDERS_INTENT = 473,
    VINDICATORS_BATTLEGEAR = 474,
    FREETHINKERS_ARMOR = 475,
    AUGURS_REGALIA = 476,
    PREDATORS_ARMOR = 477,
    MADCAPS_OUTFIT = 478,
    HARUSPEXS_GARB = 479,
    CONFESSORS_RAIMENT = 480,
    DEMONIACS_THREADS = 481,
    ILLUSIONISTS_ATTIRE = 482,
    THE_DEFILERS_DETERMINATION = 483,
    THE_DEFILERS_FORTITUDE = 484,
    THE_DEFILERS_INTENT = 485,
    THE_DEFILERS_PURPOSE = 486,
    THE_DEFILERS_RESOLUTION = 487,
    THE_DEFILERS_WILL = 488,
    BLACK_DRAGON_MAIL = 489,
    GREEN_DRAGON_MAIL = 490,
    BLUE_DRAGON_MAIL = 491,
    TWILIGHT_TRAPPINGS = 492,
    GENESIS_RAIMENT = 493,
    SYMBOLS_OF_UNENDING_LIFE = 494,
    BATTLEGEAR_OF_UNYIELDING_STRENGTH = 495,
    CONQUERORS_BATTLEGEAR = 496,
    DEATHDEALERS_EMBRACE = 497,
    EMBLEMS_OF_VEILED_SHADOWS = 498,
    DOOMCALLERS_ATTIRE = 499,
    IMPLEMENTS_OF_UNSPOKEN_NAMES = 500,
    STORMCALLERS_GARB = 501,
    GIFT_OF_THE_GATHERING_STORM = 502,
    ENIGMA_VESTMENTS = 503,
    TRAPPINGS_OF_VAULTED_SECRETS = 504,
    AVENGERS_BATTLEGEAR = 505,
    BATTLEGEAR_OF_ETERNAL_JUSTICE = 506,
    GARMENTS_OF_THE_ORACLE = 507,
    FINERY_OF_INFINITE_WISDOM = 508,
    STRIKERS_GARB = 509,
    TRAPPINGS_OF_THE_UNSEEN_PATH = 510,
    BATTLEGEAR_OF_HEROISM = 511,
    DARKMANTLE_ARMOR = 512,
    FERALHEART_RAIMENT = 513,
    VESTMENTS_OF_THE_VIRTUOUS = 514,
    BEASTMASTER_ARMOR = 515,
    SOULFORGE_ARMOR = 516,
    SORCERERS_REGALIA = 517,
    DEATHMIST_RAIMENT = 518,
    THE_FIVE_THUNDERS = 519,
    IRONWEAVE_BATTLESUIT = 520,
    DREAMWALKER_RAIMENT = 521,
    CHAMPIONS_GUARD = 522,
    DREADNAUGHTS_BATTLEGEAR = 523,
    BONESCYTHE_ARMOR = 524,
    VESTMENTS_OF_FAITH = 525,
    FROSTFIRE_REGALIA = 526,
    THE_EARTHSHATTERER = 527,
    REDEMPTION_ARMOR = 528,
    PLAGUEHEART_RAIMENT = 529,
    CRYPTSTALKER_ARMOR = 530,
    BATTLEGEAR_OF_UNDEAD_SLAYING = 533,
    UNDEAD_SLAYERS_ARMOR = 534,
    GARB_OF_THE_UNDEAD_SLAYER = 535,
    REGALIA_OF_UNDEAD_CLEANSING = 536,
    CHAMPIONS_BATTLEARMOR = 537,
    CHAMPIONS_STORMCALLER = 538,
    CHAMPIONS_REFUGE = 539,
    CHAMPIONS_INVESTITURE = 540,
    CHAMPIONS_DREADGEAR = 541,
    CHAMPIONS_ARCANUM = 542,
    CHAMPIONS_PURSUANCE = 543,
    LIEUTENANT_COMMANDERS_REDOUBT = 544,
    LIEUTENANT_COMMANDERS_BATTLEARMOR = 545,
    LIEUTENANT_COMMANDERS_ARCANUM = 546,
    LIEUTENANT_COMMANDERS_DREADGEAR = 547,
    LIEUTENANT_COMMANDERS_GUARD = 548,
    LIEUTENANT_COMMANDERS_INVESTITURE = 549,
    LIEUTENANT_COMMANDERS_PURSUANCE = 550,
    LIEUTENANT_COMMANDERS_REFUGE = 551,
    WRATH_OF_SPELLFIRE = 552,
    SHADOWS_EMBRACE = 553,
    PRIMAL_MOONCLOTH = 554,
    NETHERWEAVE_VESTMENTS = 555,
    IMBUED_NETHERWEAVE = 556,
    SOULCLOTH_EMBRACE = 557,
    ARCANOWEAVE_VESTMENTS = 558,
    SPELLSTRIKE_INFUSION = 559,
    FEL_IRON_PLATE = 560,
    FEL_IRON_CHAIN = 561,
    ADAMANTITE_BATTLEGEAR = 562,
    ENCHANTED_ADAMANTITE_ARMOR = 563,
    FLAME_GUARD = 564,
    KHORIUM_WARD = 565,
    BURNING_RAGE = 566,
    GLADIATORS_BATTLEGEAR = 567,
    GLADIATORS_DREADGEAR = 568,
    FAITH_IN_FELSTEEL = 569,
    THE_UNYIELDING = 570,
    WHITEMEND_WISDOM = 571,
    BATTLECAST_GARB = 572,
    FEL_SKIN = 573,
    STRENGTH_OF_THE_CLEFTHOOF = 574,
    FELSTALKER_ARMOR = 575,
    FURY_OF_THE_NETHER = 576,
    GLADIATORS_VESTMENTS = 577,
    GLADIATORS_EARTHSHAKER = 578,
    GLADIATORS_REGALIA = 579,
    GLADIATORS_THUNDERFIST = 580,
    GLADIATORS_RAIMENT = 581,
    GLADIATORS_AEGIS = 582,
    GLADIATORS_VINDICATION = 583,
    GLADIATORS_SANCTUARY = 584,
    GLADIATORS_WILDHIDE = 585,
    GLADIATORS_PURSUIT = 586,
    HIGH_WARLORDS_AEGIS = 587,
    HIGH_WARLORDS_BATTLEGEAR = 588,
    GRAND_MARSHALS_AEGIS = 589,
    GRAND_MARSHALS_BATTLEGEAR = 590,
    GRAND_MARSHALS_DREADGEAR = 591,
    HIGH_WARLORDS_DREADGEAR = 592,
    GRAND_MARSHALS_EARTHSHAKER = 593,
    HIGH_WARLORDS_EARTHSHAKER = 594,
    GRAND_MARSHALS_PURSUIT = 595,
    HIGH_WARLORDS_PURSUIT = 596,
    GRAND_MARSHALS_RAIMENT = 597,
    HIGH_WARLORDS_RAIMENT = 598,
    GRAND_MARSHALS_REGALIA = 599,
    HIGH_WARLORDS_REGALIA = 600,
    GRAND_MARSHALS_SANCTUARY = 601,
    HIGH_WARLORDS_SANCTUARY = 602,
    GRAND_MARSHALS_THUNDERFIST = 603,
    HIGH_WARLORDS_THUNDERFIST = 604,
    GRAND_MARSHALS_VESTMENTS = 605,
    HIGH_WARLORDS_VESTMENTS = 606,
    GRAND_MARSHALS_VINDICATION = 607,
    HIGH_WARLORDS_VINDICATION = 608,
    GRAND_MARSHALS_WILDHIDE = 609,
    HIGH_WARLORDS_WILDHIDE = 610,
    FELSCALE_ARMOR = 611,
    SCALED_DRAENIC_ARMOR = 612,
    THICK_DRAENIC_ARMOR = 613,
    WILD_DRAENISH_ARMOR = 614,
    GLADIATORS_FELSHROUD = 615,
    NETHERSCALE_ARMOR = 616,
    NETHERSTRIKE_ARMOR = 617,
    WINDHAWK_ARMOR = 618,
    PRIMAL_INTENT = 619,
    ASSASSINATION_ARMOR = 620,
    NETHERBLADE = 621,
    DEATHMANTLE = 622,
    RIGHTEOUS_ARMOR = 623,
    JUSTICAR_RAIMENT = 624,
    JUSTICAR_ARMOR = 625,
    JUSTICAR_BATTLEGEAR = 626,
    CRYSTALFORGE_RAIMENT = 627,
    CRYSTALFORGE_ARMOR = 628,
    CRYSTALFORGE_BATTLEGEAR = 629,
    TIDEFURY_RAIMENT = 630,
    CYCLONE_RAIMENT = 631,
    CYCLONE_REGALIA = 632,
    CYCLONE_HARNESS = 633,
    CATACLYSM_RAIMENT = 634,
    CATACLYSM_REGALIA = 635,
    CATACLYSM_HARNESS = 636,
    MOONGLADE_RAIMENT = 637,
    MALORNE_RAIMENT = 638,
    MALORNE_REGALIA = 639,
    MALORNE_HARNESS = 640,
    NORDRASSIL_HARNESS = 641,
    NORDRASSIL_RAIMENT = 642,
    NORDRASSIL_REGALIA = 643,
    OBLIVION_RAIMENT = 644,
    VOIDHEART_RAIMENT = 645,
    CORRUPTOR_RAIMENT = 646,
    INCANTERS_REGALIA = 647,
    ALDOR_REGALIA = 648,
    TIRISFAL_REGALIA = 649,
    BEAST_LORD_ARMOR = 650,
    DEMON_STALKER_ARMOR = 651,
    RIFT_STALKER_ARMOR = 652,
    BOLD_ARMOR = 653,
    WARBRINGER_ARMOR = 654,
    WARBRINGER_BATTLEGEAR = 655,
    DESTROYER_ARMOR = 656,
    DESTROYER_BATTLEGEAR = 657,
    MANA_ETCHED_REGALIA = 658,
    WASTEWALKER_ARMOR = 659,
    DESOLATION_BATTLEGEAR = 660,
    DOOMPLATE_BATTLEGEAR = 661,
    HALLOWED_RAIMENT = 662,
    INCARNATE_RAIMENT = 663,
    INCARNATE_REGALIA = 664,
    AVATAR_RAIMENT = 665,
    AVATAR_REGALIA = 666,
    THE_TWIN_STARS = 667,
    SLAYERS_ARMOR = 668,
    GRONNSTALKERS_ARMOR = 669,
    MALEFIC_RAIMENT = 670,
    TEMPEST_REGALIA = 671,
    ONSLAUGHT_BATTLEGEAR = 672,
    ONSLAUGHT_ARMOR = 673,
    ABSOLUTION_REGALIA = 674,
    VESTMENTS_OF_ABSOLUTION = 675,
    THUNDERHEART_HARNESS = 676,
    THUNDERHEART_REGALIA = 677,
    THUNDERHEART_RAIMENT = 678,
    LIGHTBRINGER_ARMOR = 679,
    LIGHTBRINGER_BATTLEGEAR = 680,
    LIGHTBRINGER_RAIMENT = 681,
    SKYSHATTER_HARNESS = 682,
    SKYSHATTER_RAIMENT = 683,
    SKYSHATTER_REGALIA = 684,
    GLADIATORS_REFUGE = 685,
    GLADIATORS_WARTIDE = 686,
    GLADIATORS_INVESTITURE = 687,
    GRAND_MARSHALS_REFUGE = 688,
    HIGH_WARLORDS_REFUGE = 689,
    GLADIATORS_REDEMPTION = 690,
    GRAND_MARSHALS_INVESTITURE = 691,
    HIGH_WARLORDS_INVESTITURE = 692,
    GRAND_MARSHALS_REDEMPTION = 693,
    HIGH_WARLORDS_REDEMPTION = 694,
    GRAND_MARSHALS_WARTIDE = 695,
    HIGH_WARLORDS_WARTIDE = 696,
    CHAMPIONS_REDOUBT = 697,
    WARLORDS_AEGIS = 698,
    THE_TWIN_BLADES_OF_AZZINOTH = 699,
    MERCILESS_GLADIATORS_AEGIS = 700,
    MERCILESS_GLADIATORS_BATTLEGEAR = 701,
    MERCILESS_GLADIATORS_DREADGEAR = 702,
    MERCILESS_GLADIATORS_EARTHSHAKER = 703,
    MERCILESS_GLADIATORS_FELSHROUD = 704,
    MERCILESS_GLADIATORS_INVESTITURE = 705,
    MERCILESS_GLADIATORS_PURSUIT = 706,
    MERCILESS_GLADIATORS_RAIMENT = 707,
    MERCILESS_GLADIATORS_REDEMPTION = 708,
    MERCILESS_GLADIATORS_REFUGE = 709,
    MERCILESS_GLADIATORS_REGALIA = 710,
    MERCILESS_GLADIATORS_SANCTUARY = 711,
    MERCILESS_GLADIATORS_THUNDERFIST = 712,
    MERCILESS_GLADIATORS_VESTMENTS = 713,
    MERCILESS_GLADIATORS_VINDICATION = 714,
    MERCILESS_GLADIATORS_WARTIDE = 715,
    MERCILESS_GLADIATORS_WILDHIDE = 716,
    FIELD_MARSHALS_EARTHSHAKER = 717,
    LIEUTENANT_COMMANDERS_EARTHSHAKER = 718,
    THE_FISTS_OF_FURY = 719,
    VENGEFUL_GLADIATORS_REFUGE = 720,
    VENGEFUL_GLADIATORS_SANCTUARY = 721,
    VENGEFUL_GLADIATORS_WILDHIDE = 722,
    VENGEFUL_GLADIATORS_PURSUIT = 723,
    VENGEFUL_GLADIATORS_REGALIA = 724,
    VENGEFUL_GLADIATORS_REDEMPTION = 725,
    VENGEFUL_GLADIATORS_VINDICATION = 726,
    VENGEFUL_GLADIATORS_AEGIS = 727,
    VENGEFUL_GLADIATORS_INVESTITURE = 728,
    VENGEFUL_GLADIATORS_RAIMENT = 729,
    VENGEFUL_GLADIATORS_VESTMENTS = 730,
    VENGEFUL_GLADIATORS_WARTIDE = 731,
    VENGEFUL_GLADIATORS_EARTHSHAKER = 732,
    VENGEFUL_GLADIATORS_THUNDERFIST = 733,
    VENGEFUL_GLADIATORS_DREADGEAR = 734,
    VENGEFUL_GLADIATORS_FELSHROUD = 735,
    VENGEFUL_GLADIATORS_BATTLEGEAR = 736,
    LATROS_FLURRY = 737,
    DREADWEAVE_BATTLEGEAR = 738,
    MOONCLOTH_BATTLEGEAR = 739,
    SATIN_BATTLEGEAR = 740,
    EVOKERS_SILK_BATTLEGEAR = 741,
    DRAGONHIDE_BATTLEGEAR = 742,
    WYRMHIDE_BATTLEGEAR = 743,
    KODOHIDE_BATTLEGEAR = 744,
    OPPORTUNISTS_BATTLEGEAR = 745,
    SEERS_MAIL_BATTLEGEAR = 746,
    SEERS_RINGMAIL_BATTLEGEAR = 747,
    SEERS_LINKED_BATTLEGEAR = 748,
    STALKERS_CHAIN_BATTLEGEAR = 749,
    SAVAGE_PLATE_BATTLEGEAR = 750,
    CRUSADERS_ORNAMENTED_BATTLEGEAR = 751,
    CRUSADERS_SCALED_BATTLEGEAR = 752,
    BOREAN_EMBRACE = 754,
    NERUBIAN_HIVE = 755,
    FROSTSCALE_BINDING = 756,
    ICEBORNE_EMBRACE = 757,
    RAINES_REVENGE = 759,
    GLADIATORS_DREADPLATE = 760,
    WINTER_GARB = 761,
    BREWFEST_GARB = 762,
    FROSTWOVEN_POWER = 763,
    DUSKWEAVER = 764,
    GLADIATORS_BATTLEGEAR2 = 765,
    GLADIATORS_VINDICATION2 = 766,
    GLADIATORS_REDEMPTION2 = 767,
    GLADIATORS_DESECRATION = 768,
    GLADIATORS_THUNDERFIST2 = 769,
    GLADIATORS_EARTHSHAKER2 = 770,
    GLADIATORS_WARTIDE2 = 771,
    GLADIATORS_PURSUIT2 = 772,
    GLADIATORS_REFUGE2 = 773,
    GLADIATORS_WILDHIDE2 = 774,
    GLADIATORS_SANCTUARY2 = 775,
    GLADIATORS_VESTMENTS2 = 776,
    GLADIATORS_INVESTITURE2 = 777,
    GLADIATORS_RAIMENT2 = 778,
    GLADIATORS_REGALIA2 = 779,
    GLADIATORS_FELSHROUD2 = 780,
    BLESSED_REGALIA_OF_UNDEAD_CLEANSING = 781,
    UNDEAD_SLAYERS_BLESSED_ARMOR = 782,
    BLESSED_GARB_OF_THE_UNDEAD_SLAYER = 783,
    BLESSED_BATTLEGEAR_OF_UNDEAD_SLAYING = 784,
    MIDSUMMER_REVELER = 785,
    DREADNAUGHT_PLATE = 787,
    DREADNAUGHT_BATTLEGEAR = 788,
    REDEMPTION_BATTLEGEAR = 789,
    REDEMPTION_REGALIA = 790,
    REDEMPTION_PLATE = 791,
    SCOURGEBORNE_BATTLEGEAR = 792,
    SCOURGEBORNE_PLATE = 793,
    CRYPTSTALKER_BATTLEGEAR = 794,
    EARTHSHATTER_BATTLEGEAR = 795,
    EARTHSHATTER_GARB = 796,
    EARTHSHATTER_REGALIA = 797,
    DREAMWALKER_BATTLEGEAR = 798,
    DREAMWALKER_REGALIA = 799,
    DREAMWALKER_GARB = 800,
    BONESCYTHE_BATTLEGEAR = 801,
    PLAGUEHEART_GARB = 802,
    FROSTFIRE_GARB = 803,
    REGALIA_OF_FAITH = 804,
    GARB_OF_FAITH = 805,
    SPRING_TUXEDO = 812,
    EVISCERATORS_BATTLEGEAR = 813,
    ORNATE_SARONITE_BATTLEGEAR = 814,
    OVERCASTER_BATTLEGEAR = 815,
    SAVAGE_SARONITE_BATTLEGEAR = 816,
    STORMHIDE_BATTLEGEAR = 817,
    SWIFTARROW_BATTLEGEAR = 818,
    FROSTSAVAGE_BATTLEGEAR = 819,
    AEGIS_BATTLEGEAR = 820,
    AEGIS_PLATE = 821,
    AEGIS_REGALIA = 822,
    WORLDBREAKER_BATTLEGEAR = 823,
    WORLDBREAKER_GARB = 824,
    WORLDBREAKER_REGALIA = 825,
    TERRORBLADE_BATTLEGEAR = 826,
    NIGHTSONG_BATTLEGEAR = 827,
    NIGHTSONG_GARB = 828,
    NIGHTSONG_REGALIA = 829,
    SIEGEBREAKER_BATTLEGEAR = 830,
    SIEGEBREAKER_PLATE = 831,
    SANCTIFICATION_GARB = 832,
    SANCTIFICATION_REGALIA = 833,
    DARKRUNED_BATTLEGEAR = 834,
    DARKRUNED_PLATE = 835,
    KIRIN_TOR_GARB = 836,
    DEATHBRINGER_GARB = 837,
    SCOURGESTALKER_BATTLEGEAR = 838,
    KHADGARS_REGALIA = 843,
    SUNSTRIDERS_REGALIA = 844,
    GUL_DANS_REGALIA = 845,
    KEL_THUZADS_REGALIA = 846,
    VELENS_RAIMENT = 847,
    ZABRAS_RAIMENT = 848,
    VELENS_REGALIA = 849,
    ZABRAS_REGALIA = 850,
    MALFURIONS_GARB = 851,
    RUNETOTEMS_GARB = 852,
    MALFURIONS_REGALIA = 853,
    RUNETOTEMS_REGALIA = 854,
    MALFURIONS_BATTLEGEAR = 855,
    RUNETOTEMS_BATTLEGEAR = 856,
    VANCLEEFS_BATTLEGEAR = 857,
    GARONAS_BATTLEGEAR = 858,
    WINDRUNNERS_BATTLEGEAR = 859,
    WINDRUNNERS_PURSUIT = 860,
    NOBUNDOS_GARB = 861,
    THRALLS_GARB = 862,
    THRALLS_REGALIA = 863,
    NOBUNDOS_REGALIA = 864,
    NOBUNDOS_BATTLEGEAR = 865,
    THRALLS_BATTLEGEAR = 866,
    WRYNNS_BATTLEGEAR = 867,
    HELLSCREAMS_BATTLEGEAR = 868,
    WRYNNS_PLATE = 869,
    HELLSCREAMS_PLATE = 870,
    THASSARIANS_BATTLEGEAR = 871,
    KOLTIRAS_BATTLEGEAR = 872,
    THASSARIANS_PLATE = 873,
    KOLTIRAS_PLATE = 874,
    TURALYONS_GARB = 875,
    LIADRINS_GARB = 876,
    TURALYONS_BATTLEGEAR = 877,
    LIADRINS_BATTLEGEAR = 878,
    TURALYONS_PLATE = 879,
    LIADRINS_PLATE = 880,
    PURIFIED_SHARD_OF_THE_GODS = 881,
    SHINY_SHARD_OF_THE_GODS = 882,
    BLOODMAGES_REGALIA = 883,
    DARK_COVENS_REGALIA = 884,
    CRIMSON_ACOLYTES_RAIMENT = 885,
    CRIMSON_ACOLYTES_REGALIA = 886,
    LASHERWEAVE_GARB = 887,
    LASHERWEAVE_REGALIA = 888,
    LASHERWEAVE_BATTLEGEAR = 889,
    SHADOWBLADES_BATTLEGEAR = 890,
    AHN_KAHAR_BLOOD_HUNTERS_BATTLEGEAR = 891,
    FROST_WITCHS_GARB = 892,
    FROST_WITCHS_REGALIA = 893,
    FROST_WITCHS_BATTLEGEAR = 894,
    YMIRJAR_LORDS_BATTLEGEAR = 895,
    YMIRJAR_LORDS_PLATE = 896,
    SCOURGELORDS_BATTLEGEAR = 897,
    SCOURGELORDS_PLATE = 898,
    LIGHTSWORN_GARB = 899,
    LIGHTSWORN_BATTLEGEAR = 900,
    LIGHTSWORN_PLATE = 901,
};

enum class ItemSlot : uint8_t {
    HEAD = 0,
    NECK = 1,
    SHOULDERS = 2,
    SHIRT = 3,
    CHEST = 4,
    WAIST = 5,
    LEGS = 6,
    BOOTS = 7,
    WRIST = 8,
    HANDS = 9,
    RING1 = 10,
    RING2 = 11,
    TRINKET1 = 12,
    TRINKET2 = 13,
    BACK = 14,
    MAIN_HAND = 15,
    OFF_HAND = 16,
    RANGED_OR_RELIC = 17,
    TABARD = 18,
    BAG1 = 19,
    BAG2 = 20,
    BAG3 = 21,
    BAG4 = 22,
    INVENTORY_0 = 23,
    INVENTORY_1 = 24,
    INVENTORY_2 = 25,
    INVENTORY_3 = 26,
    INVENTORY_4 = 27,
    INVENTORY_5 = 28,
    INVENTORY_6 = 29,
    INVENTORY_7 = 30,
    INVENTORY_8 = 31,
    INVENTORY_9 = 32,
    INVENTORY_10 = 33,
    INVENTORY_11 = 34,
    INVENTORY_12 = 35,
    INVENTORY_13 = 36,
    INVENTORY_14 = 37,
    INVENTORY_15 = 38,
    BANK_1 = 39,
    BANK_2 = 40,
    BANK_3 = 41,
    BANK_4 = 42,
    BANK_5 = 43,
    BANK_6 = 44,
    BANK_7 = 45,
    BANK_8 = 46,
    BANK_9 = 47,
    BANK_10 = 48,
    BANK_11 = 49,
    BANK_12 = 50,
    BANK_13 = 51,
    BANK_14 = 52,
    BANK_15 = 53,
    BANK_16 = 54,
    BANK_17 = 55,
    BANK_18 = 56,
    BANK_19 = 57,
    BANK_20 = 58,
    BANK_21 = 59,
    BANK_22 = 60,
    BANK_23 = 61,
    BANK_24 = 62,
    BANK_25 = 63,
    BANK_26 = 64,
    BANK_27 = 65,
    BANK_28 = 66,
    BANK_BAG_SLOT_1 = 67,
    BANK_BAG_SLOT_2 = 68,
    BANK_BAG_SLOT_3 = 69,
    BANK_BAG_SLOT_4 = 70,
    BANK_BAG_SLOT_5 = 71,
    BANK_BAG_SLOT_6 = 72,
    BANK_BAG_SLOT_7 = 73,
    VENDOR_BUYBACK_1 = 74,
    VENDOR_BUYBACK_2 = 75,
    VENDOR_BUYBACK_3 = 76,
    VENDOR_BUYBACK_4 = 77,
    VENDOR_BUYBACK_5 = 78,
    VENDOR_BUYBACK_6 = 79,
    VENDOR_BUYBACK_7 = 80,
    VENDOR_BUYBACK_8 = 81,
    VENDOR_BUYBACK_9 = 82,
    VENDOR_BUYBACK_10 = 83,
    VENDOR_BUYBACK_11 = 84,
    VENDOR_BUYBACK_12 = 85,
    KEYRING_1 = 86,
    KEYRING_2 = 87,
    KEYRING_3 = 88,
    KEYRING_4 = 89,
    KEYRING_5 = 90,
    KEYRING_6 = 91,
    KEYRING_7 = 92,
    KEYRING_8 = 93,
    KEYRING_9 = 94,
    KEYRING_10 = 95,
    KEYRING_11 = 96,
    KEYRING_12 = 97,
    KEYRING_13 = 98,
    KEYRING_14 = 99,
    KEYRING_15 = 100,
    KEYRING_16 = 101,
    KEYRING_17 = 102,
    KEYRING_18 = 103,
    KEYRING_19 = 104,
    KEYRING_20 = 105,
    KEYRING_21 = 106,
    KEYRING_22 = 107,
    KEYRING_23 = 108,
    KEYRING_24 = 109,
    KEYRING_25 = 110,
    KEYRING_26 = 111,
    KEYRING_27 = 112,
    KEYRING_28 = 113,
    KEYRING_29 = 114,
    KEYRING_30 = 115,
    KEYRING_31 = 116,
    KEYRING_32 = 117,
    CURRENCY_TOKEN_1 = 118,
    CURRENCY_TOKEN_2 = 119,
    CURRENCY_TOKEN_3 = 120,
    CURRENCY_TOKEN_4 = 121,
    CURRENCY_TOKEN_5 = 122,
    CURRENCY_TOKEN_6 = 123,
    CURRENCY_TOKEN_7 = 124,
    CURRENCY_TOKEN_8 = 125,
    CURRENCY_TOKEN_9 = 126,
    CURRENCY_TOKEN_10 = 127,
    CURRENCY_TOKEN_11 = 128,
    CURRENCY_TOKEN_12 = 129,
    CURRENCY_TOKEN_13 = 130,
    CURRENCY_TOKEN_14 = 131,
    CURRENCY_TOKEN_15 = 132,
    CURRENCY_TOKEN_16 = 133,
    CURRENCY_TOKEN_17 = 134,
    CURRENCY_TOKEN_18 = 135,
    CURRENCY_TOKEN_19 = 136,
    CURRENCY_TOKEN_20 = 137,
    CURRENCY_TOKEN_21 = 138,
    CURRENCY_TOKEN_22 = 139,
    CURRENCY_TOKEN_23 = 140,
    CURRENCY_TOKEN_24 = 141,
    CURRENCY_TOKEN_25 = 142,
    CURRENCY_TOKEN_26 = 143,
    CURRENCY_TOKEN_27 = 144,
    CURRENCY_TOKEN_28 = 145,
    CURRENCY_TOKEN_29 = 146,
    CURRENCY_TOKEN_30 = 147,
    CURRENCY_TOKEN_31 = 148,
    CURRENCY_TOKEN_32 = 149,
};

enum class ItemTextQuery : uint8_t {
    HAS_TEXT = 0,
    NO_TEXT = 1,
};

enum class JoinArenaType : uint8_t {
    TWO_VS_TWO = 0,
    THREE_VS_THREE = 1,
    FIVE_VS_FIVE = 2,
};

enum class Language : uint8_t {
    UNIVERSAL = 0,
    ORCISH = 1,
    DARNASSIAN = 2,
    TAURAHE = 3,
    DWARVISH = 6,
    COMMON = 7,
    DEMONIC = 8,
    TITAN = 9,
    THALASSIAN = 10,
    DRACONIC = 11,
    KALIMAG = 12,
    GNOMISH = 13,
    TROLL = 14,
    GUTTERSPEAK = 33,
    DRAENEI = 35,
    ZOMBIE = 36,
    GNOMISH_BINARY = 37,
    GOBLIN_BINARY = 38,
};

enum class LfgJoinStatus : uint8_t {
    NOT_JOINED = 0,
    JOINED = 1,
};

enum class LfgListUpdateType : uint8_t {
    PARTIAL = 0,
    FULL = 1,
};

enum class LfgTeleportError : uint32_t {
    PLAYER_DEAD = 1,
    FALLING = 2,
    IN_VEHICLE = 3,
    FATIGUE = 4,
    INVALID_LOCATION = 6,
    COMBAT = 8,
};

enum class LfgTeleportLocation : uint8_t {
    IN = 0,
    OUT = 1,
};

enum class LfgType : uint8_t {
    NONE = 0,
    DUNGEON = 1,
    RAID = 2,
    ZONE = 4,
    HEROIC = 5,
    RANDOM = 6,
};

enum class LfgUpdateType : uint8_t {
    DEFAULT = 0,
    LEADER_LEAVE = 1,
    ROLECHECK_ABORTED = 4,
    JOIN = 5,
    ROLECHECK_FAILED = 6,
    LEAVE = 7,
    PROPOSAL_FAILED = 8,
    PROPOSAL_DECLINED = 9,
    GROUP_FOUND = 10,
    ADDED_TO_QUEUE = 12,
    PROPOSAL_BEGIN = 13,
    STATUS = 14,
    GROUP_MEMBER_OFFLINE = 15,
    GROUP_DISBAND = 16,
};

enum class LogFormat : uint8_t {
    DEFAULT = 0,
    DEBUG = 1,
};

enum class LogoutResult : uint32_t {
    SUCCESS = 0,
    FAILURE_IN_COMBAT = 1,
    FAILURE_FROZEN_BY_GM = 2,
    FAILURE_JUMPING_OR_FALLING = 3,
};

enum class LogoutSpeed : uint8_t {
    DELAYED = 0,
    INSTANT = 1,
};

enum class LootMethod : uint8_t {
    ERROR = 0,
    CORPSE = 1,
    PICKPOCKETING = 2,
    FISHING = 3,
    DISENCHANTING = 4,
    SKINNING = 6,
    FISHINGHOLE = 20,
    FISHING_FAIL = 21,
    INSIGNIA = 22,
};

enum class LootMethodError : uint8_t {
    DIDNT_KILL = 0,
    TOO_FAR = 4,
    BAD_FACING = 5,
    LOCKED = 6,
    NOTSTANDING = 8,
    STUNNED = 9,
    PLAYER_NOT_FOUND = 10,
    PLAY_TIME_EXCEEDED = 11,
    MASTER_INV_FULL = 12,
    MASTER_UNIQUE_ITEM = 13,
    MASTER_OTHER = 14,
    ALREADY_PICKPOCKETED = 15,
    NOT_WHILE_SHAPESHIFTED = 16,
};

enum class LootSlotType : uint8_t {
    TYPE_ALLOW_LOOT = 0,
    TYPE_ROLL_ONGOING = 1,
    TYPE_MASTER = 2,
    TYPE_LOCKED = 3,
    TYPE_OWNER = 4,
};

enum class MailAction : uint32_t {
    SEND = 0,
    MONEY_TAKEN = 1,
    ITEM_TAKEN = 2,
    RETURNED_TO_SENDER = 3,
    DELETED = 4,
    MADE_PERMANENT = 5,
};

enum class MailMessageType : uint32_t {
    NORMAL = 0,
    AUCTION = 2,
    CREATURE = 3,
    GAMEOBJECT = 4,
    ITEM = 5,
};

enum class MailResult : uint32_t {
    OK = 0,
    ERR_EQUIP_ERROR = 1,
    ERR_CANNOT_SEND_TO_SELF = 2,
    ERR_NOT_ENOUGH_MONEY = 3,
    ERR_RECIPIENT_NOT_FOUND = 4,
    ERR_NOT_YOUR_TEAM = 5,
    ERR_INTERNAL_ERROR = 6,
    ERR_DISABLED_FOR_TRIAL_ACC = 14,
    ERR_RECIPIENT_CAP_REACHED = 15,
    ERR_CANT_SEND_WRAPPED_COD = 16,
    ERR_MAIL_AND_CHAT_SUSPENDED = 17,
    ERR_TOO_MANY_ATTACHMENTS = 18,
    ERR_MAIL_ATTACHMENT_INVALID = 19,
    ERR_ITEM_HAS_EXPIRED = 21,
};

enum class MailResultTwo : uint32_t {
    OK = 0,
    ERR_EQUIP_ERROR = 1,
    ERR_CANNOT_SEND_TO_SELF = 2,
    ERR_NOT_ENOUGH_MONEY = 3,
    ERR_RECIPIENT_NOT_FOUND = 4,
    ERR_NOT_YOUR_TEAM = 5,
    ERR_INTERNAL_ERROR = 6,
    ERR_DISABLED_FOR_TRIAL_ACC = 14,
    ERR_RECIPIENT_CAP_REACHED = 15,
    ERR_CANT_SEND_WRAPPED_COD = 16,
    ERR_MAIL_AND_CHAT_SUSPENDED = 17,
    ERR_TOO_MANY_ATTACHMENTS = 18,
    ERR_MAIL_ATTACHMENT_INVALID = 19,
    ERR_ITEM_HAS_EXPIRED = 21,
};

enum class MailType : uint8_t {
    NORMAL = 0,
    AUCTION = 2,
    CREATURE = 3,
    GAMEOBJECT = 4,
    ITEM = 5,
};

enum class Map : uint32_t {
    EASTERN_KINGDOMS = 0,
    KALIMDOR = 1,
    TESTING = 13,
    SCOTT_TEST = 25,
    ALTERAC_VALLEY = 30,
    SHADOWFANG_KEEP = 33,
    STORMWIND_STOCKADE = 34,
    STORMWIND_PRISON = 35,
    DEADMINES = 36,
    AZSHARA_CRATER = 37,
    COLLINS_TEST = 42,
    WAILING_CAVERNS = 43,
    MONASTERY_UNUSED = 44,
    RAZORFEN_KRAUL = 47,
    BLACKFATHOM_DEEPS = 48,
    ULDAMAN = 70,
    GNOMEREGAN = 90,
    SUNKEN_TEMPLE = 109,
    RAZORFEN_DOWNS = 129,
    EMERALD_DREAM = 169,
    SCARLET_MONASTERY = 189,
    ZUL_FARRAK = 209,
    BLACKROCK_SPIRE = 229,
    BLACKROCK_DEPTHS = 230,
    ONYXIAS_LAIR = 249,
    OPENING_OF_THE_DARK_PORTAL = 269,
    SCHOLOMANCE = 289,
    ZUL_GURUB = 309,
    STRATHOLME = 329,
    MARAUDON = 349,
    DEEPRUN_TRAM = 369,
    RAGEFIRE_CHASM = 389,
    MOLTEN_CORE = 409,
    DIRE_MAUL = 429,
    ALLIANCE_PVP_BARRACKS = 449,
    HORDE_PVP_BARRACKS = 450,
    DEVELOPMENT_LAND = 451,
    BLACKWING_LAIR = 469,
    WARSONG_GULCH = 489,
    RUINS_OF_AHN_QIRAJ = 509,
    ARATHI_BASIN = 529,
    OUTLAND = 530,
    AHN_QIRAJ_TEMPLE = 531,
    KARAZHAN = 532,
    NAXXRAMAS = 533,
    THE_BATTLE_FOR_MOUNT_HYJAL = 534,
    HELLFIRE_CITADEL_THE_SHATTERED_HALLS = 540,
    HELLFIRE_CITADEL_THE_BLOOD_FURNACE = 542,
    HELLFIRE_CITADEL_RAMPARTS = 543,
    MAGTHERIDONS_LAIR = 544,
    COILFANG_THE_STEAMVAULT = 545,
    COILFANG_THE_UNDERBOG = 546,
    COILFANG_THE_SLAVE_PENS = 547,
    COILFANG_SERPENTSHRINE_CAVERN = 548,
    TEMPEST_KEEP = 550,
    TEMPEST_KEEP_THE_ARCATRAZ = 552,
    TEMPEST_KEEP_THE_BOTANICA = 553,
    TEMPEST_KEEP_THE_MECHANAR = 554,
    AUCHINDOUN_SHADOW_LABYRINTH = 555,
    AUCHINDOUN_SETHEKK_HALLS = 556,
    AUCHINDOUN_MANA_TOMBS = 557,
    AUCHINDOUN_AUCHENAI_CRYPTS = 558,
    NAGRAND_ARENA = 559,
    THE_ESCAPE_FROM_DURNHOLDE = 560,
    BLADES_EDGE_ARENA = 562,
    BLACK_TEMPLE = 564,
    GRUULS_LAIR = 565,
    EYE_OF_THE_STORM = 566,
    ZUL_AMAN = 568,
    NORTHREND = 571,
    RUINS_OF_LORDAERON = 572,
    EXTERIORTEST = 573,
    UTGARDE_KEEP = 574,
    UTGARDE_PINNACLE = 575,
    THE_NEXUS = 576,
    THE_OCULUS = 578,
    THE_SUNWELL = 580,
    TRANSPORT_RUT_THERAN_TO_AUBERDINE = 582,
    TRANSPORT_MENETHIL_TO_THERAMORE = 584,
    MAGISTERS_TERRACE = 585,
    TRANSPORT_EXODAR_TO_AUBERDINE = 586,
    TRANSPORT_FEATHERMOON_FERRY = 587,
    TRANSPORT_MENETHIL_TO_AUBERDINE = 588,
    TRANSPORT_ORGRIMMAR_TO_GROM_GOL = 589,
    TRANSPORT_GROM_GOL_TO_UNDERCITY = 590,
    TRANSPORT_UNDERCITY_TO_ORGRIMMAR = 591,
    TRANSPORT_BOREAN_TUNDRA_TEST = 592,
    TRANSPORT_BOOTY_BAY_TO_RATCHET = 593,
    TRANSPORT_HOWLING_FJORD_SISTER_MERCY_QUEST = 594,
    THE_CULLING_OF_STRATHOLME = 595,
    TRANSPORT_NAGLFAR = 596,
    CRAIG_TEST = 597,
    SUNWELL_FIX_UNUSED = 598,
    HALLS_OF_STONE = 599,
    DRAK_THARON_KEEP = 600,
    AZJOL_NERUB = 601,
    HALLS_OF_LIGHTNING = 602,
    ULDUAR = 603,
    GUNDRAK = 604,
    DEVELOPMENT_LAND_NON_WEIGHTED_TEXTURES = 605,
    QA_AND_DVD = 606,
    STRAND_OF_THE_ANCIENTS = 607,
    VIOLET_HOLD = 608,
    EBON_HOLD = 609,
    TRANSPORT_TIRISFAL_TO_VENGEANCE_LANDING = 610,
    TRANSPORT_MENETHIL_TO_VALGARDE = 612,
    TRANSPORT_ORGRIMMAR_TO_WARSONG_HOLD = 613,
    TRANSPORT_STORMWIND_TO_VALIANCE_KEEP = 614,
    THE_OBSIDIAN_SANCTUM = 615,
    THE_EYE_OF_ETERNITY = 616,
    DALARAN_SEWERS = 617,
    THE_RING_OF_VALOR = 618,
    AHN_KAHET_THE_OLD_KINGDOM = 619,
    TRANSPORT_MOA_KI_TO_UNU_PE = 620,
    TRANSPORT_MOA_KI_TO_KAMAGUA = 621,
    TRANSPORT_ORGRIMS_HAMMER = 622,
    TRANSPORT_THE_SKYBREAKER = 623,
    VAULT_OF_ARCHAVON = 624,
    ISLE_OF_CONQUEST = 628,
    ICECROWN_CITADEL = 631,
    THE_FORGE_OF_SOULS = 632,
    TRANSPORT_ALLIANCE_AIRSHIP_BG = 641,
    TRANSPORT_HORDEAIRSHIPBG = 642,
    TRANSPORT_ORGRIMMAR_TO_THUNDER_BLUFF = 647,
    TRIAL_OF_THE_CRUSADER = 649,
    TRIAL_OF_THE_CHAMPION = 650,
    PIT_OF_SARON = 658,
    HALLS_OF_REFLECTION = 668,
    TRANSPORT_THE_SKYBREAKER_ICECROWN_CITADEL_RAID = 672,
    TRANSPORT_ORGRIMS_HAMMER_ICECROWN_CITADEL_RAID = 673,
    TRANSPORT_THE_SKYBREAKER_IC_DUNGEON = 712,
    TRANSPORT_ORGRIMS_HAMMER_IC_DUNGEON = 713,
    TRANSPORT_THE_MIGHTY_WIND_ICECROWN_CITADEL_RAID = 718,
    STORMWIND = 723,
    THE_RUBY_SANCTUM = 724,
};

enum class MiniMoveOpcode : uint16_t {
    SMSG_FORCE_MOVE_ROOT = 232,
    SMSG_MOVE_FEATHER_FALL = 242,
    SMSG_MOVE_WATER_WALK = 222,
    SMSG_MOVE_SET_HOVER = 244,
};

enum class MonsterMoveType : uint8_t {
    NORMAL = 0,
    STOP = 1,
    FACING_SPOT = 2,
    FACING_TARGET = 3,
    FACING_ANGLE = 4,
};

enum class MountResult : uint32_t {
    INVALID_MOUNTEE = 0,
    TOO_FAR_AWAY = 1,
    ALREADY_MOUNTED = 2,
    NOT_MOUNTABLE = 3,
    NOT_YOUR_PET = 4,
    OTHER = 5,
    LOOTING = 6,
    RACE_CANT_MOUNT = 7,
    SHAPESHIFTED = 8,
    FORCED_DISMOUNT = 9,
    OK = 10,
};

enum class NewItemChatAlert : uint32_t {
    DO_NOT_SHOW = 0,
    SHOW = 1,
};

enum class NewItemCreationType : uint32_t {
    RECEIVED = 0,
    CREATED = 1,
};

enum class NewItemSource : uint32_t {
    LOOTED = 0,
    FROM_NPC = 1,
};

enum class ObjectType : uint8_t {
    OBJECT = 0,
    ITEM = 1,
    CONTAINER = 2,
    UNIT = 3,
    PLAYER = 4,
    GAME_OBJECT = 5,
    DYNAMIC_OBJECT = 6,
    CORPSE = 7,
};

enum class PageTextMaterial : uint8_t {
    NONE = 0,
    PARCHMENT = 1,
    STONE = 2,
    MARBLE = 3,
    SILVER = 4,
    BRONZE = 5,
    VALENTINE = 6,
    ILLIDAN = 7,
};

enum class PartyOperation : uint8_t {
    INVITE = 0,
    LEAVE = 2,
};

enum class PartyResult : uint8_t {
    SUCCESS = 0,
    BAD_PLAYER_NAME = 1,
    TARGET_NOT_IN_GROUP = 2,
    TARGET_NOT_IN_INSTANCE = 3,
    GROUP_FULL = 4,
    ALREADY_IN_GROUP = 5,
    NOT_IN_GROUP = 6,
    NOT_LEADER = 7,
    PLAYER_WRONG_FACTION = 8,
    IGNORING_YOU = 9,
    LFG_PENDING = 12,
    INVITE_RESTRICTED = 13,
};

enum class PartyRole : uint8_t {
    MAIN_TANK = 0,
    ASSISTANT = 1,
};

enum class PetCommandState : uint8_t {
    STAY = 0,
    FOLLOW = 1,
    ATTACK = 2,
    DISMISS = 3,
};

enum class PetEnabled : uint8_t {
    ENABLED = 8,
    DISABLED = 0,
};

enum class PetFeedback : uint8_t {
    PET_DEAD = 1,
    NOTHING_TO_ATTACK = 2,
    CANT_ATTACK_TARGET = 3,
    NO_PATH_TO = 4,
};

enum class PetNameInvalidReason : uint8_t {
    INVALID = 1,
    NO_NAME = 2,
    TOO_SHORT = 3,
    TOO_LONG = 4,
    MIXED_LANGUAGES = 6,
    PROFANE = 7,
    RESERVED = 8,
    THREE_CONSECUTIVE = 11,
    INVALID_SPACE = 12,
    CONSECUTIVE_SPACES = 13,
    RUSSIAN_CONSECUTIVE_SILENT_CHARACTERS = 14,
    RUSSIAN_SILENT_CHARACTER_AT_BEGINNING_OR_END = 15,
    DECLENSION_DOESNT_MATCH_BASE_NAME = 16,
};

enum class PetQueryDisabledNames : uint8_t {
    PRESENT = 1,
    NOT_PRESENT = 0,
};

enum class PetReactState : uint8_t {
    PASSIVE = 0,
    DEFENSIVE = 1,
    AGGRESSIVE = 2,
};

enum class PetTalkReason : uint32_t {
    SPECIAL_SPELL = 0,
    ATTACK = 1,
};

enum class PetTameFailureReason : uint8_t {
    INVALID_CREATURE = 1,
    TOO_MANY = 2,
    CREATURE_ALREADY_OWNED = 3,
    NOT_TAMEABLE = 4,
    ANOTHER_SUMMON_ACTIVE = 5,
    UNITS_CANT_TAME = 6,
    NO_PET_AVAILABLE = 7,
    INTERNA_LERROR = 8,
    TOO_HIGH_LEVEL = 9,
    DEAD = 10,
    NOT_DEAD = 11,
    CANT_CONTROL_EXOTIC = 12,
    UNKNOWN_ERROR = 13,
};

enum class PetitionResult : uint32_t {
    OK = 0,
    ALREADY_SIGNED = 1,
    ALREADY_IN_GUILD = 2,
    CANT_SIGN_OWN = 3,
    NOT_SERVER = 4,
};

enum class PlayerChatTag : uint8_t {
    NONE = 0,
    AFK = 1,
    DND = 2,
    GM = 3,
    COMMENTATOR = 4,
    DEVELOPER = 5,
};

enum class PlayerInviteStatus : uint8_t {
    ALREADY_IN_GROUP = 0,
    NOT_IN_GROUP = 1,
};

enum class Power : uint8_t {
    MANA = 0,
    RAGE = 1,
    FOCUS = 2,
    ENERGY = 3,
    HAPPINESS = 4,
    RUNE = 5,
    RUNIC_POWER = 6,
    HEALTH = 254,
};

enum class PvpRank : uint8_t {
    NO_RANK = 0,
    PARIAH = 1,
    OUTLAW = 2,
    EXILED = 3,
    DISHONORED = 4,
    RANK1 = 5,
    RANK2 = 6,
    RANK3 = 7,
    RANK4 = 8,
    RANK5 = 9,
    RANK6 = 10,
    RANK7 = 11,
    RANK8 = 12,
    RANK9 = 13,
    RANK10 = 14,
    RANK11 = 15,
    RANK12 = 16,
    RANK13 = 17,
    RANK14 = 18,
    FACTION_LEADER = 19,
};

enum class QuestCompletable : uint32_t {
    NOT_COMPLETABLE = 0,
    COMPLETEABLE = 3,
};

enum class QuestFailedReason : uint32_t {
    DONT_HAVE_REQ = 0,
    QUEST_FAILED_LOW_LEVEL = 1,
    QUEST_FAILED_WRONG_RACE = 6,
    QUEST_ALREADY_DONE = 7,
    QUEST_ONLY_ONE_TIMED = 12,
    QUEST_ALREADY_ON = 13,
    QUEST_FAILED_EXPANSION = 16,
    QUEST_ALREADY_ON2 = 18,
    QUEST_FAILED_MISSING_ITEMS = 21,
    QUEST_FAILED_NOT_ENOUGH_MONEY = 23,
    DAILY_QUESTS_REMAINING = 26,
    QUEST_FAILED_CAIS = 27,
    DAILY_QUEST_COMPLETED_TODAY = 29,
};

enum class QuestGiverStatus : uint8_t {
    NONE = 0,
    UNAVAILABLE = 1,
    LOW_LEVEL_AVAILABLE = 2,
    LOW_LEVEL_REWARD_REP = 3,
    LOW_LEVEL_AVAILABLE_REP = 4,
    INCOMPLETE = 5,
    REWARD_REP = 6,
    AVAILABLE_REP = 7,
    AVAILABLE = 8,
    REWARD2 = 9,
    REWARD = 10,
};

enum class QuestPartyMessage : uint8_t {
    MSG_SHARING_QUEST = 0,
    MSG_CANT_TAKE_QUEST = 1,
    MSG_ACCEPT_QUEST = 2,
    MSG_REFUSE_QUEST = 3,
    MSG_BUSY = 4,
    MSG_LOG_FULL = 5,
    MSG_HAVE_QUEST = 6,
    MSG_FINISH_QUEST = 7,
    MSG_CANT_BE_SHARED_TODAY = 8,
    MSG_SHARING_TIMER_EXPIRED = 9,
    MSG_NOT_IN_PARTY = 10,
    MSG_DIFFERENT_SERVER_DAILY = 11,
};

enum class Race : uint8_t {
    HUMAN = 1,
    ORC = 2,
    DWARF = 3,
    NIGHT_ELF = 4,
    UNDEAD = 5,
    TAUREN = 6,
    GNOME = 7,
    TROLL = 8,
    GOBLIN = 9,
    BLOOD_ELF = 10,
    DRAENEI = 11,
    FEL_ORC = 12,
    NAGA = 13,
    BROKEN = 14,
    SKELETON = 15,
    VRYKUL = 16,
    TUSKARR = 17,
    FOREST_TROLL = 18,
    TAUNKA = 19,
    NORTHREND_SKELETON = 20,
    ICE_TROLL = 21,
};

enum class RaidDifficulty : uint8_t {
    TEN_MAN_NORMAL = 0,
    TWENTY_FIVE_MAN_NORMAL = 1,
    TEN_MAN_HEROIC = 2,
    TWENTY_FIVE_MAN_HEROIC = 3,
};

enum class RaidGroupError : uint32_t {
    REQUIRED = 1,
    FULL = 2,
};

enum class RaidInstanceMessage : uint32_t {
    WARNING_HOURS = 1,
    WARNING_MIN = 2,
    WARNING_MIN_SOON = 3,
    WELCOME = 4,
    EXPIRED = 5,
};

enum class RaidTargetIndex : uint8_t {
    UNKNOWN0 = 0,
    UNKNOWN1 = 1,
    UNKNOWN2 = 2,
    UNKNOWN3 = 3,
    UNKNOWN4 = 4,
    UNKNOWN5 = 5,
    UNKNOWN6 = 6,
    UNKNOWN7 = 7,
    UNKNOWN8 = 8,
    REQUEST_ICONS = 255,
};

enum class RaidTargetUpdateType : uint8_t {
    PARTIAL = 0,
    FULL = 1,
};

enum class RandomBg : uint8_t {
    NOT_RANDOM = 0,
    RANDOM = 1,
};

enum class RealmSplitState : uint32_t {
    NORMAL = 0,
    SPLIT = 1,
    SPLIT_PENDING = 2,
};

enum class ReferAFriendError : uint8_t {
    NONE = 0,
    NOT_REFERRED_BY = 1,
    TARGET_TOO_HIGH = 2,
    INSUFFICIENT_GRANTABLE_LEVELS = 3,
    TOO_FAR = 4,
    DIFFERENT_FACTION = 5,
    NOT_NOW = 6,
    GRANT_LEVEL_MAX = 7,
    NO_TARGET = 8,
    NOT_IN_GROUP = 9,
    SUMMON_LEVEL_MAX = 10,
    SUMMON_COOLDOWN = 11,
    INSUFFICIENT_EXPANSION_LEVEL = 12,
    SUMMON_OFFLINE = 13,
};

enum class RollVote : uint8_t {
    PASS = 0,
    NEED = 1,
    GREED = 2,
    DISENCHANT = 3,
};

enum class SellItemResult : uint8_t {
    ERR_CANT_FIND_ITEM = 1,
    ERR_CANT_SELL_ITEM = 2,
    ERR_CANT_FIND_VENDOR = 3,
    ERR_YOU_DONT_OWN_THAT_ITEM = 4,
    ERR_UNK = 5,
    ERR_ONLY_EMPTY_BAG = 6,
    ERR_CANT_SELL_TO_THIS_MERCHANT = 7,
    ERR_MUST_REPAIR_ITEM_DURABILITY_TO_USE = 8,
    INTERNAL_BAG_ERROR = 9,
};

enum class ServerMessageType : uint32_t {
    SHUTDOWN_TIME = 1,
    RESTART_TIME = 2,
    CUSTOM = 3,
    SHUTDOWN_CANCELLED = 4,
    RESTART_CANCELLED = 5,
    BATTLEGROUND_SHUTDOWN = 6,
    BATTLEGROUND_RESTART = 7,
    INSTANCE_SHUTDOWN = 8,
    INSTANCE_RESTART = 9,
};

enum class SheathState : uint8_t {
    UNARMED = 0,
    MELEE = 1,
    RANGED = 2,
};

enum class SheatheType : uint8_t {
    NONE = 0,
    MAIN_HAND = 1,
    OFF_HAND = 2,
    LARGE_WEAPON_LEFT = 3,
    LARGE_WEAPON_RIGHT = 4,
    HIP_WEAPON_LEFT = 5,
    HIP_WEAPON_RIGHT = 6,
    SHIELD = 7,
};

enum class SizeClass : int8_t {
    NONE = -1,
    SMALL = 0,
    MEDIUM = 1,
    LARGE = 2,
    GIANT = 3,
    COLOSSAL = 4,
};

enum class Skill : uint16_t {
    NONE = 0,
    FROST = 6,
    FIRE = 8,
    ARMS = 26,
    COMBAT = 38,
    SUBTLETY = 39,
    SWORDS = 43,
    AXES = 44,
    BOWS = 45,
    GUNS = 46,
    BEAST_MASTERY = 50,
    SURVIVAL = 51,
    MACES = 54,
    TWO_HANDED_SWORDS = 55,
    HOLY = 56,
    SHADOW = 78,
    DEFENSE = 95,
    LANGUAGE_COMMON = 98,
    RACIAL_DWARVEN = 101,
    LANGUAGE_ORCISH = 109,
    LANGUAGE_DWARVEN = 111,
    LANGUAGE_DARNASSIAN = 113,
    LANGUAGE_TAURAHE = 115,
    DUAL_WIELD = 118,
    RACIAL_TAUREN = 124,
    ORC_RACIAL = 125,
    RACIAL_NIGHT_ELF = 126,
    FIRST_AID = 129,
    FERAL_COMBAT = 134,
    STAVES = 136,
    LANGUAGE_THALASSIAN = 137,
    LANGUAGE_DRACONIC = 138,
    LANGUAGE_DEMON_TONGUE = 139,
    LANGUAGE_TITAN = 140,
    LANGUAGE_OLD_TONGUE = 141,
    SURVIVAL2 = 142,
    RIDING_HORSE = 148,
    RIDING_WOLF = 149,
    RIDING_TIGER = 150,
    RIDING_RAM = 152,
    SWIMMING = 155,
    TWO_HANDED_MACES = 160,
    UNARMED = 162,
    MARKSMANSHIP = 163,
    BLACKSMITHING = 164,
    LEATHERWORKING = 165,
    ALCHEMY = 171,
    TWO_HANDED_AXES = 172,
    DAGGERS = 173,
    THROWN = 176,
    HERBALISM = 182,
    GENERIC_DND = 183,
    RETRIBUTION = 184,
    COOKING = 185,
    MINING = 186,
    PET_IMP = 188,
    PET_FELHUNTER = 189,
    TAILORING = 197,
    ENGINEERING = 202,
    PET_SPIDER = 203,
    PET_VOIDWALKER = 204,
    PET_SUCCUBUS = 205,
    PET_INFERNAL = 206,
    PET_DOOMGUARD = 207,
    PET_WOLF = 208,
    PET_CAT = 209,
    PET_BEAR = 210,
    PET_BOAR = 211,
    PET_CROCILISK = 212,
    PET_CARRION_BIRD = 213,
    PET_CRAB = 214,
    PET_GORILLA = 215,
    PET_RAPTOR = 217,
    PET_TALLSTRIDER = 218,
    RACIAL_UNDED = 220,
    CROSSBOWS = 226,
    WANDS = 228,
    POLEARMS = 229,
    PET_SCORPID = 236,
    ARCANE = 237,
    PET_TURTLE = 251,
    ASSASSINATION = 253,
    FURY = 256,
    PROTECTION = 257,
    PROTECTION2 = 267,
    PET_TALENTS = 270,
    PLATE_MAIL = 293,
    LANGUAGE_GNOMISH = 313,
    LANGUAGE_TROLL = 315,
    ENCHANTING = 333,
    DEMONOLOGY = 354,
    AFFLICTION = 355,
    FISHING = 356,
    ENHANCEMENT = 373,
    RESTORATION = 374,
    ELEMENTAL_COMBAT = 375,
    SKINNING = 393,
    MAIL = 413,
    LEATHER = 414,
    CLOTH = 415,
    SHIELD = 433,
    FIST_WEAPONS = 473,
    RIDING_RAPTOR = 533,
    RIDING_MECHANOSTRIDER = 553,
    RIDING_UNDEAD_HORSE = 554,
    RESTORATION2 = 573,
    BALANCE = 574,
    DESTRUCTION = 593,
    HOLY2 = 594,
    DISCIPLINE = 613,
    LOCKPICKING = 633,
    PET_BAT = 653,
    PET_HYENA = 654,
    PET_BIRD_OF_PREY = 655,
    PET_WIND_SERPENT = 656,
    LANGUAGE_GUTTERSPEAK = 673,
    RIDING_KODO = 713,
    RACIAL_TROLL = 733,
    RACIAL_GNOME = 753,
    RACIAL_HUMAN = 754,
    JEWELCRAFTING = 755,
    RACIAL_BLOODELF = 756,
    PET_EVENT_RC = 758,
    LANGUAGE_DRAENEI = 759,
    RACIAL_DRAENEI = 760,
    PET_FELGUARD = 761,
    RIDING = 762,
    PET_DRAGONHAWK = 763,
    PET_NETHER_RAY = 764,
    PET_SPOREBAT = 765,
    PET_WARP_STALKER = 766,
    PET_RAVAGER = 767,
    PET_SERPENT = 768,
    INTERNAL = 769,
    DK_BLOOD = 770,
    DK_FROST = 771,
    DK_UNHOLY = 772,
    INSCRIPTION = 773,
    PET_MOTH = 775,
    RUNEFORGING = 776,
    MOUNTS = 777,
    COMPANIONS = 778,
    PET_EXOTIC_CHIMAERA = 780,
    PET_EXOTIC_DEVILSAUR = 781,
    PET_GHOUL = 782,
    PET_EXOTIC_SILITHID = 783,
    PET_EXOTIC_WORM = 784,
    PET_WASP = 785,
    PET_EXOTIC_RHINO = 786,
    PET_EXOTIC_CORE_HOUND = 787,
    PET_EXOTIC_SPIRIT_BEAST = 788,
};

enum class SkillCategory : uint8_t {
    ATTRIBUTE = 5,
    WEAPON = 6,
    CLASS = 7,
    ARMOR = 8,
    SECONDARY_PROFESSION = 9,
    LANGUAGE = 10,
    PRIMARY_PROFESSION = 11,
    GENERIC = 12,
};

enum class SpamType : uint8_t {
    MAIL = 0,
    CHAT = 1,
};

enum class SpellCastResult : uint8_t {
    SUCCESS = 0,
    AFFECTING_COMBAT = 1,
    ALREADY_AT_FULL_HEALTH = 2,
    ALREADY_AT_FULL_MANA = 3,
    ALREADY_AT_FULL_POWER = 4,
    ALREADY_BEING_TAMED = 5,
    ALREADY_HAVE_CHARM = 6,
    ALREADY_HAVE_SUMMON = 7,
    ALREADY_OPEN = 8,
    AURA_BOUNCED = 9,
    AUTOTRACK_INTERRUPTED = 10,
    BAD_IMPLICIT_TARGETS = 11,
    BAD_TARGETS = 12,
    CANT_BE_CHARMED = 13,
    CANT_BE_DISENCHANTED = 14,
    CANT_BE_DISENCHANTED_SKILL = 15,
    CANT_BE_MILLED = 16,
    CANT_BE_PROSPECTED = 17,
    CANT_CAST_ON_TAPPED = 18,
    CANT_DUEL_WHILE_INVISIBLE = 19,
    CANT_DUEL_WHILE_STEALTHED = 20,
    CANT_STEALTH = 21,
    CASTER_AURASTATE = 22,
    CASTER_DEAD = 23,
    CHARMED = 24,
    CHEST_IN_USE = 25,
    CONFUSED = 26,
    DONT_REPORT = 27,
    EQUIPPED_ITEM = 28,
    EQUIPPED_ITEM_CLASS = 29,
    EQUIPPED_ITEM_CLASS_MAINHAND = 30,
    EQUIPPED_ITEM_CLASS_OFFHAND = 31,
    ERROR = 32,
    FIZZLE = 33,
    FLEEING = 34,
    FOOD_LOWLEVEL = 35,
    HIGHLEVEL = 36,
    HUNGER_SATIATED = 37,
    IMMUNE = 38,
    INCORRECT_AREA = 39,
    INTERRUPTED = 40,
    INTERRUPTED_COMBAT = 41,
    ITEM_ALREADY_ENCHANTED = 42,
    ITEM_GONE = 43,
    ITEM_NOT_FOUND = 44,
    ITEM_NOT_READY = 45,
    LEVEL_REQUIREMENT = 46,
    LINE_OF_SIGHT = 47,
    LOWLEVEL = 48,
    LOW_CASTLEVEL = 49,
    MAINHAND_EMPTY = 50,
    MOVING = 51,
    NEED_AMMO = 52,
    NEED_AMMO_POUCH = 53,
    NEED_EXOTIC_AMMO = 54,
    NEED_MORE_ITEMS = 55,
    NOPATH = 56,
    NOT_BEHIND = 57,
    NOT_FISHABLE = 58,
    NOT_FLYING = 59,
    NOT_HERE = 60,
    NOT_INFRONT = 61,
    NOT_IN_CONTROL = 62,
    NOT_KNOWN = 63,
    NOT_MOUNTED = 64,
    NOT_ON_TAXI = 65,
    NOT_ON_TRANSPORT = 66,
    NOT_READY = 67,
    NOT_SHAPESHIFT = 68,
    NOT_STANDING = 69,
    NOT_TRADEABLE = 70,
    NOT_TRADING = 71,
    NOT_UNSHEATHED = 72,
    NOT_WHILE_GHOST = 73,
    NOT_WHILE_LOOTING = 74,
    NO_AMMO = 75,
    NO_CHARGES_REMAIN = 76,
    NO_CHAMPION = 77,
    NO_COMBO_POINTS = 78,
    NO_DUELING = 79,
    NO_ENDURANCE = 80,
    NO_FISH = 81,
    NO_ITEMS_WHILE_SHAPESHIFTED = 82,
    NO_MOUNTS_ALLOWED = 83,
    NO_PET = 84,
    NO_POWER = 85,
    NOTHING_TO_DISPEL = 86,
    NOTHING_TO_STEAL = 87,
    ONLY_ABOVEWATER = 88,
    ONLY_DAYTIME = 89,
    ONLY_INDOORS = 90,
    ONLY_MOUNTED = 91,
    ONLY_NIGHTTIME = 92,
    ONLY_OUTDOORS = 93,
    ONLY_SHAPESHIFT = 94,
    ONLY_STEALTHED = 95,
    ONLY_UNDERWATER = 96,
    OUT_OF_RANGE = 97,
    PACIFIED = 98,
    POSSESSED = 99,
    REAGENTS = 100,
    REQUIRES_AREA = 101,
    REQUIRES_SPELL_FOCUS = 102,
    ROOTED = 103,
    SILENCED = 104,
    SPELL_IN_PROGRESS = 105,
    SPELL_LEARNED = 106,
    SPELL_UNAVAILABLE = 107,
    STUNNED = 108,
    TARGETS_DEAD = 109,
    TARGET_AFFECTING_COMBAT = 110,
    TARGET_AURASTATE = 111,
    TARGET_DUELING = 112,
    TARGET_ENEMY = 113,
    TARGET_ENRAGED = 114,
    TARGET_FRIENDLY = 115,
    TARGET_IN_COMBAT = 116,
    TARGET_IS_PLAYER = 117,
    TARGET_IS_PLAYER_CONTROLLED = 118,
    TARGET_NOT_DEAD = 119,
    TARGET_NOT_IN_PARTY = 120,
    TARGET_NOT_LOOTED = 121,
    TARGET_NOT_PLAYER = 122,
    TARGET_NO_POCKETS = 123,
    TARGET_NO_WEAPONS = 124,
    TARGET_NO_RANGED_WEAPONS = 125,
    TARGET_UNSKINNABLE = 126,
    THIRST_SATIATED = 127,
    TOO_CLOSE = 128,
    TOO_MANY_OF_ITEM = 129,
    TOTEM_CATEGORY = 130,
    TOTEMS = 131,
    TRY_CAST_AGAIN = 132,
    UNIT_NOT_BEHIND = 133,
    UNIT_NOT_INFRONT = 134,
    WRONG_PET_FOOD = 135,
    NOT_WHILE_FATIGUED = 136,
    TARGET_NOT_IN_INSTANCE = 137,
    NOT_WHILE_TRADING = 138,
    TARGET_NOT_IN_RAID = 139,
    TARGET_FREEFORALL = 140,
    NO_EDIBLE_CORPSES = 141,
    ONLY_BATTLEGROUNDS = 142,
    TARGET_NOT_GHOST = 143,
    TRANSFORM_UNUSABLE = 144,
    WRONG_WEATHER = 145,
    DAMAGE_IMMUNE = 146,
    PREVENTED_BY_MECHANIC = 147,
    PLAY_TIME = 148,
    REPUTATION = 149,
    MIN_SKILL = 150,
    NOT_IN_ARENA = 151,
    NOT_ON_SHAPESHIFT = 152,
    NOT_ON_STEALTHED = 153,
    NOT_ON_DAMAGE_IMMUNE = 154,
    NOT_ON_MOUNTED = 155,
    TOO_SHALLOW = 156,
    TARGET_NOT_IN_SANCTUARY = 157,
    TARGET_IS_TRIVIAL = 158,
    BM_OR_INVISGOD = 159,
    EXPERT_RIDING_REQUIREMENT = 160,
    ARTISAN_RIDING_REQUIREMENT = 161,
    NOT_IDLE = 162,
    NOT_INACTIVE = 163,
    PARTIAL_PLAYTIME = 164,
    NO_PLAYTIME = 165,
    NOT_IN_BATTLEGROUND = 166,
    NOT_IN_RAID_INSTANCE = 167,
    ONLY_IN_ARENA = 168,
    TARGET_LOCKED_TO_RAID_INSTANCE = 169,
    ON_USE_ENCHANT = 170,
    NOT_ON_GROUND = 171,
    CUSTOM_ERROR = 172,
    CANT_DO_THAT_RIGHT_NOW = 173,
    TOO_MANY_SOCKETS = 174,
    INVALID_GLYPH = 175,
    UNIQUE_GLYPH = 176,
    GLYPH_SOCKET_LOCKED = 177,
    NO_VALID_TARGETS = 178,
    ITEM_AT_MAX_CHARGES = 179,
    NOT_IN_BARBERSHOP = 180,
    FISHING_TOO_LOW = 181,
    ITEM_ENCHANT_TRADE_WINDOW = 182,
    SUMMON_PENDING = 183,
    MAX_SOCKETS = 184,
    PET_CAN_RENAME = 185,
    TARGET_CANNOT_BE_RESURRECTED = 186,
    UNKNOWN = 187,
};

enum class SpellEffect : uint32_t {
    NONE = 0,
    INSTAKILL = 1,
    SCHOOL_DAMAGE = 2,
    DUMMY = 3,
    PORTAL_TELEPORT = 4,
    TELEPORT_UNITS = 5,
    APPLY_AURA = 6,
    ENVIRONMENTAL_DAMAGE = 7,
    POWER_DRAIN = 8,
    HEALTH_LEECH = 9,
    HEAL = 10,
    BIND = 11,
    PORTAL = 12,
    RITUAL_BASE = 13,
    RITUAL_SPECIALIZE = 14,
    RITUAL_ACTIVATE_PORTAL = 15,
    QUEST_COMPLETE = 16,
    WEAPON_DAMAGE_NOSCHOOL = 17,
    RESURRECT = 18,
    ADD_EXTRA_ATTACKS = 19,
    DODGE = 20,
    EVADE = 21,
    PARRY = 22,
    BLOCK = 23,
    CREATE_ITEM = 24,
    WEAPON = 25,
    DEFENSE = 26,
    PERSISTENT_AREA_AURA = 27,
    SUMMON = 28,
    LEAP = 29,
    ENERGIZE = 30,
    WEAPON_PERCENT_DAMAGE = 31,
    TRIGGER_MISSILE = 32,
    OPEN_LOCK = 33,
    SUMMON_CHANGE_ITEM = 34,
    APPLY_AREA_AURA_PARTY = 35,
    LEARN_SPELL = 36,
    SPELL_DEFENSE = 37,
    DISPEL = 38,
    LANGUAGE = 39,
    DUAL_WIELD = 40,
    JUMP = 41,
    JUMP2 = 42,
    TELEPORT_UNITS_FACE_CASTER = 43,
    SKILL_STEP = 44,
    ADD_HONOR = 45,
    SPAWN = 46,
    TRADE_SKILL = 47,
    STEALTH = 48,
    DETECT = 49,
    TRANS_DOOR = 50,
    FORCE_CRITICAL_HIT = 51,
    GUARANTEE_HIT = 52,
    ENCHANT_ITEM = 53,
    ENCHANT_ITEM_TEMPORARY = 54,
    TAMECREATURE = 55,
    SUMMON_PET = 56,
    LEARN_PET_SPELL = 57,
    WEAPON_DAMAGE = 58,
    OPEN_LOCK_ITEM = 59,
    PROFICIENCY = 60,
    SEND_EVENT = 61,
    POWER_BURN = 62,
    THREAT = 63,
    TRIGGER_SPELL = 64,
    APPLY_AREA_AURA_RAID = 65,
    RESTORE_ITEM_CHARGES = 66,
    HEAL_MAX_HEALTH = 67,
    INTERRUPT_CAST = 68,
    DISTRACT = 69,
    PULL = 70,
    PICKPOCKET = 71,
    ADD_FARSIGHT = 72,
    UNTRAIN_TALENTS = 73,
    APPLY_GLYPH = 74,
    HEAL_MECHANICAL = 75,
    SUMMON_OBJECT_WILD = 76,
    SCRIPT_EFFECT = 77,
    ATTACK = 78,
    SANCTUARY = 79,
    ADD_COMBO_POINTS = 80,
    CREATE_HOUSE = 81,
    BIND_SIGHT = 82,
    DUEL = 83,
    STUCK = 84,
    SUMMON_PLAYER = 85,
    ACTIVATE_OBJECT = 86,
    WMO_DAMAGE = 87,
    WMO_REPAIR = 88,
    WMO_CHANGE = 89,
    KILL_CREDIT_PERSONAL = 90,
    THREAT_ALL = 91,
    ENCHANT_HELD_ITEM = 92,
    BREAK_PLAYER_TARGETING = 93,
    SELF_RESURRECT = 94,
    SKINNING = 95,
    CHARGE = 96,
    SUMMON_ALL_TOTEMS = 97,
    KNOCK_BACK = 98,
    DISENCHANT = 99,
    INEBRIATE = 100,
    FEED_PET = 101,
    DISMISS_PET = 102,
    REPUTATION = 103,
    SUMMON_OBJECT_SLOT1 = 104,
    SUMMON_OBJECT_SLOT2 = 105,
    SUMMON_OBJECT_SLOT3 = 106,
    SUMMON_OBJECT_SLOT4 = 107,
    DISPEL_MECHANIC = 108,
    SUMMON_DEAD_PET = 109,
    DESTROY_ALL_TOTEMS = 110,
    DURABILITY_DAMAGE = 111,
    UNKNOWN112 = 112,
    RESURRECT_NEW = 113,
    ATTACK_ME = 114,
    DURABILITY_DAMAGE_PCT = 115,
    SKIN_PLAYER_CORPSE = 116,
    SPIRIT_HEAL = 117,
    SKILL = 118,
    APPLY_AREA_AURA_PET = 119,
    TELEPORT_GRAVEYARD = 120,
    NORMALIZED_WEAPON_DMG = 121,
    UNKNOWN122 = 122,
    SEND_TAXI = 123,
    PLAYER_PULL = 124,
    MODIFY_THREAT_PERCENT = 125,
    STEAL_BENEFICIAL_BUFF = 126,
    PROSPECTING = 127,
    APPLY_AREA_AURA_FRIEND = 128,
    APPLY_AREA_AURA_ENEMY = 129,
    REDIRECT_THREAT = 130,
    PLAY_SOUND = 131,
    PLAY_MUSIC = 132,
    UNLEARN_SPECIALIZATION = 133,
    KILL_CREDIT_GROUP = 134,
    CALL_PET = 135,
    HEAL_PCT = 136,
    ENERGIZE_PCT = 137,
    LEAP_BACK = 138,
    CLEAR_QUEST = 139,
    FORCE_CAST = 140,
    FORCE_CAST_WITH_VALUE = 141,
    TRIGGER_SPELL_WITH_VALUE = 142,
    APPLY_AREA_AURA_OWNER = 143,
    KNOCKBACK_FROM_POSITION = 144,
    GRAVITY_PULL = 145,
    ACTIVATE_RUNE = 146,
    QUEST_FAIL = 147,
    UNKNOWN148 = 148,
    CHARGE2 = 149,
    QUEST_OFFER = 150,
    TRIGGER_SPELL_2 = 151,
    UNKNOWN152 = 152,
    CREATE_PET = 153,
    TEACH_TAXI_NODE = 154,
    TITAN_GRIP = 155,
    ENCHANT_ITEM_PRISMATIC = 156,
    CREATE_ITEM2 = 157,
    MILLING = 158,
    ALLOW_RENAME_PET = 159,
    UNKNOWN160 = 160,
    TALENT_SPEC_COUNT = 161,
    TALENT_SPEC_SELECT = 162,
    UNKNOWN163 = 163,
    CANCEL_AURA = 164,
};

enum class SpellMissInfo : uint8_t {
    NONE = 0,
    MISS = 1,
    RESIST = 2,
    DODGE = 3,
    PARRY = 4,
    BLOCK = 5,
    EVADE = 6,
    IMMUNE = 7,
    IMMUNE2 = 8,
    DEFLECT = 9,
    ABSORB = 10,
    REFLECT = 11,
};

enum class SpellSchool : uint8_t {
    NORMAL = 0,
    HOLY = 1,
    FIRE = 2,
    NATURE = 3,
    FROST = 4,
    SHADOW = 5,
    ARCANE = 6,
};

enum class SpellStealAction : uint8_t {
    STEAL = 0,
    CLEANSE = 1,
};

enum class SpellTriggerType : uint8_t {
    ON_USE = 0,
    ON_EQUIP = 1,
    CHANCE_ON_HIT = 2,
    SERVER_SIDE_SCRIPT = 3,
    SOULSTONE = 4,
    NO_EQUIP_COOLDOWN = 5,
    LEARN_SPELL_ID = 6,
};

enum class StableResult : uint8_t {
    ERR_MONEY = 1,
    ERR_STABLE = 6,
    SUCCESS_STABLE = 8,
    SUCCESS_UNSTABLE = 9,
    SUCCESS_BUY_SLOT = 10,
    ERR_EXOTIC = 12,
};

enum class StatusId : uint8_t {
    NONE = 0,
    WAIT_QUEUE = 1,
    WAIT_JOIN = 2,
    IN_PROGRESS = 3,
    WAIT_LEAVE = 4,
};

enum class Talent : uint32_t {
    BURNING_SOUL = 23,
    MOLTEN_SHIELDS = 24,
    IMPROVED_SCORCH = 25,
    IMPROVED_FIREBALL = 26,
    IMPROVED_FIRE_BLAST = 27,
    FLAME_THROWING = 28,
    PYROBLAST = 29,
    IMPACT = 30,
    WORLD_IN_FLAMES = 31,
    BLAST_WAVE = 32,
    CRITICAL_MASS = 33,
    IGNITE = 34,
    FIRE_POWER = 35,
    COMBUSTION = 36,
    IMPROVED_FROSTBOLT = 37,
    FROSTBITE = 38,
    PIERCING_ICE = 61,
    ICE_FLOES = 62,
    IMPROVED_BLIZZARD = 63,
    IMPROVED_CONE_OF_COLD = 64,
    PERMAFROST = 65,
    FROST_CHANNELING = 66,
    SHATTER = 67,
    WINTERS_CHILL = 68,
    ICY_VEINS = 69,
    FROST_WARDING = 70,
    ICE_BARRIER = 71,
    COLD_SNAP = 72,
    ICE_SHARDS = 73,
    ARCANE_SUBTLETY = 74,
    ARCANE_CONCENTRATION = 75,
    ARCANE_FOCUS = 76,
    ARCANE_MIND = 77,
    ARCANE_STABILITY = 80,
    SPELL_IMPACT = 81,
    MAGIC_ATTUNEMENT = 82,
    ARCANE_SHIELDING = 83,
    ARCANE_FORTITUDE = 85,
    PRESENCE_OF_MIND = 86,
    ARCANE_POWER = 87,
    IMPROVED_COUNTERSPELL = 88,
    DEEP_WOUNDS = 121,
    SWORD_SPECIALIZATION = 123,
    IMPROVED_HEROIC_STRIKE = 124,
    WARRIOR_MACE_SPECIALIZATION = 125,
    IMPROVED_CHARGE = 126,
    IMPROVED_REND = 127,
    TACTICAL_MASTERY = 128,
    IMPROVED_HAMSTRING = 129,
    WARRIOR_DEFLECTION = 130,
    IMPROVED_OVERPOWER = 131,
    POLEAXE_SPECIALIZATION = 132,
    SWEEPING_STRIKES = 133,
    WARRIOR_WEAPON_MASTERY = 134,
    MORTAL_STRIKE = 135,
    WARRIOR_TWO_HANDED_WEAPON_SPECIALIZATION = 136,
    ANGER_MANAGEMENT = 137,
    WARRIOR_ANTICIPATION = 138,
    WARRIOR_TOUGHNESS = 140,
    IMPROVED_THUNDER_CLAP = 141,
    IMPROVED_BLOODRAGE = 142,
    INCITE = 144,
    PUNCTURE = 146,
    IMPROVED_REVENGE = 147,
    VIGILANCE = 148,
    GAG_ORDER = 149,
    IMPROVED_DISCIPLINES = 150,
    IMPROVED_DISARM = 151,
    CONCUSSION_BLOW = 152,
    WARRIOR_LAST_STAND = 153,
    COMMANDING_PRESENCE = 154,
    ENRAGE = 155,
    WARRIOR_FLURRY = 156,
    CRUELTY = 157,
    BOOMING_VOICE = 158,
    UNBRIDLED_WRATH = 159,
    PIERCING_HOWL = 160,
    IMPROVED_DEMORALIZING_SHOUT = 161,
    DEATH_WISH = 165,
    IMPROVED_CLEAVE = 166,
    BLOODTHIRST = 167,
    ROGUE_PRECISION = 181,
    CLOSE_QUARTERS_COMBAT = 182,
    ROGUE_MACE_SPECIALIZATION = 184,
    ROGUE_LIGHTNING_REFLEXES = 186,
    ROGUE_DEFLECTION = 187,
    IMPROVED_SINISTER_STRIKE = 201,
    IMPROVED_GOUGE = 203,
    ENDURANCE = 204,
    ADRENALINE_RUSH = 205,
    IMPROVED_KICK = 206,
    ROGUE_DUAL_WIELD_SPECIALIZATION = 221,
    IMPROVED_SPRINT = 222,
    BLADE_FLURRY = 223,
    MASTER_OF_DECEPTION = 241,
    HACK_AND_SLASH = 242,
    CAMOUFLAGE = 244,
    INITIATIVE = 245,
    SETUP = 246,
    ELUSIVENESS = 247,
    OPPORTUNITY = 261,
    DIRTY_TRICKS = 262,
    IMPROVED_AMBUSH = 263,
    DIRTY_DEEDS = 265,
    IMPROVED_POISONS = 268,
    LETHALITY = 269,
    MALICE = 270,
    REMORSELESS_ATTACKS = 272,
    RUTHLESSNESS = 273,
    MURDER = 274,
    IMPROVED_EVISCERATE = 276,
    PUNCTURING_WOUNDS = 277,
    IMPROVED_EXPOSE_ARMOR = 278,
    IMPROVED_KIDNEY_SHOT = 279,
    COLD_BLOOD = 280,
    OVERKILL = 281,
    SEAL_FATE = 283,
    PREPARATION = 284,
    RIPOSTE = 301,
    GHOSTLY_STRIKE = 303,
    MARTYRDOM = 321,
    POWER_INFUSION = 322,
    MENTAL_AGILITY = 341,
    UNBREAKABLE_WILL = 342,
    IMPROVED_POWER_WORD_SHIELD = 343,
    IMPROVED_POWER_WORD_FORTITUDE = 344,
    IMPROVED_INNER_FIRE = 346,
    MEDITATION = 347,
    INNER_FOCUS = 348,
    IMPROVED_MANA_BURN = 350,
    SOUL_WARDING = 351,
    SILENT_RESOLVE = 352,
    INSPIRATION = 361,
    PREMEDITATION = 381,
    VIGOR = 382,
    HOLY_SPECIALIZATION = 401,
    SPIRITUAL_GUIDANCE = 402,
    SEARING_LIGHT = 403,
    SPIRITUAL_HEALING = 404,
    IMPROVED_RENEW = 406,
    IMPROVED_HEALING = 408,
    PRIEST_HEALING_FOCUS = 410,
    SPELL_WARDING = 411,
    HEALING_PRAYERS = 413,
    ARCANE_INSTABILITY = 421,
    DESPERATE_PRAYER = 442,
    SHADOW_WEAVING = 461,
    DARKNESS = 462,
    SHADOW_FOCUS = 463,
    SPIRIT_TAP = 465,
    SHADOW_AFFINITY = 466,
    IMPROVED_MIND_BLAST = 481,
    IMPROVED_SHADOW_WORD_PAIN = 482,
    VEILED_SHADOWS = 483,
    VAMPIRIC_EMBRACE = 484,
    MIND_FLAY = 501,
    SHADOWFORM = 521,
    SILENCE = 541,
    IMPROVED_PSYCHIC_SCREAM = 542,
    CALL_OF_FLAME = 561,
    CALL_OF_THUNDER = 562,
    CONCUSSION = 563,
    CONVECTION = 564,
    ELEMENTAL_FURY = 565,
    IMPROVED_FIRE_NOVA = 567,
    ELEMENTAL_MASTERY = 573,
    ELEMENTAL_FOCUS = 574,
    REVERBERATION = 575,
    ANCESTRAL_HEALING = 581,
    TIDAL_FORCE = 582,
    IMPROVED_WATER_SHIELD = 583,
    IMPROVED_HEALING_WAVE = 586,
    SHAMAN_HEALING_FOCUS = 587,
    RESTORATIVE_TOTEMS = 588,
    IMPROVED_REINCARNATION = 589,
    MANA_TIDE_TOTEM = 590,
    SHAMAN_NATURES_SWIFTNESS = 591,
    PURIFICATION = 592,
    TIDAL_FOCUS = 593,
    TIDAL_MASTERY = 594,
    TOTEMIC_FOCUS = 595,
    SHAMAN_ANTICIPATION = 601,
    SHAMAN_FLURRY = 602,
    IMPROVED_GHOST_WOLF = 605,
    IMPROVED_SHIELDS = 607,
    GUARDIAN_TOTEMS = 609,
    ENHANCING_TOTEMS = 610,
    ELEMENTAL_WEAPONS = 611,
    THUNDERING_STRIKES = 613,
    ANCESTRAL_KNOWLEDGE = 614,
    SHAMAN_TOUGHNESS = 615,
    SPIRIT_WEAPONS = 616,
    SHAMANISTIC_FOCUS = 617,
    IRON_WILL = 641,
    BLOOD_CRAZE = 661,
    IMPALE = 662,
    HEMORRHAGE = 681,
    VILE_POISONS = 682,
    WARRIOR_ONE_HANDED_WEAPON_SPECIALIZATION = 702,
    LIGHTNING_MASTERY = 721,
    ARCTIC_REACH = 741,
    STARLIGHT_WRATH = 762,
    IMPROVED_MOONFIRE = 763,
    NATURES_REACH = 764,
    BRAMBLES = 782,
    MOONGLOW = 783,
    CELESTIAL_FOCUS = 784,
    INSECT_SWARM = 788,
    NATURES_GRACE = 789,
    MOONFURY = 790,
    DRUID_VENGEANCE = 792,
    MOONKIN_FORM = 793,
    DRUID_THICK_HIDE = 794,
    FERAL_AGGRESSION = 795,
    DRUID_FEROCITY = 796,
    BRUTAL_IMPACT = 797,
    SHARPENED_CLAWS = 798,
    FERAL_INSTINCT = 799,
    PRIMAL_FURY = 801,
    SHREDDING_ATTACKS = 802,
    PREDATORY_STRIKES = 803,
    FERAL_CHARGE = 804,
    SAVAGE_FURY = 805,
    FERAL_SWIFTNESS = 807,
    HEART_OF_THE_WILD = 808,
    LEADER_OF_THE_PACK = 809,
    IMPROVED_MARK_OF_THE_WILD = 821,
    FUROR = 822,
    NATURES_FOCUS = 823,
    NATURALIST = 824,
    NATURES_BOUNTY = 825,
    NATURAL_SHAPESHIFTER = 826,
    OMEN_OF_CLARITY = 827,
    GIFT_OF_NATURE = 828,
    DRUID_INTENSITY = 829,
    IMPROVED_REJUVENATION = 830,
    DRUID_NATURES_SWIFTNESS = 831,
    SUBTLETY = 841,
    IMPROVED_TRANQUILITY = 842,
    TRANQUIL_SPIRIT = 843,
    SWIFTMEND = 844,
    SHADOW_REACH = 881,
    STORMSTRIKE = 901,
    CATACLYSM = 941,
    BANE = 943,
    IMPROVED_SHADOW_BOLT = 944,
    IMPROVED_IMMOLATE = 961,
    SHADOWBURN = 963,
    DESTRUCTIVE_REACH = 964,
    IMPROVED_SEARING_PAIN = 965,
    EMBERSTORM = 966,
    RUIN = 967,
    CONFLAGRATE = 968,
    DEVASTATION = 981,
    AFTERMATH = 982,
    DEMONIC_POWER = 983,
    WARLOCK_INTENSITY = 985,
    PYROCLASM = 986,
    FEL_CONCENTRATION = 1001,
    NIGHTFALL = 1002,
    IMPROVED_CORRUPTION = 1003,
    SOUL_SIPHON = 1004,
    SUPPRESSION = 1005,
    IMPROVED_CURSE_OF_WEAKNESS = 1006,
    IMPROVED_LIFE_TAP = 1007,
    GRIM_REACH = 1021,
    DARK_PACT = 1022,
    SIPHON_LIFE = 1041,
    SHADOW_MASTERY = 1042,
    AMPLIFY_CURSE = 1061,
    CURSE_OF_EXHAUSTION = 1081,
    IMPROVED_DRAIN_SOUL = 1101,
    AGGRESSION = 1122,
    SERRATED_BLADES = 1123,
    INCINERATION = 1141,
    ARCANE_MEDITATION = 1142,
    DRUID_SURVIVAL_INSTINCTS = 1162,
    DIVINE_FURY = 1181,
    MENTAL_STRENGTH = 1201,
    BORROWED_TIME = 1202,
    IMPROVED_HEALTHSTONE = 1221,
    IMPROVED_IMP = 1222,
    DEMONIC_EMBRACE = 1223,
    IMPROVED_HEALTH_FUNNEL = 1224,
    DEMONIC_BRUTALITY = 1225,
    FEL_DOMINATION = 1226,
    MASTER_SUMMONER = 1227,
    FEL_VITALITY = 1242,
    IMPROVED_SUCCUBUS = 1243,
    MASTER_DEMONOLOGIST = 1244,
    MASTER_CONJUROR = 1261,
    UNHOLY_POWER = 1262,
    DEMONIC_KNOWLEDGE = 1263,
    MANA_FEED = 1281,
    SOUL_LINK = 1282,
    MOLTEN_CORE = 1283,
    IMPROVED_CURSE_OF_AGONY = 1284,
    HUNTER_LIGHTNING_REFLEXES = 1303,
    ENTRAPMENT = 1304,
    TRAP_MASTERY = 1305,
    LOCK_AND_LOAD = 1306,
    SURVIVAL_TACTICS = 1309,
    SUREFOOTED = 1310,
    HUNTER_DEFLECTION = 1311,
    COUNTERATTACK = 1312,
    KILLER_INSTINCT = 1321,
    BLACK_ARROW = 1322,
    WYVERN_STING = 1325,
    IMPROVED_CONCUSSIVE_SHOT = 1341,
    EFFICIENCY = 1342,
    IMPROVED_HUNTERS_MARK = 1343,
    LETHAL_SHOTS = 1344,
    AIMED_SHOT = 1345,
    IMPROVED_ARCANE_SHOT = 1346,
    BARRAGE = 1347,
    IMPROVED_STINGS = 1348,
    MORTAL_SHOTS = 1349,
    CONCUSSIVE_BARRAGE = 1351,
    READINESS = 1353,
    TRUESHOT_AURA = 1361,
    RANGED_WEAPON_SPECIALIZATION = 1362,
    IMPROVED_ASPECT_OF_THE_MONKEY = 1381,
    IMPROVED_ASPECT_OF_THE_HAWK = 1382,
    PATHFINDING = 1384,
    IMPROVED_MEND_PET = 1385,
    BESTIAL_WRATH = 1386,
    INTIMIDATION = 1387,
    SPIRIT_BOND = 1388,
    ENDURANCE_TRAINING = 1389,
    BESTIAL_DISCIPLINE = 1390,
    HUNTER_FEROCITY = 1393,
    HUNTER_THICK_HIDE = 1395,
    UNLEASHED_FURY = 1396,
    FRENZY = 1397,
    IMPROVED_BLESSING_OF_MIGHT = 1401,
    PALADIN_VENGEANCE = 1402,
    PALADIN_DEFLECTION = 1403,
    BENEDICTION = 1407,
    PALADIN_TWO_HANDED_WEAPON_SPECIALIZATION = 1410,
    CONVICTION = 1411,
    REDOUBT = 1421,
    IMPROVED_DEVOTION_AURA = 1422,
    PALADIN_TOUGHNESS = 1423,
    GUARDIANS_FAVOR = 1425,
    RECKONING = 1426,
    PALADIN_ONE_HANDED_WEAPON_SPECIALIZATION = 1429,
    HOLY_SHIELD = 1430,
    BLESSING_OF_SANCTUARY = 1431,
    SPIRITUAL_FOCUS = 1432,
    DIVINE_FAVOR = 1433,
    AURA_MASTERY = 1435,
    REPENTANCE = 1441,
    DIVINITY = 1442,
    IMPROVED_LAY_ON_HANDS = 1443,
    HEALING_LIGHT = 1444,
    IMPROVED_BLESSING_OF_WISDOM = 1446,
    DIVINE_INTELLECT = 1449,
    IMPROVED_CONCENTRATION_AURA = 1450,
    ILLUMINATION = 1461,
    SEALS_OF_THE_PURE = 1463,
    HEART_OF_THE_CRUSADER = 1464,
    SANCTIFIED_LIGHT = 1465,
    SEAL_OF_COMMAND = 1481,
    IMPROVED_RIGHTEOUS_FURY = 1501,
    HOLY_SHOCK = 1502,
    IMPROVED_HAMMER_OF_JUSTICE = 1521,
    IMPROVED_BERSERKER_RAGE = 1541,
    IMPROVED_EXECUTE = 1542,
    IMPROVED_INTERCEPT = 1543,
    SPIRIT_OF_REDEMPTION = 1561,
    WARRIOR_DUAL_WIELD_SPECIALIZATION = 1581,
    SHIELD_SPECIALIZATION = 1601,
    SAVAGE_STRIKES = 1621,
    SURVIVALIST = 1622,
    IMPROVED_TRACKING = 1623,
    FOCUSED_FIRE = 1624,
    IMPROVED_REVIVE_PET = 1625,
    HOLY_POWER = 1627,
    UNYIELDING_FAITH = 1628,
    PALADIN_ANTICIPATION = 1629,
    IMPROVED_JUDGEMENTS = 1631,
    EYE_FOR_AN_EYE = 1632,
    VINDICATION = 1633,
    PURSUIT_OF_JUSTICE = 1634,
    HOLY_REACH = 1635,
    BLESSED_RECOVERY = 1636,
    LIGHTWELL = 1637,
    IMPROVED_VAMPIRIC_EMBRACE = 1638,
    MASTER_OF_ELEMENTS = 1639,
    ELEMENTAL_WARDING = 1640,
    ELEMENTAL_REACH = 1641,
    EYE_OF_THE_STORM = 1642,
    SHAMAN_WEAPON_MASTERY = 1643,
    ELEMENTAL_DEVASTATION = 1645,
    HEALING_GRACE = 1646,
    IMPROVED_WINDFURY_TOTEM = 1647,
    HEALING_WAY = 1648,
    MAGE_PRECISION = 1649,
    MAGIC_ABSORPTION = 1650,
    IMPROVED_DEFENSIVE_STANCE = 1652,
    WARRIOR_VITALITY = 1653,
    SHIELD_MASTERY = 1654,
    IMPROVED_WHIRLWIND = 1655,
    WARRIOR_PRECISION = 1657,
    IMPROVED_BERSERKER_STANCE = 1658,
    RAMPAGE = 1659,
    FOCUSED_RAGE = 1660,
    ENDLESS_RAGE = 1661,
    SUDDEN_DEATH = 1662,
    SECOND_WIND = 1663,
    BLOOD_FRENZY = 1664,
    DEVASTATE = 1666,
    MALEDICTION = 1667,
    IMPROVED_HOWL_OF_TERROR = 1668,
    CONTAGION = 1669,
    UNSTABLE_AFFLICTION = 1670,
    DEMONIC_AEGIS = 1671,
    SUMMON_FELGUARD = 1672,
    DEMONIC_TACTICS = 1673,
    SHADOWFURY = 1676,
    SHADOW_AND_FLAME = 1677,
    SOUL_LEECH = 1678,
    NETHER_PROTECTION = 1679,
    DEMONIC_RESILIENCE = 1680,
    UNRELENTING_STORM = 1682,
    ELEMENTAL_PRECISION = 1685,
    LIGHTNING_OVERLOAD = 1686,
    TOTEM_OF_WRATH = 1687,
    UNLEASHED_RAGE = 1689,
    DUAL_WIELD = 1690,
    MENTAL_QUICKNESS = 1691,
    SHAMAN_DUAL_WIELD_SPECIALIZATION = 1692,
    SHAMANISTIC_RAGE = 1693,
    SHAMAN_FOCUSED_MIND = 1695,
    NATURES_BLESSING = 1696,
    IMPROVED_CHAIN_HEAL = 1697,
    EARTH_SHIELD = 1698,
    NATURES_GUARDIAN = 1699,
    SLEIGHT_OF_HAND = 1700,
    HEIGHTENED_SENSES = 1701,
    DEADLINESS = 1702,
    WEAPON_EXPERTISE = 1703,
    ROGUE_VITALITY = 1705,
    BLADE_TWISTING = 1706,
    NERVES_OF_STEEL = 1707,
    SURPRISE_ATTACKS = 1709,
    ENVELOPING_SHADOWS = 1711,
    SINISTER_CALLING = 1712,
    MASTER_OF_SUBTLETY = 1713,
    SHADOWSTEP = 1714,
    MASTER_POISONER = 1715,
    FIND_WEAKNESS = 1718,
    MUTILATE = 1719,
    FLEET_FOOTED = 1721,
    CHEAT_DEATH = 1722,
    DEADENED_NERVES = 1723,
    IMPROVED_BLINK = 1724,
    ARCANE_POTENCY = 1725,
    PRISMATIC_CLOAK = 1726,
    ARCANE_EMPOWERMENT = 1727,
    MIND_MASTERY = 1728,
    SLOW = 1729,
    PLAYING_WITH_FIRE = 1730,
    BLAZING_SPEED = 1731,
    MOLTEN_FURY = 1732,
    PYROMANIAC = 1733,
    EMPOWERED_FIRE = 1734,
    DRAGONS_BREATH = 1735,
    FROZEN_CORE = 1736,
    COLD_AS_ICE = 1737,
    ARCTIC_WINDS = 1738,
    EMPOWERED_FROSTBOLT = 1740,
    SUMMON_WATER_ELEMENTAL = 1741,
    PURE_OF_HEART = 1742,
    PURIFYING_POWER = 1743,
    BLESSED_LIFE = 1744,
    LIGHTS_GRACE = 1745,
    HOLY_GUIDANCE = 1746,
    DIVINE_ILLUMINATION = 1747,
    STOICISM = 1748,
    SACRED_DUTY = 1750,
    ARDENT_DEFENDER = 1751,
    COMBAT_EXPERTISE = 1753,
    AVENGERS_SHIELD = 1754,
    CRUSADE = 1755,
    SANCTIFIED_RETRIBUTION = 1756,
    DIVINE_PURPOSE = 1757,
    JUDGEMENTS_OF_THE_WISE = 1758,
    FANATICISM = 1759,
    SANCTITY_OF_BATTLE = 1761,
    QUICK_RECOVERY = 1762,
    SHADOW_EMBRACE = 1763,
    EMPOWERED_CORRUPTION = 1764,
    BLESSED_RESILIENCE = 1765,
    SURGE_OF_LIGHT = 1766,
    EMPOWERED_HEALING = 1767,
    HOLY_CONCENTRATION = 1768,
    ABSOLUTION = 1769,
    FOCUSED_POWER = 1771,
    ENLIGHTENMENT = 1772,
    IMPROVED_FLASH_HEAL = 1773,
    PAIN_SUPPRESSION = 1774,
    PRIEST_FOCUSED_MIND = 1777,
    SHADOW_POWER = 1778,
    VAMPIRIC_TOUCH = 1779,
    MIND_MELT = 1781,
    LUNAR_GUIDANCE = 1782,
    BALANCE_OF_POWER = 1783,
    DREAMSTATE = 1784,
    IMPROVED_FAERIE_FIRE = 1785,
    WRATH_OF_CENARIUS = 1786,
    FORCE_OF_NATURE = 1787,
    EMPOWERED_TOUCH = 1788,
    EMPOWERED_REJUVENATION = 1789,
    NATURAL_PERFECTION = 1790,
    TREE_OF_LIFE = 1791,
    NURTURING_INSTINCT = 1792,
    PRIMAL_TENACITY = 1793,
    SURVIVAL_OF_THE_FITTEST = 1794,
    PREDATORY_INSTINCTS = 1795,
    MANGLE = 1796,
    LIVING_SPIRIT = 1797,
    IMPROVED_LEADER_OF_THE_PACK = 1798,
    ANIMAL_HANDLER = 1799,
    FEROCIOUS_INSPIRATION = 1800,
    CATLIKE_REFLEXES = 1801,
    SERPENTS_SWIFTNESS = 1802,
    THE_BEAST_WITHIN = 1803,
    COMBAT_EXPERIENCE = 1804,
    CAREFUL_AIM = 1806,
    MASTER_MARKSMAN = 1807,
    SILENCING_SHOT = 1808,
    RESOURCEFULNESS = 1809,
    HUNTER_SURVIVAL_INSTINCTS = 1810,
    THRILL_OF_THE_HUNT = 1811,
    EXPOSE_WEAKNESS = 1812,
    MASTER_TACTICIAN = 1813,
    SCATTER_SHOT = 1814,
    CIRCLE_OF_HEALING = 1815,
    MISERY = 1816,
    BACKLASH = 1817,
    GO_FOR_THE_THROAT = 1818,
    RAPID_KILLING = 1819,
    HAWK_EYE = 1820,
    IMPROVED_BARRAGE = 1821,
    NATURES_MAJESTY = 1822,
    CRUSADER_STRIKE = 1823,
    IMPROVED_MORTAL_STRIKE = 1824,
    COMBAT_POTENCY = 1825,
    SPELL_POWER = 1826,
    IMPROVED_SLICE_AND_DICE = 1827,
    ARCANE_FLOWS = 1843,
    INCANTERS_ABSORPTION = 1844,
    STUDENT_OF_THE_MIND = 1845,
    NETHERWIND_PRESENCE = 1846,
    ARCANE_BARRAGE = 1847,
    FIERY_PAYBACK = 1848,
    FIRESTARTER = 1849,
    HOT_STREAK = 1850,
    BURNOUT = 1851,
    LIVING_BOMB = 1852,
    FINGERS_OF_FROST = 1853,
    BRAIN_FREEZE = 1854,
    ENDURING_WINTER = 1855,
    CHILLED_TO_THE_BONE = 1856,
    DEEP_FREEZE = 1857,
    FOCUSED_WILL = 1858,
    TRAUMA = 1859,
    UNRELENTING_ASSAULT = 1860,
    STRENGTH_OF_ARMS = 1862,
    BLADESTORM = 1863,
    INTENSIFY_RAGE = 1864,
    FURIOUS_ATTACKS = 1865,
    BLOODSURGE = 1866,
    TITANS_GRIP = 1867,
    HEROIC_FURY = 1868,
    SAFEGUARD = 1870,
    SWORD_AND_BOARD = 1871,
    SHOCKWAVE = 1872,
    IMPROVED_FELHUNTER = 1873,
    DEATHS_EMBRACE = 1875,
    EVERLASTING_AFFLICTION = 1876,
    ERADICATION = 1878,
    DEMONIC_EMPOWERMENT = 1880,
    IMPROVED_DEMONIC_TACTICS = 1882,
    FEL_SYNERGY = 1883,
    NEMESIS = 1884,
    DEMONIC_PACT = 1885,
    METAMORPHOSIS = 1886,
    MOLTEN_SKIN = 1887,
    BACKDRAFT = 1888,
    IMPROVED_SOUL_LEECH = 1889,
    FIRE_AND_BRIMSTONE = 1890,
    CHAOS_BOLT = 1891,
    CRITICAL_BLOCK = 1893,
    ASPIRATION = 1894,
    DIVINE_AEGIS = 1895,
    RAPTURE = 1896,
    PENANCE = 1897,
    TWIN_DISCIPLINES = 1898,
    GRACE = 1901,
    EMPOWERED_RENEW = 1902,
    TEST_OF_FAITH = 1903,
    SERENDIPITY = 1904,
    DIVINE_PROVIDENCE = 1905,
    IMPROVED_SHADOWFORM = 1906,
    TWISTED_FAITH = 1907,
    PSYCHIC_HORROR = 1908,
    PAIN_AND_SUFFERING = 1909,
    DISPERSION = 1910,
    GUARDIAN_SPIRIT = 1911,
    IMPROVED_MOONKIN_FORM = 1912,
    OWLKIN_FRENZY = 1913,
    PRIMAL_PRECISION = 1914,
    MASTER_SHAPESHIFTER = 1915,
    GIFT_OF_THE_EARTHMOTHER = 1916,
    WILD_GROWTH = 1917,
    REND_AND_TEAR = 1918,
    INFECTED_WOUNDS = 1919,
    IMPROVED_MANGLE = 1920,
    KING_OF_THE_JUNGLE = 1921,
    LIVING_SEED = 1922,
    TYPHOON = 1923,
    ECLIPSE = 1924,
    GALE_WINDS = 1925,
    STARFALL = 1926,
    BERSERK = 1927,
    EARTH_AND_MOON = 1928,
    REVITALIZE = 1929,
    IMPROVED_TREE_OF_LIFE = 1930,
    VIRULENCE = 1932,
    MORBIDITY = 1933,
    RAVENOUS_DEAD = 1934,
    IMPROVED_BLOOD_PRESENCE = 1936,
    BLADED_ARMOR = 1938,
    BUTCHERY = 1939,
    RUNE_TAP = 1941,
    IMPROVED_RUNE_TAP = 1942,
    DARK_CONVICTION = 1943,
    BLOODY_VENGEANCE = 1944,
    SUBVERSION = 1945,
    SCENT_OF_BLOOD = 1948,
    MARK_OF_BLOOD = 1949,
    VETERAN_OF_THE_THIRD_WAR = 1950,
    VENDETTA = 1953,
    HYSTERIA = 1954,
    SUDDEN_DOOM = 1955,
    HEART_STRIKE = 1957,
    MIGHT_OF_MOGRAINE = 1958,
    WILL_OF_THE_NECROPOLIS = 1959,
    BLOODWORMS = 1960,
    DANCING_RUNE_WEAPON = 1961,
    CRYPT_FEVER = 1962,
    EPIDEMIC = 1963,
    DEATH_KNIGHT_TOUGHNESS = 1968,
    ENDLESS_WINTER = 1971,
    BLACK_ICE = 1973,
    FROST_STRIKE = 1975,
    UNBREAKABLE_ARMOR = 1979,
    DEATHCHILL = 1980,
    CHILL_OF_THE_GRAVE = 1981,
    MASTER_OF_GHOULS = 1984,
    CORPSE_EXPLOSION = 1985,
    HOWLING_BLAST = 1989,
    FRIGID_DREADPLATE = 1990,
    RIME = 1992,
    MERCILESS_COMBAT = 1993,
    UNHOLY_BLIGHT = 1996,
    ACCLIMATION = 1997,
    TUNDRA_STALKER = 1998,
    HUNGERING_COLD = 1999,
    SUMMON_GARGOYLE = 2000,
    REAPING = 2001,
    WANDERING_PLAGUE = 2003,
    BLOOD_CAKED_BLADE = 2004,
    IMPURITY = 2005,
    BONE_SHIELD = 2007,
    OUTBREAK = 2008,
    MAGIC_SUPPRESSION = 2009,
    DIRGE = 2011,
    IMPROVED_UNHOLY_PRESENCE = 2013,
    BLOODY_STRIKES = 2015,
    BLADE_BARRIER = 2017,
    SPELL_DEFLECTION = 2018,
    VAMPIRIC_BLOOD = 2019,
    RUNIC_POWER_MASTERY = 2020,
    NERVES_OF_COLD_STEEL = 2022,
    UNHOLY_COMMAND = 2025,
    IMPROVED_SPIRIT_TAP = 2027,
    IMPROVED_FROST_PRESENCE = 2029,
    GLACIER_ROT = 2030,
    IMPROVED_ICY_TOUCH = 2031,
    BLOOD_GORGED = 2034,
    ICY_REACH = 2035,
    RAGE_OF_RIVENDARE = 2036,
    ON_A_PALE_HORSE = 2039,
    GUILE_OF_GOREFIEND = 2040,
    HAUNT = 2041,
    ICY_TALONS = 2042,
    EBON_PLAGUEBRINGER = 2043,
    KILLING_MACHINE = 2044,
    EMPOWERED_IMP = 2045,
    NECROSIS = 2047,
    ANNIHILATION = 2048,
    ELEMENTAL_OATH = 2049,
    ASTRAL_SHIFT = 2050,
    LAVA_FLOWS = 2051,
    STORM_EARTH_AND_FIRE = 2052,
    THUNDERSTORM = 2053,
    IMPROVED_STORMSTRIKE = 2054,
    STATIC_SHOCK = 2055,
    EARTHEN_POWER = 2056,
    MAELSTROM_WEAPON = 2057,
    FERAL_SPIRIT = 2058,
    IMPROVED_EARTH_SHIELD = 2059,
    BLESSING_OF_THE_ETERNALS = 2060,
    ANCESTRAL_AWAKENING = 2061,
    TIDAL_WAVES = 2063,
    RIPTIDE = 2064,
    DEADLY_BREW = 2065,
    TURN_THE_TABLES = 2066,
    BLOOD_SPATTER = 2068,
    FOCUSED_ATTACKS = 2069,
    CUT_TO_THE_CHASE = 2070,
    HUNGER_FOR_BLOOD = 2071,
    THROWING_SPECIALIZATION = 2072,
    UNFAIR_ADVANTAGE = 2073,
    SAVAGE_COMBAT = 2074,
    PREY_ON_THE_WEAK = 2075,
    KILLING_SPREE = 2076,
    WAYLAY = 2077,
    HONOR_AMONG_THIEVES = 2078,
    FILTHY_TRICKS = 2079,
    SLAUGHTER_FROM_THE_SHADOWS = 2080,
    SHADOW_DANCE = 2081,
    VICIOUS_STRIKES = 2082,
    MENTAL_DEXTERITY = 2083,
    CLEANSE_SPIRIT = 2084,
    GHOUL_FRENZY = 2085,
    DEATH_RUNE_MASTERY = 2086,
    EARTHS_GRASP = 2101,
    ABOMINATIONS_MIGHT = 2105,
    HUNTER_CULLING_THE_HERD = 2106,
    HUNTER_COBRA_REFLEXES = 2107,
    HUNTER_DASH = 2109,
    HUNTER_CULLING_THE_HERD2 = 2110,
    HUNTER_CHARGE = 2111,
    HUNTER_GREAT_STAMINA = 2112,
    HUNTER_NATURAL_ARMOR = 2113,
    HUNTER_COBRA_REFLEXES2 = 2114,
    HUNTER_GREAT_STAMINA2 = 2116,
    HUNTER_NATURAL_ARMOR2 = 2117,
    HUNTER_COBRA_REFLEXES3 = 2118,
    HUNTER_DASH2 = 2119,
    HUNTER_GREAT_STAMINA3 = 2120,
    HUNTER_NATURAL_ARMOR3 = 2121,
    PET_BARDING = 2122,
    GUARD_DOG = 2123,
    IMPROVED_COWER = 2124,
    HUNTER_SPIKED_COLLAR = 2125,
    HUNTER_SPIKED_COLLAR2 = 2126,
    HUNTER_SPIKED_COLLAR3 = 2127,
    BLOODTHIRSTY = 2128,
    SPIDERS_BITE = 2129,
    PIERCING_SHOTS = 2130,
    RAPID_RECUPERATION = 2131,
    WILD_QUIVER = 2132,
    IMPROVED_STEADY_SHOT = 2133,
    MARKED_FOR_DEATH = 2134,
    CHIMERA_SHOT = 2135,
    INVIGORATION = 2136,
    COBRA_STRIKES = 2137,
    ASPECT_MASTERY = 2138,
    BEAST_MASTERY = 2139,
    LONGEVITY = 2140,
    NOXIOUS_STINGS = 2141,
    POINT_OF_NO_ESCAPE = 2142,
    SNIPER_TRAINING = 2143,
    HUNTING_PARTY = 2144,
    EXPLOSIVE_SHOT = 2145,
    SANCTIFIED_WRATH = 2147,
    SWIFT_RETRIBUTION = 2148,
    RIGHTEOUS_VENGEANCE = 2149,
    DIVINE_STORM = 2150,
    HUNTER_BOARS_SPEED = 2151,
    HUNTER_LIONHEARTED = 2152,
    LICK_YOUR_WOUNDS = 2153,
    HUNTER_GREAT_RESISTANCE = 2154,
    RABID = 2155,
    HEART_OF_THE_PHOENIX = 2156,
    CALL_OF_THE_WILD = 2157,
    HUNTER_BOARS_SPEED2 = 2160,
    HUNTER_GREAT_RESISTANCE2 = 2161,
    HUNTER_LIONHEARTED2 = 2162,
    HUNTER_GRACE_OF_THE_MANTIS = 2163,
    HUNTER_BOARS_SPEED3 = 2165,
    HUNTER_CULLING_THE_HERD3 = 2166,
    HUNTER_LIONHEARTED3 = 2167,
    HUNTER_GREAT_RESISTANCE3 = 2168,
    INTERVENE = 2169,
    TAUNT = 2170,
    HUNTER_LAST_STAND = 2171,
    HUNTER_ROAR_OF_SACRIFICE = 2172,
    BLOOD_OF_THE_RHINO = 2173,
    BULLHEADED = 2175,
    THE_ART_OF_WAR = 2176,
    CORNERED = 2177,
    SHEATH_OF_LIGHT = 2179,
    WOLVERINE_BITE = 2181,
    OWLS_FOCUS = 2182,
    FEEDING_FRENZY = 2183,
    ROAR_OF_RECOVERY = 2184,
    DIVINE_STRENGTH = 2185,
    SACRED_CLEANSING = 2190,
    ENLIGHTENED_JUDGEMENTS = 2191,
    BEACON_OF_LIGHT = 2192,
    INFUSION_OF_LIGHT = 2193,
    GUARDED_BY_THE_LIGHT = 2194,
    TOUCHED_BY_THE_LIGHT = 2195,
    HAMMER_OF_THE_RIGHTEOUS = 2196,
    FOCUSED_AIM = 2197,
    BLESSED_HANDS = 2198,
    JUDGEMENTS_OF_THE_PURE = 2199,
    JUDGEMENTS_OF_THE_JUST = 2200,
    HUNTER_DIVE = 2201,
    HUNTER_DIVE2 = 2203,
    SHIELD_OF_THE_TEMPLAR = 2204,
    IMPROVED_FEAR = 2205,
    CARRION_FEEDER = 2206,
    HUNTER_MOBILITY = 2207,
    HUNTER_MOBILITY2 = 2208,
    MISSILE_BARRAGE = 2209,
    BLOOD_OF_THE_NORTH = 2210,
    FOCUS_MAGIC = 2211,
    BURNING_DETERMINATION = 2212,
    SHATTERED_BARRIER = 2214,
    LICHBORNE = 2215,
    SCOURGE_STRIKE = 2216,
    DEATH_KNIGHT_TWO_HANDED_WEAPON_SPECIALIZATION = 2217,
    DEATH_KNIGHT_ANTICIPATION = 2218,
    SWOOP = 2219,
    ANTI_MAGIC_ZONE = 2221,
    TORMENT_THE_WEAK = 2222,
    IMPROVED_ICY_TALONS = 2223,
    NIGHT_OF_THE_DEAD = 2225,
    DESECRATION = 2226,
    KINDRED_SPIRITS = 2227,
    HUNTER_VS_WILD = 2228,
    T_N_T = 2229,
    WRECKING_CREW = 2231,
    TASTE_FOR_BLOOD = 2232,
    IMPROVED_SLAM = 2233,
    UNENDING_FURY = 2234,
    RENEWED_HOPE = 2235,
    WARBRINGER = 2236,
    HUNTER_CHARGE2 = 2237,
    GENESIS = 2238,
    IMPROVED_INSECT_SWARM = 2239,
    NATURES_SPLENDOR = 2240,
    PROTECTOR_OF_THE_PACK = 2241,
    NATURAL_REACTION = 2242,
    RELENTLESS_STRIKES = 2244,
    PANDEMIC = 2245,
    DAMAGE_SHIELD = 2246,
    IMPROVED_SPELL_REFLECTION = 2247,
    LAVA_LASH = 2249,
    ARMORED_TO_THE_TEETH = 2250,
    SHAMANISM = 2252,
    HUNTER_WILD_HUNT = 2253,
    SHARK_ATTACK = 2254,
    HUNTER_WILD_HUNT2 = 2255,
    HUNTER_WILD_HUNT3 = 2256,
    HUNTER_GRACE_OF_THE_MANTIS2 = 2257,
    SILVERBACK = 2258,
    IMPROVED_DEATH_STRIKE = 2259,
    CHILBLAINS = 2260,
    DECIMATION = 2261,
    BOOMING_ECHOES = 2262,
    FROZEN_POWER = 2263,
    IMPROVED_BARKSKIN = 2264,
    PRIMAL_GORE = 2266,
    IMPROVED_DEVOURING_PLAGUE = 2267,
    REFLECTIVE_SHIELD = 2268,
    THUNDERSTOMP = 2277,
    HUNTER_ROAR_OF_SACRIFICE2 = 2278,
    BODY_AND_SOUL = 2279,
    DIVINE_SACRIFICE = 2280,
    DIVINE_GUARDIAN = 2281,
    SPIRITUAL_ATTUNEMENT = 2282,
    JUGGERNAUT = 2283,
    THREAT_OF_THASSARIAN = 2284,
    DESOLATION = 2285,
};

enum class TalentInfoType : uint8_t {
    PLAYER = 0,
    PET = 1,
};

enum class TextEmote : uint32_t {
    AGREE = 1,
    AMAZE = 2,
    ANGRY = 3,
    APOLOGIZE = 4,
    APPLAUD = 5,
    BASHFUL = 6,
    BECKON = 7,
    BEG = 8,
    BITE = 9,
    BLEED = 10,
    BLINK = 11,
    BLUSH = 12,
    BONK = 13,
    BORED = 14,
    BOUNCE = 15,
    BRB = 16,
    BOW = 17,
    BURP = 18,
    BYE = 19,
    CACKLE = 20,
    CHEER = 21,
    CHICKEN = 22,
    CHUCKLE = 23,
    CLAP = 24,
    CONFUSED = 25,
    CONGRATULATE = 26,
    COUGH = 27,
    COWER = 28,
    CRACK = 29,
    CRINGE = 30,
    CRY = 31,
    CURIOUS = 32,
    CURTSEY = 33,
    DANCE = 34,
    DRINK = 35,
    DROOL = 36,
    EAT = 37,
    EYE = 38,
    FART = 39,
    FIDGET = 40,
    FLEX = 41,
    FROWN = 42,
    GASP = 43,
    GAZE = 44,
    GIGGLE = 45,
    GLARE = 46,
    GLOAT = 47,
    GREET = 48,
    GRIN = 49,
    GROAN = 50,
    GROVEL = 51,
    GUFFAW = 52,
    HAIL = 53,
    HAPPY = 54,
    HELLO = 55,
    HUG = 56,
    HUNGRY = 57,
    KISS = 58,
    KNEEL = 59,
    LAUGH = 60,
    LAYDOWN = 61,
    MASSAGE = 62,
    MOAN = 63,
    MOON = 64,
    MOURN = 65,
    NO = 66,
    NOD = 67,
    NOSE_PICK = 68,
    PANIC = 69,
    PEER = 70,
    PLEAD = 71,
    POINT = 72,
    POKE = 73,
    PRAY = 74,
    ROAR = 75,
    ROFL = 76,
    RUDE = 77,
    SALUTE = 78,
    SCRATCH = 79,
    SEXY = 80,
    SHAKE = 81,
    SHOUT = 82,
    SHRUG = 83,
    SHY = 84,
    SIGH = 85,
    SIT = 86,
    SLEEP = 87,
    SNARL = 88,
    SPIT = 89,
    STARE = 90,
    SURPRISED = 91,
    SURRENDER = 92,
    TALK = 93,
    TALK_EX = 94,
    TALK_Q = 95,
    TAP = 96,
    THANK = 97,
    THREATEN = 98,
    TIRED = 99,
    VICTORY = 100,
    WAVE = 101,
    WELCOME = 102,
    WHINE = 103,
    WHISTLE = 104,
    WORK = 105,
    YAWN = 106,
    BOGGLE = 107,
    CALM = 108,
    COLD = 109,
    COMFORT = 110,
    CUDDLE = 111,
    DUCK = 112,
    INSULT = 113,
    INTRODUCE = 114,
    JK = 115,
    LICK = 116,
    LISTEN = 117,
    LOST = 118,
    MOCK = 119,
    PONDER = 120,
    POUNCE = 121,
    PRAISE = 122,
    PURR = 123,
    PUZZLE = 124,
    RAISE = 125,
    READY = 126,
    SHIMMY = 127,
    SHIVER = 128,
    SHOO = 129,
    SLAP = 130,
    SMIRK = 131,
    SNIFF = 132,
    SNUB = 133,
    SOOTHE = 134,
    STINK = 135,
    TAUNT = 136,
    TEASE = 137,
    THIRSTY = 138,
    VETO = 139,
    SNICKER = 140,
    STAND = 141,
    TICKLE = 142,
    VIOLIN = 143,
    SMILE = 163,
    RASP = 183,
    PITY = 203,
    GROWL = 204,
    BARK = 205,
    SCARED = 223,
    FLOP = 224,
    LOVE = 225,
    MOO = 226,
    COMMEND = 243,
    TRAIN = 264,
    HELPME = 303,
    INCOMING = 304,
    CHARGE = 305,
    FLEE = 306,
    ATTACK_MY_TARGET = 307,
    OOM = 323,
    FOLLOW = 324,
    WAIT = 325,
    HEAL_ME = 326,
    OPEN_FIRE = 327,
    FLIRT = 328,
    JOKE = 329,
    GOLF_CLAP = 343,
    WINK = 363,
    PAT = 364,
    SERIOUS = 365,
    MOUNT_SPECIAL = 366,
    GOOD_LUCK = 367,
    BLAME = 368,
    BLANK = 369,
    BRANDISH = 370,
    BREATH = 371,
    DISAGREE = 372,
    DOUBT = 373,
    EMBARRASS = 374,
    ENCOURAGE = 375,
    ENEMY = 376,
    EYE_BROW = 377,
    TOAST = 378,
    FAIL = 379,
    HIGH_FIVE = 380,
    ABSENT = 381,
    ARM = 382,
    AWE = 383,
    BACKPACK = 384,
    BAD_FEELING = 385,
    CHALLENGE = 386,
    CHUG = 387,
    DING = 389,
    FACE_PALM = 390,
    FAINT = 391,
    GO = 392,
    GOING = 393,
    GLOWER = 394,
    HEADACHE = 395,
    HICCUP = 396,
    HISS = 398,
    HOLD_HAND = 399,
    HURRY = 401,
    IDEA = 402,
    JEALOUS = 403,
    LUCK = 404,
    MAP = 405,
    MERCY = 406,
    MUTTER = 407,
    NERVOUS = 408,
    OFFER = 409,
    PET = 410,
    PINCH = 411,
    PROUD = 413,
    PROMISE = 414,
    PULSE = 415,
    PUNCH = 416,
    POUT = 417,
    REGRET = 418,
    REVENGE = 420,
    ROLL_EYES = 421,
    RUFFLE = 422,
    SAD = 423,
    SCOFF = 424,
    SCOLD = 425,
    SCOWL = 426,
    SEARCH = 427,
    SHAKEFIST = 428,
    SHIFTY = 429,
    SHUDDER = 430,
    SIGNAL = 431,
    SILENCE = 432,
    SINGS = 433,
    SMACK = 434,
    SNEAK = 435,
    SNEEZE = 436,
    SNORT = 437,
    SQUEAL = 438,
    STOP_ATTACK = 439,
    SUSPICIOUS = 440,
    THINK = 441,
    TRUCE = 442,
    TWIDDLE = 443,
    WARN = 444,
    SNAP = 445,
    CHARM = 446,
    COVER_EARS = 447,
    CROSS_ARMS = 448,
    LOOK = 449,
    OBJECT = 450,
    SWEAT = 451,
    YW = 453,
};

enum class TimerType : uint32_t {
    FATIGUE = 0,
    BREATH = 1,
    FEIGN_DEATH = 2,
    ENVIRONMENTAL = 3,
};

enum class TitleEarnStatus : uint32_t {
    LOST = 0,
    EARNED = 1,
};

enum class TradeStatus : uint32_t {
    BUSY = 0,
    BEGIN_TRADE = 1,
    OPEN_WINDOW = 2,
    TRADE_CANCELED = 3,
    TRADE_ACCEPT = 4,
    BUSY_2 = 5,
    NO_TARGET = 6,
    BACK_TO_TRADE = 7,
    TRADE_COMPLETE = 8,
    TRADE_REJECTED = 9,
    TARGET_TO_FAR = 10,
    WRONG_FACTION = 11,
    CLOSE_WINDOW = 12,
    UNKNOWN_13 = 13,
    IGNORE_YOU = 14,
    YOU_STUNNED = 15,
    TARGET_STUNNED = 16,
    YOU_DEAD = 17,
    TARGET_DEAD = 18,
    YOU_LOGOUT = 19,
    TARGET_LOGOUT = 20,
    TRIAL_ACCOUNT = 21,
    ONLY_CONJURED = 22,
    NOT_ON_TAPLIST = 23,
};

enum class TrainerSpellState : uint8_t {
    GREEN = 0,
    RED = 1,
    GRAY = 2,
};

enum class TrainingFailureReason : uint32_t {
    UNAVAILABLE = 0,
    NOT_ENOUGH_MONEY = 1,
    NOT_ENOUGH_SKILL = 2,
};

enum class TransferAbortReason : uint8_t {
    NONE = 0,
    ERROR = 1,
    MAX_PLAYERS = 2,
    NOT_FOUND = 3,
    TOO_MANY_INSTANCES = 4,
    ZONE_IN_COMBAT = 6,
    INSUFFICIENT_EXPANSION_LEVEL = 7,
    DIFFICULTY_NOT_AVAILABLE = 8,
    UNIQUE_MESSAGE = 9,
    TOO_MANY_REALM_INSTANCES = 10,
    NEED_GROUP = 11,
    NOT_FOUND1 = 12,
    NOT_FOUND2 = 13,
    NOT_FOUND3 = 14,
    REALM_ONLY = 15,
    MAP_NOT_ALLOWED = 16,
};

enum class UnitStandState : uint8_t {
    STAND = 0,
    SIT = 1,
    SIT_CHAIR = 2,
    SLEEP = 3,
    SIT_LOW_CHAIR = 4,
    SIT_MEDIUM_CHAIR = 5,
    SIT_HIGH_CHAIR = 6,
    DEAD = 7,
    KNEEL = 8,
    CUSTOM = 9,
};

enum class UpdateType : uint8_t {
    VALUES = 0,
    MOVEMENT = 1,
    CREATE_OBJECT = 2,
    CREATE_OBJECT2 = 3,
    OUT_OF_RANGE_OBJECTS = 4,
    NEAR_OBJECTS = 5,
};

enum class WeatherChangeType : uint8_t {
    SMOOTH = 0,
    INSTANT = 1,
};

enum class WeatherType : uint32_t {
    FINE = 0,
    FOG = 1,
    LIGHT_RAIN = 3,
    MEDIUM_RAIN = 4,
    HEAVY_RAIN = 5,
    LIGHT_SNOW = 6,
    MEDIUM_SNOW = 7,
    HEAVY_SNOW = 8,
    LIGHT_SANDSTORM = 22,
    MEDIUM_SANDSTORM = 41,
    HEAVY_SANDSTORM = 42,
    THUNDERS = 86,
    BLACKRAIN = 90,
};

enum class WorldResult : uint8_t {
    RESPONSE_SUCCESS = 0,
    RESPONSE_FAILURE = 1,
    RESPONSE_CANCELLED = 2,
    RESPONSE_DISCONNECTED = 3,
    RESPONSE_FAILED_TO_CONNECT = 4,
    RESPONSE_CONNECTED = 5,
    RESPONSE_VERSION_MISMATCH = 6,
    CSTATUS_CONNECTING = 7,
    CSTATUS_NEGOTIATING_SECURITY = 8,
    CSTATUS_NEGOTIATION_COMPLETE = 9,
    CSTATUS_NEGOTIATION_FAILED = 10,
    CSTATUS_AUTHENTICATING = 11,
    AUTH_OK = 12,
    AUTH_FAILED = 13,
    AUTH_REJECT = 14,
    AUTH_BAD_SERVER_PROOF = 15,
    AUTH_UNAVAILABLE = 16,
    AUTH_SYSTEM_ERROR = 17,
    AUTH_BILLING_ERROR = 18,
    AUTH_BILLING_EXPIRED = 19,
    AUTH_VERSION_MISMATCH = 20,
    AUTH_UNKNOWN_ACCOUNT = 21,
    AUTH_INCORRECT_PASSWORD = 22,
    AUTH_SESSION_EXPIRED = 23,
    AUTH_SERVER_SHUTTING_DOWN = 24,
    AUTH_ALREADY_LOGGING_IN = 25,
    AUTH_LOGIN_SERVER_NOT_FOUND = 26,
    AUTH_WAIT_QUEUE = 27,
    AUTH_BANNED = 28,
    AUTH_ALREADY_ONLINE = 29,
    AUTH_NO_TIME = 30,
    AUTH_DB_BUSY = 31,
    AUTH_SUSPENDED = 32,
    AUTH_PARENTAL_CONTROL = 33,
    AUTH_LOCKED_ENFORCED = 34,
    REALM_LIST_IN_PROGRESS = 35,
    REALM_LIST_SUCCESS = 36,
    REALM_LIST_FAILED = 37,
    REALM_LIST_INVALID = 38,
    REALM_LIST_REALM_NOT_FOUND = 39,
    ACCOUNT_CREATE_IN_PROGRESS = 40,
    ACCOUNT_CREATE_SUCCESS = 41,
    ACCOUNT_CREATE_FAILED = 42,
    CHAR_LIST_RETRIEVING = 43,
    CHAR_LIST_RETRIEVED = 44,
    CHAR_LIST_FAILED = 45,
    CHAR_CREATE_IN_PROGRESS = 46,
    CHAR_CREATE_SUCCESS = 47,
    CHAR_CREATE_ERROR = 48,
    CHAR_CREATE_FAILED = 49,
    CHAR_CREATE_NAME_IN_USE = 50,
    CHAR_CREATE_DISABLED = 51,
    CHAR_CREATE_PVP_TEAMS_VIOLATION = 52,
    CHAR_CREATE_SERVER_LIMIT = 53,
    CHAR_CREATE_ACCOUNT_LIMIT = 54,
    CHAR_CREATE_SERVER_QUEUE = 55,
    CHAR_CREATE_ONLY_EXISTING = 56,
    CHAR_CREATE_EXPANSION = 57,
    CHAR_CREATE_EXPANSION_CLASS = 58,
    CHAR_CREATE_LEVEL_REQUIREMENT = 59,
    CHAR_CREATE_UNIQUE_CLASS_LIMIT = 60,
    CHAR_CREATE_CHARACTER_IN_GUILD = 61,
    CHAR_CREATE_RESTRICTED_RACECLASS = 62,
    CHAR_CREATE_CHARACTER_CHOOSE_RACE = 63,
    CHAR_CREATE_CHARACTER_ARENA_LEADER = 64,
    CHAR_CREATE_CHARACTER_DELETE_MAIL = 65,
    CHAR_CREATE_CHARACTER_SWAP_FACTION = 66,
    CHAR_CREATE_CHARACTER_RACE_ONLY = 67,
    CHAR_CREATE_CHARACTER_GOLD_LIMIT = 68,
    CHAR_CREATE_FORCE_LOGIN = 69,
    CHAR_DELETE_IN_PROGRESS = 70,
    CHAR_DELETE_SUCCESS = 71,
    CHAR_DELETE_FAILED = 72,
    CHAR_DELETE_FAILED_LOCKED_FOR_TRANSFER = 73,
    CHAR_DELETE_FAILED_GUILD_LEADER = 74,
    CHAR_DELETE_FAILED_ARENA_CAPTAIN = 75,
    CHAR_LOGIN_IN_PROGRESS = 76,
    CHAR_LOGIN_SUCCESS = 77,
    CHAR_LOGIN_NO_WORLD = 78,
    CHAR_LOGIN_DUPLICATE_CHARACTER = 79,
    CHAR_LOGIN_NO_INSTANCES = 80,
    CHAR_LOGIN_FAILED = 81,
    CHAR_LOGIN_DISABLED = 82,
    CHAR_LOGIN_NO_CHARACTER = 83,
    CHAR_LOGIN_LOCKED_FOR_TRANSFER = 84,
    CHAR_LOGIN_LOCKED_BY_BILLING = 85,
    CHAR_LOGIN_LOCKED_BY_MOBILE_AH = 86,
    CHAR_NAME_SUCCESS = 87,
    CHAR_NAME_FAILURE = 88,
    CHAR_NAME_NO_NAME = 89,
    CHAR_NAME_TOO_SHORT = 90,
    CHAR_NAME_TOO_LONG = 91,
    CHAR_NAME_INVALID_CHARACTER = 92,
    CHAR_NAME_MIXED_LANGUAGES = 93,
    CHAR_NAME_PROFANE = 94,
    CHAR_NAME_RESERVED = 95,
    CHAR_NAME_INVALID_APOSTROPHE = 96,
    CHAR_NAME_MULTIPLE_APOSTROPHES = 97,
    CHAR_NAME_THREE_CONSECUTIVE = 98,
    CHAR_NAME_INVALID_SPACE = 99,
    CHAR_NAME_CONSECUTIVE_SPACES = 100,
    CHAR_NAME_RUSSIAN_CONSECUTIVE_SILENT_CHARACTERS = 101,
    CHAR_NAME_RUSSIAN_SILENT_CHARACTER_AT_BEGINNING_OR_END = 102,
    CHAR_NAME_DECLENSION_DOESNT_MATCH_BASE_NAME = 103,
};

enum AllowedClass : uint32_t {
    ALLOWED_CLASS_ALL = 0,
    ALLOWED_CLASS_WARRIOR = 1,
    ALLOWED_CLASS_PALADIN = 2,
    ALLOWED_CLASS_HUNTER = 4,
    ALLOWED_CLASS_ROGUE = 8,
    ALLOWED_CLASS_PRIEST = 16,
    ALLOWED_CLASS_DEATH_KNIGHT = 32,
    ALLOWED_CLASS_SHAMAN = 64,
    ALLOWED_CLASS_MAGE = 128,
    ALLOWED_CLASS_WARLOCK = 256,
    ALLOWED_CLASS_DRUID = 1024,
};

enum AllowedRace : uint32_t {
    ALLOWED_RACE_ALL = 0,
    ALLOWED_RACE_HUMAN = 1,
    ALLOWED_RACE_ORC = 2,
    ALLOWED_RACE_DWARF = 4,
    ALLOWED_RACE_NIGHT_ELF = 8,
    ALLOWED_RACE_UNDEAD = 16,
    ALLOWED_RACE_TAUREN = 32,
    ALLOWED_RACE_GNOME = 64,
    ALLOWED_RACE_TROLL = 128,
    ALLOWED_RACE_GOBLIN = 256,
    ALLOWED_RACE_BLOODELF = 512,
    ALLOWED_RACE_DRAENEI = 1024,
    ALLOWED_RACE_FEL_ORC = 2048,
    ALLOWED_RACE_NAGA = 4096,
    ALLOWED_RACE_BROKEN = 8192,
    ALLOWED_RACE_SKELETON = 16384,
    ALLOWED_RACE_VRYKUL = 32768,
    ALLOWED_RACE_TUSKARR = 65536,
    ALLOWED_RACE_FOREST_TROLL = 131072,
    ALLOWED_RACE_TAUNKA = 262144,
    ALLOWED_RACE_NORTHREND_SKELETON = 524288,
    ALLOWED_RACE_ICE_TROLL = 1048576,
};

enum AuraFlag : uint8_t {
    AURA_FLAG_EMPTY = 0,
    AURA_FLAG_EFFECT_1 = 1,
    AURA_FLAG_EFFECT_2 = 2,
    AURA_FLAG_EFFECT_3 = 4,
    AURA_FLAG_NOT_CASTER = 8,
    AURA_FLAG_SET = 9,
    AURA_FLAG_CANCELLABLE = 16,
    AURA_FLAG_DURATION = 32,
    AURA_FLAG_HIDE = 64,
    AURA_FLAG_NEGATIVE = 128,
};

enum BagFamily : uint32_t {
    BAG_FAMILY_NONE = 0,
    BAG_FAMILY_ARROWS = 1,
    BAG_FAMILY_BULLETS = 2,
    BAG_FAMILY_SOUL_SHARDS = 4,
    BAG_FAMILY_LEATHERWORKING_SUPPLIES = 8,
    BAG_FAMILY_INSCRIPTION_SUPPLIES = 16,
    BAG_FAMILY_HERBS = 32,
    BAG_FAMILY_ENCHANTING_SUPPLIES = 64,
    BAG_FAMILY_ENGINEERING_SUPPLIES = 128,
    BAG_FAMILY_KEYS = 256,
    BAG_FAMILY_GEMS = 512,
    BAG_FAMILY_MINING_SUPPLIES = 1024,
    BAG_FAMILY_SOULBOUND_EQUIPMENT = 2048,
    BAG_FAMILY_VANITY_PETS = 4096,
    BAG_FAMILY_CURRENCY_TOKENS = 8192,
    BAG_FAMILY_QUEST_ITEMS = 16384,
};

enum BillingPlanFlags : uint8_t {
    BILLING_PLAN_FLAGS_NONE = 0,
    BILLING_PLAN_FLAGS_UNUSED = 1,
    BILLING_PLAN_FLAGS_RECURRING_BILL = 2,
    BILLING_PLAN_FLAGS_FREE_TRIAL = 4,
    BILLING_PLAN_FLAGS_IGR = 8,
    BILLING_PLAN_FLAGS_USAGE = 16,
    BILLING_PLAN_FLAGS_TIME_MIXTURE = 32,
    BILLING_PLAN_FLAGS_RESTRICTED = 64,
    BILLING_PLAN_FLAGS_ENABLE_CAIS = 128,
};

enum CastFlags : uint32_t {
    CAST_FLAGS_NONE = 0,
    CAST_FLAGS_PENDING = 1,
    CAST_FLAGS_HAS_TRAJECTORY = 2,
    CAST_FLAGS_UNKNOWN_3 = 4,
    CAST_FLAGS_UNKNOWN_4 = 8,
    CAST_FLAGS_UNKNOWN_5 = 16,
    CAST_FLAGS_AMMO = 32,
    CAST_FLAGS_UNKNOWN_7 = 64,
    CAST_FLAGS_UNKNOWN_8 = 128,
    CAST_FLAGS_UNKNOWN_9 = 256,
    CAST_FLAGS_UNKNOWN_10 = 512,
    CAST_FLAGS_UNKNOWN_11 = 1024,
    CAST_FLAGS_POWER_LEFT_SELF = 2048,
    CAST_FLAGS_UNKNOWN_13 = 4096,
    CAST_FLAGS_UNKNOWN_14 = 8192,
    CAST_FLAGS_UNKNOWN_15 = 16384,
    CAST_FLAGS_UNKNOWN_16 = 32768,
    CAST_FLAGS_UNKNOWN_17 = 65536,
    CAST_FLAGS_ADJUST_MISSILE = 131072,
    CAST_FLAGS_NO_GCD = 262144,
    CAST_FLAGS_VISUAL_CHAIN = 524288,
    CAST_FLAGS_UNKNOWN_21 = 1048576,
    CAST_FLAGS_RUNE_LIST = 2097152,
    CAST_FLAGS_UNKNOWN_23 = 4194304,
    CAST_FLAGS_UNKNOWN_24 = 8388608,
    CAST_FLAGS_UNKNOWN_25 = 16777216,
    CAST_FLAGS_UNKNOWN_26 = 33554432,
    CAST_FLAGS_IMMUNITY = 67108864,
    CAST_FLAGS_UNKNOWN_28 = 134217728,
    CAST_FLAGS_UNKNOWN_29 = 268435456,
    CAST_FLAGS_UNKNOWN_30 = 536870912,
    CAST_FLAGS_HEAL_PREDICTION = 1073741824,
    CAST_FLAGS_UNKNOWN_32 = 2147483648,
};

enum ChannelFlags : uint8_t {
    CHANNEL_FLAGS_NONE = 0,
    CHANNEL_FLAGS_CUSTOM = 1,
    CHANNEL_FLAGS_TRADE = 4,
    CHANNEL_FLAGS_NOT_LFG = 8,
    CHANNEL_FLAGS_GENERAL = 16,
    CHANNEL_FLAGS_CITY = 32,
    CHANNEL_FLAGS_LFG = 64,
    CHANNEL_FLAGS_VOICE = 128,
};

enum ChannelMemberFlags : uint8_t {
    CHANNEL_MEMBER_FLAGS_NONE = 0,
    CHANNEL_MEMBER_FLAGS_OWNER = 1,
    CHANNEL_MEMBER_FLAGS_MODERATOR = 4,
    CHANNEL_MEMBER_FLAGS_VOICED = 8,
    CHANNEL_MEMBER_FLAGS_MUTED = 16,
    CHANNEL_MEMBER_FLAGS_CUSTOM = 32,
    CHANNEL_MEMBER_FLAGS_MICROPHONE_MUTE = 64,
};

enum FactionFlag : uint8_t {
    FACTION_FLAG_VISIBLE = 1,
    FACTION_FLAG_AT_WAR = 2,
    FACTION_FLAG_HIDDEN = 4,
    FACTION_FLAG_INVISIBLE_FORCED = 8,
    FACTION_FLAG_PEACE_FORCED = 16,
    FACTION_FLAG_INACTIVE = 32,
    FACTION_FLAG_RIVAL = 64,
    FACTION_FLAG_SPECIAL = 128,
};

enum GameobjectCastFlags : uint32_t {
    GAMEOBJECT_CAST_FLAGS_LOCK_PLAYER_CAST_ANIM = 1,
    GAMEOBJECT_CAST_FLAGS_UNKNOWN2 = 2,
    GAMEOBJECT_CAST_FLAGS_UNKNOWN4 = 4,
    GAMEOBJECT_CAST_FLAGS_UNKNOWN8 = 8,
    GAMEOBJECT_CAST_FLAGS_UNKNOWN16 = 16,
    GAMEOBJECT_CAST_FLAGS_AMMO = 32,
    GAMEOBJECT_CAST_FLAGS_DEST_LOCATION = 64,
    GAMEOBJECT_CAST_FLAGS_ITEM_CASTER = 256,
    GAMEOBJECT_CAST_FLAGS_UNK200 = 512,
    GAMEOBJECT_CAST_FLAGS_EXTRA_MESSAGE = 1024,
    GAMEOBJECT_CAST_FLAGS_POWER_UPDATE = 2048,
    GAMEOBJECT_CAST_FLAGS_UNK2000 = 8192,
    GAMEOBJECT_CAST_FLAGS_UNK1000 = 4096,
    GAMEOBJECT_CAST_FLAGS_UNK8000 = 32768,
    GAMEOBJECT_CAST_FLAGS_ADJUST_MISSILE = 131072,
    GAMEOBJECT_CAST_FLAGS_UNK40000 = 262144,
    GAMEOBJECT_CAST_FLAGS_VISUAL_CHAIN = 524288,
    GAMEOBJECT_CAST_FLAGS_RUNE_UPDATE = 2097152,
    GAMEOBJECT_CAST_FLAGS_UNK400000 = 4194304,
};

enum GroupMemberOnlineStatus : uint8_t {
    GROUP_MEMBER_ONLINE_STATUS_OFFLINE = 0,
    GROUP_MEMBER_ONLINE_STATUS_ONLINE = 1,
    GROUP_MEMBER_ONLINE_STATUS_PVP = 2,
    GROUP_MEMBER_ONLINE_STATUS_DEAD = 4,
    GROUP_MEMBER_ONLINE_STATUS_GHOST = 8,
    GROUP_MEMBER_ONLINE_STATUS_PVP_FFA = 16,
    GROUP_MEMBER_ONLINE_STATUS_ZONE_OUT = 32,
    GROUP_MEMBER_ONLINE_STATUS_AFK = 64,
    GROUP_MEMBER_ONLINE_STATUS_DND = 128,
};

enum GroupUpdateFlags : uint32_t {
    GROUP_UPDATE_FLAGS_NONE = 0,
    GROUP_UPDATE_FLAGS_STATUS = 1,
    GROUP_UPDATE_FLAGS_CUR_HP = 2,
    GROUP_UPDATE_FLAGS_MAX_HP = 4,
    GROUP_UPDATE_FLAGS_POWER_TYPE = 8,
    GROUP_UPDATE_FLAGS_CUR_POWER = 16,
    GROUP_UPDATE_FLAGS_MAX_POWER = 32,
    GROUP_UPDATE_FLAGS_LEVEL = 64,
    GROUP_UPDATE_FLAGS_ZONE = 128,
    GROUP_UPDATE_FLAGS_POSITION = 256,
    GROUP_UPDATE_FLAGS_AURAS = 512,
    GROUP_UPDATE_FLAGS_PET_GUID = 1024,
    GROUP_UPDATE_FLAGS_PET_NAME = 2048,
    GROUP_UPDATE_FLAGS_PET_MODEL_ID = 4096,
    GROUP_UPDATE_FLAGS_PET_CUR_HP = 8192,
    GROUP_UPDATE_FLAGS_PET_MAX_HP = 16384,
    GROUP_UPDATE_FLAGS_PET_POWER_TYPE = 32768,
    GROUP_UPDATE_FLAGS_PET_CUR_POWER = 65536,
    GROUP_UPDATE_FLAGS_PET_MAX_POWER = 131072,
    GROUP_UPDATE_FLAGS_PET_AURAS = 262144,
    GROUP_UPDATE_FLAGS_VEHICLE_SEAT = 524288,
};

enum HitInfo : uint32_t {
    HIT_INFO_NORMALSWING = 0,
    HIT_INFO_UNK1 = 1,
    HIT_INFO_AFFECTS_VICTIM = 2,
    HIT_INFO_OFFHAND = 4,
    HIT_INFO_UNK2 = 8,
    HIT_INFO_MISS = 16,
    HIT_INFO_FULL_ABSORB = 32,
    HIT_INFO_PARTIAL_ABSORB = 64,
    HIT_INFO_ALL_ABSORB = 96,
    HIT_INFO_FULL_RESIST = 128,
    HIT_INFO_PARTIAL_RESIST = 256,
    HIT_INFO_ALL_RESIST = 384,
    HIT_INFO_CRITICALHIT = 512,
    HIT_INFO_UNK10 = 1024,
    HIT_INFO_UNK11 = 2048,
    HIT_INFO_UNK12 = 4096,
    HIT_INFO_BLOCK = 8192,
    HIT_INFO_UNK14 = 16384,
    HIT_INFO_UNK15 = 32768,
    HIT_INFO_GLANCING = 65536,
    HIT_INFO_CRUSHING = 131072,
    HIT_INFO_NO_ANIMATION = 262144,
    HIT_INFO_UNK19 = 524288,
    HIT_INFO_UNK20 = 1048576,
    HIT_INFO_SWINGNOHITSOUND = 2097152,
    HIT_INFO_UNK22 = 4194304,
    HIT_INFO_RAGE_GAIN = 8388608,
    HIT_INFO_FAKE_DAMAGE = 16777216,
};

enum ItemFlag : uint32_t {
    ITEM_FLAG_NO_PICKUP = 1,
    ITEM_FLAG_CONJURED = 2,
    ITEM_FLAG_LOOTABLE = 4,
    ITEM_FLAG_HEROIC_TOOLTIP = 8,
    ITEM_FLAG_DEPRECATED = 16,
    ITEM_FLAG_INDESTRUCTIBLE = 32,
    ITEM_FLAG_PLAYER_CAST = 64,
    ITEM_FLAG_NO_EQUIP_COOLDOWN = 128,
    ITEM_FLAG_MULTI_LOOT_QUEST = 256,
    ITEM_FLAG_WRAPPER = 512,
    ITEM_FLAG_USES_RESOURCES = 1024,
    ITEM_FLAG_MULTI_DROP = 2048,
    ITEM_FLAG_ITEM_PURCHASE_RECORD = 4096,
    ITEM_FLAG_CHARTER = 8192,
    ITEM_FLAG_HAS_TEXT = 16384,
    ITEM_FLAG_NO_DISENCHANT = 32768,
    ITEM_FLAG_REAL_DURATION = 65536,
    ITEM_FLAG_NO_CREATOR = 131072,
    ITEM_FLAG_IS_PROSPECTABLE = 262144,
    ITEM_FLAG_UNIQUE_EQUIPPED = 524288,
    ITEM_FLAG_IGNORE_FOR_AURAS = 1048576,
    ITEM_FLAG_IGNORE_DEFAULT_ARENA_RESTRICTIONS = 2097152,
    ITEM_FLAG_NO_DURABILITY_LOSS = 4194304,
    ITEM_FLAG_USE_WHEN_SHAPESHIFTED = 8388608,
    ITEM_FLAG_HAS_QUEST_GLOW = 16777216,
    ITEM_FLAG_HIDE_UNUSABLE_RECIPE = 33554432,
    ITEM_FLAG_NOT_USEABLE_IN_ARENA = 67108864,
    ITEM_FLAG_IS_BOUND_TO_ACCOUNT = 134217728,
    ITEM_FLAG_NO_REAGENT_COST = 268435456,
    ITEM_FLAG_IS_MILLABLE = 536870912,
    ITEM_FLAG_REPORT_TO_GUILD_CHAT = 1073741824,
    ITEM_FLAG_NO_PROGRESSIVE_LOOT = 2147483648,
};

enum ItemFlag2 : uint32_t {
    ITEM_FLAG2_FACTION_HORDE = 1,
    ITEM_FLAG2_FACTION_ALLIANCE = 2,
    ITEM_FLAG2_DONT_IGNORE_BUY_PRICE = 4,
    ITEM_FLAG2_CLASSIFY_AS_CASTER = 8,
    ITEM_FLAG2_CLASSIFY_AS_PHYSICAL = 16,
    ITEM_FLAG2_EVERYONE_CAN_ROLL_NEED = 32,
    ITEM_FLAG2_NO_TRADE_BIND_ON_ACQUIRE = 64,
    ITEM_FLAG2_CAN_TRADE_BIND_ON_ACQUIRE = 128,
    ITEM_FLAG2_CAN_ONLY_ROLL_GREED = 256,
    ITEM_FLAG2_CASTER_WEAPON = 512,
    ITEM_FLAG2_DELETE_ON_LOGIN = 1024,
    ITEM_FLAG2_INTERNAL_ITEM = 2048,
    ITEM_FLAG2_NO_VENDOR_VALUE = 4096,
    ITEM_FLAG2_SHOW_BEFORE_DISCOVERED = 8192,
    ITEM_FLAG2_OVERRIDE_GOLD_COST = 16384,
    ITEM_FLAG2_IGNORE_DEFAULT_RATED_BG_RESTRICTIONS = 32768,
    ITEM_FLAG2_NOT_USABLE_IN_RATED_BG = 65536,
    ITEM_FLAG2_BNET_ACCOUNT_TRADE_OK = 131072,
    ITEM_FLAG2_CONFIRM_BEFORE_USE = 262144,
    ITEM_FLAG2_REEVALUATE_BONDING_ON_TRANSFORM = 524288,
    ITEM_FLAG2_NO_TRANSFORM_ON_CHARGE_DEPLETION = 1048576,
    ITEM_FLAG2_NO_ALTER_ITEM_VISUAL = 2097152,
    ITEM_FLAG2_NO_SOURCE_FOR_ITEM_VISUAL = 4194304,
    ITEM_FLAG2_IGNORE_QUALITY_FOR_ITEM_VISUAL_SOURCE = 8388608,
    ITEM_FLAG2_NO_DURABILITY = 16777216,
    ITEM_FLAG2_ROLE_TANK = 33554432,
    ITEM_FLAG2_ROLE_HEALER = 67108864,
    ITEM_FLAG2_ROLE_DAMAGE = 134217728,
    ITEM_FLAG2_CAN_DROP_IN_CHALLENGE_MODE = 268435456,
    ITEM_FLAG2_NEVER_STACK_IN_LOOT_UI = 536870912,
    ITEM_FLAG2_DISENCHANT_TO_LOOT_TABLE = 1073741824,
    ITEM_FLAG2_USED_IN_A_TRADESKILL = 2147483648,
};

enum LfgUpdateFlag : uint32_t {
    LFG_UPDATE_FLAG_NONE = 0,
    LFG_UPDATE_FLAG_CHARACTER_INFO = 1,
    LFG_UPDATE_FLAG_COMMENT = 2,
    LFG_UPDATE_FLAG_GROUP_LEADER = 4,
    LFG_UPDATE_FLAG_GROUP_GUID = 8,
    LFG_UPDATE_FLAG_ROLES = 16,
    LFG_UPDATE_FLAG_AREA = 32,
    LFG_UPDATE_FLAG_STATUS = 64,
    LFG_UPDATE_FLAG_BOUND = 128,
};

enum MovementFlags : uint64_t {
    MOVEMENT_FLAGS_NONE = 0,
    MOVEMENT_FLAGS_FORWARD = 1,
    MOVEMENT_FLAGS_BACKWARD = 2,
    MOVEMENT_FLAGS_STRAFE_LEFT = 4,
    MOVEMENT_FLAGS_STRAFE_RIGHT = 8,
    MOVEMENT_FLAGS_LEFT = 16,
    MOVEMENT_FLAGS_RIGHT = 32,
    MOVEMENT_FLAGS_PITCH_UP = 64,
    MOVEMENT_FLAGS_PITCH_DOWN = 128,
    MOVEMENT_FLAGS_WALKING = 256,
    MOVEMENT_FLAGS_ON_TRANSPORT = 512,
    MOVEMENT_FLAGS_DISABLE_GRAVITY = 1024,
    MOVEMENT_FLAGS_ROOT = 2048,
    MOVEMENT_FLAGS_FALLING = 4096,
    MOVEMENT_FLAGS_FALLING_FAR = 8192,
    MOVEMENT_FLAGS_PENDING_STOP = 16384,
    MOVEMENT_FLAGS_PENDING_STRAFE_STOP = 32768,
    MOVEMENT_FLAGS_PENDING_FORWARD = 65536,
    MOVEMENT_FLAGS_PENDING_BACKWARD = 131072,
    MOVEMENT_FLAGS_PENDING_STRAFE_LEFT = 262144,
    MOVEMENT_FLAGS_PENDING_STRAFE_RIGHT = 524288,
    MOVEMENT_FLAGS_PENDING_ROOT = 1048576,
    MOVEMENT_FLAGS_SWIMMING = 2097152,
    MOVEMENT_FLAGS_ASCENDING = 4194304,
    MOVEMENT_FLAGS_DESCENDING = 8388608,
    MOVEMENT_FLAGS_CAN_FLY = 16777216,
    MOVEMENT_FLAGS_FLYING = 33554432,
    MOVEMENT_FLAGS_SPLINE_ELEVATION = 67108864,
    MOVEMENT_FLAGS_SPLINE_ENABLED = 134217728,
    MOVEMENT_FLAGS_WATERWALKING = 268435456,
    MOVEMENT_FLAGS_FALLING_SLOW = 536870912,
    MOVEMENT_FLAGS_HOVER = 1073741824,
    MOVEMENT_FLAGS_NO_STRAFE = 4294967296,
    MOVEMENT_FLAGS_NO_JUMPING = 8589934592,
    MOVEMENT_FLAGS_UNK3 = 17179869184,
    MOVEMENT_FLAGS_FULL_SPEED_TURNING = 34359738368,
    MOVEMENT_FLAGS_FULL_SPEED_PITCHING = 68719476736,
    MOVEMENT_FLAGS_ALWAYS_ALLOW_PITCHING = 137438953472,
    MOVEMENT_FLAGS_UNK7 = 274877906944,
    MOVEMENT_FLAGS_UNK8 = 549755813888,
    MOVEMENT_FLAGS_UNK9 = 1099511627776,
    MOVEMENT_FLAGS_UNK10 = 2199023255552,
    MOVEMENT_FLAGS_INTERPOLATED_MOVEMENT = 4398046511104,
    MOVEMENT_FLAGS_INTERPOLATED_TURNING = 8796093022208,
    MOVEMENT_FLAGS_INTERPOLATED_PITCHING = 17592186044416,
    MOVEMENT_FLAGS_UNK14 = 35184372088832,
    MOVEMENT_FLAGS_UNK15 = 70368744177664,
    MOVEMENT_FLAGS_UNK16 = 140737488355328,
    MOVEMENT_FLAGS_ON_TRANSPORT_AND_INTERPOLATED_MOVEMENT = 4398046511616,
};

enum RelationType : uint32_t {
    RELATION_TYPE_NONE = 0,
    RELATION_TYPE_FRIEND = 1,
    RELATION_TYPE_IGNORED = 2,
    RELATION_TYPE_MUTED = 4,
    RELATION_TYPE_RECRUITAFRIEND = 8,
};

enum RollFlags : uint8_t {
    ROLL_FLAGS_PASS = 1,
    ROLL_FLAGS_NEED = 2,
    ROLL_FLAGS_GREED = 4,
    ROLL_FLAGS_DISENCHANT = 8,
};

enum SpellCastTargetFlags : uint32_t {
    SPELL_CAST_TARGET_FLAGS_SELF = 0,
    SPELL_CAST_TARGET_FLAGS_UNUSED1 = 1,
    SPELL_CAST_TARGET_FLAGS_UNIT = 2,
    SPELL_CAST_TARGET_FLAGS_UNIT_RAID = 4,
    SPELL_CAST_TARGET_FLAGS_UNIT_PARTY = 8,
    SPELL_CAST_TARGET_FLAGS_ITEM = 16,
    SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION = 32,
    SPELL_CAST_TARGET_FLAGS_DEST_LOCATION = 64,
    SPELL_CAST_TARGET_FLAGS_UNIT_ENEMY = 128,
    SPELL_CAST_TARGET_FLAGS_UNIT_ALLY = 256,
    SPELL_CAST_TARGET_FLAGS_CORPSE_ENEMY = 512,
    SPELL_CAST_TARGET_FLAGS_UNIT_DEAD = 1024,
    SPELL_CAST_TARGET_FLAGS_GAMEOBJECT = 2048,
    SPELL_CAST_TARGET_FLAGS_TRADE_ITEM = 4096,
    SPELL_CAST_TARGET_FLAGS_STRING = 8192,
    SPELL_CAST_TARGET_FLAGS_LOCKED = 16384,
    SPELL_CAST_TARGET_FLAGS_CORPSE_ALLY = 32768,
    SPELL_CAST_TARGET_FLAGS_UNIT_MINIPET = 65536,
    SPELL_CAST_TARGET_FLAGS_GLYPH_SLOT = 131072,
    SPELL_CAST_TARGET_FLAGS_DEST_TARGET = 262144,
    SPELL_CAST_TARGET_FLAGS_UNUSED20 = 524288,
    SPELL_CAST_TARGET_FLAGS_UNIT_PASSENGER = 1048576,
};

enum SplineFlag : uint32_t {
    SPLINE_FLAG_NONE = 0,
    SPLINE_FLAG_DONE = 256,
    SPLINE_FLAG_FALLING = 512,
    SPLINE_FLAG_NO_SPLINE = 1024,
    SPLINE_FLAG_PARABOLIC = 2048,
    SPLINE_FLAG_WALK_MODE = 4096,
    SPLINE_FLAG_FLYING = 8192,
    SPLINE_FLAG_ORIENTATION_FIXED = 16384,
    SPLINE_FLAG_FINAL_POINT = 32768,
    SPLINE_FLAG_FINAL_TARGET = 65536,
    SPLINE_FLAG_FINAL_ANGLE = 131072,
    SPLINE_FLAG_CATMULLROM = 262144,
    SPLINE_FLAG_CYCLIC = 524288,
    SPLINE_FLAG_ENTER_CYCLE = 1048576,
    SPLINE_FLAG_ANIMATION = 2097152,
    SPLINE_FLAG_FROZEN = 4194304,
    SPLINE_FLAG_TRANSPORT_ENTER = 8388608,
    SPLINE_FLAG_TRANSPORT_EXIT = 16777216,
    SPLINE_FLAG_UNKNOWN7 = 33554432,
    SPLINE_FLAG_UNKNOWN8 = 67108864,
    SPLINE_FLAG_ORIENTATION_INVERSED = 134217728,
    SPLINE_FLAG_UNKNOWN10 = 268435456,
    SPLINE_FLAG_UNKNOWN11 = 536870912,
    SPLINE_FLAG_UNKNOWN12 = 1073741824,
    SPLINE_FLAG_UNKNOWN13 = 2147483648,
};

enum UpdateFlag : uint16_t {
    UPDATE_FLAG_NONE = 0,
    UPDATE_FLAG_SELF = 1,
    UPDATE_FLAG_TRANSPORT = 2,
    UPDATE_FLAG_HAS_ATTACKING_TARGET = 4,
    UPDATE_FLAG_LOW_GUID = 8,
    UPDATE_FLAG_HIGH_GUID = 16,
    UPDATE_FLAG_LIVING = 32,
    UPDATE_FLAG_HAS_POSITION = 64,
    UPDATE_FLAG_VEHICLE = 128,
    UPDATE_FLAG_POSITION = 256,
    UPDATE_FLAG_ROTATION = 512,
};

enum VictimState : uint8_t {
    VICTIM_STATE_INTACT = 0,
    VICTIM_STATE_HIT = 1,
    VICTIM_STATE_DODGE = 2,
    VICTIM_STATE_PARRY = 3,
    VICTIM_STATE_INTERRUPT = 4,
    VICTIM_STATE_BLOCKS = 5,
    VICTIM_STATE_EVADES = 6,
    VICTIM_STATE_IS_IMMUNE = 7,
    VICTIM_STATE_DEFLECTS = 8,
};

class UpdateMask {
public:
    WOW_WORLD_MESSAGES_CPP_EXPORT void object_guid_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t object_guid_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void object_type_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t object_type_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void object_entry_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t object_entry_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void object_scale_x_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float object_scale_x_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_owner_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t item_owner_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_contained_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t item_contained_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_creator_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t item_creator_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_giftcreator_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t item_giftcreator_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_stack_count_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_stack_count_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_duration_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_duration_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_spell_charges_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_spell_charges_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_flags_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_flags_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_1_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_1_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_1_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_1_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_2_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_2_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_2_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_2_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_3_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_3_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_3_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_3_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_4_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_4_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_4_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_4_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_5_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_5_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_5_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_5_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_6_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_6_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_6_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_6_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_7_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_7_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_7_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_7_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_8_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_8_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_8_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_8_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_9_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_9_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_9_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_9_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_10_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_10_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_10_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_10_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_11_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_11_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_11_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_11_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_12_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment_12_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment_12_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> item_enchantment_12_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_property_seed_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_property_seed_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_random_properties_id_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_random_properties_id_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_durability_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_durability_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_maxdurability_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_maxdurability_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_create_played_time_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_create_played_time_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void container_num_slots_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t container_num_slots_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void container_slot_1_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t container_slot_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_charm_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_charm_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_summon_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_summon_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_critter_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_critter_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_charmedby_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_charmedby_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_summonedby_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_summonedby_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_createdby_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_createdby_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_target_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_target_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_channel_object_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_channel_object_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_channel_spell_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_channel_spell_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_bytes_0_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> unit_bytes_0_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_health_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_health_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power3_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power4_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power4_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power6_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power6_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power7_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power7_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxhealth_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxhealth_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower3_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower4_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower4_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower6_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower6_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower7_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower7_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power_regen_flat_modifier_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_power_regen_flat_modifier_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power_regen_interrupted_flat_modifier_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_power_regen_interrupted_flat_modifier_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_level_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_level_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_factiontemplate_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_factiontemplate_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_virtual_item_slot_id_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_virtual_item_slot_id_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_flags_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_flags_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_flags_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_flags_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_aurastate_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_aurastate_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_baseattacktime_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_baseattacktime_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_rangedattacktime_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_rangedattacktime_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_boundingradius_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_boundingradius_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_combatreach_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_combatreach_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_displayid_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_displayid_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_nativedisplayid_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_nativedisplayid_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_mountdisplayid_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_mountdisplayid_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_mindamage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_mindamage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxdamage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_maxdamage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_minoffhanddamage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_minoffhanddamage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxoffhanddamage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_maxoffhanddamage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_bytes_1_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> unit_bytes_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_petnumber_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_petnumber_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_pet_name_timestamp_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_pet_name_timestamp_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_petexperience_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_petexperience_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_petnextlevelexp_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_petnextlevelexp_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_dynamic_flags_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_dynamic_flags_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_mod_cast_speed_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_mod_cast_speed_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_created_by_spell_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_created_by_spell_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_npc_flags_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_npc_flags_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_npc_emotestate_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_npc_emotestate_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_strength_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_strength_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_agility_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_agility_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_stamina_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_stamina_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_intellect_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_intellect_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_spirit_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_spirit_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_posstat0_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_posstat0_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_posstat1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_posstat1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_posstat2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_posstat2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_posstat3_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_posstat3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_posstat4_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_posstat4_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_negstat0_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_negstat0_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_negstat1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_negstat1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_negstat2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_negstat2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_negstat3_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_negstat3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_negstat4_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_negstat4_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_resistances_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_resistances_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_resistancebuffmodspositive_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_resistancebuffmodspositive_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_resistancebuffmodsnegative_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_resistancebuffmodsnegative_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_base_mana_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_base_mana_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_base_health_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_base_health_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_bytes_2_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> unit_bytes_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_attack_power_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_attack_power_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_attack_power_mods_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> unit_attack_power_mods_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_attack_power_multiplier_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_attack_power_multiplier_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_ranged_attack_power_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_ranged_attack_power_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_ranged_attack_power_mods_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> unit_ranged_attack_power_mods_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_ranged_attack_power_multiplier_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_ranged_attack_power_multiplier_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_minrangeddamage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_minrangeddamage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxrangeddamage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_maxrangeddamage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power_cost_modifier_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power_cost_modifier_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power_cost_multiplier_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_power_cost_multiplier_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxhealthmodifier_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_maxhealthmodifier_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_hoverheight_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_hoverheight_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_duel_arbiter_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_duel_arbiter_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_flags_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_flags_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_guildid_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_guildid_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_guildrank_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_guildrank_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_bytes_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_field_bytes_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_bytes_2_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_bytes_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_bytes_3_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_bytes_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_duel_team_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_duel_team_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_guild_timestamp_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_guild_timestamp_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_1_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_1_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_1_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_1_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_1_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_1_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_1_4_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_1_4_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_2_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_2_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_2_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_2_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_2_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_2_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_2_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_2_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_3_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_3_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_3_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_3_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_3_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_3_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_3_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_3_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_4_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_4_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_4_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_4_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_4_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_4_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_4_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_4_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_5_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_5_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_5_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_5_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_5_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_5_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_5_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_5_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_6_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_6_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_6_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_6_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_6_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_6_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_6_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_6_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_7_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_7_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_7_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_7_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_7_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_7_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_7_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_7_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_8_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_8_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_8_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_8_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_8_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_8_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_8_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_8_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_9_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_9_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_9_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_9_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_9_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_9_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_9_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_9_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_10_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_10_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_10_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_10_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_10_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_10_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_10_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_10_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_11_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_11_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_11_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_11_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_11_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_11_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_11_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_11_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_12_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_12_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_12_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_12_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_12_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_12_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_12_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_12_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_13_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_13_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_13_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_13_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_13_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_13_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_13_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_13_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_14_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_14_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_14_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_14_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_14_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_14_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_14_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_14_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_15_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_15_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_15_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_15_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_15_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_15_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_15_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_15_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_16_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_16_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_16_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_16_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_16_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_16_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_16_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_16_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_17_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_17_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_17_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_17_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_17_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_17_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_17_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_17_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_18_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_18_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_18_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_18_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_18_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_18_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_18_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_18_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_19_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_19_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_19_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_19_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_19_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_19_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_19_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_19_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_20_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_20_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_20_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_20_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_20_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_20_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_20_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_20_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_21_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_21_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_21_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_21_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_21_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_21_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_21_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_21_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_22_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_22_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_22_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_22_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_22_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_22_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_22_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_22_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_23_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_23_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_23_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_23_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_23_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_23_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_23_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_23_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_24_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_24_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_24_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_24_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_24_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_24_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_24_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_24_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_25_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_25_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_25_2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_25_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_25_3_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_quest_log_25_3_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_25_5_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_25_5_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_visible_item_item_set(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_visible_item_item_get(uint32_t index);
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_visible_item_enchants_set(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_visible_item_enchants_get(uint32_t index);
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_chosen_title_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_chosen_title_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_fake_inebriation_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_fake_inebriation_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_inv_set(ItemSlot def, uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_field_inv_get(ItemSlot def);
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_farsight_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_farsight_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_known_titles_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_known_titles_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_known_titles1_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_known_titles1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_known_titles2_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_known_titles2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_known_currencies_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_known_currencies_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_xp_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_xp_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_next_level_xp_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_next_level_xp_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_skill_set(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_skill_get(uint32_t index);
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_skill_step_set(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_skill_step_get(uint32_t index);
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_minimum_set(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_minimum_get(uint32_t index);
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_maximum_set(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_maximum_get(uint32_t index);
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_permanent_bonus_set(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_permanent_bonus_get(uint32_t index);
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_temporary_bonus_set(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_temporary_bonus_get(uint32_t index);
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_character_points1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_character_points1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_character_points2_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_character_points2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_track_creatures_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_track_creatures_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_track_resources_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_track_resources_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_block_percentage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_block_percentage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_dodge_percentage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_dodge_percentage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_parry_percentage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_parry_percentage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_expertise_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_expertise_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_offhand_expertise_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_offhand_expertise_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_crit_percentage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_crit_percentage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_ranged_crit_percentage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_ranged_crit_percentage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_offhand_crit_percentage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_offhand_crit_percentage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_spell_crit_percentage1_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_spell_crit_percentage1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_shield_block_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_shield_block_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_shield_block_crit_percentage_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_shield_block_crit_percentage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_explored_zones_1_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_explored_zones_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_rest_state_experience_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_rest_state_experience_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_coinage_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_coinage_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_mod_damage_done_pos_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_mod_damage_done_pos_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_mod_damage_done_neg_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_mod_damage_done_neg_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_mod_damage_done_pct_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_mod_damage_done_pct_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_mod_healing_done_pos_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_mod_healing_done_pos_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_mod_healing_pct_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_mod_healing_pct_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_mod_healing_done_pct_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_mod_healing_done_pct_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_mod_target_resistance_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_mod_target_resistance_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_mod_target_physical_resistance_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_mod_target_physical_resistance_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_features_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_features_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_ammo_id_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_ammo_id_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_self_res_spell_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_self_res_spell_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_pvp_medals_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_pvp_medals_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_buyback_price_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_buyback_price_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_buyback_timestamp_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_buyback_timestamp_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_kills_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_kills_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_today_contribution_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_today_contribution_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_yesterday_contribution_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_yesterday_contribution_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_lifetime_honorbale_kills_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_lifetime_honorbale_kills_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_bytes2_glow_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_bytes2_glow_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_watched_faction_index_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_watched_faction_index_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_combat_rating_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_combat_rating_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_arena_team_info_1_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_arena_team_info_1_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_honor_currency_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_honor_currency_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_arena_currency_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_arena_currency_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_max_level_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_max_level_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_daily_quests_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_daily_quests_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_rune_regen_1_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_rune_regen_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_no_reagent_cost_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_no_reagent_cost_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_glyph_slots_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_glyph_slots_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_glyphs_1_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_glyphs_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_glyphs_enabled_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_glyphs_enabled_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_pet_spell_power_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_pet_spell_power_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void object_created_by_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t object_created_by_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_displayid_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_displayid_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_flags_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_flags_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_parentrotation_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float game_object_parentrotation_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_dynamic_set(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> game_object_dynamic_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_faction_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_faction_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_level_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_level_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_bytes_1_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> game_object_bytes_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_caster_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t dynamic_object_caster_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_bytes_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> dynamic_object_bytes_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_spellid_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t dynamic_object_spellid_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_radius_set(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float dynamic_object_radius_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_casttime_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t dynamic_object_casttime_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_owner_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t corpse_owner_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_party_set(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t corpse_party_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_display_id_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t corpse_display_id_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_item_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t corpse_item_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_bytes_1_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> corpse_bytes_1_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_bytes_2_set(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> corpse_bytes_2_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_guild_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t corpse_guild_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_flags_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t corpse_flags_get();
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_dynamic_flags_set(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t corpse_dynamic_flags_get();
    uint32_t headers[42];
    uint32_t values[1325];
};

constexpr auto WRATH_ENCHANT_MASK_LENGTH = 32;
struct EnchantMask {
    uint16_t values[WRATH_ENCHANT_MASK_LENGTH];
};

struct AchievementDone {
    uint32_t achievement;
    uint32_t time;
};

struct AchievementInProgress {
    uint32_t achievement;
    uint64_t counter;
    uint64_t player;
    bool timed_criteria_failed;
    uint32_t progress_date;
    uint32_t time_since_progress;
    uint32_t time_since_progress2;
};

struct ActionButton {
    uint16_t action;
    uint8_t action_type;
    uint8_t misc;
};

struct Addon {
    uint8_t addon_type;
    uint8_t uses_crc;
    bool uses_diffent_public_key;
    uint32_t unknown1;
    uint8_t unknown2;
};

struct AddonInfo {
    std::string addon_name;
    uint8_t addon_has_signature;
    uint32_t addon_crc;
    uint32_t addon_extra_crc;
};

struct ArenaTeamMember {
    uint64_t guid;
    bool online;
    std::string name;
    uint8_t level;
    Class class_type;
    uint32_t games_played_this_week;
    uint32_t wins_this_week;
    uint32_t games_played_this_season;
    uint32_t wins_this_season;
    uint32_t personal_rating;
};

struct AuctionEnchantment {
    uint32_t enchant_id;
    uint32_t enchant_duration;
    uint32_t enchant_charges;
};

struct AuctionListItem {
    uint32_t id;
    uint32_t item;
    std::array<wrath::AuctionEnchantment, 7> enchantments;
    uint32_t item_random_property_id;
    uint32_t item_suffix_factor;
    uint32_t item_count;
    uint32_t item_charges;
    uint32_t item_flags;
    uint64_t item_owner;
    uint32_t start_bid;
    uint32_t minimum_bid;
    uint32_t buyout_amount;
    uint32_t time_left;
    uint64_t highest_bidder;
    uint32_t highest_bid;
};

struct AuctionSort {
    uint8_t column;
    uint8_t reversed;
};

struct Aura {
    uint32_t aura;
    uint8_t unknown;
};

struct AuraLog {
    AuraType aura_type;
    uint32_t damage1;
    uint32_t overkill_damage;
    SpellSchool school;
    uint32_t absorb1;
    uint32_t resisted;
    bool critical1;
    uint32_t damage2;
    uint32_t over_damage;
    uint32_t absorb2;
    bool critical2;
    uint32_t misc_value1;
    uint32_t damage3;
    uint32_t misc_value2;
    uint32_t damage4;
    float gain_multiplier;
};

struct AuraUpdate {
    uint8_t visual_slot;
    uint32_t spell;
    AuraFlag flags;
    uint8_t level;
    uint8_t aura_stack_count;
    uint64_t caster;
    uint32_t duration;
    uint32_t time_left;
};

struct BankTab {
    uint32_t flags;
    uint32_t stacks_per_day;
};

struct BattlegroundPlayerPosition {
    uint64_t player;
    float position_x;
    float position_y;
};

struct CalendarInvitee {
    uint64_t guid;
    uint8_t status;
    uint8_t rank;
};

struct CalendarMember {
    uint64_t member;
    uint8_t level;
};

struct CalendarSendInvitee {
    uint64_t invitee;
    uint8_t level;
    uint8_t status;
    uint8_t rank;
    uint8_t guild_member;
    uint64_t invite_id;
    uint32_t status_time;
    std::string text;
};

struct ChannelMember {
    uint64_t guid;
    ChannelMemberFlags member_flags;
};

struct CharacterGear {
    uint32_t equipment_display_id;
    InventoryType inventory_type;
    uint32_t enchantment;
};

struct Character {
    uint64_t guid;
    std::string name;
    Race race;
    Class class_type;
    Gender gender;
    uint8_t skin;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;
    uint8_t level;
    Area area;
    Map map;
    all::Vector3d position;
    uint32_t guild_id;
    uint32_t flags;
    uint32_t recustomization_flags;
    bool first_login;
    uint32_t pet_display_id;
    uint32_t pet_level;
    CreatureFamily pet_family;
    std::array<wrath::CharacterGear, 23> equipment;
};

struct CooldownSpell {
    uint16_t spell_id;
    uint16_t item_id;
    uint16_t spell_category;
    uint32_t cooldown;
    uint32_t category_cooldown;
};

struct DamageInfo {
    uint32_t spell_school_mask;
    float damage_float;
    uint32_t damage_uint;
};

struct DispelledSpell {
    uint32_t spell;
    DispelMethod method;
};

struct EquipmentSet {
    uint64_t item;
    uint8_t source_bag;
    uint8_t source_slot;
};

struct EquipmentSetListItem {
    uint64_t guid;
    std::string name;
    std::string icon_name;
    std::array<uint64_t, 19> equipment;
};

struct FactionInitializer {
    FactionFlag flag;
    uint32_t standing;
};

struct FactionStanding {
    Faction faction;
    uint32_t standing;
};

struct ForcedReaction {
    Faction faction;
    uint32_t reputation_rank;
};

struct GmSurveyQuestion {
    uint32_t question_id;
    uint8_t answer;
    std::string comment;
};

struct GossipItem {
    uint32_t id;
    uint8_t item_icon;
    bool coded;
    uint32_t money_required;
    std::string message;
    std::string accept_text;
};

struct GroupListMember {
    std::string name;
    uint64_t guid;
    bool is_online;
    uint8_t group_id;
    uint8_t flags;
    uint8_t lfg_roles;
};

struct GuildBankRights {
    uint32_t rights;
    uint32_t slots_per_day;
};

struct GuildBankSocket {
    uint8_t socket_index;
    uint32_t gem;
};

struct GuildBankSlot {
    uint8_t slot;
    uint32_t item;
    uint32_t unknown1;
    VariableItemRandomProperty item_random_property_id;
    uint32_t amount_of_items;
    uint32_t unknown2;
    uint8_t unknown3;
    std::vector<wrath::GuildBankSocket> sockets;
};

struct GuildBankTab {
    std::string tab_name;
    std::string tab_icon;
};

struct GuildLogEvent {
    GuildEvent event;
    uint64_t player1;
    uint64_t player2;
    uint8_t new_rank;
    uint32_t unix_time;
};

struct GuildMember {
    uint64_t guid;
    uint32_t unknown;
    GuildMemberStatus status;
    std::string name;
    uint32_t rank;
    uint8_t level;
    Class class_type;
    Gender gender;
    Area area;
    float time_offline;
    std::string public_note;
    std::string officer_note;
};

struct GuildRights {
    uint32_t rights;
    uint32_t money_per_day;
    std::array<wrath::GuildBankRights, 6> bank_tab_rights;
};

struct InitialSpell {
    uint32_t spell_id;
    uint16_t unknown1;
};

struct InspectTalent {
    Talent talent;
    uint8_t max_rank;
};

struct InspectTalentGear {
    uint32_t item;
    EnchantMask enchant_mask;
    uint16_t unknown1;
    uint64_t creator;
    uint32_t unknown2;
};

struct InspectTalentSpec {
    std::vector<wrath::InspectTalent> talents;
};

struct ItemDamageType {
    float damage_minimum;
    float damage_maximum;
    SpellSchool school;
};

struct ItemRefundExtra {
    uint32_t item;
    uint32_t amount;
};

struct ItemSocket {
    uint32_t color;
    uint32_t content;
};

struct ItemSpells {
    uint32_t spell;
    SpellTriggerType spell_trigger;
    int32_t spell_charges;
    int32_t spell_cooldown;
    uint32_t spell_category;
    int32_t spell_category_cooldown;
};

struct ItemStat {
    uint32_t stat_type;
    int32_t value;
};

struct LfgQuestReward {
    uint32_t item;
    uint32_t display_id;
    uint32_t amount_of_rewards;
};

struct LfgAvailableDungeon {
    uint32_t dungeon_entry;
    bool done;
    uint32_t quest_reward;
    uint32_t xp_reward;
    uint32_t unknown1;
    uint32_t unknown2;
    std::vector<wrath::LfgQuestReward> rewards;
};

struct LfgJoinLockedDungeon {
    uint32_t dungeon_entry;
    uint32_t reason;
};

struct LfgJoinPlayer {
    uint64_t player;
    std::vector<wrath::LfgJoinLockedDungeon> locked_dungeons;
};

struct LfgListGroup {
    uint64_t group;
    LfgUpdateFlag flags;
    std::string comment;
    std::array<uint8_t, 3> roles;
    uint64_t instance;
    uint32_t encounter_mask;
};

struct LfgListPlayer {
    uint64_t player;
    LfgUpdateFlag flags;
    uint8_t level;
    Class class_type;
    Race race;
    uint8_t talents0;
    uint8_t talents1;
    uint8_t talents2;
    uint32_t armor;
    uint32_t spell_damage;
    uint32_t spell_heal;
    uint32_t crit_rating_melee;
    uint32_t crit_rating_ranged;
    uint32_t crit_rating_spell;
    float mana_per_5_seconds;
    float mana_per_5_seconds_combat;
    uint32_t attack_power;
    uint32_t agility;
    uint32_t health;
    uint32_t mana;
    bool online;
    uint32_t average_item_level;
    uint32_t defense_skill;
    uint32_t dodge_rating;
    uint32_t block_rating;
    uint32_t parry_rating;
    uint32_t haste_rating;
    uint32_t expertise_rating;
    std::string comment;
    bool is_looking_for_more;
    uint64_t group;
    uint8_t roles;
    Area area;
    uint8_t unknown1;
    uint64_t instance;
    uint32_t encounter_mask;
};

struct LfgPartyInfo {
    uint64_t player;
    std::vector<wrath::LfgJoinLockedDungeon> dungeons;
};

struct LfgProposal {
    uint32_t role_mask;
    uint8_t is_current_player;
    uint8_t in_dungeon;
    uint8_t in_same_group;
    uint8_t has_answered;
    uint8_t has_accepted;
};

struct LfgRole {
    uint64_t guid;
    bool ready;
    uint32_t roles;
    uint8_t level;
};

struct ListInventoryItem {
    uint32_t item_stack_count;
    uint32_t item;
    uint32_t item_display_id;
    uint32_t max_items;
    uint32_t price;
    uint32_t max_durability;
    uint32_t durability;
    uint32_t extended_cost;
};

struct LootItem {
    uint8_t index;
    uint32_t item;
    LootSlotType ty;
};

struct MailListItemEnchant {
    uint32_t charges;
    uint32_t duration;
    uint32_t enchant_id;
};

struct MailListItem {
    uint8_t item_index;
    uint32_t low_guid;
    uint32_t item;
    std::array<wrath::MailListItemEnchant, 7> enchants;
    uint32_t item_random_property_id;
    uint32_t item_suffix_factor;
    uint8_t item_amount;
    uint32_t charges;
    uint32_t max_durability;
    uint32_t durability;
    uint8_t unknown;
};

struct Mail {
    uint32_t message_id;
    MailType message_type;
    uint64_t sender;
    uint32_t sender_id;
    uint32_t auction_id;
    uint32_t item;
    uint32_t cash_on_delivery;
    uint32_t unknown;
    uint32_t stationery;
    uint32_t money;
    uint32_t flags;
    float expiration_time;
    uint32_t mail_template_id;
    std::string subject;
    std::string message;
    std::vector<wrath::MailListItem> items;
};

struct MailItem {
    uint64_t item;
    uint8_t slot;
};

struct MiniMoveMessage {
    MiniMoveOpcode opcode;
    uint64_t guid;
    uint32_t movement_counter;
};

struct MoneyLogItem {
    uint8_t action;
    uint64_t player;
    uint32_t entry;
    uint32_t timestamp;
};

struct TransportInfo {
    uint64_t guid;
    all::Vector3d position;
    float orientation;
    uint32_t timestamp;
    uint8_t seat;
};

struct MovementBlock {
    UpdateFlag update_flag;
    MovementFlags flags;
    uint32_t timestamp;
    all::Vector3d position;
    float orientation;
    wrath::TransportInfo transport_info;
    uint32_t transport_time;
    wrath::TransportInfo transport;
    float pitch1;
    float pitch2;
    float pitch3;
    float fall_time;
    float z_speed;
    float cos_angle;
    float sin_angle;
    float xy_speed;
    float spline_elevation;
    float walking_speed;
    float running_speed;
    float backwards_running_speed;
    float swimming_speed;
    float backwards_swimming_speed;
    float flight_speed;
    float backwards_flight_speed;
    float turn_rate;
    float pitch_rate;
    SplineFlag spline_flags;
    float angle;
    uint64_t target;
    all::Vector3d spline_final_point;
    uint32_t time_passed;
    uint32_t duration;
    uint32_t id;
    float duration_mod;
    float duration_mod_next;
    float vertical_acceleration;
    float effect_start_time;
    std::vector<all::Vector3d> nodes;
    uint8_t mode;
    all::Vector3d final_node;
    uint64_t transport_guid;
    all::Vector3d position1;
    all::Vector3d transport_offset;
    float orientation1;
    float corpse_orientation;
    all::Vector3d position2;
    float orientation2;
    uint32_t unknown0;
    uint32_t unknown1;
    uint64_t guid;
    uint32_t transport_progress_in_ms;
    uint32_t vehicle_id;
    float vehicle_orientation;
    uint64_t packed_local_rotation;
};

struct MovementInfo {
    MovementFlags flags;
    uint32_t timestamp;
    all::Vector3d position;
    float orientation;
    wrath::TransportInfo transport_info;
    uint32_t transport_time;
    wrath::TransportInfo transport;
    float pitch1;
    float pitch2;
    float pitch3;
    float fall_time;
    float z_speed;
    float cos_angle;
    float sin_angle;
    float xy_speed;
    float spline_elevation;
};

struct NpcTextUpdateEmote {
    uint32_t delay;
    uint32_t emote;
};

struct NpcTextUpdate {
    float probability;
    std::array<std::string, 2> texts;
    Language language;
    std::array<wrath::NpcTextUpdateEmote, 3> emotes;
};

struct Object {
    UpdateType update_type;
    uint64_t guid1;
    UpdateMask mask1;
    uint64_t guid2;
    wrath::MovementBlock movement1;
    uint64_t guid3;
    ObjectType object_type;
    wrath::MovementBlock movement2;
    UpdateMask mask2;
    std::vector<uint64_t> guids;
};

struct PendingAuctionSale {
    std::string string1;
    std::string string2;
    uint32_t unknown1;
    uint32_t unknown2;
    float time_left;
};

struct PetSpellCooldown {
    uint32_t spell;
    uint16_t spell_category;
    uint32_t cooldown;
    uint32_t category_cooldown;
};

struct PetitionShowlist {
    uint32_t index;
    uint32_t charter_entry;
    uint32_t charter_display_id;
    uint32_t guild_charter_cost;
    uint32_t unknown1;
    uint32_t signatures_required;
};

struct PetitionSignature {
    uint64_t signer;
    uint32_t unknown1;
};

struct PreviewTalent {
    Talent talent;
    uint32_t rank;
};

struct QuestDetailsEmote {
    uint32_t emote;
    uint32_t emote_delay;
};

struct QuestGiverReward {
    uint32_t item;
    uint32_t item_count;
    uint32_t display_id;
};

struct QuestGiverStatusReport {
    uint64_t npc;
    QuestGiverStatus dialog_status;
};

struct QuestItem {
    uint32_t quest_id;
    uint32_t quest_icon;
    uint32_t level;
    uint32_t flags;
    bool repeatable;
    std::string title;
};

struct QuestItemRequirement {
    uint32_t item;
    uint32_t item_count;
    uint32_t item_display_id;
};

struct QuestItemReward {
    uint32_t item;
    uint32_t item_count;
};

struct QuestObjective {
    uint32_t creature_id;
    uint32_t kill_count;
    uint32_t required_item_id;
    uint32_t required_item_count;
};

struct Vector2dUnsigned {
    uint32_t x;
    uint32_t y;
};

struct QuestPoi {
    uint32_t id;
    uint32_t objective_id;
    Map map;
    Area area;
    uint32_t floor_id;
    uint32_t unknown1;
    uint32_t unknown2;
    std::vector<wrath::Vector2dUnsigned> points;
};

struct QuestPoiList {
    uint32_t quest_id;
    uint32_t amount_of_pois;
};

struct RaidInfo {
    Map map;
    DungeonDifficulty difficulty;
    uint64_t instance_id;
    bool expired;
    bool extended;
    uint32_t time_until_reset;
};

struct RaidTargetUpdate {
    RaidTargetIndex index;
    uint64_t guid;
};

struct ReceivedMail {
    uint64_t sender;
    AuctionHouse auction_house;
    MailMessageType message_type;
    uint32_t stationery;
    float time;
};

struct Relation {
    uint64_t guid;
    RelationType relation_mask;
    std::string note;
    FriendStatus status;
    Area area;
    uint32_t level;
    Class class_type;
};

struct ResyncRune {
    uint8_t current_rune;
    uint8_t rune_cooldown;
};

struct SendCalendarEvent {
    uint64_t event_id;
    std::string title;
    uint32_t event_type;
    uint32_t event_time;
    uint32_t flags;
    uint32_t dungeon_id;
    uint64_t creator;
};

struct SendCalendarHoliday {
    uint32_t holiday_id;
    uint32_t region;
    uint32_t looping;
    uint32_t priority;
    uint32_t calendar_filter_type;
    std::array<uint32_t, 26> holiday_days;
    std::array<uint32_t, 10> durations;
    std::array<uint32_t, 10> flags;
    std::string texture_file_name;
};

struct SendCalendarInstance {
    Map map;
    uint32_t difficulty;
    uint32_t reset_time;
    uint64_t instance_id;
};

struct SendCalendarInvite {
    uint64_t event_id;
    uint64_t invite_id;
    uint8_t status;
    uint8_t rank;
    bool is_guild_event;
    uint64_t creator;
};

struct SendCalendarResetTime {
    Map map;
    uint32_t period;
    uint32_t time_offset;
};

struct SpellCastTargets {
    SpellCastTargetFlags target_flags;
    uint64_t unit_target;
    uint64_t minipet_target;
    uint64_t gameobject_target;
    uint64_t enemy_corpse_target;
    uint64_t ally_corpse_target;
    uint64_t item_target;
    uint64_t trade_item_target;
    all::Vector3d source;
    all::Vector3d destination;
    std::string target_string;
};

struct SpellCooldownStatus {
    uint32_t id;
    uint32_t cooldown_time;
};

struct SpellLog {
    SpellEffect effect;
    uint64_t target1;
    uint32_t amount;
    Power power;
    float multiplier;
    uint64_t target4;
    uint32_t extra_attacks;
    uint64_t target5;
    uint32_t interrupted_spell;
    uint64_t target6;
    uint32_t item_to_damage;
    uint32_t unknown5;
    uint64_t lock_target;
    uint32_t item;
    uint64_t summon_target;
    uint64_t pet_feed_guid;
    uint64_t pet_dismiss_guid;
    uint64_t resurrect_guid;
};

struct SpellLogMiss {
    uint64_t target;
    SpellMissInfo miss_info;
};

struct SpellMiss {
    uint64_t target;
    SpellMissInfo miss_info;
    uint8_t reflect_result;
};

struct SpellSteal {
    uint32_t spell;
    SpellStealAction action;
};

struct StabledPet {
    uint32_t pet_number;
    uint32_t entry;
    uint32_t level;
    std::string name;
    uint32_t loyalty;
    uint8_t slot;
};

struct TalentInfoSpec {
    std::vector<wrath::InspectTalent> talents;
    std::vector<uint16_t> glyphs;
};

struct ThreatUpdateUnit {
    uint64_t unit;
    uint32_t threat;
};

struct TradeSlot {
    uint8_t trade_slot_number;
    uint32_t item;
    uint32_t display_id;
    uint32_t stack_count;
    bool wrapped;
    uint64_t gift_wrapper;
    uint32_t enchantment;
    std::array<uint32_t, 3> enchantments_slots;
    uint64_t item_creator;
    uint32_t spell_charges;
    uint32_t item_suffix_factor;
    uint32_t item_random_properties_id;
    uint32_t lock_id;
    uint32_t max_durability;
    uint32_t durability;
};

struct TrainerSpell {
    uint32_t spell;
    TrainerSpellState state;
    uint32_t spell_cost;
    uint32_t talent_point_cost;
    uint32_t first_rank;
    uint8_t required_level;
    Skill required_skill;
    uint32_t required_skill_value;
    std::array<uint32_t, 3> required_spells;
};

struct WhoPlayer {
    std::string name;
    std::string guild;
    uint32_t level;
    Class class_type;
    Race race;
    Gender gender;
    Area area;
};

struct WorldState {
    uint32_t state;
    uint32_t value;
};

constexpr auto WRATH_INSPECT_TALENT_GEAR_MASK_LENGTH = 32;
struct InspectTalentGearMask {
    InspectTalentGear values[WRATH_INSPECT_TALENT_GEAR_MASK_LENGTH];
};

constexpr int AURA_MASK_SIZE = 64;
struct AuraMask {
    wrath::Aura auras[AURA_MASK_SIZE];
};


constexpr auto WRATH_CACHE_MASK_LENGTH = 32;
struct CacheMask {
    uint32_t values[WRATH_CACHE_MASK_LENGTH];
};

struct CMSG_BOOTME {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_DBLOOKUP {
    std::string query;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_WORLD_TELEPORT {
    uint32_t time;
    Map map;
    uint64_t unknown;
    all::Vector3d position;
    float orientation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TELEPORT_TO_UNIT {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHAR_CREATE {
    std::string name;
    Race race;
    Class class_type;
    Gender gender;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHAR_ENUM {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHAR_DELETE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHAR_CREATE {
    WorldResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHAR_ENUM {
    std::vector<wrath::Character> characters;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHAR_DELETE {
    WorldResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PLAYER_LOGIN {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_NEW_WORLD {
    Map map;
    all::Vector3d position;
    float orientation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TRANSFER_PENDING {
    struct HasTransport {
        uint32_t transport;
        Map transport_map;
    };

    Map map;
    std::unique_ptr<HasTransport> has_transport;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TRANSFER_ABORTED {
    Map map;
    TransferAbortReason reason;
    DungeonDifficulty difficulty;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHARACTER_LOGIN_FAILED {
    WorldResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOGIN_SETTIMESPEED {
    uint32_t datetime;
    float timescale;
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PLAYER_LOGOUT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LOGOUT_REQUEST {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOGOUT_RESPONSE {
    LogoutResult result;
    LogoutSpeed speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOGOUT_COMPLETE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LOGOUT_CANCEL {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOGOUT_CANCEL_ACK {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_NAME_QUERY {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_NAME_QUERY_RESPONSE {
    uint64_t guid;
    std::string character_name;
    std::string realm_name;
    Race race;
    Gender gender;
    Class class_type;
    DeclinedNames has_declined_names;
    std::array<std::string, 5> declined_names;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PET_NAME_QUERY {
    uint32_t pet_number;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_NAME_QUERY_RESPONSE {
    uint32_t pet_number;
    std::string name;
    uint32_t pet_name_timestamp;
    PetQueryDisabledNames names;
    std::array<std::string, 5> declined_names;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_QUERY {
    uint32_t guild_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GUILD_QUERY_RESPONSE {
    uint32_t id;
    std::string name;
    std::array<std::string, 10> rank_names;
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;
    uint32_t background_color;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ITEM_QUERY_SINGLE {
    uint32_t item;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ITEM_QUERY_SINGLE_RESPONSE {
    struct Found {
        ItemClassAndSubClass class_and_sub_class;
        uint32_t sound_override_sub_class;
        std::string name1;
        std::string name2;
        std::string name3;
        std::string name4;
        uint32_t display_id;
        ItemQuality quality;
        ItemFlag flags;
        ItemFlag2 flags2;
        uint32_t buy_price;
        uint32_t sell_price;
        InventoryType inventory_type;
        AllowedClass allowed_class;
        AllowedRace allowed_race;
        uint32_t item_level;
        uint32_t required_level;
        Skill required_skill;
        uint32_t required_skill_rank;
        uint32_t required_spell;
        uint32_t required_honor_rank;
        uint32_t required_city_rank;
        Faction required_faction;
        uint32_t required_faction_rank;
        uint32_t max_count;
        uint32_t stackable;
        uint32_t container_slots;
        std::vector<wrath::ItemStat> stats;
        uint32_t scaling_stats_entry;
        uint32_t scaling_stats_flag;
        std::array<wrath::ItemDamageType, 2> damages;
        int32_t armor;
        int32_t holy_resistance;
        int32_t fire_resistance;
        int32_t nature_resistance;
        int32_t frost_resistance;
        int32_t shadow_resistance;
        int32_t arcane_resistance;
        uint32_t delay;
        uint32_t ammo_type;
        float ranged_range_modification;
        std::array<wrath::ItemSpells, 5> spells;
        Bonding bonding;
        std::string description;
        uint32_t page_text;
        Language language;
        PageTextMaterial page_text_material;
        uint32_t start_quest;
        uint32_t lock_id;
        uint32_t material;
        SheatheType sheathe_type;
        uint32_t random_property;
        uint32_t random_suffix;
        uint32_t block;
        ItemSet item_set;
        uint32_t max_durability;
        Area area;
        Map map;
        BagFamily bag_family;
        uint32_t totem_category;
        std::array<wrath::ItemSocket, 3> sockets;
        uint32_t socket_bonus;
        uint32_t gem_properties;
        uint32_t required_disenchant_skill;
        float armor_damage_modifier;
        uint32_t duration;
        uint32_t item_limit_category;
        uint32_t holiday_id;
    };

    uint32_t item;
    std::unique_ptr<Found> found;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PAGE_TEXT_QUERY {
    uint32_t page_id;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PAGE_TEXT_QUERY_RESPONSE {
    uint32_t page_id;
    std::string text;
    uint32_t next_page_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUEST_QUERY {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUEST_QUERY_RESPONSE {
    uint32_t quest_id;
    uint32_t quest_method;
    uint32_t quest_level;
    uint32_t minimum_quest_level;
    uint32_t zone_or_sort;
    uint32_t quest_type;
    uint32_t suggest_player_amount;
    Faction reputation_objective_faction;
    uint32_t reputation_objective_value;
    Faction required_opposite_faction;
    uint32_t required_opposite_reputation_value;
    uint32_t next_quest_in_chain;
    uint32_t money_reward;
    uint32_t max_level_money_reward;
    uint32_t reward_spell;
    uint32_t casted_reward_spell;
    uint32_t honor_reward;
    float honor_reward_multiplier;
    uint32_t source_item_id;
    uint32_t quest_flags;
    uint32_t title_reward;
    uint32_t players_slain;
    uint32_t bonus_talents;
    uint32_t bonus_arena_points;
    uint32_t unknown1;
    std::array<wrath::QuestItemReward, 4> rewards;
    std::array<wrath::QuestItemReward, 6> choice_rewards;
    std::array<uint32_t, 5> reputation_rewards;
    std::array<uint32_t, 5> reputation_reward_amounts;
    std::array<uint32_t, 5> reputation_reward_overrides;
    uint32_t point_map_id;
    all::Vector2d position;
    uint32_t point_opt;
    std::string title;
    std::string objective_text;
    std::string details;
    std::string end_text;
    std::string completed_text;
    std::array<wrath::QuestObjective, 4> objectives;
    std::array<wrath::QuestItemRequirement, 6> item_requirements;
    std::array<std::string, 4> objective_texts;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GAMEOBJECT_QUERY {
    uint32_t entry_id;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GAMEOBJECT_QUERY_RESPONSE {
    struct Found {
        uint32_t info_type;
        uint32_t display_id;
        std::string name1;
        std::string name2;
        std::string name3;
        std::string name4;
        std::string icon_name;
        std::string cast_bar_caption;
        std::string unknown;
        std::array<uint32_t, 6> raw_data;
        float gameobject_size;
        std::array<uint32_t, 6> gameobject_quest_items;
    };

    uint32_t entry_id;
    std::unique_ptr<Found> found;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CREATURE_QUERY {
    uint32_t creature;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CREATURE_QUERY_RESPONSE {
    struct Found {
        std::string name1;
        std::string name2;
        std::string name3;
        std::string name4;
        std::string sub_name;
        std::string description;
        uint32_t type_flags;
        uint32_t creature_type;
        CreatureFamily creature_family;
        uint32_t creature_rank;
        uint32_t kill_credit1;
        uint32_t kill_credit2;
        std::array<uint32_t, 4> display_ids;
        float health_multiplier;
        float mana_multiplier;
        uint8_t racial_leader;
        std::array<uint32_t, 6> quest_items;
        uint32_t movement_id;
    };

    uint32_t creature_entry;
    std::unique_ptr<Found> found;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_WHO {
    uint32_t minimum_level;
    uint32_t maximum_level;
    std::string player_name;
    std::string guild_name;
    uint32_t race_mask;
    uint32_t class_mask;
    std::vector<uint32_t> zones;
    std::vector<std::string> search_strings;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_WHO {
    uint32_t online_players;
    std::vector<wrath::WhoPlayer> players;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_WHOIS {
    std::string character;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_WHOIS {
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CONTACT_LIST {
    uint32_t flags;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CONTACT_LIST {
    RelationType list_mask;
    std::vector<wrath::Relation> relations;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FRIEND_STATUS {
    FriendResult result;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ADD_FRIEND {
    std::string name;
    std::string note;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_DEL_FRIEND {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_CONTACT_NOTES {
    uint64_t player;
    std::string note;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ADD_IGNORE {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_DEL_IGNORE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_INVITE {
    std::string name;
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GROUP_INVITE {
    struct Unknown {
        uint32_t unknown1;
        uint8_t count;
        uint32_t unknown2;
    };

    PlayerInviteStatus status;
    std::string name;
    std::unique_ptr<Unknown> unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_CANCEL {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_ACCEPT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_DECLINE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GROUP_DECLINE {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_UNINVITE {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_UNINVITE_GUID {
    uint64_t guid;
    std::string reason;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GROUP_UNINVITE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_SET_LEADER {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GROUP_SET_LEADER {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LOOT_METHOD {
    GroupLootSetting loot_setting;
    uint64_t loot_master;
    ItemQuality loot_threshold;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_DISBAND {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GROUP_DESTROYED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GROUP_LIST {
    struct GroupNotEmpty {
        GroupLootSetting loot_setting;
        uint64_t master_loot;
        ItemQuality loot_threshold;
        DungeonDifficulty difficulty;
        RaidDifficulty raid_difficulty;
        bool heroic;
    };

    uint8_t group_type;
    uint8_t group_id;
    uint8_t flags;
    uint8_t roles;
    uint64_t group;
    uint32_t counter;
    std::vector<wrath::GroupListMember> members;
    uint64_t leader;
    std::unique_ptr<GroupNotEmpty> group_not_empty;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PARTY_MEMBER_STATS {
    uint64_t guid;
    GroupUpdateFlags mask;
    GroupMemberOnlineStatus status;
    uint32_t current_health;
    uint32_t max_health;
    Power power;
    uint16_t current_power;
    uint16_t max_power;
    uint16_t level;
    Area area;
    uint16_t position_x;
    uint16_t position_y;
    AuraMask auras;
    uint64_t pet;
    std::string pet_name;
    uint16_t pet_display_id;
    uint32_t pet_current_health;
    uint32_t pet_max_health;
    Power pet_power_type;
    uint16_t pet_current_power;
    uint16_t pet_max_power;
    AuraMask pet_auras;
    uint32_t transport;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PARTY_COMMAND_RESULT {
    PartyOperation operation;
    std::string member;
    PartyResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_CREATE {
    std::string guild_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_INVITE {
    std::string invited_player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GUILD_INVITE {
    std::string player_name;
    std::string guild_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_ACCEPT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_DECLINE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GUILD_DECLINE {
    std::string player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_INFO {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GUILD_INFO {
    std::string guild_name;
    uint32_t created;
    uint32_t amount_of_characters_in_guild;
    uint32_t amount_of_accounts_in_guild;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_ROSTER {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GUILD_ROSTER {
    std::string motd;
    std::string guild_info;
    std::vector<wrath::GuildRights> rights;
    std::vector<wrath::GuildMember> members;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_PROMOTE {
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_DEMOTE {
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_LEAVE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_REMOVE {
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_DISBAND {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_LEADER {
    std::string new_guild_leader_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_MOTD {
    std::string message_of_the_day;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GUILD_EVENT {
    GuildEvent event;
    std::vector<std::string> event_descriptions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GUILD_COMMAND_RESULT {
    GuildCommand command;
    std::string string;
    GuildCommandResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MESSAGECHAT {
    ChatType chat_type;
    Language language;
    std::string target_player;
    std::string channel;
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MESSAGECHAT {
    ChatType chat_type;
    Language language;
    uint64_t sender;
    uint32_t flags;
    std::string sender1;
    NamedGuid target1;
    std::string sender2;
    uint64_t target2;
    NamedGuid target3;
    uint64_t target4;
    std::string channel_name;
    uint64_t target5;
    uint64_t target6;
    std::string message;
    PlayerChatTag tag;
    uint32_t achievement_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_JOIN_CHANNEL {
    uint32_t channel_id;
    uint8_t unknown1;
    uint8_t unknown2;
    std::string channel_name;
    std::string channel_password;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LEAVE_CHANNEL {
    uint32_t channel_id;
    std::string channel_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHANNEL_NOTIFY {
    struct Unknown1 {
        uint32_t unknown2;
        uint32_t unkwown3;
    };

    ChatNotify notify_type;
    std::string channel_name;
    std::unique_ptr<Unknown1> unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_LIST {
    std::string channel_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHANNEL_LIST {
    std::string channel_name;
    ChannelFlags channel_flags;
    std::vector<wrath::ChannelMember> members;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_PASSWORD {
    std::string channel_name;
    std::string channel_password;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_SET_OWNER {
    std::string channel_name;
    std::string new_owner;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_OWNER {
    std::string channel_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_MODERATOR {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_UNMODERATOR {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_MUTE {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_UNMUTE {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_INVITE {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_KICK {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_BAN {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_UNBAN {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_ANNOUNCEMENTS {
    std::string channel_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_MODERATE {
    std::string channel_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_UPDATE_OBJECT {
    std::vector<wrath::Object> objects;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_DESTROY_OBJECT {
    uint64_t guid;
    bool target_died;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_USE_ITEM {
    uint8_t bag_index;
    uint8_t bag_slot;
    uint8_t spell_index;
    uint8_t cast_count;
    uint32_t spell;
    uint64_t item;
    uint32_t glyph_index;
    ClientCastFlags cast_flags;
    float elevation;
    float speed;
    ClientMovementData movement_data;
    uint32_t opcode;
    uint64_t guid;
    wrath::MovementInfo info;
    wrath::SpellCastTargets targets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_OPEN_ITEM {
    uint8_t bag_index;
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_READ_ITEM {
    uint8_t bag_index;
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_READ_ITEM_OK {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_READ_ITEM_FAILED {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ITEM_COOLDOWN {
    uint64_t guid;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GAMEOBJ_USE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GAMEOBJECT_CUSTOM_ANIM {
    uint64_t guid;
    uint32_t animation_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AREATRIGGER {
    uint32_t trigger_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_START_FORWARD {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_START_BACKWARD {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_STOP {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_START_STRAFE_LEFT {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_START_STRAFE_RIGHT {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_STOP_STRAFE {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_JUMP {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_START_TURN_LEFT {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_START_TURN_RIGHT {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_STOP_TURN {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_START_PITCH_UP {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_START_PITCH_DOWN {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_STOP_PITCH {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_SET_RUN_MODE {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_SET_WALK_MODE {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_TELEPORT_Server {
    uint64_t player;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_TELEPORT_CHEAT_Server {
    all::Vector3d position;
    float orientation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_TELEPORT_ACK_Client {
    uint64_t guid;
    uint32_t movement_counter;
    uint32_t time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_TELEPORT_ACK_Server {
    uint64_t guid;
    uint32_t movement_counter;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_FALL_LAND {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_START_SWIM {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_STOP_SWIM {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_SET_FACING {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_SET_PITCH {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_WORLDPORT_ACK {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct SMSG_MONSTER_MOVE {
    uint64_t guid;
    uint8_t unknown;
    all::Vector3d spline_point;
    uint32_t spline_id;
    MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all::Vector3d position;
    SplineFlag spline_flags;
    uint32_t animation_id;
    uint32_t animation_start_time;
    uint32_t duration;
    float vertical_acceleration;
    uint32_t effect_start_time;
    std::vector<::wow_world_messages::all::Vector3d> splines;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOVE_WATER_WALK {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOVE_LAND_WALK {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_SET_RAW_POSITION {
    all::Vector3d position;
    float orientation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FORCE_RUN_SPEED_CHANGE {
    uint64_t guid;
    uint32_t move_event;
    uint8_t unknown;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_FORCE_RUN_SPEED_CHANGE_ACK {
    uint64_t guid;
    uint32_t counter;
    wrath::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FORCE_RUN_BACK_SPEED_CHANGE {
    uint64_t guid;
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK {
    uint64_t guid;
    uint32_t movement_counter;
    wrath::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FORCE_SWIM_SPEED_CHANGE {
    uint64_t guid;
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_FORCE_SWIM_SPEED_CHANGE_ACK {
    uint64_t guid;
    uint32_t counter;
    wrath::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FORCE_MOVE_ROOT {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_FORCE_MOVE_ROOT_ACK {
    uint64_t guid;
    uint32_t movement_counter;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FORCE_MOVE_UNROOT {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_FORCE_MOVE_UNROOT_ACK {
    uint64_t guid;
    uint32_t movement_counter;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_ROOT_Server {
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_UNROOT_Server {
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_HEARTBEAT {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct SMSG_MOVE_KNOCK_BACK {
    uint64_t guid;
    uint32_t movement_counter;
    float v_cos;
    float v_sin;
    float horizontal_speed;
    float vertical_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_KNOCK_BACK_ACK {
    uint64_t guid;
    uint32_t counter;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_KNOCK_BACK_Server {
    uint64_t player;
    wrath::MovementInfo info;
    float sin_angle;
    float cos_angle;
    float x_y_speed;
    float velocity;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOVE_FEATHER_FALL {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOVE_NORMAL_FALL {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOVE_SET_HOVER {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOVE_UNSET_HOVER {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_HOVER_ACK {
    uint64_t guid;
    uint32_t counter;
    wrath::MovementInfo info;
    uint32_t is_applied;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_HOVER {
    uint64_t player;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct SMSG_TRIGGER_CINEMATIC {
    CinematicSequenceId cinematic_sequence_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_NEXT_CINEMATIC_CAMERA {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_COMPLETE_CINEMATIC {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TUTORIAL_FLAGS {
    std::array<uint32_t, 8> tutorial_data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TUTORIAL_FLAG {
    uint32_t tutorial_flag;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TUTORIAL_CLEAR {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TUTORIAL_RESET {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_STANDSTATECHANGE {
    UnitStandState animation_state;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_EMOTE {
    Emote emote;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_EMOTE {
    Emote emote;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TEXT_EMOTE {
    TextEmote text_emote;
    uint32_t emote;
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TEXT_EMOTE {
    uint64_t guid;
    TextEmote text_emote;
    uint32_t emote;
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUTOSTORE_LOOT_ITEM {
    uint8_t item_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUTOEQUIP_ITEM {
    uint8_t source_bag;
    uint8_t source_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUTOSTORE_BAG_ITEM {
    uint8_t source_bag;
    uint8_t source_slot;
    uint8_t destination_bag;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SWAP_ITEM {
    uint8_t destination_bag;
    uint8_t destionation_slot;
    uint8_t source_bag;
    uint8_t source_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SWAP_INV_ITEM {
    ItemSlot source_slot;
    ItemSlot destination_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SPLIT_ITEM {
    uint8_t source_bag;
    uint8_t source_slot;
    uint8_t destination_bag;
    uint8_t destination_slot;
    uint32_t amount;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUTOEQUIP_ITEM_SLOT {
    uint64_t guid;
    uint8_t destination_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_DESTROYITEM {
    uint8_t bag;
    uint8_t slot;
    uint8_t amount;
    uint8_t unknown1;
    uint8_t unknown2;
    uint8_t unknown3;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_INVENTORY_CHANGE_FAILURE {
    InventoryResult result;
    uint64_t item1;
    uint64_t item2;
    uint8_t bag_type_subclass;
    uint32_t required_level;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_INSPECT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_INITIATE_TRADE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BEGIN_TRADE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BUSY_TRADE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_IGNORE_TRADE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ACCEPT_TRADE {
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_UNACCEPT_TRADE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CANCEL_TRADE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_TRADE_ITEM {
    uint8_t trade_slot;
    uint8_t bag;
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CLEAR_TRADE_ITEM {
    uint8_t trade_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_TRADE_GOLD {
    uint32_t gold;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TRADE_STATUS {
    TradeStatus status;
    uint64_t unknown1;
    InventoryResult inventory_result;
    bool target_error;
    uint32_t item_limit_category_id;
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TRADE_STATUS_EXTENDED {
    bool self_player;
    uint32_t trade_id;
    uint32_t trade_slot_count1;
    uint32_t trade_slot_count2;
    uint32_t money_in_trade;
    uint32_t spell_on_lowest_slot;
    std::array<wrath::TradeSlot, 7> trade_slots;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_INITIALIZE_FACTIONS {
    std::vector<wrath::FactionInitializer> factions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SET_FACTION_VISIBLE {
    Faction faction;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SET_FACTION_STANDING {
    float refer_a_friend_bonus;
    bool any_rank_increased;
    std::vector<wrath::FactionStanding> faction_standings;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_FACTION_ATWAR {
    Faction faction;
    FactionFlag flags;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SET_PROFICIENCY {
    ItemClass class_type;
    uint32_t item_sub_class_mask;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_ACTION_BUTTON {
    uint8_t button;
    uint16_t action;
    uint8_t misc;
    uint8_t action_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ACTION_BUTTONS {
    ActionBarBehavior behavior;
    std::array<wrath::ActionButton, 144> data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_INITIAL_SPELLS {
    uint8_t unknown1;
    std::vector<wrath::InitialSpell> initial_spells;
    std::vector<wrath::CooldownSpell> cooldowns;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LEARNED_SPELL {
    uint32_t id;
    uint16_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SUPERCEDED_SPELL {
    uint32_t new_spell;
    uint32_t old;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CAST_SPELL {
    uint8_t cast_count;
    uint32_t spell;
    ClientCastFlags cast_flags;
    wrath::SpellCastTargets targets;
    float elevation;
    float speed;
    ClientMovementData movement_data;
    uint32_t opcode;
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CANCEL_CAST {
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CAST_FAILED {
    uint8_t cast_count;
    uint32_t id;
    SpellCastResult result;
    bool multiple_casts;
    uint32_t spell_focus;
    Area area;
    std::array<uint32_t, 2> totems;
    std::array<uint32_t, 2> totem_categories;
    uint32_t item_class;
    uint32_t item_sub_class;
    uint32_t item_limit_category;
    uint32_t custom_error;
    uint32_t missing_item;
    uint32_t mechanic;
    uint32_t equipped_item_sub_class;
    uint32_t item;
    uint32_t count;
    Skill skill;
    uint32_t skill_required;
    uint32_t fishing_skill_required;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELL_START {
    uint64_t cast_item;
    uint64_t caster;
    uint8_t cast_count;
    uint32_t spell;
    CastFlags flags;
    uint32_t timer;
    wrath::SpellCastTargets targets;
    Power power;
    uint32_t ammo_display_id;
    uint32_t ammo_inventory_type;
    uint32_t unknown1;
    uint32_t unknown2;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELL_GO {
    uint64_t cast_item;
    uint64_t caster;
    uint8_t extra_casts;
    uint32_t spell;
    GameobjectCastFlags flags;
    uint32_t timestamp;
    std::vector<uint64_t> hits;
    std::vector<wrath::SpellMiss> misses;
    wrath::SpellCastTargets targets;
    Power power;
    uint8_t rune_mask_initial;
    uint8_t rune_mask_after_cast;
    std::array<uint8_t, 6> rune_cooldowns;
    float elevation;
    uint32_t delay_trajectory;
    uint32_t ammo_display_id;
    uint32_t ammo_inventory_type;
    uint32_t unknown1;
    uint32_t unknown2;
    uint8_t unknown3;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELL_FAILURE {
    uint64_t guid;
    uint8_t extra_casts;
    uint32_t spell;
    SpellCastResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELL_COOLDOWN {
    uint64_t guid;
    uint8_t flags;
    uint32_t amount_of_cooldowns;
    std::vector<wrath::SpellCooldownStatus> cooldowns;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_COOLDOWN_EVENT {
    uint32_t id;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CANCEL_AURA {
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_CAST_FAILED {
    uint8_t cast_count;
    uint32_t id;
    SpellCastResult result;
    bool multiple_casts;
    uint32_t spell_focus;
    Area area;
    std::array<uint32_t, 2> totems;
    std::array<uint32_t, 2> totem_categories;
    uint32_t item_class;
    uint32_t item_sub_class;
    uint32_t item_limit_category;
    uint32_t custom_error;
    uint32_t missing_item;
    uint32_t mechanic;
    uint32_t equipped_item_sub_class;
    uint32_t item;
    uint32_t count;
    Skill skill;
    uint32_t skill_required;
    uint32_t fishing_skill_required;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_CHANNEL_START_Server {
    uint64_t caster;
    uint32_t spell;
    uint32_t duration;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_CHANNEL_UPDATE_Server {
    uint64_t caster;
    uint32_t time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CANCEL_CHANNELLING {
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AI_REACTION {
    uint64_t guid;
    AiReaction reaction;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_SELECTION {
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_DELETEEQUIPMENT_SET {
    uint64_t set;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_INSTANCE_LOCK_RESPONSE {
    bool accept;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ATTACKSWING {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ATTACKSTOP {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ATTACKSTART {
    uint64_t attacker;
    uint64_t victim;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ATTACKSTOP {
    uint64_t player;
    uint64_t enemy;
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ATTACKSWING_NOTINRANGE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ATTACKSWING_BADFACING {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_INSTANCE_LOCK_WARNING_QUERY {
    uint32_t time;
    uint32_t encounter_mask;
    uint8_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ATTACKSWING_DEADTARGET {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ATTACKSWING_CANT_ATTACK {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ATTACKERSTATEUPDATE {
    HitInfo hit_info;
    uint64_t attacker;
    uint64_t target;
    uint32_t total_damage;
    uint32_t overkill;
    std::vector<wrath::DamageInfo> damage_infos;
    uint32_t absorb;
    uint32_t resist;
    VictimState victim_state;
    uint32_t unknown1;
    uint32_t unknown2;
    uint32_t blocked_amount;
    uint32_t unknown3;
    uint32_t unknown4;
    float unknown5;
    float unknown6;
    float unknown7;
    float unknown8;
    float unknown9;
    float unknown10;
    float unknown11;
    float unknown12;
    float unknown13;
    float unknown14;
    uint32_t unknown15;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CANCEL_COMBAT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELLHEALLOG {
    uint64_t victim;
    uint64_t caster;
    uint32_t id;
    uint32_t damage;
    uint32_t overheal;
    uint32_t absorb;
    bool critical;
    uint8_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELLENERGIZELOG {
    uint64_t victim;
    uint64_t caster;
    uint32_t spell;
    Power power;
    uint32_t damage;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BREAK_TARGET {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BINDPOINTUPDATE {
    all::Vector3d position;
    Map map;
    Area area;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PLAYERBOUND {
    uint64_t guid;
    Area area;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CLIENT_CONTROL_UPDATE {
    uint64_t guid;
    bool allow_movement;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REPOP_REQUEST {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_RESURRECT_REQUEST {
    uint64_t guid;
    std::string name;
    bool player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_RESURRECT_RESPONSE {
    uint64_t guid;
    uint8_t status;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LOOT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LOOT_MONEY {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LOOT_RELEASE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOOT_RESPONSE {
    uint64_t guid;
    LootMethod loot_method;
    LootMethodError loot_error;
    uint32_t gold;
    std::vector<wrath::LootItem> items;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOOT_RELEASE_RESPONSE {
    uint64_t guid;
    uint8_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOOT_REMOVED {
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOOT_MONEY_NOTIFY {
    uint32_t amount;
    bool alone;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOOT_CLEAR_MONEY {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ITEM_PUSH_RESULT {
    uint64_t guid;
    NewItemSource source;
    NewItemCreationType creation_type;
    NewItemChatAlert alert_chat;
    uint8_t bag_slot;
    uint32_t item_slot;
    uint32_t item;
    uint32_t item_suffix_factor;
    uint32_t item_random_property_id;
    uint32_t item_count;
    uint32_t item_count_in_inventory;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_DUEL_REQUESTED {
    uint64_t initiator;
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_DUEL_OUTOFBOUNDS {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_DUEL_INBOUNDS {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_DUEL_COMPLETE {
    bool ended_without_interruption;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_DUEL_WINNER {
    DuelWinnerReason reason;
    std::string opponent_name;
    std::string initiator_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_DUEL_ACCEPTED {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_DUEL_CANCELLED {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOUNTRESULT {
    MountResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOUNTSPECIAL_ANIM {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOUNTSPECIAL_ANIM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_TAME_FAILURE {
    PetTameFailureReason reason;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PET_SET_ACTION {
    struct Extra {
        uint32_t position2;
        uint32_t data2;
    };

    uint64_t guid;
    uint32_t position1;
    uint32_t data1;
    std::unique_ptr<Extra> extra;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PET_ACTION {
    uint64_t pet;
    uint32_t data;
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PET_ABANDON {
    uint64_t pet;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PET_RENAME {
    uint64_t pet;
    std::string name;
    bool declined;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_NAME_INVALID {
    PetNameInvalidReason reason;
    std::string name;
    DeclinedPetNameIncluded included;
    std::array<std::string, 5> declined_names;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_SPELLS {
    struct ActionBars {
        CreatureFamily family;
        uint32_t duration;
        PetReactState react;
        PetCommandState command;
        uint8_t unknown;
        PetEnabled pet_enabled;
        std::array<uint32_t, 10> action_bars;
        std::vector<uint32_t> spells;
        std::vector<wrath::PetSpellCooldown> cooldowns;
    };

    uint64_t pet;
    std::unique_ptr<ActionBars> action_bars;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_MODE {
    uint64_t guid;
    PetReactState react_state;
    PetCommandState command_state;
    uint8_t unknown1;
    PetEnabled pet_enabled;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GOSSIP_HELLO {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GOSSIP_SELECT_OPTION {
    struct Unknown {
        std::string code;
    };

    uint64_t guid;
    uint32_t menu_id;
    uint32_t gossip_list_id;
    std::unique_ptr<Unknown> unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GOSSIP_MESSAGE {
    uint64_t guid;
    uint32_t menu_id;
    uint32_t title_text_id;
    std::vector<wrath::GossipItem> gossips;
    std::vector<wrath::QuestItem> quests;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GOSSIP_COMPLETE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_NPC_TEXT_QUERY {
    uint32_t text_id;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_NPC_TEXT_UPDATE {
    uint32_t text_id;
    std::array<wrath::NpcTextUpdate, 8> texts;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTGIVER_STATUS_QUERY {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTGIVER_STATUS {
    uint64_t guid;
    QuestGiverStatus status;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTGIVER_HELLO {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTGIVER_QUEST_LIST {
    uint64_t npc;
    std::string title;
    uint32_t emote_delay;
    uint32_t emote;
    std::vector<wrath::QuestItem> quest_items;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTGIVER_QUERY_QUEST {
    uint64_t guid;
    uint32_t quest_id;
    uint8_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTGIVER_QUEST_AUTOLAUNCH {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTGIVER_QUEST_DETAILS {
    uint64_t guid;
    uint64_t guid2;
    uint32_t quest_id;
    std::string title;
    std::string details;
    std::string objectives;
    bool auto_finish;
    uint32_t quest_flags;
    uint32_t suggested_players;
    uint8_t is_finished;
    std::vector<wrath::QuestGiverReward> choice_item_rewards;
    std::vector<wrath::QuestGiverReward> item_rewards;
    uint32_t money_reward;
    uint32_t experience_reward;
    uint32_t honor_reward;
    float honor_reward_multiplier;
    uint32_t reward_spell;
    uint32_t casted_spell;
    uint32_t title_reward;
    uint32_t talent_reward;
    uint32_t arena_point_reward;
    uint32_t unknown2;
    std::array<uint32_t, 5> reward_factions;
    std::array<uint32_t, 5> reward_reputations;
    std::array<uint32_t, 5> reward_reputations_override;
    std::vector<wrath::QuestDetailsEmote> emotes;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTGIVER_ACCEPT_QUEST {
    uint64_t guid;
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTGIVER_COMPLETE_QUEST {
    uint64_t guid;
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTGIVER_REQUEST_ITEMS {
    uint64_t npc;
    uint32_t quest_id;
    std::string title;
    std::string request_items_text;
    uint32_t emote_delay;
    uint32_t emote;
    bool auto_finish;
    uint32_t flags1;
    uint32_t suggested_players;
    uint32_t required_money;
    std::vector<wrath::QuestItemRequirement> required_items;
    QuestCompletable completable;
    uint32_t flags2;
    uint32_t flags3;
    uint32_t flags4;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTGIVER_REQUEST_REWARD {
    uint64_t guid;
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTGIVER_OFFER_REWARD {
    uint64_t npc;
    uint32_t quest_id;
    std::string title;
    std::string offer_reward_text;
    bool auto_finish;
    uint32_t flags1;
    uint32_t suggested_players;
    std::vector<wrath::NpcTextUpdateEmote> emotes;
    std::vector<wrath::QuestItemRequirement> choice_item_rewards;
    std::vector<wrath::QuestItemRequirement> item_rewards;
    uint32_t money_reward;
    uint32_t experience_reward;
    uint32_t honor_reward;
    float honor_reward_multiplier;
    uint32_t unknown1;
    uint32_t reward_spell;
    uint32_t reward_spell_cast;
    uint32_t title_reward;
    uint32_t reward_talents;
    uint32_t reward_arena_points;
    uint32_t reward_reputation_mask;
    std::array<uint32_t, 5> reward_factions;
    std::array<uint32_t, 5> reward_reputations;
    std::array<uint32_t, 5> reward_reputations_override;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTGIVER_CHOOSE_REWARD {
    uint64_t guid;
    uint32_t quest_id;
    uint32_t reward;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTGIVER_QUEST_INVALID {
    QuestFailedReason msg;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTGIVER_CANCEL {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTGIVER_QUEST_COMPLETE {
    uint32_t quest_id;
    uint32_t unknown;
    uint32_t experience_reward;
    uint32_t money_reward;
    uint32_t honor_reward;
    uint32_t talent_reward;
    uint32_t arena_point_reward;
    std::vector<wrath::QuestItemReward> item_rewards;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTGIVER_QUEST_FAILED {
    uint32_t quest_id;
    QuestFailedReason reason;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTLOG_SWAP_QUEST {
    uint8_t slot1;
    uint8_t slot2;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTLOG_REMOVE_QUEST {
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTLOG_FULL {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTUPDATE_FAILED {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTUPDATE_FAILEDTIMER {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTUPDATE_COMPLETE {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTUPDATE_ADD_KILL {
    uint32_t quest_id;
    uint32_t creature_id;
    uint32_t kill_count;
    uint32_t required_kill_count;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTUPDATE_ADD_ITEM {
    uint32_t required_item_id;
    uint32_t items_required;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUEST_CONFIRM_ACCEPT {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUEST_CONFIRM_ACCEPT {
    uint32_t quest_id;
    std::string quest_title;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PUSHQUESTTOPARTY {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LIST_INVENTORY {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LIST_INVENTORY {
    uint64_t vendor;
    std::vector<wrath::ListInventoryItem> items;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SELL_ITEM {
    uint64_t vendor;
    uint64_t item;
    uint8_t amount;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SELL_ITEM {
    uint64_t guid;
    uint64_t item;
    SellItemResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BUY_ITEM {
    uint64_t vendor;
    uint32_t item;
    uint32_t slot;
    uint8_t amount;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BUY_ITEM_IN_SLOT {
    uint64_t vendor;
    uint32_t item;
    uint32_t vendor_slot;
    uint64_t bag;
    uint8_t bag_slot;
    uint8_t amount;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BUY_ITEM {
    uint64_t guid;
    uint32_t vendor_slot;
    uint32_t amount_for_sale;
    uint32_t amount_bought;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BUY_FAILED {
    uint64_t guid;
    uint32_t item;
    BuyResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SHOWTAXINODES {
    uint32_t unknown1;
    uint64_t guid;
    uint32_t nearest_node;
    uint32_t amount_of_nodes;
    std::vector<uint32_t> nodes;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TAXINODE_STATUS_QUERY {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TAXINODE_STATUS {
    uint64_t guid;
    bool taxi_mask_node_known;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TAXIQUERYAVAILABLENODES {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ACTIVATETAXI {
    uint64_t guid;
    uint32_t source_node;
    uint32_t destination_node;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ACTIVATETAXIREPLY {
    ActivateTaxiReply reply;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_NEW_TAXI_PATH {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TRAINER_LIST {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TRAINER_LIST {
    uint64_t guid;
    uint32_t trainer_type;
    std::vector<wrath::TrainerSpell> spells;
    std::string greeting;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TRAINER_BUY_SPELL {
    uint64_t guid;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TRAINER_BUY_SUCCEEDED {
    uint64_t guid;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TRAINER_BUY_FAILED {
    uint64_t guid;
    uint32_t id;
    TrainingFailureReason error;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BINDER_ACTIVATE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BANKER_ACTIVATE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SHOW_BANK {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BUY_BANK_SLOT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BUY_BANK_SLOT_RESULT {
    BuyBankSlotResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PETITION_SHOWLIST {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PETITION_SHOWLIST {
    uint64_t npc;
    std::vector<wrath::PetitionShowlist> petitions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PETITION_BUY {
    uint64_t npc;
    uint32_t unknown1;
    uint64_t unknown2;
    std::string name;
    std::string unknown3;
    uint32_t unknown4;
    uint32_t unknown5;
    uint32_t unknown6;
    uint32_t unknown7;
    uint32_t unknown8;
    uint32_t unknown9;
    uint32_t unknown10;
    uint16_t unknown11;
    uint32_t unknown12;
    uint32_t unknown13;
    uint32_t unknown14;
    std::array<std::string, 10> unknown15;
    uint32_t index;
    uint32_t unknown16;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PETITION_SHOW_SIGNATURES {
    uint64_t item;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PETITION_SHOW_SIGNATURES {
    uint64_t item;
    uint64_t owner;
    uint32_t petition;
    std::vector<wrath::PetitionSignature> signatures;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PETITION_SIGN {
    uint64_t petition;
    uint8_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PETITION_SIGN_RESULTS {
    uint64_t petition;
    uint64_t owner;
    PetitionResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_PETITION_DECLINE {
    uint64_t petition;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct CMSG_OFFER_PETITION {
    uint32_t unknown0;
    uint64_t petition;
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TURN_IN_PETITION {
    uint64_t petition;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TURN_IN_PETITION_RESULTS {
    PetitionResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PETITION_QUERY {
    uint32_t guild_id;
    uint64_t petition;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PETITION_QUERY_RESPONSE {
    uint32_t petition_id;
    uint64_t charter_owner;
    std::string guild_name;
    std::string body_text;
    uint32_t minimum_signatures;
    uint32_t maximum_signatures;
    uint32_t unknown1;
    uint32_t unknown2;
    uint32_t unknown3;
    uint32_t unknown4;
    uint32_t unknown5;
    uint16_t unknown6;
    uint32_t unknown7;
    uint32_t unknown8;
    uint32_t unknown9;
    std::array<uint8_t, 10> unknown10;
    uint32_t unknown11;
    CharterType charter_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FISH_NOT_HOOKED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FISH_ESCAPED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BUG {
    uint32_t suggestion;
    std::string content;
    std::string bug_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_NOTIFICATION {
    std::string notification;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PLAYED_TIME {
    bool show_on_ui;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PLAYED_TIME {
    uint32_t total_played_time;
    uint32_t level_played_time;
    bool show_on_ui;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUERY_TIME {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUERY_TIME_RESPONSE {
    uint32_t time;
    uint32_t time_until_daily_quest_reset;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOG_XPGAIN {
    uint64_t target;
    uint32_t total_exp;
    ExperienceAwardType exp_type;
    uint32_t experience_without_rested;
    float exp_group_bonus;
    bool exp_includes_recruit_a_friend_bonus;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_RECLAIM_CORPSE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_WRAP_ITEM {
    uint8_t gift_bag_index;
    uint8_t gift_slot;
    uint8_t item_bag_index;
    uint8_t item_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LEVELUP_INFO {
    uint32_t new_level;
    uint32_t health;
    uint32_t mana;
    uint32_t rage;
    uint32_t focus;
    uint32_t energy;
    uint32_t happiness;
    uint32_t rune;
    uint32_t runic_power;
    uint32_t strength;
    uint32_t agility;
    uint32_t stamina;
    uint32_t intellect;
    uint32_t spirit;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MINIMAP_PING_Client {
    float position_x;
    float position_y;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MINIMAP_PING_Server {
    uint64_t guid;
    float position_x;
    float position_y;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ENCHANTMENTLOG {
    uint64_t target;
    uint64_t caster;
    uint32_t item;
    uint32_t spell;
    bool show_affiliation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_START_MIRROR_TIMER {
    TimerType timer;
    uint32_t time_remaining;
    uint32_t duration;
    uint32_t scale;
    bool is_frozen;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PAUSE_MIRROR_TIMER {
    TimerType timer;
    bool is_frozen;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_STOP_MIRROR_TIMER {
    TimerType timer;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PING {
    uint32_t sequence_id;
    uint32_t round_time_in_ms;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PONG {
    uint32_t sequence_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CLEAR_COOLDOWN {
    uint32_t id;
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GAMEOBJECT_PAGETEXT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SETSHEATHED {
    SheathState sheathed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELL_DELAYED {
    uint64_t guid;
    uint32_t delay_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUEST_POI_QUERY {
    std::vector<uint32_t> points_of_interests;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUEST_POI_QUERY_RESPONSE {
    std::vector<wrath::QuestPoiList> quests;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ITEM_TIME_UPDATE {
    uint64_t guid;
    uint32_t duration;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ITEM_ENCHANT_TIME_UPDATE {
    uint64_t item;
    uint32_t slot;
    uint32_t duration;
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AUTH_CHALLENGE {
    uint32_t unknown1;
    uint32_t server_seed;
    std::array<uint8_t, 32> seed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUTH_SESSION {
    uint32_t client_build;
    uint32_t login_server_id;
    std::string username;
    uint32_t login_server_type;
    uint32_t client_seed;
    uint32_t region_id;
    uint32_t battleground_id;
    uint32_t realm_id;
    uint64_t dos_response;
    std::array<uint8_t, 20> client_proof;
    uint32_t amount_of_addon_info;
    std::vector<uint8_t> addon_info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AUTH_RESPONSE {
    WorldResult result;
    uint32_t billing_time;
    BillingPlanFlags billing_flags;
    uint32_t billing_rested;
    Expansion expansion;
    uint32_t queue_position;
    bool realm_has_free_character_migration;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PET_CAST_SPELL {
    uint64_t guid;
    uint8_t cast_count;
    uint32_t id;
    ClientCastFlags cast_flags;
    wrath::SpellCastTargets targets;
    float elevation;
    float speed;
    ClientMovementData movement_data;
    uint32_t opcode;
    uint64_t movement;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_SAVE_GUILD_EMBLEM_Client {
    uint64_t vendor;
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;
    uint32_t background_color;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_SAVE_GUILD_EMBLEM_Server {
    GuildEmblemResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_TABARDVENDOR_ACTIVATE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct SMSG_PLAY_SPELL_VISUAL {
    uint64_t guid;
    uint32_t spell_art_kit;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ZONEUPDATE {
    Area area;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PARTYKILLLOG {
    uint64_t player_with_killing_blow;
    uint64_t victim;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_COMPRESSED_UPDATE_OBJECT {
    std::vector<wrath::Object> objects;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PLAY_SPELL_IMPACT {
    uint64_t guid;
    uint32_t spell_visual_kit;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_EXPLORATION_EXPERIENCE {
    Area area;
    uint32_t experience;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_RANDOM_ROLL_Client {
    uint32_t minimum;
    uint32_t maximum;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_RANDOM_ROLL_Server {
    uint32_t minimum;
    uint32_t maximum;
    uint32_t actual_roll;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ENVIRONMENTAL_DAMAGE_LOG {
    uint64_t guid;
    EnvironmentalDamageType damage_type;
    uint32_t damage;
    uint32_t absorb;
    uint32_t resist;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_PLAYER_REWARD {
    uint32_t random_dungeon_entry;
    uint32_t dungeon_finished_entry;
    bool done;
    uint32_t unknown1;
    uint32_t money_reward;
    uint32_t experience_reward;
    uint32_t unknown2;
    uint32_t unknown3;
    std::vector<wrath::QuestGiverReward> rewards;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_TELEPORT_DENIED {
    LfgTeleportError error;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_UNLEARN_SKILL {
    Skill skill;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_REMOVED_SPELL {
    uint32_t spell;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GMTICKET_CREATE {
    Map map;
    all::Vector3d position;
    std::string message;
    bool needs_response;
    bool needs_more_help;
    std::vector<uint32_t> times;
    uint32_t amount_of_compressed_data;
    std::vector<uint8_t> compressed_data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GMTICKET_CREATE {
    GmTicketResponse response;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GMTICKET_UPDATETEXT {
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GMTICKET_UPDATETEXT {
    GmTicketResponse response;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ACCOUNT_DATA_TIMES {
    uint32_t unix_time;
    uint8_t unknown1;
    CacheMask mask;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REQUEST_ACCOUNT_DATA {
    uint32_t data_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_UPDATE_ACCOUNT_DATA {
    uint32_t data_type;
    uint32_t unix_time;
    uint32_t amount_of_compressed_data;
    std::vector<uint8_t> compressed_data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_UPDATE_ACCOUNT_DATA {
    uint32_t data_type;
    uint32_t decompressed_size;
    uint32_t amount_of_compressed_data;
    std::vector<uint8_t> compressed_data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GMTICKET_GETTICKET {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GMTICKET_GETTICKET {
    GmTicketStatus status;
    uint32_t id;
    std::string text;
    bool need_more_help;
    float days_since_ticket_creation;
    float days_since_oldest_ticket_creation;
    float days_since_last_updated;
    GmTicketEscalationStatus escalation_status;
    bool read_by_gm;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_UNLEARN_TALENTS {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT {
    EncounterFrame frame;
    uint64_t guid;
    uint8_t parameter1;
    uint8_t parameter2;
    uint8_t parameter3;
    uint8_t parameter4;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GAMEOBJECT_DESPAWN_ANIM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_CORPSE_QUERY_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_CORPSE_QUERY_Server {
    CorpseQueryResult result;
    Map map;
    all::Vector3d position;
    Map corpse_map;
    uint32_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GMTICKET_DELETETICKET {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GMTICKET_DELETETICKET {
    GmTicketResponse response;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHAT_WRONG_FACTION {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GMTICKET_SYSTEMSTATUS {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GMTICKET_SYSTEMSTATUS {
    GmTicketQueueStatus will_accept_tickets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SPIRIT_HEALER_ACTIVATE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUEST_FORCE_REMOVE {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPIRIT_HEALER_CONFIRM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GOSSIP_POI {
    uint32_t flags;
    all::Vector2d position;
    uint32_t icon;
    uint32_t data;
    std::string location_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHAT_IGNORED {
    uint64_t guid;
    uint8_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_RANK {
    uint32_t rank_id;
    uint32_t rights;
    std::string rank_name;
    uint32_t money_per_day;
    std::array<wrath::GuildBankRights, 6> bank_tab_rights;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_ADD_RANK {
    std::string rank_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_DEL_RANK {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_SET_PUBLIC_NOTE {
    std::string player_name;
    std::string note;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_SET_OFFICER_NOTE {
    std::string player_name;
    std::string note;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOGIN_VERIFY_WORLD {
    Map map;
    all::Vector3d position;
    float orientation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SEND_MAIL {
    uint64_t mailbox;
    std::string receiver;
    std::string subject;
    std::string body;
    uint32_t unknown1;
    uint32_t unknown2;
    std::vector<wrath::MailItem> items;
    uint32_t money;
    uint32_t cash_on_delivery_amount;
    uint32_t unknown3;
    uint32_t unknown4;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SEND_MAIL_RESULT {
    uint32_t mail_id;
    MailAction action;
    MailResult result;
    uint32_t equip_error;
    uint32_t item;
    uint32_t item_count;
    MailResultTwo result2;
    uint32_t equip_error2;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GET_MAIL_LIST {
    uint64_t mailbox;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MAIL_LIST_RESULT {
    uint32_t real_mail_amount;
    std::vector<wrath::Mail> mails;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BATTLEFIELD_LIST {
    BattlegroundType battleground_type;
    BattlefieldListLocation location;
    bool can_gain_exp;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEFIELD_LIST {
    uint64_t battlemaster;
    BattlegroundType battleground_type;
    uint8_t unknown1;
    uint8_t unknown2;
    uint8_t has_win;
    uint32_t win_honor;
    uint32_t win_arena;
    uint32_t loss_honor;
    RandomBg random;
    uint8_t win_random;
    uint32_t reward_honor;
    uint32_t reward_arena;
    uint32_t honor_lost;
    std::vector<uint32_t> battlegrounds;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ITEM_TEXT_QUERY {
    uint64_t item;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ITEM_TEXT_QUERY_RESPONSE {
    ItemTextQuery query;
    uint64_t item;
    std::string text;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MAIL_TAKE_MONEY {
    uint64_t mailbox;
    uint32_t mail_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MAIL_TAKE_ITEM {
    uint64_t mailbox;
    uint32_t mail_id;
    uint32_t item;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MAIL_MARK_AS_READ {
    uint64_t mailbox;
    uint32_t mail_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MAIL_RETURN_TO_SENDER {
    uint64_t mailbox_id;
    uint32_t mail_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MAIL_DELETE {
    uint64_t mailbox_id;
    uint32_t mail_id;
    uint32_t mail_template_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MAIL_CREATE_TEXT_ITEM {
    uint64_t mailbox;
    uint32_t mail_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELLLOGMISS {
    uint32_t id;
    uint64_t caster;
    uint8_t unknown1;
    std::vector<wrath::SpellLogMiss> targets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELLLOGEXECUTE {
    uint64_t caster;
    uint32_t spell;
    std::vector<wrath::SpellLog> logs;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PERIODICAURALOG {
    uint64_t target;
    uint64_t caster;
    uint32_t spell;
    std::vector<wrath::AuraLog> auras;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELLDAMAGESHIELD {
    uint64_t victim;
    uint64_t caster;
    uint32_t spell;
    uint32_t damage;
    uint32_t overkill;
    SpellSchool school;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELLNONMELEEDAMAGELOG {
    uint64_t target;
    uint64_t attacker;
    uint32_t spell;
    uint32_t damage;
    uint32_t overkill;
    SpellSchool school;
    uint32_t absorbed_damage;
    uint32_t resisted;
    bool periodic_log;
    uint8_t unused;
    uint32_t blocked;
    HitInfo hit_info;
    uint8_t extend_flag;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LEARN_TALENT {
    Talent talent;
    uint32_t requested_rank;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_RESURRECT_FAILED {
    uint32_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TOGGLE_PVP {
    struct Set {
        bool enable_pvp;
    };

    std::unique_ptr<Set> set;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ZONE_UNDER_ATTACK {
    Area zone_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_AUCTION_HELLO_Client {
    uint64_t auctioneer;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_AUCTION_HELLO_Server {
    uint64_t auctioneer;
    AuctionHouse auction_house;
    bool auction_house_enabled;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUCTION_SELL_ITEM {
    uint64_t auctioneer;
    uint32_t unknown1;
    uint64_t item;
    uint32_t unknown2;
    uint32_t starting_bid;
    uint32_t buyout;
    uint32_t auction_duration_in_minutes;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUCTION_REMOVE_ITEM {
    uint64_t auctioneer;
    uint32_t auction_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUCTION_LIST_ITEMS {
    uint64_t auctioneer;
    uint32_t list_start_item;
    std::string searched_name;
    uint8_t minimum_level;
    uint8_t maximum_level;
    uint32_t auction_slot_id;
    uint32_t auction_main_category;
    uint32_t auction_sub_category;
    ItemQuality auction_quality;
    uint8_t usable;
    uint8_t is_full;
    std::vector<wrath::AuctionSort> sorted_auctions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUCTION_LIST_OWNER_ITEMS {
    uint64_t auctioneer;
    uint32_t list_from;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUCTION_PLACE_BID {
    uint64_t auctioneer;
    uint32_t auction_id;
    uint32_t price;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AUCTION_COMMAND_RESULT {
    uint32_t auction_id;
    AuctionCommandAction action;
    AuctionCommandResult result;
    InventoryResult inventory_result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AUCTION_LIST_RESULT {
    std::vector<wrath::AuctionListItem> auctions;
    uint32_t total_amount_of_auctions;
    uint32_t auction_search_delay;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AUCTION_OWNER_LIST_RESULT {
    std::vector<wrath::AuctionListItem> auctions;
    uint32_t total_amount_of_auctions;
    uint32_t auction_search_delay;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AUCTION_BIDDER_NOTIFICATION {
    AuctionHouse auction_house;
    uint32_t auction_id;
    uint64_t bidder;
    uint32_t bid_sum;
    uint32_t new_highest_bid;
    uint32_t out_bid_amount;
    uint32_t item_template;
    uint32_t item_random_property_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AUCTION_OWNER_NOTIFICATION {
    uint32_t auction_id;
    uint32_t bid;
    uint32_t auction_out_bid;
    uint64_t bidder;
    uint32_t item;
    uint32_t item_random_property_id;
    float time_left;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PROCRESIST {
    uint64_t caster;
    uint64_t target;
    uint32_t id;
    LogFormat log_format;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_DISPEL_FAILED {
    uint64_t caster;
    uint64_t target;
    uint32_t amount_of_spells;
    std::vector<uint32_t> spells;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELLORDAMAGE_IMMUNE {
    uint64_t caster;
    uint64_t target;
    uint32_t id;
    bool debug_log_format;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUCTION_LIST_BIDDER_ITEMS {
    uint64_t auctioneer;
    uint32_t start_from_page;
    std::vector<uint32_t> outbid_item_ids;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AUCTION_BIDDER_LIST_RESULT {
    std::vector<wrath::AuctionListItem> auctions;
    uint32_t total_amount_of_auctions;
    uint32_t auction_search_delay;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SET_FLAT_SPELL_MODIFIER {
    uint8_t eff;
    uint8_t op;
    uint32_t value;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SET_PCT_SPELL_MODIFIER {
    uint8_t eff;
    uint8_t op;
    uint32_t value;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_AMMO {
    uint32_t item;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CORPSE_RECLAIM_DELAY {
    uint32_t delay;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_ACTIVE_MOVER {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PET_CANCEL_AURA {
    uint64_t guid;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CANCEL_AUTO_REPEAT_SPELL {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_LIST_STABLED_PETS_Client {
    uint64_t npc;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_LIST_STABLED_PETS_Server {
    uint64_t npc;
    uint8_t stable_slots;
    std::vector<wrath::StabledPet> pets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_STABLE_PET {
    uint64_t stable_master;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_UNSTABLE_PET {
    uint64_t stable_master;
    uint32_t pet_number;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BUY_STABLE_SLOT {
    uint64_t npc;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_STABLE_RESULT {
    StableResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_STABLE_SWAP_PET {
    uint64_t npc;
    uint32_t pet_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_QUEST_PUSH_RESULT {
    uint64_t guid;
    QuestPartyMessage message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct SMSG_PLAY_MUSIC {
    uint32_t sound_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PLAY_OBJECT_SOUND {
    uint32_t sound_id;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REQUEST_PET_INFO {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_FAR_SIGHT {
    FarSightOperation operation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELLDISPELLOG {
    uint64_t victim;
    uint64_t caster;
    uint32_t dispell_spell;
    uint8_t unknown;
    std::vector<wrath::DispelledSpell> spells;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_CHANGE_SUB_GROUP {
    std::string name;
    uint8_t group_number;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REQUEST_PARTY_MEMBER_STATS {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_SWAP_SUB_GROUP {
    std::string name;
    std::string swap_with_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUTOSTORE_BANK_ITEM {
    uint8_t bag_index;
    uint8_t slot_index;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUTOBANK_ITEM {
    uint8_t bag_index;
    uint8_t slot_index;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_QUERY_NEXT_MAIL_TIME_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_QUERY_NEXT_MAIL_TIME_Server {
    uint32_t float_type;
    std::vector<wrath::ReceivedMail> mails;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_RECEIVED_MAIL {
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_RAID_GROUP_ONLY {
    uint32_t homebind_timer;
    RaidGroupError error;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PVP_CREDIT {
    uint32_t honor_points;
    uint64_t victim;
    PvpRank rank;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AUCTION_REMOVED_NOTIFICATION {
    uint32_t item;
    uint32_t item_template;
    uint32_t random_property_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_RAID_CONVERT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GROUP_ASSISTANT_LEADER {
    uint64_t guid;
    bool set_assistant;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BUYBACK_ITEM {
    uint64_t guid;
    BuybackSlot slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SERVER_MESSAGE {
    ServerMessageType message_type;
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_SAVED_INSTANCE_EXTEND {
    Map map;
    RaidDifficulty difficulty;
    bool toggle_extend;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_OFFER_CONTINUE {
    uint32_t dungeon_entry;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LFG_GET_STATUS {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SHOW_MAILBOX {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GMTICKETSYSTEM_TOGGLE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CANCEL_GROWTH_AURA {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CANCEL_AUTO_REPEAT {
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_STANDSTATE_UPDATE {
    UnitStandState state;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOOT_ALL_PASSED {
    uint64_t looted_target;
    uint32_t loot_slot;
    uint32_t item;
    uint32_t item_random_property_id;
    uint32_t item_random_suffix_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOOT_ROLL_WON {
    uint64_t looted_target;
    uint32_t loot_slot;
    uint32_t item;
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    uint64_t winning_player;
    uint8_t winning_roll;
    RollVote vote;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LOOT_ROLL {
    uint64_t item;
    uint32_t item_slot;
    RollVote vote;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOOT_START_ROLL {
    uint64_t creature;
    Map map;
    uint32_t loot_slot;
    uint32_t item;
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    uint32_t countdown_time;
    RollFlags flags;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOOT_ROLL {
    uint64_t creature;
    uint32_t loot_slot;
    uint64_t player;
    uint32_t item;
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    uint8_t roll_number;
    RollVote vote;
    uint8_t auto_pass;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LOOT_MASTER_GIVE {
    uint64_t loot;
    uint8_t slot_id;
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOOT_MASTER_LIST {
    std::vector<uint64_t> guids;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SET_FORCED_REACTIONS {
    std::vector<wrath::ForcedReaction> reactions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELL_FAILED_OTHER {
    uint64_t caster;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REPAIR_ITEM {
    uint64_t npc;
    uint64_t item;
    bool from_guild_bank;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHAT_PLAYER_NOT_FOUND {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_TALENT_WIPE_CONFIRM_Client {
    uint64_t wiping_npc;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_TALENT_WIPE_CONFIRM_Server {
    uint64_t wiping_npc;
    uint32_t cost_in_copper;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SUMMON_REQUEST {
    uint64_t summoner;
    Area area;
    uint32_t auto_decline_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SUMMON_RESPONSE {
    uint64_t summoner;
    bool agree;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MONSTER_MOVE_TRANSPORT {
    uint64_t guid;
    uint64_t transport;
    uint8_t unknown;
    all::Vector3d spline_point;
    uint32_t spline_id;
    MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all::Vector3d position;
    SplineFlag spline_flags;
    uint32_t animation_id;
    uint32_t animation_start_time;
    uint32_t duration;
    float vertical_acceleration;
    uint32_t effect_start_time;
    std::vector<::wow_world_messages::all::Vector3d> splines;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_BROKEN {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_FEATHER_FALL_Server {
    uint64_t player;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_WATER_WALK {
    uint64_t player;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct CMSG_SELF_RES {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FEIGN_DEATH_RESISTED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_DUEL_COUNTDOWN {
    uint32_t time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AREA_TRIGGER_MESSAGE {
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TOGGLE_HELM {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TOGGLE_CLOAK {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_ROLE_CHOSEN {
    uint64_t guid;
    bool ready;
    uint32_t roles;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PLAYER_SKINNED {
    bool spirit_released;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_DURABILITY_DAMAGE_DEATH {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_ACTIONBAR_TOGGLES {
    uint8_t action_bar;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_PETITION_RENAME {
    uint64_t petition;
    std::string new_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct SMSG_INIT_WORLD_STATES {
    Map map;
    Area area;
    Area sub_area;
    std::vector<wrath::WorldState> states;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_UPDATE_WORLD_STATE {
    wrath::WorldState state;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ITEM_NAME_QUERY {
    uint32_t item;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ITEM_NAME_QUERY_RESPONSE {
    uint32_t item;
    std::string item_name;
    InventoryType inventory_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_ACTION_FEEDBACK {
    PetFeedback feedback;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHAR_RENAME {
    uint64_t character;
    std::string new_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHAR_RENAME {
    WorldResult result;
    uint64_t character;
    std::string new_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_SPLINE_DONE {
    wrath::MovementInfo info;
    uint32_t movement_counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_FALL_RESET {
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_INSTANCE_SAVE_CREATED {
    uint32_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_RAID_INSTANCE_INFO {
    std::vector<wrath::RaidInfo> raid_infos;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REQUEST_RAID_INFO {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_TIME_SKIPPED {
    uint64_t guid;
    uint32_t lag;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_FEATHER_FALL_ACK {
    uint64_t guid;
    uint32_t movement_counter;
    wrath::MovementInfo info;
    uint32_t apply;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_WATER_WALK_ACK {
    uint64_t guid;
    uint32_t movement_counter;
    wrath::MovementInfo info;
    uint32_t apply;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_NOT_ACTIVE_MOVER {
    uint64_t old_mover;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PLAY_SOUND {
    uint32_t sound_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BATTLEFIELD_STATUS {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEFIELD_STATUS {
    uint32_t queue_slot;
    ArenaType arena_type;
    uint8_t is_arena;
    BattlegroundType battleground_type;
    uint16_t unknown1;
    uint8_t minimum_level;
    uint8_t maximum_level;
    uint32_t client_instance_id;
    bool rated;
    StatusId status_id;
    uint32_t average_wait_time_in_ms;
    uint32_t time_in_queue_in_ms;
    Map map1;
    uint64_t unknown2;
    uint32_t time_to_remove_in_queue_in_ms;
    Map map2;
    uint64_t unknown3;
    uint32_t time_to_bg_autoleave_in_ms;
    uint32_t time_to_bg_start_in_ms;
    ArenaFaction faction;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BATTLEFIELD_PORT {
    uint8_t arena_type;
    uint8_t unknown1;
    uint32_t bg_type_id;
    uint16_t unknown2;
    BattlefieldPortAction action;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_INSPECT_HONOR_STATS_Client {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_INSPECT_HONOR_STATS_Server {
    uint64_t guid;
    uint8_t amount_of_honor;
    uint32_t kills;
    uint32_t honor_today;
    uint32_t honor_yesterday;
    uint32_t lifetime_honorable_kills;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BATTLEMASTER_HELLO {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FORCE_WALK_SPEED_CHANGE {
    uint64_t guid;
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_FORCE_WALK_SPEED_CHANGE_ACK {
    uint64_t guid;
    uint32_t counter;
    wrath::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FORCE_SWIM_BACK_SPEED_CHANGE {
    uint64_t guid;
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK {
    uint64_t guid;
    uint32_t counter;
    wrath::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FORCE_TURN_RATE_CHANGE {
    uint64_t guid;
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_FORCE_TURN_RATE_CHANGE_ACK {
    uint64_t guid;
    uint32_t counter;
    wrath::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_PVP_LOG_DATA_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LEAVE_BATTLEFIELD {
    uint8_t unknown1;
    uint8_t unknown2;
    Map map;
    uint16_t unknown3;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AREA_SPIRIT_HEALER_QUERY {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AREA_SPIRIT_HEALER_QUEUE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AREA_SPIRIT_HEALER_TIME {
    uint64_t guid;
    uint32_t next_resurrect_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_WARDEN_DATA {
    uint32_t amount_of_encrypted_data;
    std::vector<uint8_t> encrypted_data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_WARDEN_DATA {
    uint32_t amount_of_encrypted_data;
    std::vector<uint8_t> encrypted_data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GROUP_JOINED_BATTLEGROUND {
    BgTypeId id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_BATTLEGROUND_PLAYER_POSITIONS_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_BATTLEGROUND_PLAYER_POSITIONS_Server {
    std::vector<wrath::BattlegroundPlayerPosition> teammates;
    std::vector<wrath::BattlegroundPlayerPosition> carriers;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PET_STOP_ATTACK {
    uint64_t pet;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BINDER_CONFIRM {
    uint64_t guid;
    Area area;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEGROUND_PLAYER_JOINED {
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEGROUND_PLAYER_LEFT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BATTLEMASTER_JOIN {
    uint64_t guid;
    Map map;
    uint32_t instance_id;
    bool join_as_group;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ADDON_INFO {
    std::vector<Addon> addons;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PET_UNLEARN {
    uint64_t pet;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_UNLEARN_CONFIRM {
    uint64_t pet;
    uint32_t talent_reset_cost;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PARTY_MEMBER_STATS_FULL {
    uint64_t guid;
    GroupUpdateFlags mask;
    GroupMemberOnlineStatus status;
    uint32_t current_health;
    uint32_t max_health;
    Power power;
    uint16_t current_power;
    uint16_t max_power;
    uint16_t level;
    Area area;
    uint16_t position_x;
    uint16_t position_y;
    AuraMask auras;
    uint64_t pet;
    std::string pet_name;
    uint16_t pet_display_id;
    uint32_t pet_current_health;
    uint32_t pet_max_health;
    Power pet_power_type;
    uint16_t pet_current_power;
    uint16_t pet_max_power;
    AuraMask pet_auras;
    uint32_t transport;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PET_SPELL_AUTOCAST {
    uint64_t guid;
    uint32_t id;
    bool autocast_enabled;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_WEATHER {
    WeatherType weather_type;
    float grade;
    WeatherChangeType change;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_RAID_INSTANCE_MESSAGE {
    RaidInstanceMessage message_type;
    Map map;
    RaidDifficulty difficulty;
    uint32_t time_left;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_COMPRESSED_MOVES {
    uint32_t amount_of_moves;
    std::vector<wrath::MiniMoveMessage> moves;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_INFO_TEXT {
    std::string guild_info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHAT_RESTRICTED {
    ChatRestrictionType restriction;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_SET_RUN_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_SET_RUN_BACK_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_SET_SWIM_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_SET_WALK_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_SET_SWIM_BACK_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_SET_TURN_RATE {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_UNROOT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_FEATHER_FALL {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_NORMAL_FALL {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_SET_HOVER {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_UNSET_HOVER {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_WATER_WALK {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_LAND_WALK {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_START_SWIM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_STOP_SWIM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_SET_RUN_MODE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_SET_WALK_MODE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ACTIVATETAXIEXPRESS {
    uint64_t guid;
    std::vector<uint32_t> nodes;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_FACTION_INACTIVE {
    Faction faction;
    bool inactive;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_WATCHED_FACTION {
    Faction faction;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_TIME_SKIPPED_Server {
    uint64_t player;
    uint32_t time_skipped;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_ROOT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_INVALIDATE_PLAYER {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_RESET_INSTANCES {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_INSTANCE_RESET {
    Map map;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_INSTANCE_RESET_FAILED {
    InstanceResetFailedReason reason;
    Map map;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_UPDATE_LAST_INSTANCE {
    Map map;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_RAID_TARGET_UPDATE_Client {
    RaidTargetIndex target_index;
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_RAID_TARGET_UPDATE_Server {
    RaidTargetUpdateType update_type;
    std::array<wrath::RaidTargetUpdate, 8> raid_targets;
    wrath::RaidTargetUpdate raid_target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_RAID_READY_CHECK_Client {
    struct Answer {
        uint8_t state;
    };

    std::unique_ptr<Answer> answer;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_RAID_READY_CHECK_Server {
    struct StateCheck {
        uint64_t guid;
        uint8_t state;
    };

    std::unique_ptr<StateCheck> state_check;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_ACTION_SOUND {
    uint64_t guid;
    PetTalkReason reason;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_DISMISS_SOUND {
    uint32_t sound_id;
    all::Vector3d position;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GM_TICKET_STATUS_UPDATE {
    GmTicketStatusResponse response;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_SET_DUNGEON_DIFFICULTY_Client {
    DungeonDifficulty difficulty;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_SET_DUNGEON_DIFFICULTY_Server {
    DungeonDifficulty difficulty;
    uint32_t unknown1;
    bool is_in_group;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GMSURVEY_SUBMIT {
    uint32_t survey_id;
    std::array<wrath::GmSurveyQuestion, 10> questions;
    std::string answer_comment;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_UPDATE_INSTANCE_OWNERSHIP {
    bool player_is_saved_to_a_raid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHAT_PLAYER_AMBIGUOUS {
    std::string player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELLINSTAKILLLOG {
    uint64_t caster;
    uint64_t target;
    uint32_t spell;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELL_UPDATE_CHAIN_TARGETS {
    uint64_t caster;
    uint32_t spell;
    std::vector<uint64_t> targets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPELLSTEALLOG {
    uint64_t victim;
    uint64_t caster;
    uint32_t spell;
    uint8_t unknown;
    std::vector<wrath::SpellSteal> spell_steals;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_DEFENSE_MESSAGE {
    Area area;
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_INSTANCE_DIFFICULTY {
    uint32_t difficulty;
    bool dynamic_difficulty;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOTD {
    std::vector<std::string> motds;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK {
    uint64_t guid;
    uint32_t unknown1;
    wrath::MovementInfo info;
    uint32_t unknown2;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOVE_SET_CAN_FLY {
    uint64_t player;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOVE_UNSET_CAN_FLY {
    uint64_t player;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_SET_CAN_FLY_ACK {
    uint64_t player;
    uint32_t counter;
    wrath::MovementInfo info;
    bool applied;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_SET_FLY {
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SOCKET_GEMS {
    uint64_t item;
    std::array<uint64_t, 3> gems;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ARENA_TEAM_COMMAND_RESULT {
    ArenaTeamCommand command;
    std::string team;
    std::string player;
    ArenaTeamCommandError error;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ARENA_TEAM_QUERY_RESPONSE {
    uint32_t arena_team;
    std::string team_name;
    ArenaType team_type;
    uint32_t background_color;
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ARENA_TEAM_ROSTER {
    uint32_t arena_team;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ARENA_TEAM_ROSTER {
    uint32_t arena_team;
    uint8_t unknown;
    ArenaType arena_type;
    std::vector<wrath::ArenaTeamMember> members;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ARENA_TEAM_INVITE {
    uint32_t arena_team;
    std::string player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ARENA_TEAM_INVITE {
    std::string player_name;
    std::string team_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ARENA_TEAM_ACCEPT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ARENA_TEAM_DECLINE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ARENA_TEAM_LEAVE {
    uint32_t arena_team;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ARENA_TEAM_REMOVE {
    uint32_t arena_team;
    std::string player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ARENA_TEAM_DISBAND {
    uint32_t arena_team;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ARENA_TEAM_LEADER {
    uint32_t arena_team;
    std::string player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ARENA_TEAM_EVENT {
    ArenaTeamEvent event;
    std::string joiner_name;
    std::string arena_team_name1;
    uint64_t joiner;
    std::string leaver_name;
    uint64_t leaver;
    std::string kicked_player_name;
    std::string arena_team_name2;
    std::string kicker_name;
    std::string leader_name;
    std::string arena_team_name3;
    std::string old_leader;
    std::string new_leader;
    std::vector<std::string> string;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BATTLEMASTER_JOIN_ARENA {
    uint64_t battlemaster;
    JoinArenaType arena_type;
    bool as_group;
    bool rated;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_START_ASCEND {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct MSG_MOVE_STOP_ASCEND {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct SMSG_ARENA_TEAM_STATS {
    uint32_t arena_team;
    uint32_t rating;
    uint32_t games_played_this_week;
    uint32_t games_won_this_week;
    uint32_t games_played_this_season;
    uint32_t games_won_this_season;
    uint32_t ranking;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LFG_JOIN {
    uint32_t roles;
    bool no_partial_clear;
    bool achievements;
    std::vector<uint32_t> slots;
    std::vector<uint8_t> needs;
    std::string comment;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LFG_LEAVE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SEARCH_LFG_JOIN {
    uint32_t dungeon_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SEARCH_LFG_LEAVE {
    uint32_t dungeon_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_UPDATE_LFG_LIST {
    LfgType lfg_type;
    uint32_t dungeon_id;
    LfgListUpdateType update_type;
    std::vector<uint64_t> deleted_guids;
    uint32_t unknown1;
    std::vector<wrath::LfgListGroup> groups;
    uint32_t unknown2;
    std::vector<wrath::LfgListPlayer> players;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_PROPOSAL_UPDATE {
    uint32_t dungeon_id;
    uint8_t proposal_state;
    uint32_t proposal_id;
    uint32_t encounters_finished_mask;
    uint8_t silent;
    std::vector<wrath::LfgProposal> proposals;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LFG_PROPOSAL_RESULT {
    uint32_t proposal_id;
    bool accept_join;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_ROLE_CHECK_UPDATE {
    uint32_t rolecheck_state;
    uint8_t rolecheck_initializing;
    std::vector<uint32_t> dungeon_entries;
    std::vector<wrath::LfgRole> roles;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_JOIN_RESULT {
    uint32_t result;
    uint32_t state;
    uint32_t amount_of_players;
    std::vector<wrath::LfgJoinPlayer> players;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_QUEUE_STATUS {
    uint32_t dungeon;
    int32_t average_wait_time;
    int32_t wait_time;
    int32_t wait_time_tank;
    int32_t wait_time_healer;
    int32_t wait_time_dps;
    uint8_t tanks_needed;
    uint8_t healers_needed;
    uint8_t dps_needed;
    uint32_t queue_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_LFG_COMMENT {
    std::string comment;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_UPDATE_PLAYER {
    LfgUpdateType update_type;
    LfgJoinStatus join_status;
    uint8_t queued;
    uint8_t no_partial_clear;
    uint8_t achievements;
    std::vector<uint32_t> dungeons;
    std::string comment;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_UPDATE_PARTY {
    LfgUpdateType update_type;
    LfgJoinStatus join_status;
    uint8_t joined;
    uint8_t queued;
    uint8_t no_partial_clear;
    uint8_t achievements;
    std::vector<uint32_t> dungeons;
    std::string comment;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_UPDATE_SEARCH {
    bool in_lfg_queue;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LFG_SET_ROLES {
    uint8_t roles;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LFG_SET_BOOT_VOTE {
    bool agree_to_kick_player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_BOOT_PROPOSAL_UPDATE {
    bool vote_in_progress;
    bool did_vote;
    bool agreed_with_kick;
    uint64_t victim;
    uint32_t total_votes;
    uint32_t votes_agree;
    uint32_t time_left;
    uint32_t votes_needed;
    std::string reason;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LFD_PLAYER_LOCK_INFO_REQUEST {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_PLAYER_INFO {
    std::vector<wrath::LfgAvailableDungeon> available_dungeons;
    std::vector<wrath::LfgJoinLockedDungeon> locked_dungeons;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LFG_TELEPORT {
    LfgTeleportLocation location;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LFD_PARTY_LOCK_INFO_REQUEST {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_PARTY_INFO {
    std::vector<wrath::LfgPartyInfo> infos;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TITLE_EARNED {
    uint32_t title;
    TitleEarnStatus status;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_TITLE {
    uint32_t title;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CANCEL_MOUNT_AURA {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ARENA_ERROR {
    uint32_t unknown;
    ArenaType arena_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_INSPECT_ARENA_TEAMS_Client {
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_INSPECT_ARENA_TEAMS_Server {
    uint64_t player;
    uint8_t slot;
    uint32_t arena_team;
    uint32_t rating;
    uint32_t games_played_this_season;
    uint32_t wins_this_season;
    uint32_t total_games_played;
    uint32_t personal_rating;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_DEATH_RELEASE_LOC {
    Map map;
    all::Vector3d position;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CANCEL_TEMP_ENCHANTMENT {
    uint32_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FORCED_DEATH_UPDATE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_SET_FLIGHT_SPEED_Server {
    uint64_t player;
    wrath::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_SET_FLIGHT_BACK_SPEED {
    uint64_t player;
    wrath::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct SMSG_FORCE_FLIGHT_SPEED_CHANGE {
    uint64_t guid;
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK {
    uint64_t player;
    uint32_t counter;
    wrath::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE {
    uint64_t guid;
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK {
    uint64_t player;
    uint32_t counter;
    wrath::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_SET_FLIGHT_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_SET_FLIGHT_BACK_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FLIGHT_SPLINE_SYNC {
    float elapsed_value;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_TAXI_BENCHMARK_MODE {
    uint8_t mode;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_REALM_SPLIT {
    uint32_t realm_id;
    RealmSplitState state;
    std::string split_date;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REALM_SPLIT {
    uint32_t realm_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_CHNG_TRANSPORT {
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_PARTY_ASSIGNMENT_Client {
    PartyRole role;
    bool apply;
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TIME_SYNC_REQ {
    uint32_t time_sync;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TIME_SYNC_RESP {
    uint32_t time_sync;
    uint32_t client_ticks;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_RESET_FAILED_NOTIFY {
    Map map;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LFG_DISABLED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_UPDATE_COMBO_POINTS {
    uint64_t target;
    uint8_t combo_points;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_START_DESCEND {
    uint64_t guid;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct SMSG_DISMOUNT {
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_UPDATE_CAN_FLY_Server {
    uint64_t player;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_RAID_READY_CHECK_CONFIRM_Client {
    struct Set {
        uint8_t state;
    };

    std::unique_ptr<Set> set;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_RAID_READY_CHECK_CONFIRM_Server {
    uint64_t player;
    uint8_t state;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_VOICE_SESSION_ENABLE {
    bool voice_enabled;
    bool microphone_enabled;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GM_MESSAGECHAT {
    ChatType chat_type;
    Language language;
    uint64_t sender;
    uint32_t flags;
    std::string sender1;
    NamedGuid target1;
    std::string sender2;
    uint64_t target2;
    NamedGuid target3;
    uint64_t target4;
    std::string channel_name;
    uint64_t target5;
    std::string sender_name;
    uint64_t target6;
    std::string message;
    PlayerChatTag chat_tag;
    uint32_t achievement_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_COMMENTATOR_ENABLE {
    CommentatorEnableOption option;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CLEAR_TARGET {
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CROSSED_INEBRIATION_THRESHOLD {
    uint64_t player;
    uint32_t state;
    uint32_t item;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_KICK_REASON {
    uint8_t reason;
    std::string text;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_RAID_READY_CHECK_FINISHED_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_COMPLAIN {
    SpamType complaint_type;
    uint64_t offender;
    uint32_t unknown1;
    uint32_t mail_id;
    uint32_t unknown2;
    uint32_t language;
    uint32_t message_type;
    uint32_t channel_id;
    uint32_t time;
    std::string description;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_COMPLAIN_RESULT {
    uint8_t unknown;
    ComplainResultWindow window_result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FEATURE_SYSTEM_STATUS {
    ComplaintStatus complaint_status;
    bool voice_chat_enabled;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_DISPLAY_LIST {
    std::string channel;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_ACTIVE_VOICE_CHANNEL {
    uint32_t unknown1;
    std::string unknown2;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GET_CHANNEL_MEMBER_COUNT {
    std::string channel;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHANNEL_MEMBER_COUNT {
    std::string channel;
    uint8_t flags;
    uint32_t amount_of_members;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANNEL_VOICE_ON {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REPORT_PVP_AFK {
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_BANKER_ACTIVATE {
    uint64_t bank;
    bool full_update;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_BANK_QUERY_TAB {
    uint64_t bank;
    uint8_t tab;
    bool full_update;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GUILD_BANK_LIST {
    uint64_t bank_balance;
    uint8_t tab_id;
    uint32_t amount_of_allowed_item_withdraws;
    GuildBankTabResult tab_result;
    std::vector<wrath::GuildBankTab> tabs;
    GuildBankContentResult content_result;
    std::vector<wrath::GuildBankSlot> slot_updates;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_BANK_SWAP_ITEMS {
    uint64_t bank;
    BankSwapSource source;
    uint8_t bank_destination_tab;
    uint8_t bank_destination_slot;
    uint32_t unknown1;
    uint8_t bank_source_tab;
    uint8_t bank_source_slot;
    uint32_t item1;
    uint8_t unknown2;
    uint32_t amount;
    uint8_t bank_tab;
    uint8_t bank_slot;
    uint32_t item2;
    BankSwapStoreMode mode;
    uint32_t auto_count;
    uint8_t unknown3;
    uint32_t unknown4;
    uint8_t player_bag;
    uint8_t player_bag_slot;
    bool bank_to_character_transfer;
    uint32_t split_amount;
    uint32_t amount_of_unknown5;
    std::vector<uint8_t> unknown5;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_BANK_BUY_TAB {
    uint64_t banker;
    uint8_t tab;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_BANK_UPDATE_TAB {
    uint64_t bank;
    uint8_t tab;
    std::string name;
    std::string icon;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_BANK_DEPOSIT_MONEY {
    uint64_t bank;
    uint32_t money;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GUILD_BANK_WITHDRAW_MONEY {
    uint64_t bank;
    uint32_t money;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_GUILD_BANK_LOG_QUERY_Client {
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_GUILD_BANK_LOG_QUERY_Server {
    uint32_t unix_time;
    uint8_t slot;
    std::vector<wrath::MoneyLogItem> money_logs;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_CHANNEL_WATCH {
    std::string channel;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_USERLIST_ADD {
    uint64_t player;
    uint8_t player_flags;
    uint8_t flags;
    uint32_t amount_of_players;
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_USERLIST_REMOVE {
    uint64_t player;
    uint8_t flags;
    uint32_t amount_of_players;
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_USERLIST_UPDATE {
    uint64_t player;
    uint8_t player_flags;
    uint8_t flags;
    uint32_t amount_of_players;
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CLEAR_CHANNEL_WATCH {
    std::string channel;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_INSPECT_TALENT {
    uint64_t player;
    uint32_t unspent_talent_points;
    uint8_t active_spec;
    std::vector<wrath::InspectTalentSpec> specs;
    std::vector<uint16_t> glyphs;
    InspectTalentGearMask talent_gear_mask;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SPELLCLICK {
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_LOOT_LIST {
    uint64_t creature;
    uint64_t master_looter;
    uint64_t group_looter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_GUILD_PERMISSIONS_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_GUILD_PERMISSIONS_Server {
    uint32_t id;
    uint32_t rights;
    uint32_t gold_limit_per_day;
    uint8_t purchased_bank_tabs;
    std::array<wrath::BankTab, 6> bank_tabs;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_GUILD_BANK_MONEY_WITHDRAWN_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_GUILD_BANK_MONEY_WITHDRAWN_Server {
    uint32_t remaining_withdraw_amount;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_GUILD_EVENT_LOG_QUERY_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_GUILD_EVENT_LOG_QUERY_Server {
    std::vector<wrath::GuildLogEvent> events;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GET_MIRRORIMAGE_DATA {
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MIRRORIMAGE_DATA {
    uint64_t guid;
    uint32_t display_id;
    Race race;
    Gender gender;
    Class class_type;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;
    uint32_t guild_id;
    std::array<uint32_t, 11> display_ids;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_KEEP_ALIVE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_OPT_OUT_OF_LOOT {
    bool pass_on_loot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_QUERY_GUILD_BANK_TEXT_Client {
    uint8_t tab;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_QUERY_GUILD_BANK_TEXT_Server {
    uint8_t tab;
    std::string text;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_GUILD_BANK_TEXT {
    uint8_t tab;
    std::string text;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GRANT_LEVEL {
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_OVERRIDE_LIGHT {
    uint32_t default_id;
    uint32_t id_override;
    uint32_t fade_in_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TOTEM_CREATED {
    uint8_t slot;
    uint64_t totem;
    uint32_t duration;
    uint32_t spell;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_TOTEM_DESTROYED {
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTGIVER_STATUS_MULTIPLE {
    std::vector<wrath::QuestGiverStatusReport> statuses;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_SET_PLAYER_DECLINED_NAMES {
    uint64_t player;
    std::string name;
    std::array<std::string, 5> declined_names;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SET_PLAYER_DECLINED_NAMES_RESULT {
    uint32_t result;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SEND_UNLEARN_SPELLS {
    std::vector<uint32_t> spells;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PROPOSE_LEVEL_GRANT {
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ACCEPT_LEVEL_GRANT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_REFER_A_FRIEND_FAILURE {
    ReferAFriendError error;
    std::string target_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_SET_FLYING {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_UNSET_FLYING {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ALTER_APPEARANCE {
    uint32_t hair;
    uint32_t hair_color;
    uint32_t facial_hair;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ENABLE_BARBER_SHOP {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BARBER_SHOP_RESULT {
    BarberShopResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_GET_CALENDAR {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_GET_EVENT {
    uint64_t event;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_GUILD_FILTER {
    uint32_t minimum_level;
    uint32_t maximum_level;
    uint32_t minimum_rank;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_ARENA_TEAM {
    uint32_t arena_team;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_ADD_EVENT {
    std::string title;
    std::string description;
    uint8_t event_type;
    bool repeatable;
    uint32_t maximum_invites;
    uint32_t dungeon_id;
    uint32_t event_time;
    uint32_t time_zone_time;
    uint32_t flags;
    std::vector<wrath::CalendarInvitee> invitees;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_UPDATE_EVENT {
    uint64_t event;
    uint64_t invite_id;
    std::string title;
    std::string description;
    uint8_t event_type;
    bool repeatable;
    uint32_t maximum_invites;
    uint32_t dungeon_id;
    uint32_t event_time;
    uint32_t time_zone_time;
    uint32_t flags;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_REMOVE_EVENT {
    uint64_t event;
    uint64_t invite_id;
    uint32_t flags;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_COPY_EVENT {
    uint64_t event;
    uint64_t invite_id;
    uint32_t time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_EVENT_INVITE {
    uint64_t event;
    uint64_t invite_id;
    std::string name;
    bool pre_event;
    bool guild_event;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_EVENT_RSVP {
    uint64_t event;
    uint64_t invite_id;
    CalendarStatus status;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_EVENT_REMOVE_INVITE {
    uint64_t event;
    uint64_t sender_invite_id;
    uint64_t invite_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_EVENT_STATUS {
    uint64_t event;
    uint64_t invite_id;
    uint64_t sender_invite_id;
    CalendarStatus status;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_EVENT_MODERATOR_STATUS {
    uint64_t event;
    uint64_t invite_id;
    uint64_t sender_invite_id;
    CalendarModeratorRank rank;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_SEND_CALENDAR {
    std::vector<wrath::SendCalendarInvite> invites;
    std::vector<wrath::SendCalendarEvent> events;
    uint32_t current_time;
    uint32_t zone_time;
    std::vector<wrath::SendCalendarInstance> instances;
    uint32_t relative_time;
    std::vector<wrath::SendCalendarResetTime> reset_times;
    uint32_t amount_of_holidays;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_SEND_EVENT {
    uint8_t send_type;
    uint64_t creator;
    uint64_t event_id;
    std::string title;
    std::string description;
    uint8_t event_type;
    uint8_t repeatable;
    uint32_t max_invitees;
    uint32_t dungeon_id;
    uint32_t flags;
    uint32_t event_time;
    uint32_t time_zone_time;
    uint32_t guild_id;
    std::vector<wrath::CalendarSendInvitee> invitees;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_FILTER_GUILD {
    std::vector<wrath::CalendarMember> members;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_ARENA_TEAM {
    std::vector<wrath::CalendarMember> members;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_EVENT_INVITE {
    uint64_t invitee;
    uint64_t event_id;
    uint64_t invite_id;
    uint8_t level;
    uint8_t invite_status;
    CalendarStatusTime time;
    uint32_t status_time;
    bool is_sign_up;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_EVENT_INVITE_REMOVED {
    uint64_t invitee;
    uint64_t event_id;
    uint32_t flags;
    bool show_alert;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_EVENT_STATUS {
    uint64_t invitee;
    uint64_t event_id;
    uint32_t event_time;
    uint32_t flags;
    uint8_t status;
    uint8_t rank;
    uint32_t status_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_COMMAND_RESULT {
    uint32_t unknown1;
    uint8_t unknown2;
    std::string name;
    uint32_t result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_RAID_LOCKOUT_ADDED {
    uint32_t time;
    Map map;
    uint32_t difficulty;
    uint32_t remaining_time;
    uint64_t instance_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_RAID_LOCKOUT_REMOVED {
    Map map;
    uint32_t difficulty;
    uint32_t remaining_time;
    uint64_t instance_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_EVENT_INVITE_ALERT {
    uint64_t event_id;
    std::string title;
    uint32_t event_time;
    uint32_t flags;
    uint32_t event_type;
    uint32_t dungeon_id;
    uint64_t invite_id;
    uint8_t status;
    uint8_t rank;
    uint64_t event_creator;
    uint64_t invite_sender;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT {
    uint64_t event_id;
    uint32_t event_time;
    uint32_t flags;
    uint8_t status;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_EVENT_REMOVED_ALERT {
    bool show_alert;
    uint64_t event_id;
    uint32_t event_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_EVENT_UPDATED_ALERT {
    bool show_alert;
    uint64_t event_id;
    uint32_t old_event_time;
    uint32_t flags;
    uint32_t new_event_time;
    uint8_t event_type;
    uint32_t dungeon_id;
    std::string title;
    std::string description;
    uint8_t repeatable;
    uint32_t max_invitees;
    uint32_t unknown_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT {
    uint64_t invitee;
    uint64_t event_id;
    uint8_t rank;
    bool show_alert;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_COMPLAIN {
    uint64_t responsible_player;
    uint64_t event;
    uint64_t invite_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_GET_NUM_PENDING {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg() const;
};

struct SMSG_CALENDAR_SEND_NUM_PENDING {
    uint32_t pending_events;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_SET_PITCH_RATE_Server {
    uint64_t player;
    wrath::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_FORCE_PITCH_RATE_CHANGE {
    uint64_t guid;
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_EVENT_INVITE_NOTES {
    uint64_t invitee;
    uint64_t invite_id;
    std::string text;
    bool unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT {
    uint64_t invite_id;
    std::string text;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_UPDATE_MISSILE_TRAJECTORY {
    uint64_t guid;
    uint32_t spell;
    float elevation;
    float speed;
    all::Vector3d position;
    all::Vector3d target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_UPDATE_ACCOUNT_DATA_COMPLETE {
    uint32_t data_type;
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TRIGGER_MOVIE {
    uint32_t movie_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_COMPLETE_MOVIE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ACHIEVEMENT_EARNED {
    uint64_t player;
    uint32_t achievement;
    uint32_t earn_time;
    uint32_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CRITERIA_UPDATE {
    uint32_t achievement;
    uint64_t progress_counter;
    uint64_t player;
    uint32_t flags;
    uint32_t time;
    uint32_t time_elapsed;
    uint32_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUERY_INSPECT_ACHIEVEMENTS {
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_RESPOND_INSPECT_ACHIEVEMENTS {
    uint64_t player;
    std::vector<AchievementDone> done;
    std::vector<AchievementInProgress> in_progress;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_DISMISS_CONTROLLED_VEHICLE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUESTUPDATE_ADD_PVP_KILL {
    uint32_t quest_id;
    uint32_t count;
    uint32_t players_slain;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_RAID_LOCKOUT_UPDATED {
    uint32_t current_time;
    Map map;
    uint32_t difficulty;
    uint32_t old_time_to_update;
    uint32_t new_time_to_update;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHAR_CUSTOMIZE {
    uint64_t player;
    std::string new_name;
    Gender gender;
    uint8_t skin_color;
    uint8_t hair_color;
    uint8_t hair_style;
    uint8_t facial_hair;
    uint8_t face;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHAR_CUSTOMIZE {
    WorldResult result;
    uint64_t guid;
    std::string name;
    Gender gender;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REQUEST_VEHICLE_EXIT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REQUEST_VEHICLE_PREV_SEAT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REQUEST_VEHICLE_NEXT_SEAT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REQUEST_VEHICLE_SWITCH_SEAT {
    uint64_t vehicle;
    uint8_t seat;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PET_LEARN_TALENT {
    uint64_t pet;
    uint32_t talent;
    uint32_t rank;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SET_PHASE_SHIFT {
    uint32_t new_phase;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ALL_ACHIEVEMENT_DATA {
    std::vector<AchievementDone> done;
    std::vector<AchievementInProgress> in_progress;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_POWER_UPDATE {
    uint64_t unit;
    Power power;
    uint32_t amount;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GAMEOBJ_REPORT_USE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_HIGHEST_THREAT_UPDATE {
    uint64_t unit;
    uint64_t new_victim;
    std::vector<wrath::ThreatUpdateUnit> units;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_THREAT_UPDATE {
    uint64_t unit;
    std::vector<wrath::ThreatUpdateUnit> units;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_THREAT_REMOVE {
    uint64_t unit;
    uint64_t victim;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_THREAT_CLEAR {
    uint64_t unit;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CONVERT_RUNE {
    uint8_t index;
    uint8_t new_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_RESYNC_RUNES {
    std::vector<wrath::ResyncRune> runes;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ADD_RUNE_POWER {
    uint32_t rune;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_REMOVE_GLYPH {
    uint32_t glyph;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_DISMISS_CRITTER {
    uint64_t critter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_AUCTION_LIST_PENDING_SALES {
    uint64_t auctioneer;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AUCTION_LIST_PENDING_SALES {
    std::vector<wrath::PendingAuctionSale> pending_sales;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MODIFY_COOLDOWN {
    uint32_t spell;
    uint64_t player;
    uint32_t cooldown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_UPDATE_COMBO_POINTS {
    uint64_t unit;
    uint64_t target;
    uint8_t combo_points;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ENABLETAXI {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PRE_RESURRECT {
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AURA_UPDATE_ALL {
    uint64_t unit;
    uint32_t amount_of_aura_updates;
    std::vector<wrath::AuraUpdate> aura_updates;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_AURA_UPDATE {
    uint64_t unit;
    wrath::AuraUpdate aura_update;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SERVER_FIRST_ACHIEVEMENT {
    std::string name;
    uint64_t player;
    uint32_t achievement;
    AchievementNameLinkType link_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_LEARNED_SPELL {
    uint32_t spell;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_UNLEARNED_SPELL {
    uint32_t spell;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE {
    uint64_t vehicle;
    wrath::MovementInfo info;
    uint64_t accessory;
    uint8_t seat;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_HEARTH_AND_RESURRECT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CRITERIA_DELETED {
    uint32_t criteria_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ACHIEVEMENT_DELETED {
    uint32_t achievement;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEGROUND_INFO_THROTTLED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PLAYER_VEHICLE_DATA {
    uint64_t target;
    uint32_t vehicle_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_PLAYER_VEHICLE_ENTER {
    uint64_t vehicle;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CONTROLLER_EJECT_PASSENGER {
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_PET_GUIDS {
    std::vector<uint64_t> guids;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CLIENTCACHE_VERSION {
    uint32_t version;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ITEM_REFUND_INFO_RESPONSE {
    uint64_t item;
    uint32_t money_cost;
    uint32_t honor_point_cost;
    uint32_t arena_point_cost;
    std::array<wrath::ItemRefundExtra, 5> extra_items;
    uint32_t unknown1;
    uint32_t time_since_loss;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ITEM_REFUND_INFO {
    uint64_t item;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_ITEM_REFUND {
    uint64_t item;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ITEM_REFUND_RESULT {
    uint64_t item;
    ItemRefundResult result;
    uint32_t cost;
    uint32_t honor_point_cost;
    uint32_t arena_point_cost;
    std::array<wrath::ItemRefundExtra, 5> extra_items;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CORPSE_MAP_POSITION_QUERY {
    uint32_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE {
    float unknown1;
    float unknown2;
    float unknown3;
    float unknown4;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CALENDAR_EVENT_SIGNUP {
    uint64_t event_id;
    bool tentative;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CALENDAR_CLEAR_PENDING_ACTION {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_EQUIPMENT_SET_LIST {
    std::vector<wrath::EquipmentSetListItem> equipment_sets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_EQUIPMENT_SET_SAVE {
    uint64_t guid;
    uint32_t index;
    std::string name;
    std::string icon_name;
    std::array<uint64_t, 19> equipment;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_UPDATE_PROJECTILE_POSITION {
    uint64_t caster;
    uint32_t spell;
    uint8_t cast_count;
    all::Vector3d position;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SET_PROJECTILE_POSITION {
    uint64_t caster;
    uint8_t amount_of_casts;
    all::Vector3d position;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TALENTS_INFO {
    TalentInfoType talent_type;
    uint32_t points_left;
    std::vector<wrath::InspectTalent> talents;
    uint8_t active_spec;
    std::vector<wrath::TalentInfoSpec> specs;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LEARN_PREVIEW_TALENTS {
    std::vector<wrath::PreviewTalent> talents;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_LEARN_PREVIEW_TALENTS_PET {
    uint64_t pet;
    std::vector<wrath::PreviewTalent> talents;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ARENA_UNIT_DESTROYED {
    uint64_t unit;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED {
    uint32_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOVE_GRAVITY_DISABLE {
    uint64_t unit;
    uint32_t movement_counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_GRAVITY_DISABLE_ACK {
    uint64_t guid;
    uint32_t unknown;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOVE_GRAVITY_ENABLE {
    uint64_t unit;
    uint32_t movement_counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_GRAVITY_ENABLE_ACK {
    uint64_t guid;
    uint32_t unknown;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_MOVE_GRAVITY_CHNG_Server {
    uint64_t player;
    wrath::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_GRAVITY_DISABLE {
    uint64_t unit;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SPLINE_MOVE_GRAVITY_ENABLE {
    uint64_t unit;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_EQUIPMENT_SET_USE {
    std::array<wrath::EquipmentSet, 19> sets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_EQUIPMENT_SET_USE_RESULT {
    uint8_t result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHAR_FACTION_CHANGE {
    uint64_t guid;
    std::string name;
    Gender gender;
    uint8_t skin_color;
    uint8_t hair_color;
    uint8_t hair_style;
    uint8_t facial_hair;
    uint8_t face;
    Race race;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CHAR_FACTION_CHANGE {
    WorldResult result;
    uint64_t guid;
    std::string name;
    Gender gender;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;
    Race race;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEFIELD_MGR_ENTRY_INVITE {
    uint32_t battle_id;
    Area area;
    uint32_t accept_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE {
    uint32_t battle_id;
    bool accepted;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEFIELD_MGR_ENTERED {
    uint32_t battle_id;
    uint8_t unknown1;
    uint8_t unknown2;
    bool clear_afk;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEFIELD_MGR_QUEUE_INVITE {
    uint32_t battle_id;
    uint8_t warmup;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE {
    uint32_t battle_id;
    bool accepted;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE {
    uint32_t battle_id;
    Area area;
    bool queued;
    bool full;
    bool warmup;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEFIELD_MGR_EJECT_PENDING {
    uint32_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEFIELD_MGR_EJECTED {
    uint32_t battle_id;
    uint8_t reason;
    uint8_t battle_status;
    uint8_t relocated;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_BATTLEFIELD_MGR_EXIT_REQUEST {
    uint32_t battle_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_BATTLEFIELD_MGR_STATE_CHANGE {
    uint32_t unknown1;
    uint32_t unknown2;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_SET_RAID_DIFFICULTY_Client {
    RaidDifficulty difficulty;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct MSG_SET_RAID_DIFFICULTY_Server {
    RaidDifficulty difficulty;
    uint32_t unknown1;
    bool in_group;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TOGGLE_XP_GAIN {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GMRESPONSE_DB_ERROR {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GMRESPONSE_RECEIVED {
    uint32_t response_id;
    uint32_t ticket_id;
    std::string message;
    std::array<std::string, 4> response;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GMRESPONSE_RESOLVE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_GMRESPONSE_STATUS_UPDATE {
    bool show_survey;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_WORLD_STATE_UI_TIMER_UPDATE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_WORLD_STATE_UI_TIMER_UPDATE {
    uint32_t time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_CHAR_RACE_CHANGE {
    uint64_t player;
    std::string name;
    Gender gender;
    uint8_t skin_color;
    uint8_t hair_color;
    uint8_t hair_style;
    uint8_t facial_hair;
    uint8_t face;
    Race race;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_TALENTS_INVOLUNTARILY_RESET {
    uint8_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_READY_FOR_ACCOUNT_DATA_TIMES {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_QUERY_QUESTS_COMPLETED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_QUERY_QUESTS_COMPLETED_RESPONSE {
    std::vector<uint32_t> reward_quests;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_GM_REPORT_LAG {
    uint32_t lag_type;
    Map map;
    all::Vector3d position;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CORPSE_NOT_IN_INSTANCE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_CAMERA_SHAKE {
    uint32_t camera_shake_id;
    uint32_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_SOCKET_GEMS_RESULT {
    uint64_t item;
    std::array<uint32_t, 3> sockets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_REDIRECT_CLIENT {
    uint32_t ip_address;
    uint16_t port;
    uint32_t unknown;
    std::array<uint8_t, 20> hash;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MOVE_SET_COLLISION_HGT {
    uint64_t unit;
    uint32_t packet_counter;
    float collision_height;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct CMSG_MOVE_SET_COLLISION_HGT_ACK {
    uint64_t player;
    uint32_t movement_counter;
    wrath::MovementInfo info;
    float new_height;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct SMSG_MULTIPLE_MOVES {
    uint32_t amount_of_moves;
    std::vector<wrath::MiniMoveMessage> moves;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write() const;
};

struct ClientOpcode {
    enum class Opcode {
        NONE = 0xFFFF,
        CMSG_BOOTME = 1,
        CMSG_DBLOOKUP = 2,
        CMSG_WORLD_TELEPORT = 8,
        CMSG_TELEPORT_TO_UNIT = 9,
        CMSG_CHAR_CREATE = 54,
        CMSG_CHAR_ENUM = 55,
        CMSG_CHAR_DELETE = 56,
        CMSG_PLAYER_LOGIN = 61,
        CMSG_PLAYER_LOGOUT = 74,
        CMSG_LOGOUT_REQUEST = 75,
        CMSG_LOGOUT_CANCEL = 78,
        CMSG_NAME_QUERY = 80,
        CMSG_PET_NAME_QUERY = 82,
        CMSG_GUILD_QUERY = 84,
        CMSG_ITEM_QUERY_SINGLE = 86,
        CMSG_PAGE_TEXT_QUERY = 90,
        CMSG_QUEST_QUERY = 92,
        CMSG_GAMEOBJECT_QUERY = 94,
        CMSG_CREATURE_QUERY = 96,
        CMSG_WHO = 98,
        CMSG_WHOIS = 100,
        CMSG_CONTACT_LIST = 102,
        CMSG_ADD_FRIEND = 105,
        CMSG_DEL_FRIEND = 106,
        CMSG_SET_CONTACT_NOTES = 107,
        CMSG_ADD_IGNORE = 108,
        CMSG_DEL_IGNORE = 109,
        CMSG_GROUP_INVITE = 110,
        CMSG_GROUP_CANCEL = 112,
        CMSG_GROUP_ACCEPT = 114,
        CMSG_GROUP_DECLINE = 115,
        CMSG_GROUP_UNINVITE = 117,
        CMSG_GROUP_UNINVITE_GUID = 118,
        CMSG_GROUP_SET_LEADER = 120,
        CMSG_LOOT_METHOD = 122,
        CMSG_GROUP_DISBAND = 123,
        CMSG_GUILD_CREATE = 129,
        CMSG_GUILD_INVITE = 130,
        CMSG_GUILD_ACCEPT = 132,
        CMSG_GUILD_DECLINE = 133,
        CMSG_GUILD_INFO = 135,
        CMSG_GUILD_ROSTER = 137,
        CMSG_GUILD_PROMOTE = 139,
        CMSG_GUILD_DEMOTE = 140,
        CMSG_GUILD_LEAVE = 141,
        CMSG_GUILD_REMOVE = 142,
        CMSG_GUILD_DISBAND = 143,
        CMSG_GUILD_LEADER = 144,
        CMSG_GUILD_MOTD = 145,
        CMSG_MESSAGECHAT = 149,
        CMSG_JOIN_CHANNEL = 151,
        CMSG_LEAVE_CHANNEL = 152,
        CMSG_CHANNEL_LIST = 154,
        CMSG_CHANNEL_PASSWORD = 156,
        CMSG_CHANNEL_SET_OWNER = 157,
        CMSG_CHANNEL_OWNER = 158,
        CMSG_CHANNEL_MODERATOR = 159,
        CMSG_CHANNEL_UNMODERATOR = 160,
        CMSG_CHANNEL_MUTE = 161,
        CMSG_CHANNEL_UNMUTE = 162,
        CMSG_CHANNEL_INVITE = 163,
        CMSG_CHANNEL_KICK = 164,
        CMSG_CHANNEL_BAN = 165,
        CMSG_CHANNEL_UNBAN = 166,
        CMSG_CHANNEL_ANNOUNCEMENTS = 167,
        CMSG_CHANNEL_MODERATE = 168,
        CMSG_USE_ITEM = 171,
        CMSG_OPEN_ITEM = 172,
        CMSG_READ_ITEM = 173,
        CMSG_GAMEOBJ_USE = 177,
        CMSG_AREATRIGGER = 180,
        MSG_MOVE_START_FORWARD = 181,
        MSG_MOVE_START_BACKWARD = 182,
        MSG_MOVE_STOP = 183,
        MSG_MOVE_START_STRAFE_LEFT = 184,
        MSG_MOVE_START_STRAFE_RIGHT = 185,
        MSG_MOVE_STOP_STRAFE = 186,
        MSG_MOVE_JUMP = 187,
        MSG_MOVE_START_TURN_LEFT = 188,
        MSG_MOVE_START_TURN_RIGHT = 189,
        MSG_MOVE_STOP_TURN = 190,
        MSG_MOVE_START_PITCH_UP = 191,
        MSG_MOVE_START_PITCH_DOWN = 192,
        MSG_MOVE_STOP_PITCH = 193,
        MSG_MOVE_SET_RUN_MODE = 194,
        MSG_MOVE_SET_WALK_MODE = 195,
        MSG_MOVE_TELEPORT = 197,
        MSG_MOVE_TELEPORT_ACK = 199,
        MSG_MOVE_FALL_LAND = 201,
        MSG_MOVE_START_SWIM = 202,
        MSG_MOVE_STOP_SWIM = 203,
        MSG_MOVE_SET_FACING = 218,
        MSG_MOVE_SET_PITCH = 219,
        MSG_MOVE_WORLDPORT_ACK = 220,
        CMSG_MOVE_SET_RAW_POSITION = 225,
        CMSG_FORCE_RUN_SPEED_CHANGE_ACK = 227,
        CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK = 229,
        CMSG_FORCE_SWIM_SPEED_CHANGE_ACK = 231,
        CMSG_FORCE_MOVE_ROOT_ACK = 233,
        CMSG_FORCE_MOVE_UNROOT_ACK = 235,
        MSG_MOVE_HEARTBEAT = 238,
        CMSG_MOVE_KNOCK_BACK_ACK = 240,
        CMSG_MOVE_HOVER_ACK = 246,
        MSG_MOVE_HOVER = 247,
        CMSG_NEXT_CINEMATIC_CAMERA = 251,
        CMSG_COMPLETE_CINEMATIC = 252,
        CMSG_TUTORIAL_FLAG = 254,
        CMSG_TUTORIAL_CLEAR = 255,
        CMSG_TUTORIAL_RESET = 256,
        CMSG_STANDSTATECHANGE = 257,
        CMSG_EMOTE = 258,
        CMSG_TEXT_EMOTE = 260,
        CMSG_AUTOSTORE_LOOT_ITEM = 264,
        CMSG_AUTOEQUIP_ITEM = 266,
        CMSG_AUTOSTORE_BAG_ITEM = 267,
        CMSG_SWAP_ITEM = 268,
        CMSG_SWAP_INV_ITEM = 269,
        CMSG_SPLIT_ITEM = 270,
        CMSG_AUTOEQUIP_ITEM_SLOT = 271,
        CMSG_DESTROYITEM = 273,
        CMSG_INSPECT = 276,
        CMSG_INITIATE_TRADE = 278,
        CMSG_BEGIN_TRADE = 279,
        CMSG_BUSY_TRADE = 280,
        CMSG_IGNORE_TRADE = 281,
        CMSG_ACCEPT_TRADE = 282,
        CMSG_UNACCEPT_TRADE = 283,
        CMSG_CANCEL_TRADE = 284,
        CMSG_SET_TRADE_ITEM = 285,
        CMSG_CLEAR_TRADE_ITEM = 286,
        CMSG_SET_TRADE_GOLD = 287,
        CMSG_SET_FACTION_ATWAR = 293,
        CMSG_SET_ACTION_BUTTON = 296,
        CMSG_CAST_SPELL = 302,
        CMSG_CANCEL_CAST = 303,
        CMSG_CANCEL_AURA = 310,
        CMSG_CANCEL_CHANNELLING = 315,
        CMSG_SET_SELECTION = 317,
        CMSG_DELETEEQUIPMENT_SET = 318,
        CMSG_INSTANCE_LOCK_RESPONSE = 319,
        CMSG_ATTACKSWING = 321,
        CMSG_ATTACKSTOP = 322,
        CMSG_REPOP_REQUEST = 346,
        CMSG_RESURRECT_RESPONSE = 348,
        CMSG_LOOT = 349,
        CMSG_LOOT_MONEY = 350,
        CMSG_LOOT_RELEASE = 351,
        CMSG_DUEL_ACCEPTED = 364,
        CMSG_DUEL_CANCELLED = 365,
        CMSG_MOUNTSPECIAL_ANIM = 369,
        CMSG_PET_SET_ACTION = 372,
        CMSG_PET_ACTION = 373,
        CMSG_PET_ABANDON = 374,
        CMSG_PET_RENAME = 375,
        CMSG_GOSSIP_HELLO = 379,
        CMSG_GOSSIP_SELECT_OPTION = 380,
        CMSG_NPC_TEXT_QUERY = 383,
        CMSG_QUESTGIVER_STATUS_QUERY = 386,
        CMSG_QUESTGIVER_HELLO = 388,
        CMSG_QUESTGIVER_QUERY_QUEST = 390,
        CMSG_QUESTGIVER_QUEST_AUTOLAUNCH = 391,
        CMSG_QUESTGIVER_ACCEPT_QUEST = 393,
        CMSG_QUESTGIVER_COMPLETE_QUEST = 394,
        CMSG_QUESTGIVER_REQUEST_REWARD = 396,
        CMSG_QUESTGIVER_CHOOSE_REWARD = 398,
        CMSG_QUESTGIVER_CANCEL = 400,
        CMSG_QUESTLOG_SWAP_QUEST = 403,
        CMSG_QUESTLOG_REMOVE_QUEST = 404,
        CMSG_QUEST_CONFIRM_ACCEPT = 411,
        CMSG_PUSHQUESTTOPARTY = 413,
        CMSG_LIST_INVENTORY = 414,
        CMSG_SELL_ITEM = 416,
        CMSG_BUY_ITEM = 418,
        CMSG_BUY_ITEM_IN_SLOT = 419,
        CMSG_TAXINODE_STATUS_QUERY = 426,
        CMSG_TAXIQUERYAVAILABLENODES = 428,
        CMSG_ACTIVATETAXI = 429,
        CMSG_TRAINER_LIST = 432,
        CMSG_TRAINER_BUY_SPELL = 434,
        CMSG_BINDER_ACTIVATE = 437,
        CMSG_BANKER_ACTIVATE = 439,
        CMSG_BUY_BANK_SLOT = 441,
        CMSG_PETITION_SHOWLIST = 443,
        CMSG_PETITION_BUY = 445,
        CMSG_PETITION_SHOW_SIGNATURES = 446,
        CMSG_PETITION_SIGN = 448,
        MSG_PETITION_DECLINE = 450,
        CMSG_OFFER_PETITION = 451,
        CMSG_TURN_IN_PETITION = 452,
        CMSG_PETITION_QUERY = 454,
        CMSG_BUG = 458,
        CMSG_PLAYED_TIME = 460,
        CMSG_QUERY_TIME = 462,
        CMSG_RECLAIM_CORPSE = 466,
        CMSG_WRAP_ITEM = 467,
        MSG_MINIMAP_PING = 469,
        CMSG_PING = 476,
        CMSG_SETSHEATHED = 480,
        CMSG_QUEST_POI_QUERY = 483,
        CMSG_AUTH_SESSION = 493,
        CMSG_PET_CAST_SPELL = 496,
        MSG_SAVE_GUILD_EMBLEM = 497,
        MSG_TABARDVENDOR_ACTIVATE = 498,
        CMSG_ZONEUPDATE = 500,
        MSG_RANDOM_ROLL = 507,
        CMSG_UNLEARN_SKILL = 514,
        CMSG_GMTICKET_CREATE = 517,
        CMSG_GMTICKET_UPDATETEXT = 519,
        CMSG_REQUEST_ACCOUNT_DATA = 522,
        CMSG_UPDATE_ACCOUNT_DATA = 523,
        CMSG_GMTICKET_GETTICKET = 529,
        CMSG_UNLEARN_TALENTS = 531,
        MSG_CORPSE_QUERY = 534,
        CMSG_GMTICKET_DELETETICKET = 535,
        CMSG_GMTICKET_SYSTEMSTATUS = 538,
        CMSG_SPIRIT_HEALER_ACTIVATE = 540,
        CMSG_CHAT_IGNORED = 549,
        CMSG_GUILD_RANK = 561,
        CMSG_GUILD_ADD_RANK = 562,
        CMSG_GUILD_DEL_RANK = 563,
        CMSG_GUILD_SET_PUBLIC_NOTE = 564,
        CMSG_GUILD_SET_OFFICER_NOTE = 565,
        CMSG_SEND_MAIL = 568,
        CMSG_GET_MAIL_LIST = 570,
        CMSG_BATTLEFIELD_LIST = 572,
        CMSG_ITEM_TEXT_QUERY = 579,
        CMSG_MAIL_TAKE_MONEY = 581,
        CMSG_MAIL_TAKE_ITEM = 582,
        CMSG_MAIL_MARK_AS_READ = 583,
        CMSG_MAIL_RETURN_TO_SENDER = 584,
        CMSG_MAIL_DELETE = 585,
        CMSG_MAIL_CREATE_TEXT_ITEM = 586,
        CMSG_LEARN_TALENT = 593,
        CMSG_TOGGLE_PVP = 595,
        MSG_AUCTION_HELLO = 597,
        CMSG_AUCTION_SELL_ITEM = 598,
        CMSG_AUCTION_REMOVE_ITEM = 599,
        CMSG_AUCTION_LIST_ITEMS = 600,
        CMSG_AUCTION_LIST_OWNER_ITEMS = 601,
        CMSG_AUCTION_PLACE_BID = 602,
        CMSG_AUCTION_LIST_BIDDER_ITEMS = 612,
        CMSG_SET_AMMO = 616,
        CMSG_SET_ACTIVE_MOVER = 618,
        CMSG_PET_CANCEL_AURA = 619,
        CMSG_CANCEL_AUTO_REPEAT_SPELL = 621,
        MSG_LIST_STABLED_PETS = 623,
        CMSG_STABLE_PET = 624,
        CMSG_UNSTABLE_PET = 625,
        CMSG_BUY_STABLE_SLOT = 626,
        CMSG_STABLE_SWAP_PET = 629,
        MSG_QUEST_PUSH_RESULT = 630,
        CMSG_REQUEST_PET_INFO = 633,
        CMSG_FAR_SIGHT = 634,
        CMSG_GROUP_CHANGE_SUB_GROUP = 638,
        CMSG_REQUEST_PARTY_MEMBER_STATS = 639,
        CMSG_GROUP_SWAP_SUB_GROUP = 640,
        CMSG_AUTOSTORE_BANK_ITEM = 642,
        CMSG_AUTOBANK_ITEM = 643,
        MSG_QUERY_NEXT_MAIL_TIME = 644,
        CMSG_GROUP_RAID_CONVERT = 654,
        CMSG_GROUP_ASSISTANT_LEADER = 655,
        CMSG_BUYBACK_ITEM = 656,
        CMSG_SET_SAVED_INSTANCE_EXTEND = 658,
        CMSG_LFG_GET_STATUS = 662,
        CMSG_GMTICKETSYSTEM_TOGGLE = 666,
        CMSG_CANCEL_GROWTH_AURA = 667,
        CMSG_LOOT_ROLL = 672,
        CMSG_LOOT_MASTER_GIVE = 675,
        CMSG_REPAIR_ITEM = 680,
        MSG_TALENT_WIPE_CONFIRM = 682,
        CMSG_SUMMON_RESPONSE = 684,
        MSG_MOVE_WATER_WALK = 689,
        CMSG_SELF_RES = 691,
        CMSG_TOGGLE_HELM = 697,
        CMSG_TOGGLE_CLOAK = 698,
        CMSG_SET_ACTIONBAR_TOGGLES = 703,
        MSG_PETITION_RENAME = 705,
        CMSG_ITEM_NAME_QUERY = 708,
        CMSG_CHAR_RENAME = 711,
        CMSG_MOVE_SPLINE_DONE = 713,
        CMSG_MOVE_FALL_RESET = 714,
        CMSG_REQUEST_RAID_INFO = 717,
        CMSG_MOVE_TIME_SKIPPED = 718,
        CMSG_MOVE_FEATHER_FALL_ACK = 719,
        CMSG_MOVE_WATER_WALK_ACK = 720,
        CMSG_MOVE_NOT_ACTIVE_MOVER = 721,
        CMSG_BATTLEFIELD_STATUS = 723,
        CMSG_BATTLEFIELD_PORT = 725,
        MSG_INSPECT_HONOR_STATS = 726,
        CMSG_BATTLEMASTER_HELLO = 727,
        CMSG_FORCE_WALK_SPEED_CHANGE_ACK = 731,
        CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK = 733,
        CMSG_FORCE_TURN_RATE_CHANGE_ACK = 735,
        MSG_PVP_LOG_DATA = 736,
        CMSG_LEAVE_BATTLEFIELD = 737,
        CMSG_AREA_SPIRIT_HEALER_QUERY = 738,
        CMSG_AREA_SPIRIT_HEALER_QUEUE = 739,
        CMSG_WARDEN_DATA = 743,
        MSG_BATTLEGROUND_PLAYER_POSITIONS = 745,
        CMSG_PET_STOP_ATTACK = 746,
        CMSG_BATTLEMASTER_JOIN = 750,
        CMSG_PET_UNLEARN = 752,
        CMSG_PET_SPELL_AUTOCAST = 755,
        CMSG_GUILD_INFO_TEXT = 764,
        CMSG_ACTIVATETAXIEXPRESS = 786,
        CMSG_SET_FACTION_INACTIVE = 791,
        CMSG_SET_WATCHED_FACTION = 792,
        CMSG_RESET_INSTANCES = 797,
        MSG_RAID_TARGET_UPDATE = 801,
        MSG_RAID_READY_CHECK = 802,
        MSG_SET_DUNGEON_DIFFICULTY = 809,
        CMSG_GMSURVEY_SUBMIT = 810,
        CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK = 832,
        CMSG_MOVE_SET_CAN_FLY_ACK = 837,
        CMSG_MOVE_SET_FLY = 838,
        CMSG_SOCKET_GEMS = 839,
        CMSG_ARENA_TEAM_ROSTER = 845,
        CMSG_ARENA_TEAM_INVITE = 847,
        CMSG_ARENA_TEAM_ACCEPT = 849,
        CMSG_ARENA_TEAM_DECLINE = 850,
        CMSG_ARENA_TEAM_LEAVE = 851,
        CMSG_ARENA_TEAM_REMOVE = 852,
        CMSG_ARENA_TEAM_DISBAND = 853,
        CMSG_ARENA_TEAM_LEADER = 854,
        CMSG_BATTLEMASTER_JOIN_ARENA = 856,
        MSG_MOVE_START_ASCEND = 857,
        MSG_MOVE_STOP_ASCEND = 858,
        CMSG_LFG_JOIN = 860,
        CMSG_LFG_LEAVE = 861,
        CMSG_SEARCH_LFG_JOIN = 862,
        CMSG_SEARCH_LFG_LEAVE = 863,
        CMSG_LFG_PROPOSAL_RESULT = 866,
        CMSG_SET_LFG_COMMENT = 870,
        CMSG_LFG_SET_ROLES = 874,
        CMSG_LFG_SET_BOOT_VOTE = 876,
        CMSG_LFD_PLAYER_LOCK_INFO_REQUEST = 878,
        CMSG_LFG_TELEPORT = 880,
        CMSG_LFD_PARTY_LOCK_INFO_REQUEST = 881,
        CMSG_SET_TITLE = 884,
        CMSG_CANCEL_MOUNT_AURA = 885,
        MSG_INSPECT_ARENA_TEAMS = 887,
        CMSG_CANCEL_TEMP_ENCHANTMENT = 889,
        MSG_MOVE_SET_FLIGHT_BACK_SPEED = 896,
        CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK = 898,
        CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK = 900,
        CMSG_SET_TAXI_BENCHMARK_MODE = 905,
        CMSG_REALM_SPLIT = 908,
        CMSG_MOVE_CHNG_TRANSPORT = 909,
        MSG_PARTY_ASSIGNMENT = 910,
        CMSG_TIME_SYNC_RESP = 913,
        MSG_MOVE_START_DESCEND = 935,
        MSG_RAID_READY_CHECK_CONFIRM = 942,
        CMSG_VOICE_SESSION_ENABLE = 943,
        CMSG_COMMENTATOR_ENABLE = 949,
        MSG_RAID_READY_CHECK_FINISHED = 966,
        CMSG_COMPLAIN = 967,
        CMSG_CHANNEL_DISPLAY_LIST = 978,
        CMSG_SET_ACTIVE_VOICE_CHANNEL = 979,
        CMSG_GET_CHANNEL_MEMBER_COUNT = 980,
        CMSG_CHANNEL_VOICE_ON = 982,
        CMSG_REPORT_PVP_AFK = 996,
        CMSG_GUILD_BANKER_ACTIVATE = 998,
        CMSG_GUILD_BANK_QUERY_TAB = 999,
        CMSG_GUILD_BANK_SWAP_ITEMS = 1001,
        CMSG_GUILD_BANK_BUY_TAB = 1002,
        CMSG_GUILD_BANK_UPDATE_TAB = 1003,
        CMSG_GUILD_BANK_DEPOSIT_MONEY = 1004,
        CMSG_GUILD_BANK_WITHDRAW_MONEY = 1005,
        MSG_GUILD_BANK_LOG_QUERY = 1006,
        CMSG_SET_CHANNEL_WATCH = 1007,
        CMSG_CLEAR_CHANNEL_WATCH = 1011,
        CMSG_SPELLCLICK = 1016,
        MSG_GUILD_PERMISSIONS = 1021,
        MSG_GUILD_BANK_MONEY_WITHDRAWN = 1022,
        MSG_GUILD_EVENT_LOG_QUERY = 1023,
        CMSG_GET_MIRRORIMAGE_DATA = 1025,
        CMSG_KEEP_ALIVE = 1031,
        CMSG_OPT_OUT_OF_LOOT = 1033,
        MSG_QUERY_GUILD_BANK_TEXT = 1034,
        CMSG_SET_GUILD_BANK_TEXT = 1035,
        CMSG_GRANT_LEVEL = 1037,
        CMSG_TOTEM_DESTROYED = 1044,
        CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY = 1047,
        CMSG_SET_PLAYER_DECLINED_NAMES = 1049,
        CMSG_ACCEPT_LEVEL_GRANT = 1056,
        CMSG_ALTER_APPEARANCE = 1062,
        CMSG_CALENDAR_GET_CALENDAR = 1065,
        CMSG_CALENDAR_GET_EVENT = 1066,
        CMSG_CALENDAR_GUILD_FILTER = 1067,
        CMSG_CALENDAR_ARENA_TEAM = 1068,
        CMSG_CALENDAR_ADD_EVENT = 1069,
        CMSG_CALENDAR_UPDATE_EVENT = 1070,
        CMSG_CALENDAR_REMOVE_EVENT = 1071,
        CMSG_CALENDAR_COPY_EVENT = 1072,
        CMSG_CALENDAR_EVENT_INVITE = 1073,
        CMSG_CALENDAR_EVENT_RSVP = 1074,
        CMSG_CALENDAR_EVENT_REMOVE_INVITE = 1075,
        CMSG_CALENDAR_EVENT_STATUS = 1076,
        CMSG_CALENDAR_EVENT_MODERATOR_STATUS = 1077,
        CMSG_CALENDAR_COMPLAIN = 1094,
        CMSG_CALENDAR_GET_NUM_PENDING = 1095,
        CMSG_UPDATE_MISSILE_TRAJECTORY = 1122,
        CMSG_COMPLETE_MOVIE = 1125,
        CMSG_QUERY_INSPECT_ACHIEVEMENTS = 1131,
        CMSG_DISMISS_CONTROLLED_VEHICLE = 1133,
        CMSG_CHAR_CUSTOMIZE = 1139,
        CMSG_REQUEST_VEHICLE_EXIT = 1142,
        CMSG_REQUEST_VEHICLE_PREV_SEAT = 1143,
        CMSG_REQUEST_VEHICLE_NEXT_SEAT = 1144,
        CMSG_REQUEST_VEHICLE_SWITCH_SEAT = 1145,
        CMSG_PET_LEARN_TALENT = 1146,
        CMSG_GAMEOBJ_REPORT_USE = 1153,
        CMSG_REMOVE_GLYPH = 1162,
        CMSG_DISMISS_CRITTER = 1165,
        CMSG_AUCTION_LIST_PENDING_SALES = 1167,
        CMSG_ENABLETAXI = 1171,
        CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE = 1179,
        CMSG_HEARTH_AND_RESURRECT = 1180,
        CMSG_PLAYER_VEHICLE_ENTER = 1192,
        CMSG_CONTROLLER_EJECT_PASSENGER = 1193,
        CMSG_ITEM_REFUND_INFO = 1203,
        CMSG_ITEM_REFUND = 1204,
        CMSG_CORPSE_MAP_POSITION_QUERY = 1206,
        CMSG_CALENDAR_EVENT_SIGNUP = 1210,
        CMSG_EQUIPMENT_SET_SAVE = 1213,
        CMSG_UPDATE_PROJECTILE_POSITION = 1214,
        CMSG_LEARN_PREVIEW_TALENTS = 1217,
        CMSG_LEARN_PREVIEW_TALENTS_PET = 1218,
        CMSG_MOVE_GRAVITY_DISABLE_ACK = 1231,
        CMSG_MOVE_GRAVITY_ENABLE_ACK = 1233,
        CMSG_EQUIPMENT_SET_USE = 1237,
        CMSG_CHAR_FACTION_CHANGE = 1241,
        CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE = 1247,
        CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE = 1250,
        CMSG_BATTLEFIELD_MGR_EXIT_REQUEST = 1255,
        MSG_SET_RAID_DIFFICULTY = 1259,
        CMSG_GMRESPONSE_RESOLVE = 1264,
        CMSG_WORLD_STATE_UI_TIMER_UPDATE = 1270,
        CMSG_CHAR_RACE_CHANGE = 1272,
        CMSG_READY_FOR_ACCOUNT_DATA_TIMES = 1279,
        CMSG_QUERY_QUESTS_COMPLETED = 1280,
        CMSG_GM_REPORT_LAG = 1282,
        CMSG_MOVE_SET_COLLISION_HGT_ACK = 1303,
    } opcode;

    union {
        wrath::CMSG_BOOTME CMSG_BOOTME;
        wrath::CMSG_DBLOOKUP CMSG_DBLOOKUP;
        wrath::CMSG_WORLD_TELEPORT CMSG_WORLD_TELEPORT;
        wrath::CMSG_TELEPORT_TO_UNIT CMSG_TELEPORT_TO_UNIT;
        wrath::CMSG_CHAR_CREATE CMSG_CHAR_CREATE;
        wrath::CMSG_CHAR_ENUM CMSG_CHAR_ENUM;
        wrath::CMSG_CHAR_DELETE CMSG_CHAR_DELETE;
        wrath::CMSG_PLAYER_LOGIN CMSG_PLAYER_LOGIN;
        wrath::CMSG_PLAYER_LOGOUT CMSG_PLAYER_LOGOUT;
        wrath::CMSG_LOGOUT_REQUEST CMSG_LOGOUT_REQUEST;
        wrath::CMSG_LOGOUT_CANCEL CMSG_LOGOUT_CANCEL;
        wrath::CMSG_NAME_QUERY CMSG_NAME_QUERY;
        wrath::CMSG_PET_NAME_QUERY CMSG_PET_NAME_QUERY;
        wrath::CMSG_GUILD_QUERY CMSG_GUILD_QUERY;
        wrath::CMSG_ITEM_QUERY_SINGLE CMSG_ITEM_QUERY_SINGLE;
        wrath::CMSG_PAGE_TEXT_QUERY CMSG_PAGE_TEXT_QUERY;
        wrath::CMSG_QUEST_QUERY CMSG_QUEST_QUERY;
        wrath::CMSG_GAMEOBJECT_QUERY CMSG_GAMEOBJECT_QUERY;
        wrath::CMSG_CREATURE_QUERY CMSG_CREATURE_QUERY;
        wrath::CMSG_WHO CMSG_WHO;
        wrath::CMSG_WHOIS CMSG_WHOIS;
        wrath::CMSG_CONTACT_LIST CMSG_CONTACT_LIST;
        wrath::CMSG_ADD_FRIEND CMSG_ADD_FRIEND;
        wrath::CMSG_DEL_FRIEND CMSG_DEL_FRIEND;
        wrath::CMSG_SET_CONTACT_NOTES CMSG_SET_CONTACT_NOTES;
        wrath::CMSG_ADD_IGNORE CMSG_ADD_IGNORE;
        wrath::CMSG_DEL_IGNORE CMSG_DEL_IGNORE;
        wrath::CMSG_GROUP_INVITE CMSG_GROUP_INVITE;
        wrath::CMSG_GROUP_CANCEL CMSG_GROUP_CANCEL;
        wrath::CMSG_GROUP_ACCEPT CMSG_GROUP_ACCEPT;
        wrath::CMSG_GROUP_DECLINE CMSG_GROUP_DECLINE;
        wrath::CMSG_GROUP_UNINVITE CMSG_GROUP_UNINVITE;
        wrath::CMSG_GROUP_UNINVITE_GUID CMSG_GROUP_UNINVITE_GUID;
        wrath::CMSG_GROUP_SET_LEADER CMSG_GROUP_SET_LEADER;
        wrath::CMSG_LOOT_METHOD CMSG_LOOT_METHOD;
        wrath::CMSG_GROUP_DISBAND CMSG_GROUP_DISBAND;
        wrath::CMSG_GUILD_CREATE CMSG_GUILD_CREATE;
        wrath::CMSG_GUILD_INVITE CMSG_GUILD_INVITE;
        wrath::CMSG_GUILD_ACCEPT CMSG_GUILD_ACCEPT;
        wrath::CMSG_GUILD_DECLINE CMSG_GUILD_DECLINE;
        wrath::CMSG_GUILD_INFO CMSG_GUILD_INFO;
        wrath::CMSG_GUILD_ROSTER CMSG_GUILD_ROSTER;
        wrath::CMSG_GUILD_PROMOTE CMSG_GUILD_PROMOTE;
        wrath::CMSG_GUILD_DEMOTE CMSG_GUILD_DEMOTE;
        wrath::CMSG_GUILD_LEAVE CMSG_GUILD_LEAVE;
        wrath::CMSG_GUILD_REMOVE CMSG_GUILD_REMOVE;
        wrath::CMSG_GUILD_DISBAND CMSG_GUILD_DISBAND;
        wrath::CMSG_GUILD_LEADER CMSG_GUILD_LEADER;
        wrath::CMSG_GUILD_MOTD CMSG_GUILD_MOTD;
        wrath::CMSG_MESSAGECHAT CMSG_MESSAGECHAT;
        wrath::CMSG_JOIN_CHANNEL CMSG_JOIN_CHANNEL;
        wrath::CMSG_LEAVE_CHANNEL CMSG_LEAVE_CHANNEL;
        wrath::CMSG_CHANNEL_LIST CMSG_CHANNEL_LIST;
        wrath::CMSG_CHANNEL_PASSWORD CMSG_CHANNEL_PASSWORD;
        wrath::CMSG_CHANNEL_SET_OWNER CMSG_CHANNEL_SET_OWNER;
        wrath::CMSG_CHANNEL_OWNER CMSG_CHANNEL_OWNER;
        wrath::CMSG_CHANNEL_MODERATOR CMSG_CHANNEL_MODERATOR;
        wrath::CMSG_CHANNEL_UNMODERATOR CMSG_CHANNEL_UNMODERATOR;
        wrath::CMSG_CHANNEL_MUTE CMSG_CHANNEL_MUTE;
        wrath::CMSG_CHANNEL_UNMUTE CMSG_CHANNEL_UNMUTE;
        wrath::CMSG_CHANNEL_INVITE CMSG_CHANNEL_INVITE;
        wrath::CMSG_CHANNEL_KICK CMSG_CHANNEL_KICK;
        wrath::CMSG_CHANNEL_BAN CMSG_CHANNEL_BAN;
        wrath::CMSG_CHANNEL_UNBAN CMSG_CHANNEL_UNBAN;
        wrath::CMSG_CHANNEL_ANNOUNCEMENTS CMSG_CHANNEL_ANNOUNCEMENTS;
        wrath::CMSG_CHANNEL_MODERATE CMSG_CHANNEL_MODERATE;
        wrath::CMSG_USE_ITEM CMSG_USE_ITEM;
        wrath::CMSG_OPEN_ITEM CMSG_OPEN_ITEM;
        wrath::CMSG_READ_ITEM CMSG_READ_ITEM;
        wrath::CMSG_GAMEOBJ_USE CMSG_GAMEOBJ_USE;
        wrath::CMSG_AREATRIGGER CMSG_AREATRIGGER;
        wrath::MSG_MOVE_START_FORWARD MSG_MOVE_START_FORWARD;
        wrath::MSG_MOVE_START_BACKWARD MSG_MOVE_START_BACKWARD;
        wrath::MSG_MOVE_STOP MSG_MOVE_STOP;
        wrath::MSG_MOVE_START_STRAFE_LEFT MSG_MOVE_START_STRAFE_LEFT;
        wrath::MSG_MOVE_START_STRAFE_RIGHT MSG_MOVE_START_STRAFE_RIGHT;
        wrath::MSG_MOVE_STOP_STRAFE MSG_MOVE_STOP_STRAFE;
        wrath::MSG_MOVE_JUMP MSG_MOVE_JUMP;
        wrath::MSG_MOVE_START_TURN_LEFT MSG_MOVE_START_TURN_LEFT;
        wrath::MSG_MOVE_START_TURN_RIGHT MSG_MOVE_START_TURN_RIGHT;
        wrath::MSG_MOVE_STOP_TURN MSG_MOVE_STOP_TURN;
        wrath::MSG_MOVE_START_PITCH_UP MSG_MOVE_START_PITCH_UP;
        wrath::MSG_MOVE_START_PITCH_DOWN MSG_MOVE_START_PITCH_DOWN;
        wrath::MSG_MOVE_STOP_PITCH MSG_MOVE_STOP_PITCH;
        wrath::MSG_MOVE_SET_RUN_MODE MSG_MOVE_SET_RUN_MODE;
        wrath::MSG_MOVE_SET_WALK_MODE MSG_MOVE_SET_WALK_MODE;
        wrath::MSG_MOVE_TELEPORT_Server MSG_MOVE_TELEPORT;
        wrath::MSG_MOVE_TELEPORT_ACK_Client MSG_MOVE_TELEPORT_ACK;
        wrath::MSG_MOVE_FALL_LAND MSG_MOVE_FALL_LAND;
        wrath::MSG_MOVE_START_SWIM MSG_MOVE_START_SWIM;
        wrath::MSG_MOVE_STOP_SWIM MSG_MOVE_STOP_SWIM;
        wrath::MSG_MOVE_SET_FACING MSG_MOVE_SET_FACING;
        wrath::MSG_MOVE_SET_PITCH MSG_MOVE_SET_PITCH;
        wrath::MSG_MOVE_WORLDPORT_ACK MSG_MOVE_WORLDPORT_ACK;
        wrath::CMSG_MOVE_SET_RAW_POSITION CMSG_MOVE_SET_RAW_POSITION;
        wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK CMSG_FORCE_RUN_SPEED_CHANGE_ACK;
        wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK;
        wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_SPEED_CHANGE_ACK;
        wrath::CMSG_FORCE_MOVE_ROOT_ACK CMSG_FORCE_MOVE_ROOT_ACK;
        wrath::CMSG_FORCE_MOVE_UNROOT_ACK CMSG_FORCE_MOVE_UNROOT_ACK;
        wrath::MSG_MOVE_HEARTBEAT MSG_MOVE_HEARTBEAT;
        wrath::CMSG_MOVE_KNOCK_BACK_ACK CMSG_MOVE_KNOCK_BACK_ACK;
        wrath::CMSG_MOVE_HOVER_ACK CMSG_MOVE_HOVER_ACK;
        wrath::MSG_MOVE_HOVER MSG_MOVE_HOVER;
        wrath::CMSG_NEXT_CINEMATIC_CAMERA CMSG_NEXT_CINEMATIC_CAMERA;
        wrath::CMSG_COMPLETE_CINEMATIC CMSG_COMPLETE_CINEMATIC;
        wrath::CMSG_TUTORIAL_FLAG CMSG_TUTORIAL_FLAG;
        wrath::CMSG_TUTORIAL_CLEAR CMSG_TUTORIAL_CLEAR;
        wrath::CMSG_TUTORIAL_RESET CMSG_TUTORIAL_RESET;
        wrath::CMSG_STANDSTATECHANGE CMSG_STANDSTATECHANGE;
        wrath::CMSG_EMOTE CMSG_EMOTE;
        wrath::CMSG_TEXT_EMOTE CMSG_TEXT_EMOTE;
        wrath::CMSG_AUTOSTORE_LOOT_ITEM CMSG_AUTOSTORE_LOOT_ITEM;
        wrath::CMSG_AUTOEQUIP_ITEM CMSG_AUTOEQUIP_ITEM;
        wrath::CMSG_AUTOSTORE_BAG_ITEM CMSG_AUTOSTORE_BAG_ITEM;
        wrath::CMSG_SWAP_ITEM CMSG_SWAP_ITEM;
        wrath::CMSG_SWAP_INV_ITEM CMSG_SWAP_INV_ITEM;
        wrath::CMSG_SPLIT_ITEM CMSG_SPLIT_ITEM;
        wrath::CMSG_AUTOEQUIP_ITEM_SLOT CMSG_AUTOEQUIP_ITEM_SLOT;
        wrath::CMSG_DESTROYITEM CMSG_DESTROYITEM;
        wrath::CMSG_INSPECT CMSG_INSPECT;
        wrath::CMSG_INITIATE_TRADE CMSG_INITIATE_TRADE;
        wrath::CMSG_BEGIN_TRADE CMSG_BEGIN_TRADE;
        wrath::CMSG_BUSY_TRADE CMSG_BUSY_TRADE;
        wrath::CMSG_IGNORE_TRADE CMSG_IGNORE_TRADE;
        wrath::CMSG_ACCEPT_TRADE CMSG_ACCEPT_TRADE;
        wrath::CMSG_UNACCEPT_TRADE CMSG_UNACCEPT_TRADE;
        wrath::CMSG_CANCEL_TRADE CMSG_CANCEL_TRADE;
        wrath::CMSG_SET_TRADE_ITEM CMSG_SET_TRADE_ITEM;
        wrath::CMSG_CLEAR_TRADE_ITEM CMSG_CLEAR_TRADE_ITEM;
        wrath::CMSG_SET_TRADE_GOLD CMSG_SET_TRADE_GOLD;
        wrath::CMSG_SET_FACTION_ATWAR CMSG_SET_FACTION_ATWAR;
        wrath::CMSG_SET_ACTION_BUTTON CMSG_SET_ACTION_BUTTON;
        wrath::CMSG_CAST_SPELL CMSG_CAST_SPELL;
        wrath::CMSG_CANCEL_CAST CMSG_CANCEL_CAST;
        wrath::CMSG_CANCEL_AURA CMSG_CANCEL_AURA;
        wrath::CMSG_CANCEL_CHANNELLING CMSG_CANCEL_CHANNELLING;
        wrath::CMSG_SET_SELECTION CMSG_SET_SELECTION;
        wrath::CMSG_DELETEEQUIPMENT_SET CMSG_DELETEEQUIPMENT_SET;
        wrath::CMSG_INSTANCE_LOCK_RESPONSE CMSG_INSTANCE_LOCK_RESPONSE;
        wrath::CMSG_ATTACKSWING CMSG_ATTACKSWING;
        wrath::CMSG_ATTACKSTOP CMSG_ATTACKSTOP;
        wrath::CMSG_REPOP_REQUEST CMSG_REPOP_REQUEST;
        wrath::CMSG_RESURRECT_RESPONSE CMSG_RESURRECT_RESPONSE;
        wrath::CMSG_LOOT CMSG_LOOT;
        wrath::CMSG_LOOT_MONEY CMSG_LOOT_MONEY;
        wrath::CMSG_LOOT_RELEASE CMSG_LOOT_RELEASE;
        wrath::CMSG_DUEL_ACCEPTED CMSG_DUEL_ACCEPTED;
        wrath::CMSG_DUEL_CANCELLED CMSG_DUEL_CANCELLED;
        wrath::CMSG_MOUNTSPECIAL_ANIM CMSG_MOUNTSPECIAL_ANIM;
        wrath::CMSG_PET_SET_ACTION CMSG_PET_SET_ACTION;
        wrath::CMSG_PET_ACTION CMSG_PET_ACTION;
        wrath::CMSG_PET_ABANDON CMSG_PET_ABANDON;
        wrath::CMSG_PET_RENAME CMSG_PET_RENAME;
        wrath::CMSG_GOSSIP_HELLO CMSG_GOSSIP_HELLO;
        wrath::CMSG_GOSSIP_SELECT_OPTION CMSG_GOSSIP_SELECT_OPTION;
        wrath::CMSG_NPC_TEXT_QUERY CMSG_NPC_TEXT_QUERY;
        wrath::CMSG_QUESTGIVER_STATUS_QUERY CMSG_QUESTGIVER_STATUS_QUERY;
        wrath::CMSG_QUESTGIVER_HELLO CMSG_QUESTGIVER_HELLO;
        wrath::CMSG_QUESTGIVER_QUERY_QUEST CMSG_QUESTGIVER_QUERY_QUEST;
        wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH CMSG_QUESTGIVER_QUEST_AUTOLAUNCH;
        wrath::CMSG_QUESTGIVER_ACCEPT_QUEST CMSG_QUESTGIVER_ACCEPT_QUEST;
        wrath::CMSG_QUESTGIVER_COMPLETE_QUEST CMSG_QUESTGIVER_COMPLETE_QUEST;
        wrath::CMSG_QUESTGIVER_REQUEST_REWARD CMSG_QUESTGIVER_REQUEST_REWARD;
        wrath::CMSG_QUESTGIVER_CHOOSE_REWARD CMSG_QUESTGIVER_CHOOSE_REWARD;
        wrath::CMSG_QUESTGIVER_CANCEL CMSG_QUESTGIVER_CANCEL;
        wrath::CMSG_QUESTLOG_SWAP_QUEST CMSG_QUESTLOG_SWAP_QUEST;
        wrath::CMSG_QUESTLOG_REMOVE_QUEST CMSG_QUESTLOG_REMOVE_QUEST;
        wrath::CMSG_QUEST_CONFIRM_ACCEPT CMSG_QUEST_CONFIRM_ACCEPT;
        wrath::CMSG_PUSHQUESTTOPARTY CMSG_PUSHQUESTTOPARTY;
        wrath::CMSG_LIST_INVENTORY CMSG_LIST_INVENTORY;
        wrath::CMSG_SELL_ITEM CMSG_SELL_ITEM;
        wrath::CMSG_BUY_ITEM CMSG_BUY_ITEM;
        wrath::CMSG_BUY_ITEM_IN_SLOT CMSG_BUY_ITEM_IN_SLOT;
        wrath::CMSG_TAXINODE_STATUS_QUERY CMSG_TAXINODE_STATUS_QUERY;
        wrath::CMSG_TAXIQUERYAVAILABLENODES CMSG_TAXIQUERYAVAILABLENODES;
        wrath::CMSG_ACTIVATETAXI CMSG_ACTIVATETAXI;
        wrath::CMSG_TRAINER_LIST CMSG_TRAINER_LIST;
        wrath::CMSG_TRAINER_BUY_SPELL CMSG_TRAINER_BUY_SPELL;
        wrath::CMSG_BINDER_ACTIVATE CMSG_BINDER_ACTIVATE;
        wrath::CMSG_BANKER_ACTIVATE CMSG_BANKER_ACTIVATE;
        wrath::CMSG_BUY_BANK_SLOT CMSG_BUY_BANK_SLOT;
        wrath::CMSG_PETITION_SHOWLIST CMSG_PETITION_SHOWLIST;
        wrath::CMSG_PETITION_BUY CMSG_PETITION_BUY;
        wrath::CMSG_PETITION_SHOW_SIGNATURES CMSG_PETITION_SHOW_SIGNATURES;
        wrath::CMSG_PETITION_SIGN CMSG_PETITION_SIGN;
        wrath::MSG_PETITION_DECLINE MSG_PETITION_DECLINE;
        wrath::CMSG_OFFER_PETITION CMSG_OFFER_PETITION;
        wrath::CMSG_TURN_IN_PETITION CMSG_TURN_IN_PETITION;
        wrath::CMSG_PETITION_QUERY CMSG_PETITION_QUERY;
        wrath::CMSG_BUG CMSG_BUG;
        wrath::CMSG_PLAYED_TIME CMSG_PLAYED_TIME;
        wrath::CMSG_QUERY_TIME CMSG_QUERY_TIME;
        wrath::CMSG_RECLAIM_CORPSE CMSG_RECLAIM_CORPSE;
        wrath::CMSG_WRAP_ITEM CMSG_WRAP_ITEM;
        wrath::MSG_MINIMAP_PING_Client MSG_MINIMAP_PING;
        wrath::CMSG_PING CMSG_PING;
        wrath::CMSG_SETSHEATHED CMSG_SETSHEATHED;
        wrath::CMSG_QUEST_POI_QUERY CMSG_QUEST_POI_QUERY;
        wrath::CMSG_AUTH_SESSION CMSG_AUTH_SESSION;
        wrath::CMSG_PET_CAST_SPELL CMSG_PET_CAST_SPELL;
        wrath::MSG_SAVE_GUILD_EMBLEM_Client MSG_SAVE_GUILD_EMBLEM;
        wrath::MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATE;
        wrath::CMSG_ZONEUPDATE CMSG_ZONEUPDATE;
        wrath::MSG_RANDOM_ROLL_Client MSG_RANDOM_ROLL;
        wrath::CMSG_UNLEARN_SKILL CMSG_UNLEARN_SKILL;
        wrath::CMSG_GMTICKET_CREATE CMSG_GMTICKET_CREATE;
        wrath::CMSG_GMTICKET_UPDATETEXT CMSG_GMTICKET_UPDATETEXT;
        wrath::CMSG_REQUEST_ACCOUNT_DATA CMSG_REQUEST_ACCOUNT_DATA;
        wrath::CMSG_UPDATE_ACCOUNT_DATA CMSG_UPDATE_ACCOUNT_DATA;
        wrath::CMSG_GMTICKET_GETTICKET CMSG_GMTICKET_GETTICKET;
        wrath::CMSG_UNLEARN_TALENTS CMSG_UNLEARN_TALENTS;
        wrath::MSG_CORPSE_QUERY_Client MSG_CORPSE_QUERY;
        wrath::CMSG_GMTICKET_DELETETICKET CMSG_GMTICKET_DELETETICKET;
        wrath::CMSG_GMTICKET_SYSTEMSTATUS CMSG_GMTICKET_SYSTEMSTATUS;
        wrath::CMSG_SPIRIT_HEALER_ACTIVATE CMSG_SPIRIT_HEALER_ACTIVATE;
        wrath::CMSG_CHAT_IGNORED CMSG_CHAT_IGNORED;
        wrath::CMSG_GUILD_RANK CMSG_GUILD_RANK;
        wrath::CMSG_GUILD_ADD_RANK CMSG_GUILD_ADD_RANK;
        wrath::CMSG_GUILD_DEL_RANK CMSG_GUILD_DEL_RANK;
        wrath::CMSG_GUILD_SET_PUBLIC_NOTE CMSG_GUILD_SET_PUBLIC_NOTE;
        wrath::CMSG_GUILD_SET_OFFICER_NOTE CMSG_GUILD_SET_OFFICER_NOTE;
        wrath::CMSG_SEND_MAIL CMSG_SEND_MAIL;
        wrath::CMSG_GET_MAIL_LIST CMSG_GET_MAIL_LIST;
        wrath::CMSG_BATTLEFIELD_LIST CMSG_BATTLEFIELD_LIST;
        wrath::CMSG_ITEM_TEXT_QUERY CMSG_ITEM_TEXT_QUERY;
        wrath::CMSG_MAIL_TAKE_MONEY CMSG_MAIL_TAKE_MONEY;
        wrath::CMSG_MAIL_TAKE_ITEM CMSG_MAIL_TAKE_ITEM;
        wrath::CMSG_MAIL_MARK_AS_READ CMSG_MAIL_MARK_AS_READ;
        wrath::CMSG_MAIL_RETURN_TO_SENDER CMSG_MAIL_RETURN_TO_SENDER;
        wrath::CMSG_MAIL_DELETE CMSG_MAIL_DELETE;
        wrath::CMSG_MAIL_CREATE_TEXT_ITEM CMSG_MAIL_CREATE_TEXT_ITEM;
        wrath::CMSG_LEARN_TALENT CMSG_LEARN_TALENT;
        wrath::CMSG_TOGGLE_PVP CMSG_TOGGLE_PVP;
        wrath::MSG_AUCTION_HELLO_Client MSG_AUCTION_HELLO;
        wrath::CMSG_AUCTION_SELL_ITEM CMSG_AUCTION_SELL_ITEM;
        wrath::CMSG_AUCTION_REMOVE_ITEM CMSG_AUCTION_REMOVE_ITEM;
        wrath::CMSG_AUCTION_LIST_ITEMS CMSG_AUCTION_LIST_ITEMS;
        wrath::CMSG_AUCTION_LIST_OWNER_ITEMS CMSG_AUCTION_LIST_OWNER_ITEMS;
        wrath::CMSG_AUCTION_PLACE_BID CMSG_AUCTION_PLACE_BID;
        wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS CMSG_AUCTION_LIST_BIDDER_ITEMS;
        wrath::CMSG_SET_AMMO CMSG_SET_AMMO;
        wrath::CMSG_SET_ACTIVE_MOVER CMSG_SET_ACTIVE_MOVER;
        wrath::CMSG_PET_CANCEL_AURA CMSG_PET_CANCEL_AURA;
        wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL CMSG_CANCEL_AUTO_REPEAT_SPELL;
        wrath::MSG_LIST_STABLED_PETS_Client MSG_LIST_STABLED_PETS;
        wrath::CMSG_STABLE_PET CMSG_STABLE_PET;
        wrath::CMSG_UNSTABLE_PET CMSG_UNSTABLE_PET;
        wrath::CMSG_BUY_STABLE_SLOT CMSG_BUY_STABLE_SLOT;
        wrath::CMSG_STABLE_SWAP_PET CMSG_STABLE_SWAP_PET;
        wrath::MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULT;
        wrath::CMSG_REQUEST_PET_INFO CMSG_REQUEST_PET_INFO;
        wrath::CMSG_FAR_SIGHT CMSG_FAR_SIGHT;
        wrath::CMSG_GROUP_CHANGE_SUB_GROUP CMSG_GROUP_CHANGE_SUB_GROUP;
        wrath::CMSG_REQUEST_PARTY_MEMBER_STATS CMSG_REQUEST_PARTY_MEMBER_STATS;
        wrath::CMSG_GROUP_SWAP_SUB_GROUP CMSG_GROUP_SWAP_SUB_GROUP;
        wrath::CMSG_AUTOSTORE_BANK_ITEM CMSG_AUTOSTORE_BANK_ITEM;
        wrath::CMSG_AUTOBANK_ITEM CMSG_AUTOBANK_ITEM;
        wrath::MSG_QUERY_NEXT_MAIL_TIME_Client MSG_QUERY_NEXT_MAIL_TIME;
        wrath::CMSG_GROUP_RAID_CONVERT CMSG_GROUP_RAID_CONVERT;
        wrath::CMSG_GROUP_ASSISTANT_LEADER CMSG_GROUP_ASSISTANT_LEADER;
        wrath::CMSG_BUYBACK_ITEM CMSG_BUYBACK_ITEM;
        wrath::CMSG_SET_SAVED_INSTANCE_EXTEND CMSG_SET_SAVED_INSTANCE_EXTEND;
        wrath::CMSG_LFG_GET_STATUS CMSG_LFG_GET_STATUS;
        wrath::CMSG_GMTICKETSYSTEM_TOGGLE CMSG_GMTICKETSYSTEM_TOGGLE;
        wrath::CMSG_CANCEL_GROWTH_AURA CMSG_CANCEL_GROWTH_AURA;
        wrath::CMSG_LOOT_ROLL CMSG_LOOT_ROLL;
        wrath::CMSG_LOOT_MASTER_GIVE CMSG_LOOT_MASTER_GIVE;
        wrath::CMSG_REPAIR_ITEM CMSG_REPAIR_ITEM;
        wrath::MSG_TALENT_WIPE_CONFIRM_Client MSG_TALENT_WIPE_CONFIRM;
        wrath::CMSG_SUMMON_RESPONSE CMSG_SUMMON_RESPONSE;
        wrath::MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALK;
        wrath::CMSG_SELF_RES CMSG_SELF_RES;
        wrath::CMSG_TOGGLE_HELM CMSG_TOGGLE_HELM;
        wrath::CMSG_TOGGLE_CLOAK CMSG_TOGGLE_CLOAK;
        wrath::CMSG_SET_ACTIONBAR_TOGGLES CMSG_SET_ACTIONBAR_TOGGLES;
        wrath::MSG_PETITION_RENAME MSG_PETITION_RENAME;
        wrath::CMSG_ITEM_NAME_QUERY CMSG_ITEM_NAME_QUERY;
        wrath::CMSG_CHAR_RENAME CMSG_CHAR_RENAME;
        wrath::CMSG_MOVE_SPLINE_DONE CMSG_MOVE_SPLINE_DONE;
        wrath::CMSG_MOVE_FALL_RESET CMSG_MOVE_FALL_RESET;
        wrath::CMSG_REQUEST_RAID_INFO CMSG_REQUEST_RAID_INFO;
        wrath::CMSG_MOVE_TIME_SKIPPED CMSG_MOVE_TIME_SKIPPED;
        wrath::CMSG_MOVE_FEATHER_FALL_ACK CMSG_MOVE_FEATHER_FALL_ACK;
        wrath::CMSG_MOVE_WATER_WALK_ACK CMSG_MOVE_WATER_WALK_ACK;
        wrath::CMSG_MOVE_NOT_ACTIVE_MOVER CMSG_MOVE_NOT_ACTIVE_MOVER;
        wrath::CMSG_BATTLEFIELD_STATUS CMSG_BATTLEFIELD_STATUS;
        wrath::CMSG_BATTLEFIELD_PORT CMSG_BATTLEFIELD_PORT;
        wrath::MSG_INSPECT_HONOR_STATS_Client MSG_INSPECT_HONOR_STATS;
        wrath::CMSG_BATTLEMASTER_HELLO CMSG_BATTLEMASTER_HELLO;
        wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK CMSG_FORCE_WALK_SPEED_CHANGE_ACK;
        wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK;
        wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK CMSG_FORCE_TURN_RATE_CHANGE_ACK;
        wrath::MSG_PVP_LOG_DATA_Client MSG_PVP_LOG_DATA;
        wrath::CMSG_LEAVE_BATTLEFIELD CMSG_LEAVE_BATTLEFIELD;
        wrath::CMSG_AREA_SPIRIT_HEALER_QUERY CMSG_AREA_SPIRIT_HEALER_QUERY;
        wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE CMSG_AREA_SPIRIT_HEALER_QUEUE;
        wrath::CMSG_WARDEN_DATA CMSG_WARDEN_DATA;
        wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client MSG_BATTLEGROUND_PLAYER_POSITIONS;
        wrath::CMSG_PET_STOP_ATTACK CMSG_PET_STOP_ATTACK;
        wrath::CMSG_BATTLEMASTER_JOIN CMSG_BATTLEMASTER_JOIN;
        wrath::CMSG_PET_UNLEARN CMSG_PET_UNLEARN;
        wrath::CMSG_PET_SPELL_AUTOCAST CMSG_PET_SPELL_AUTOCAST;
        wrath::CMSG_GUILD_INFO_TEXT CMSG_GUILD_INFO_TEXT;
        wrath::CMSG_ACTIVATETAXIEXPRESS CMSG_ACTIVATETAXIEXPRESS;
        wrath::CMSG_SET_FACTION_INACTIVE CMSG_SET_FACTION_INACTIVE;
        wrath::CMSG_SET_WATCHED_FACTION CMSG_SET_WATCHED_FACTION;
        wrath::CMSG_RESET_INSTANCES CMSG_RESET_INSTANCES;
        wrath::MSG_RAID_TARGET_UPDATE_Client MSG_RAID_TARGET_UPDATE;
        wrath::MSG_RAID_READY_CHECK_Client MSG_RAID_READY_CHECK;
        wrath::MSG_SET_DUNGEON_DIFFICULTY_Client MSG_SET_DUNGEON_DIFFICULTY;
        wrath::CMSG_GMSURVEY_SUBMIT CMSG_GMSURVEY_SUBMIT;
        wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK;
        wrath::CMSG_MOVE_SET_CAN_FLY_ACK CMSG_MOVE_SET_CAN_FLY_ACK;
        wrath::CMSG_MOVE_SET_FLY CMSG_MOVE_SET_FLY;
        wrath::CMSG_SOCKET_GEMS CMSG_SOCKET_GEMS;
        wrath::CMSG_ARENA_TEAM_ROSTER CMSG_ARENA_TEAM_ROSTER;
        wrath::CMSG_ARENA_TEAM_INVITE CMSG_ARENA_TEAM_INVITE;
        wrath::CMSG_ARENA_TEAM_ACCEPT CMSG_ARENA_TEAM_ACCEPT;
        wrath::CMSG_ARENA_TEAM_DECLINE CMSG_ARENA_TEAM_DECLINE;
        wrath::CMSG_ARENA_TEAM_LEAVE CMSG_ARENA_TEAM_LEAVE;
        wrath::CMSG_ARENA_TEAM_REMOVE CMSG_ARENA_TEAM_REMOVE;
        wrath::CMSG_ARENA_TEAM_DISBAND CMSG_ARENA_TEAM_DISBAND;
        wrath::CMSG_ARENA_TEAM_LEADER CMSG_ARENA_TEAM_LEADER;
        wrath::CMSG_BATTLEMASTER_JOIN_ARENA CMSG_BATTLEMASTER_JOIN_ARENA;
        wrath::MSG_MOVE_START_ASCEND MSG_MOVE_START_ASCEND;
        wrath::MSG_MOVE_STOP_ASCEND MSG_MOVE_STOP_ASCEND;
        wrath::CMSG_LFG_JOIN CMSG_LFG_JOIN;
        wrath::CMSG_LFG_LEAVE CMSG_LFG_LEAVE;
        wrath::CMSG_SEARCH_LFG_JOIN CMSG_SEARCH_LFG_JOIN;
        wrath::CMSG_SEARCH_LFG_LEAVE CMSG_SEARCH_LFG_LEAVE;
        wrath::CMSG_LFG_PROPOSAL_RESULT CMSG_LFG_PROPOSAL_RESULT;
        wrath::CMSG_SET_LFG_COMMENT CMSG_SET_LFG_COMMENT;
        wrath::CMSG_LFG_SET_ROLES CMSG_LFG_SET_ROLES;
        wrath::CMSG_LFG_SET_BOOT_VOTE CMSG_LFG_SET_BOOT_VOTE;
        wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST CMSG_LFD_PLAYER_LOCK_INFO_REQUEST;
        wrath::CMSG_LFG_TELEPORT CMSG_LFG_TELEPORT;
        wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST CMSG_LFD_PARTY_LOCK_INFO_REQUEST;
        wrath::CMSG_SET_TITLE CMSG_SET_TITLE;
        wrath::CMSG_CANCEL_MOUNT_AURA CMSG_CANCEL_MOUNT_AURA;
        wrath::MSG_INSPECT_ARENA_TEAMS_Client MSG_INSPECT_ARENA_TEAMS;
        wrath::CMSG_CANCEL_TEMP_ENCHANTMENT CMSG_CANCEL_TEMP_ENCHANTMENT;
        wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED MSG_MOVE_SET_FLIGHT_BACK_SPEED;
        wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK;
        wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK;
        wrath::CMSG_SET_TAXI_BENCHMARK_MODE CMSG_SET_TAXI_BENCHMARK_MODE;
        wrath::CMSG_REALM_SPLIT CMSG_REALM_SPLIT;
        wrath::CMSG_MOVE_CHNG_TRANSPORT CMSG_MOVE_CHNG_TRANSPORT;
        wrath::MSG_PARTY_ASSIGNMENT_Client MSG_PARTY_ASSIGNMENT;
        wrath::CMSG_TIME_SYNC_RESP CMSG_TIME_SYNC_RESP;
        wrath::MSG_MOVE_START_DESCEND MSG_MOVE_START_DESCEND;
        wrath::MSG_RAID_READY_CHECK_CONFIRM_Client MSG_RAID_READY_CHECK_CONFIRM;
        wrath::CMSG_VOICE_SESSION_ENABLE CMSG_VOICE_SESSION_ENABLE;
        wrath::CMSG_COMMENTATOR_ENABLE CMSG_COMMENTATOR_ENABLE;
        wrath::MSG_RAID_READY_CHECK_FINISHED_Client MSG_RAID_READY_CHECK_FINISHED;
        wrath::CMSG_COMPLAIN CMSG_COMPLAIN;
        wrath::CMSG_CHANNEL_DISPLAY_LIST CMSG_CHANNEL_DISPLAY_LIST;
        wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL CMSG_SET_ACTIVE_VOICE_CHANNEL;
        wrath::CMSG_GET_CHANNEL_MEMBER_COUNT CMSG_GET_CHANNEL_MEMBER_COUNT;
        wrath::CMSG_CHANNEL_VOICE_ON CMSG_CHANNEL_VOICE_ON;
        wrath::CMSG_REPORT_PVP_AFK CMSG_REPORT_PVP_AFK;
        wrath::CMSG_GUILD_BANKER_ACTIVATE CMSG_GUILD_BANKER_ACTIVATE;
        wrath::CMSG_GUILD_BANK_QUERY_TAB CMSG_GUILD_BANK_QUERY_TAB;
        wrath::CMSG_GUILD_BANK_SWAP_ITEMS CMSG_GUILD_BANK_SWAP_ITEMS;
        wrath::CMSG_GUILD_BANK_BUY_TAB CMSG_GUILD_BANK_BUY_TAB;
        wrath::CMSG_GUILD_BANK_UPDATE_TAB CMSG_GUILD_BANK_UPDATE_TAB;
        wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY CMSG_GUILD_BANK_DEPOSIT_MONEY;
        wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY CMSG_GUILD_BANK_WITHDRAW_MONEY;
        wrath::MSG_GUILD_BANK_LOG_QUERY_Client MSG_GUILD_BANK_LOG_QUERY;
        wrath::CMSG_SET_CHANNEL_WATCH CMSG_SET_CHANNEL_WATCH;
        wrath::CMSG_CLEAR_CHANNEL_WATCH CMSG_CLEAR_CHANNEL_WATCH;
        wrath::CMSG_SPELLCLICK CMSG_SPELLCLICK;
        wrath::MSG_GUILD_PERMISSIONS_Client MSG_GUILD_PERMISSIONS;
        wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client MSG_GUILD_BANK_MONEY_WITHDRAWN;
        wrath::MSG_GUILD_EVENT_LOG_QUERY_Client MSG_GUILD_EVENT_LOG_QUERY;
        wrath::CMSG_GET_MIRRORIMAGE_DATA CMSG_GET_MIRRORIMAGE_DATA;
        wrath::CMSG_KEEP_ALIVE CMSG_KEEP_ALIVE;
        wrath::CMSG_OPT_OUT_OF_LOOT CMSG_OPT_OUT_OF_LOOT;
        wrath::MSG_QUERY_GUILD_BANK_TEXT_Client MSG_QUERY_GUILD_BANK_TEXT;
        wrath::CMSG_SET_GUILD_BANK_TEXT CMSG_SET_GUILD_BANK_TEXT;
        wrath::CMSG_GRANT_LEVEL CMSG_GRANT_LEVEL;
        wrath::CMSG_TOTEM_DESTROYED CMSG_TOTEM_DESTROYED;
        wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY;
        wrath::CMSG_SET_PLAYER_DECLINED_NAMES CMSG_SET_PLAYER_DECLINED_NAMES;
        wrath::CMSG_ACCEPT_LEVEL_GRANT CMSG_ACCEPT_LEVEL_GRANT;
        wrath::CMSG_ALTER_APPEARANCE CMSG_ALTER_APPEARANCE;
        wrath::CMSG_CALENDAR_GET_CALENDAR CMSG_CALENDAR_GET_CALENDAR;
        wrath::CMSG_CALENDAR_GET_EVENT CMSG_CALENDAR_GET_EVENT;
        wrath::CMSG_CALENDAR_GUILD_FILTER CMSG_CALENDAR_GUILD_FILTER;
        wrath::CMSG_CALENDAR_ARENA_TEAM CMSG_CALENDAR_ARENA_TEAM;
        wrath::CMSG_CALENDAR_ADD_EVENT CMSG_CALENDAR_ADD_EVENT;
        wrath::CMSG_CALENDAR_UPDATE_EVENT CMSG_CALENDAR_UPDATE_EVENT;
        wrath::CMSG_CALENDAR_REMOVE_EVENT CMSG_CALENDAR_REMOVE_EVENT;
        wrath::CMSG_CALENDAR_COPY_EVENT CMSG_CALENDAR_COPY_EVENT;
        wrath::CMSG_CALENDAR_EVENT_INVITE CMSG_CALENDAR_EVENT_INVITE;
        wrath::CMSG_CALENDAR_EVENT_RSVP CMSG_CALENDAR_EVENT_RSVP;
        wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE CMSG_CALENDAR_EVENT_REMOVE_INVITE;
        wrath::CMSG_CALENDAR_EVENT_STATUS CMSG_CALENDAR_EVENT_STATUS;
        wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS CMSG_CALENDAR_EVENT_MODERATOR_STATUS;
        wrath::CMSG_CALENDAR_COMPLAIN CMSG_CALENDAR_COMPLAIN;
        wrath::CMSG_CALENDAR_GET_NUM_PENDING CMSG_CALENDAR_GET_NUM_PENDING;
        wrath::CMSG_UPDATE_MISSILE_TRAJECTORY CMSG_UPDATE_MISSILE_TRAJECTORY;
        wrath::CMSG_COMPLETE_MOVIE CMSG_COMPLETE_MOVIE;
        wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS CMSG_QUERY_INSPECT_ACHIEVEMENTS;
        wrath::CMSG_DISMISS_CONTROLLED_VEHICLE CMSG_DISMISS_CONTROLLED_VEHICLE;
        wrath::CMSG_CHAR_CUSTOMIZE CMSG_CHAR_CUSTOMIZE;
        wrath::CMSG_REQUEST_VEHICLE_EXIT CMSG_REQUEST_VEHICLE_EXIT;
        wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT CMSG_REQUEST_VEHICLE_PREV_SEAT;
        wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT CMSG_REQUEST_VEHICLE_NEXT_SEAT;
        wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT CMSG_REQUEST_VEHICLE_SWITCH_SEAT;
        wrath::CMSG_PET_LEARN_TALENT CMSG_PET_LEARN_TALENT;
        wrath::CMSG_GAMEOBJ_REPORT_USE CMSG_GAMEOBJ_REPORT_USE;
        wrath::CMSG_REMOVE_GLYPH CMSG_REMOVE_GLYPH;
        wrath::CMSG_DISMISS_CRITTER CMSG_DISMISS_CRITTER;
        wrath::CMSG_AUCTION_LIST_PENDING_SALES CMSG_AUCTION_LIST_PENDING_SALES;
        wrath::CMSG_ENABLETAXI CMSG_ENABLETAXI;
        wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE;
        wrath::CMSG_HEARTH_AND_RESURRECT CMSG_HEARTH_AND_RESURRECT;
        wrath::CMSG_PLAYER_VEHICLE_ENTER CMSG_PLAYER_VEHICLE_ENTER;
        wrath::CMSG_CONTROLLER_EJECT_PASSENGER CMSG_CONTROLLER_EJECT_PASSENGER;
        wrath::CMSG_ITEM_REFUND_INFO CMSG_ITEM_REFUND_INFO;
        wrath::CMSG_ITEM_REFUND CMSG_ITEM_REFUND;
        wrath::CMSG_CORPSE_MAP_POSITION_QUERY CMSG_CORPSE_MAP_POSITION_QUERY;
        wrath::CMSG_CALENDAR_EVENT_SIGNUP CMSG_CALENDAR_EVENT_SIGNUP;
        wrath::CMSG_EQUIPMENT_SET_SAVE CMSG_EQUIPMENT_SET_SAVE;
        wrath::CMSG_UPDATE_PROJECTILE_POSITION CMSG_UPDATE_PROJECTILE_POSITION;
        wrath::CMSG_LEARN_PREVIEW_TALENTS CMSG_LEARN_PREVIEW_TALENTS;
        wrath::CMSG_LEARN_PREVIEW_TALENTS_PET CMSG_LEARN_PREVIEW_TALENTS_PET;
        wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK CMSG_MOVE_GRAVITY_DISABLE_ACK;
        wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK CMSG_MOVE_GRAVITY_ENABLE_ACK;
        wrath::CMSG_EQUIPMENT_SET_USE CMSG_EQUIPMENT_SET_USE;
        wrath::CMSG_CHAR_FACTION_CHANGE CMSG_CHAR_FACTION_CHANGE;
        wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE;
        wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE;
        wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST CMSG_BATTLEFIELD_MGR_EXIT_REQUEST;
        wrath::MSG_SET_RAID_DIFFICULTY_Client MSG_SET_RAID_DIFFICULTY;
        wrath::CMSG_GMRESPONSE_RESOLVE CMSG_GMRESPONSE_RESOLVE;
        wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE CMSG_WORLD_STATE_UI_TIMER_UPDATE;
        wrath::CMSG_CHAR_RACE_CHANGE CMSG_CHAR_RACE_CHANGE;
        wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES CMSG_READY_FOR_ACCOUNT_DATA_TIMES;
        wrath::CMSG_QUERY_QUESTS_COMPLETED CMSG_QUERY_QUESTS_COMPLETED;
        wrath::CMSG_GM_REPORT_LAG CMSG_GM_REPORT_LAG;
        wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK CMSG_MOVE_SET_COLLISION_HGT_ACK;
    };

    bool is_none() const noexcept {
        return opcode == Opcode::NONE;
    }

    explicit ClientOpcode() : opcode(Opcode::NONE), CMSG_BOOTME() {}

    ClientOpcode(ClientOpcode&& other) noexcept {
        this->opcode = other.opcode;
        other.opcode = Opcode::NONE;
        if (opcode == Opcode::CMSG_BOOTME) {
            this->CMSG_BOOTME = std::move(other.CMSG_BOOTME);
        }
        if (opcode == Opcode::CMSG_DBLOOKUP) {
            this->CMSG_DBLOOKUP = std::move(other.CMSG_DBLOOKUP);
        }
        if (opcode == Opcode::CMSG_WORLD_TELEPORT) {
            this->CMSG_WORLD_TELEPORT = std::move(other.CMSG_WORLD_TELEPORT);
        }
        if (opcode == Opcode::CMSG_TELEPORT_TO_UNIT) {
            this->CMSG_TELEPORT_TO_UNIT = std::move(other.CMSG_TELEPORT_TO_UNIT);
        }
        if (opcode == Opcode::CMSG_CHAR_CREATE) {
            this->CMSG_CHAR_CREATE = std::move(other.CMSG_CHAR_CREATE);
        }
        if (opcode == Opcode::CMSG_CHAR_ENUM) {
            this->CMSG_CHAR_ENUM = std::move(other.CMSG_CHAR_ENUM);
        }
        if (opcode == Opcode::CMSG_CHAR_DELETE) {
            this->CMSG_CHAR_DELETE = std::move(other.CMSG_CHAR_DELETE);
        }
        if (opcode == Opcode::CMSG_PLAYER_LOGIN) {
            this->CMSG_PLAYER_LOGIN = std::move(other.CMSG_PLAYER_LOGIN);
        }
        if (opcode == Opcode::CMSG_PLAYER_LOGOUT) {
            this->CMSG_PLAYER_LOGOUT = std::move(other.CMSG_PLAYER_LOGOUT);
        }
        if (opcode == Opcode::CMSG_LOGOUT_REQUEST) {
            this->CMSG_LOGOUT_REQUEST = std::move(other.CMSG_LOGOUT_REQUEST);
        }
        if (opcode == Opcode::CMSG_LOGOUT_CANCEL) {
            this->CMSG_LOGOUT_CANCEL = std::move(other.CMSG_LOGOUT_CANCEL);
        }
        if (opcode == Opcode::CMSG_NAME_QUERY) {
            this->CMSG_NAME_QUERY = std::move(other.CMSG_NAME_QUERY);
        }
        if (opcode == Opcode::CMSG_PET_NAME_QUERY) {
            this->CMSG_PET_NAME_QUERY = std::move(other.CMSG_PET_NAME_QUERY);
        }
        if (opcode == Opcode::CMSG_GUILD_QUERY) {
            this->CMSG_GUILD_QUERY = std::move(other.CMSG_GUILD_QUERY);
        }
        if (opcode == Opcode::CMSG_ITEM_QUERY_SINGLE) {
            this->CMSG_ITEM_QUERY_SINGLE = std::move(other.CMSG_ITEM_QUERY_SINGLE);
        }
        if (opcode == Opcode::CMSG_PAGE_TEXT_QUERY) {
            this->CMSG_PAGE_TEXT_QUERY = std::move(other.CMSG_PAGE_TEXT_QUERY);
        }
        if (opcode == Opcode::CMSG_QUEST_QUERY) {
            this->CMSG_QUEST_QUERY = std::move(other.CMSG_QUEST_QUERY);
        }
        if (opcode == Opcode::CMSG_GAMEOBJECT_QUERY) {
            this->CMSG_GAMEOBJECT_QUERY = std::move(other.CMSG_GAMEOBJECT_QUERY);
        }
        if (opcode == Opcode::CMSG_CREATURE_QUERY) {
            this->CMSG_CREATURE_QUERY = std::move(other.CMSG_CREATURE_QUERY);
        }
        if (opcode == Opcode::CMSG_WHO) {
            this->CMSG_WHO = std::move(other.CMSG_WHO);
        }
        if (opcode == Opcode::CMSG_WHOIS) {
            this->CMSG_WHOIS = std::move(other.CMSG_WHOIS);
        }
        if (opcode == Opcode::CMSG_CONTACT_LIST) {
            this->CMSG_CONTACT_LIST = std::move(other.CMSG_CONTACT_LIST);
        }
        if (opcode == Opcode::CMSG_ADD_FRIEND) {
            this->CMSG_ADD_FRIEND = std::move(other.CMSG_ADD_FRIEND);
        }
        if (opcode == Opcode::CMSG_DEL_FRIEND) {
            this->CMSG_DEL_FRIEND = std::move(other.CMSG_DEL_FRIEND);
        }
        if (opcode == Opcode::CMSG_SET_CONTACT_NOTES) {
            this->CMSG_SET_CONTACT_NOTES = std::move(other.CMSG_SET_CONTACT_NOTES);
        }
        if (opcode == Opcode::CMSG_ADD_IGNORE) {
            this->CMSG_ADD_IGNORE = std::move(other.CMSG_ADD_IGNORE);
        }
        if (opcode == Opcode::CMSG_DEL_IGNORE) {
            this->CMSG_DEL_IGNORE = std::move(other.CMSG_DEL_IGNORE);
        }
        if (opcode == Opcode::CMSG_GROUP_INVITE) {
            this->CMSG_GROUP_INVITE = std::move(other.CMSG_GROUP_INVITE);
        }
        if (opcode == Opcode::CMSG_GROUP_CANCEL) {
            this->CMSG_GROUP_CANCEL = std::move(other.CMSG_GROUP_CANCEL);
        }
        if (opcode == Opcode::CMSG_GROUP_ACCEPT) {
            this->CMSG_GROUP_ACCEPT = std::move(other.CMSG_GROUP_ACCEPT);
        }
        if (opcode == Opcode::CMSG_GROUP_DECLINE) {
            this->CMSG_GROUP_DECLINE = std::move(other.CMSG_GROUP_DECLINE);
        }
        if (opcode == Opcode::CMSG_GROUP_UNINVITE) {
            this->CMSG_GROUP_UNINVITE = std::move(other.CMSG_GROUP_UNINVITE);
        }
        if (opcode == Opcode::CMSG_GROUP_UNINVITE_GUID) {
            this->CMSG_GROUP_UNINVITE_GUID = std::move(other.CMSG_GROUP_UNINVITE_GUID);
        }
        if (opcode == Opcode::CMSG_GROUP_SET_LEADER) {
            this->CMSG_GROUP_SET_LEADER = std::move(other.CMSG_GROUP_SET_LEADER);
        }
        if (opcode == Opcode::CMSG_LOOT_METHOD) {
            this->CMSG_LOOT_METHOD = std::move(other.CMSG_LOOT_METHOD);
        }
        if (opcode == Opcode::CMSG_GROUP_DISBAND) {
            this->CMSG_GROUP_DISBAND = std::move(other.CMSG_GROUP_DISBAND);
        }
        if (opcode == Opcode::CMSG_GUILD_CREATE) {
            this->CMSG_GUILD_CREATE = std::move(other.CMSG_GUILD_CREATE);
        }
        if (opcode == Opcode::CMSG_GUILD_INVITE) {
            this->CMSG_GUILD_INVITE = std::move(other.CMSG_GUILD_INVITE);
        }
        if (opcode == Opcode::CMSG_GUILD_ACCEPT) {
            this->CMSG_GUILD_ACCEPT = std::move(other.CMSG_GUILD_ACCEPT);
        }
        if (opcode == Opcode::CMSG_GUILD_DECLINE) {
            this->CMSG_GUILD_DECLINE = std::move(other.CMSG_GUILD_DECLINE);
        }
        if (opcode == Opcode::CMSG_GUILD_INFO) {
            this->CMSG_GUILD_INFO = std::move(other.CMSG_GUILD_INFO);
        }
        if (opcode == Opcode::CMSG_GUILD_ROSTER) {
            this->CMSG_GUILD_ROSTER = std::move(other.CMSG_GUILD_ROSTER);
        }
        if (opcode == Opcode::CMSG_GUILD_PROMOTE) {
            this->CMSG_GUILD_PROMOTE = std::move(other.CMSG_GUILD_PROMOTE);
        }
        if (opcode == Opcode::CMSG_GUILD_DEMOTE) {
            this->CMSG_GUILD_DEMOTE = std::move(other.CMSG_GUILD_DEMOTE);
        }
        if (opcode == Opcode::CMSG_GUILD_LEAVE) {
            this->CMSG_GUILD_LEAVE = std::move(other.CMSG_GUILD_LEAVE);
        }
        if (opcode == Opcode::CMSG_GUILD_REMOVE) {
            this->CMSG_GUILD_REMOVE = std::move(other.CMSG_GUILD_REMOVE);
        }
        if (opcode == Opcode::CMSG_GUILD_DISBAND) {
            this->CMSG_GUILD_DISBAND = std::move(other.CMSG_GUILD_DISBAND);
        }
        if (opcode == Opcode::CMSG_GUILD_LEADER) {
            this->CMSG_GUILD_LEADER = std::move(other.CMSG_GUILD_LEADER);
        }
        if (opcode == Opcode::CMSG_GUILD_MOTD) {
            this->CMSG_GUILD_MOTD = std::move(other.CMSG_GUILD_MOTD);
        }
        if (opcode == Opcode::CMSG_MESSAGECHAT) {
            this->CMSG_MESSAGECHAT = std::move(other.CMSG_MESSAGECHAT);
        }
        if (opcode == Opcode::CMSG_JOIN_CHANNEL) {
            this->CMSG_JOIN_CHANNEL = std::move(other.CMSG_JOIN_CHANNEL);
        }
        if (opcode == Opcode::CMSG_LEAVE_CHANNEL) {
            this->CMSG_LEAVE_CHANNEL = std::move(other.CMSG_LEAVE_CHANNEL);
        }
        if (opcode == Opcode::CMSG_CHANNEL_LIST) {
            this->CMSG_CHANNEL_LIST = std::move(other.CMSG_CHANNEL_LIST);
        }
        if (opcode == Opcode::CMSG_CHANNEL_PASSWORD) {
            this->CMSG_CHANNEL_PASSWORD = std::move(other.CMSG_CHANNEL_PASSWORD);
        }
        if (opcode == Opcode::CMSG_CHANNEL_SET_OWNER) {
            this->CMSG_CHANNEL_SET_OWNER = std::move(other.CMSG_CHANNEL_SET_OWNER);
        }
        if (opcode == Opcode::CMSG_CHANNEL_OWNER) {
            this->CMSG_CHANNEL_OWNER = std::move(other.CMSG_CHANNEL_OWNER);
        }
        if (opcode == Opcode::CMSG_CHANNEL_MODERATOR) {
            this->CMSG_CHANNEL_MODERATOR = std::move(other.CMSG_CHANNEL_MODERATOR);
        }
        if (opcode == Opcode::CMSG_CHANNEL_UNMODERATOR) {
            this->CMSG_CHANNEL_UNMODERATOR = std::move(other.CMSG_CHANNEL_UNMODERATOR);
        }
        if (opcode == Opcode::CMSG_CHANNEL_MUTE) {
            this->CMSG_CHANNEL_MUTE = std::move(other.CMSG_CHANNEL_MUTE);
        }
        if (opcode == Opcode::CMSG_CHANNEL_UNMUTE) {
            this->CMSG_CHANNEL_UNMUTE = std::move(other.CMSG_CHANNEL_UNMUTE);
        }
        if (opcode == Opcode::CMSG_CHANNEL_INVITE) {
            this->CMSG_CHANNEL_INVITE = std::move(other.CMSG_CHANNEL_INVITE);
        }
        if (opcode == Opcode::CMSG_CHANNEL_KICK) {
            this->CMSG_CHANNEL_KICK = std::move(other.CMSG_CHANNEL_KICK);
        }
        if (opcode == Opcode::CMSG_CHANNEL_BAN) {
            this->CMSG_CHANNEL_BAN = std::move(other.CMSG_CHANNEL_BAN);
        }
        if (opcode == Opcode::CMSG_CHANNEL_UNBAN) {
            this->CMSG_CHANNEL_UNBAN = std::move(other.CMSG_CHANNEL_UNBAN);
        }
        if (opcode == Opcode::CMSG_CHANNEL_ANNOUNCEMENTS) {
            this->CMSG_CHANNEL_ANNOUNCEMENTS = std::move(other.CMSG_CHANNEL_ANNOUNCEMENTS);
        }
        if (opcode == Opcode::CMSG_CHANNEL_MODERATE) {
            this->CMSG_CHANNEL_MODERATE = std::move(other.CMSG_CHANNEL_MODERATE);
        }
        if (opcode == Opcode::CMSG_USE_ITEM) {
            this->CMSG_USE_ITEM = std::move(other.CMSG_USE_ITEM);
        }
        if (opcode == Opcode::CMSG_OPEN_ITEM) {
            this->CMSG_OPEN_ITEM = std::move(other.CMSG_OPEN_ITEM);
        }
        if (opcode == Opcode::CMSG_READ_ITEM) {
            this->CMSG_READ_ITEM = std::move(other.CMSG_READ_ITEM);
        }
        if (opcode == Opcode::CMSG_GAMEOBJ_USE) {
            this->CMSG_GAMEOBJ_USE = std::move(other.CMSG_GAMEOBJ_USE);
        }
        if (opcode == Opcode::CMSG_AREATRIGGER) {
            this->CMSG_AREATRIGGER = std::move(other.CMSG_AREATRIGGER);
        }
        if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
            this->MSG_MOVE_START_FORWARD = std::move(other.MSG_MOVE_START_FORWARD);
        }
        if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
            this->MSG_MOVE_START_BACKWARD = std::move(other.MSG_MOVE_START_BACKWARD);
        }
        if (opcode == Opcode::MSG_MOVE_STOP) {
            this->MSG_MOVE_STOP = std::move(other.MSG_MOVE_STOP);
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
            this->MSG_MOVE_START_STRAFE_LEFT = std::move(other.MSG_MOVE_START_STRAFE_LEFT);
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
            this->MSG_MOVE_START_STRAFE_RIGHT = std::move(other.MSG_MOVE_START_STRAFE_RIGHT);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
            this->MSG_MOVE_STOP_STRAFE = std::move(other.MSG_MOVE_STOP_STRAFE);
        }
        if (opcode == Opcode::MSG_MOVE_JUMP) {
            this->MSG_MOVE_JUMP = std::move(other.MSG_MOVE_JUMP);
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
            this->MSG_MOVE_START_TURN_LEFT = std::move(other.MSG_MOVE_START_TURN_LEFT);
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
            this->MSG_MOVE_START_TURN_RIGHT = std::move(other.MSG_MOVE_START_TURN_RIGHT);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
            this->MSG_MOVE_STOP_TURN = std::move(other.MSG_MOVE_STOP_TURN);
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
            this->MSG_MOVE_START_PITCH_UP = std::move(other.MSG_MOVE_START_PITCH_UP);
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
            this->MSG_MOVE_START_PITCH_DOWN = std::move(other.MSG_MOVE_START_PITCH_DOWN);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
            this->MSG_MOVE_STOP_PITCH = std::move(other.MSG_MOVE_STOP_PITCH);
        }
        if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
            this->MSG_MOVE_SET_RUN_MODE = std::move(other.MSG_MOVE_SET_RUN_MODE);
        }
        if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
            this->MSG_MOVE_SET_WALK_MODE = std::move(other.MSG_MOVE_SET_WALK_MODE);
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT) {
            this->MSG_MOVE_TELEPORT = std::move(other.MSG_MOVE_TELEPORT);
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
            this->MSG_MOVE_TELEPORT_ACK = std::move(other.MSG_MOVE_TELEPORT_ACK);
        }
        if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
            this->MSG_MOVE_FALL_LAND = std::move(other.MSG_MOVE_FALL_LAND);
        }
        if (opcode == Opcode::MSG_MOVE_START_SWIM) {
            this->MSG_MOVE_START_SWIM = std::move(other.MSG_MOVE_START_SWIM);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
            this->MSG_MOVE_STOP_SWIM = std::move(other.MSG_MOVE_STOP_SWIM);
        }
        if (opcode == Opcode::MSG_MOVE_SET_FACING) {
            this->MSG_MOVE_SET_FACING = std::move(other.MSG_MOVE_SET_FACING);
        }
        if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
            this->MSG_MOVE_SET_PITCH = std::move(other.MSG_MOVE_SET_PITCH);
        }
        if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
            this->MSG_MOVE_WORLDPORT_ACK = std::move(other.MSG_MOVE_WORLDPORT_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_SET_RAW_POSITION) {
            this->CMSG_MOVE_SET_RAW_POSITION = std::move(other.CMSG_MOVE_SET_RAW_POSITION);
        }
        if (opcode == Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_RUN_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_RUN_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_SWIM_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_SWIM_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_MOVE_ROOT_ACK) {
            this->CMSG_FORCE_MOVE_ROOT_ACK = std::move(other.CMSG_FORCE_MOVE_ROOT_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_MOVE_UNROOT_ACK) {
            this->CMSG_FORCE_MOVE_UNROOT_ACK = std::move(other.CMSG_FORCE_MOVE_UNROOT_ACK);
        }
        if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
            this->MSG_MOVE_HEARTBEAT = std::move(other.MSG_MOVE_HEARTBEAT);
        }
        if (opcode == Opcode::CMSG_MOVE_KNOCK_BACK_ACK) {
            this->CMSG_MOVE_KNOCK_BACK_ACK = std::move(other.CMSG_MOVE_KNOCK_BACK_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_HOVER_ACK) {
            this->CMSG_MOVE_HOVER_ACK = std::move(other.CMSG_MOVE_HOVER_ACK);
        }
        if (opcode == Opcode::MSG_MOVE_HOVER) {
            this->MSG_MOVE_HOVER = std::move(other.MSG_MOVE_HOVER);
        }
        if (opcode == Opcode::CMSG_NEXT_CINEMATIC_CAMERA) {
            this->CMSG_NEXT_CINEMATIC_CAMERA = std::move(other.CMSG_NEXT_CINEMATIC_CAMERA);
        }
        if (opcode == Opcode::CMSG_COMPLETE_CINEMATIC) {
            this->CMSG_COMPLETE_CINEMATIC = std::move(other.CMSG_COMPLETE_CINEMATIC);
        }
        if (opcode == Opcode::CMSG_TUTORIAL_FLAG) {
            this->CMSG_TUTORIAL_FLAG = std::move(other.CMSG_TUTORIAL_FLAG);
        }
        if (opcode == Opcode::CMSG_TUTORIAL_CLEAR) {
            this->CMSG_TUTORIAL_CLEAR = std::move(other.CMSG_TUTORIAL_CLEAR);
        }
        if (opcode == Opcode::CMSG_TUTORIAL_RESET) {
            this->CMSG_TUTORIAL_RESET = std::move(other.CMSG_TUTORIAL_RESET);
        }
        if (opcode == Opcode::CMSG_STANDSTATECHANGE) {
            this->CMSG_STANDSTATECHANGE = std::move(other.CMSG_STANDSTATECHANGE);
        }
        if (opcode == Opcode::CMSG_EMOTE) {
            this->CMSG_EMOTE = std::move(other.CMSG_EMOTE);
        }
        if (opcode == Opcode::CMSG_TEXT_EMOTE) {
            this->CMSG_TEXT_EMOTE = std::move(other.CMSG_TEXT_EMOTE);
        }
        if (opcode == Opcode::CMSG_AUTOSTORE_LOOT_ITEM) {
            this->CMSG_AUTOSTORE_LOOT_ITEM = std::move(other.CMSG_AUTOSTORE_LOOT_ITEM);
        }
        if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM) {
            this->CMSG_AUTOEQUIP_ITEM = std::move(other.CMSG_AUTOEQUIP_ITEM);
        }
        if (opcode == Opcode::CMSG_AUTOSTORE_BAG_ITEM) {
            this->CMSG_AUTOSTORE_BAG_ITEM = std::move(other.CMSG_AUTOSTORE_BAG_ITEM);
        }
        if (opcode == Opcode::CMSG_SWAP_ITEM) {
            this->CMSG_SWAP_ITEM = std::move(other.CMSG_SWAP_ITEM);
        }
        if (opcode == Opcode::CMSG_SWAP_INV_ITEM) {
            this->CMSG_SWAP_INV_ITEM = std::move(other.CMSG_SWAP_INV_ITEM);
        }
        if (opcode == Opcode::CMSG_SPLIT_ITEM) {
            this->CMSG_SPLIT_ITEM = std::move(other.CMSG_SPLIT_ITEM);
        }
        if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM_SLOT) {
            this->CMSG_AUTOEQUIP_ITEM_SLOT = std::move(other.CMSG_AUTOEQUIP_ITEM_SLOT);
        }
        if (opcode == Opcode::CMSG_DESTROYITEM) {
            this->CMSG_DESTROYITEM = std::move(other.CMSG_DESTROYITEM);
        }
        if (opcode == Opcode::CMSG_INSPECT) {
            this->CMSG_INSPECT = std::move(other.CMSG_INSPECT);
        }
        if (opcode == Opcode::CMSG_INITIATE_TRADE) {
            this->CMSG_INITIATE_TRADE = std::move(other.CMSG_INITIATE_TRADE);
        }
        if (opcode == Opcode::CMSG_BEGIN_TRADE) {
            this->CMSG_BEGIN_TRADE = std::move(other.CMSG_BEGIN_TRADE);
        }
        if (opcode == Opcode::CMSG_BUSY_TRADE) {
            this->CMSG_BUSY_TRADE = std::move(other.CMSG_BUSY_TRADE);
        }
        if (opcode == Opcode::CMSG_IGNORE_TRADE) {
            this->CMSG_IGNORE_TRADE = std::move(other.CMSG_IGNORE_TRADE);
        }
        if (opcode == Opcode::CMSG_ACCEPT_TRADE) {
            this->CMSG_ACCEPT_TRADE = std::move(other.CMSG_ACCEPT_TRADE);
        }
        if (opcode == Opcode::CMSG_UNACCEPT_TRADE) {
            this->CMSG_UNACCEPT_TRADE = std::move(other.CMSG_UNACCEPT_TRADE);
        }
        if (opcode == Opcode::CMSG_CANCEL_TRADE) {
            this->CMSG_CANCEL_TRADE = std::move(other.CMSG_CANCEL_TRADE);
        }
        if (opcode == Opcode::CMSG_SET_TRADE_ITEM) {
            this->CMSG_SET_TRADE_ITEM = std::move(other.CMSG_SET_TRADE_ITEM);
        }
        if (opcode == Opcode::CMSG_CLEAR_TRADE_ITEM) {
            this->CMSG_CLEAR_TRADE_ITEM = std::move(other.CMSG_CLEAR_TRADE_ITEM);
        }
        if (opcode == Opcode::CMSG_SET_TRADE_GOLD) {
            this->CMSG_SET_TRADE_GOLD = std::move(other.CMSG_SET_TRADE_GOLD);
        }
        if (opcode == Opcode::CMSG_SET_FACTION_ATWAR) {
            this->CMSG_SET_FACTION_ATWAR = std::move(other.CMSG_SET_FACTION_ATWAR);
        }
        if (opcode == Opcode::CMSG_SET_ACTION_BUTTON) {
            this->CMSG_SET_ACTION_BUTTON = std::move(other.CMSG_SET_ACTION_BUTTON);
        }
        if (opcode == Opcode::CMSG_CAST_SPELL) {
            this->CMSG_CAST_SPELL = std::move(other.CMSG_CAST_SPELL);
        }
        if (opcode == Opcode::CMSG_CANCEL_CAST) {
            this->CMSG_CANCEL_CAST = std::move(other.CMSG_CANCEL_CAST);
        }
        if (opcode == Opcode::CMSG_CANCEL_AURA) {
            this->CMSG_CANCEL_AURA = std::move(other.CMSG_CANCEL_AURA);
        }
        if (opcode == Opcode::CMSG_CANCEL_CHANNELLING) {
            this->CMSG_CANCEL_CHANNELLING = std::move(other.CMSG_CANCEL_CHANNELLING);
        }
        if (opcode == Opcode::CMSG_SET_SELECTION) {
            this->CMSG_SET_SELECTION = std::move(other.CMSG_SET_SELECTION);
        }
        if (opcode == Opcode::CMSG_DELETEEQUIPMENT_SET) {
            this->CMSG_DELETEEQUIPMENT_SET = std::move(other.CMSG_DELETEEQUIPMENT_SET);
        }
        if (opcode == Opcode::CMSG_INSTANCE_LOCK_RESPONSE) {
            this->CMSG_INSTANCE_LOCK_RESPONSE = std::move(other.CMSG_INSTANCE_LOCK_RESPONSE);
        }
        if (opcode == Opcode::CMSG_ATTACKSWING) {
            this->CMSG_ATTACKSWING = std::move(other.CMSG_ATTACKSWING);
        }
        if (opcode == Opcode::CMSG_ATTACKSTOP) {
            this->CMSG_ATTACKSTOP = std::move(other.CMSG_ATTACKSTOP);
        }
        if (opcode == Opcode::CMSG_REPOP_REQUEST) {
            this->CMSG_REPOP_REQUEST = std::move(other.CMSG_REPOP_REQUEST);
        }
        if (opcode == Opcode::CMSG_RESURRECT_RESPONSE) {
            this->CMSG_RESURRECT_RESPONSE = std::move(other.CMSG_RESURRECT_RESPONSE);
        }
        if (opcode == Opcode::CMSG_LOOT) {
            this->CMSG_LOOT = std::move(other.CMSG_LOOT);
        }
        if (opcode == Opcode::CMSG_LOOT_MONEY) {
            this->CMSG_LOOT_MONEY = std::move(other.CMSG_LOOT_MONEY);
        }
        if (opcode == Opcode::CMSG_LOOT_RELEASE) {
            this->CMSG_LOOT_RELEASE = std::move(other.CMSG_LOOT_RELEASE);
        }
        if (opcode == Opcode::CMSG_DUEL_ACCEPTED) {
            this->CMSG_DUEL_ACCEPTED = std::move(other.CMSG_DUEL_ACCEPTED);
        }
        if (opcode == Opcode::CMSG_DUEL_CANCELLED) {
            this->CMSG_DUEL_CANCELLED = std::move(other.CMSG_DUEL_CANCELLED);
        }
        if (opcode == Opcode::CMSG_MOUNTSPECIAL_ANIM) {
            this->CMSG_MOUNTSPECIAL_ANIM = std::move(other.CMSG_MOUNTSPECIAL_ANIM);
        }
        if (opcode == Opcode::CMSG_PET_SET_ACTION) {
            this->CMSG_PET_SET_ACTION = std::move(other.CMSG_PET_SET_ACTION);
        }
        if (opcode == Opcode::CMSG_PET_ACTION) {
            this->CMSG_PET_ACTION = std::move(other.CMSG_PET_ACTION);
        }
        if (opcode == Opcode::CMSG_PET_ABANDON) {
            this->CMSG_PET_ABANDON = std::move(other.CMSG_PET_ABANDON);
        }
        if (opcode == Opcode::CMSG_PET_RENAME) {
            this->CMSG_PET_RENAME = std::move(other.CMSG_PET_RENAME);
        }
        if (opcode == Opcode::CMSG_GOSSIP_HELLO) {
            this->CMSG_GOSSIP_HELLO = std::move(other.CMSG_GOSSIP_HELLO);
        }
        if (opcode == Opcode::CMSG_GOSSIP_SELECT_OPTION) {
            this->CMSG_GOSSIP_SELECT_OPTION = std::move(other.CMSG_GOSSIP_SELECT_OPTION);
        }
        if (opcode == Opcode::CMSG_NPC_TEXT_QUERY) {
            this->CMSG_NPC_TEXT_QUERY = std::move(other.CMSG_NPC_TEXT_QUERY);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_QUERY) {
            this->CMSG_QUESTGIVER_STATUS_QUERY = std::move(other.CMSG_QUESTGIVER_STATUS_QUERY);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_HELLO) {
            this->CMSG_QUESTGIVER_HELLO = std::move(other.CMSG_QUESTGIVER_HELLO);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_QUERY_QUEST) {
            this->CMSG_QUESTGIVER_QUERY_QUEST = std::move(other.CMSG_QUESTGIVER_QUERY_QUEST);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) {
            this->CMSG_QUESTGIVER_QUEST_AUTOLAUNCH = std::move(other.CMSG_QUESTGIVER_QUEST_AUTOLAUNCH);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST) {
            this->CMSG_QUESTGIVER_ACCEPT_QUEST = std::move(other.CMSG_QUESTGIVER_ACCEPT_QUEST);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST) {
            this->CMSG_QUESTGIVER_COMPLETE_QUEST = std::move(other.CMSG_QUESTGIVER_COMPLETE_QUEST);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_REQUEST_REWARD) {
            this->CMSG_QUESTGIVER_REQUEST_REWARD = std::move(other.CMSG_QUESTGIVER_REQUEST_REWARD);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD) {
            this->CMSG_QUESTGIVER_CHOOSE_REWARD = std::move(other.CMSG_QUESTGIVER_CHOOSE_REWARD);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_CANCEL) {
            this->CMSG_QUESTGIVER_CANCEL = std::move(other.CMSG_QUESTGIVER_CANCEL);
        }
        if (opcode == Opcode::CMSG_QUESTLOG_SWAP_QUEST) {
            this->CMSG_QUESTLOG_SWAP_QUEST = std::move(other.CMSG_QUESTLOG_SWAP_QUEST);
        }
        if (opcode == Opcode::CMSG_QUESTLOG_REMOVE_QUEST) {
            this->CMSG_QUESTLOG_REMOVE_QUEST = std::move(other.CMSG_QUESTLOG_REMOVE_QUEST);
        }
        if (opcode == Opcode::CMSG_QUEST_CONFIRM_ACCEPT) {
            this->CMSG_QUEST_CONFIRM_ACCEPT = std::move(other.CMSG_QUEST_CONFIRM_ACCEPT);
        }
        if (opcode == Opcode::CMSG_PUSHQUESTTOPARTY) {
            this->CMSG_PUSHQUESTTOPARTY = std::move(other.CMSG_PUSHQUESTTOPARTY);
        }
        if (opcode == Opcode::CMSG_LIST_INVENTORY) {
            this->CMSG_LIST_INVENTORY = std::move(other.CMSG_LIST_INVENTORY);
        }
        if (opcode == Opcode::CMSG_SELL_ITEM) {
            this->CMSG_SELL_ITEM = std::move(other.CMSG_SELL_ITEM);
        }
        if (opcode == Opcode::CMSG_BUY_ITEM) {
            this->CMSG_BUY_ITEM = std::move(other.CMSG_BUY_ITEM);
        }
        if (opcode == Opcode::CMSG_BUY_ITEM_IN_SLOT) {
            this->CMSG_BUY_ITEM_IN_SLOT = std::move(other.CMSG_BUY_ITEM_IN_SLOT);
        }
        if (opcode == Opcode::CMSG_TAXINODE_STATUS_QUERY) {
            this->CMSG_TAXINODE_STATUS_QUERY = std::move(other.CMSG_TAXINODE_STATUS_QUERY);
        }
        if (opcode == Opcode::CMSG_TAXIQUERYAVAILABLENODES) {
            this->CMSG_TAXIQUERYAVAILABLENODES = std::move(other.CMSG_TAXIQUERYAVAILABLENODES);
        }
        if (opcode == Opcode::CMSG_ACTIVATETAXI) {
            this->CMSG_ACTIVATETAXI = std::move(other.CMSG_ACTIVATETAXI);
        }
        if (opcode == Opcode::CMSG_TRAINER_LIST) {
            this->CMSG_TRAINER_LIST = std::move(other.CMSG_TRAINER_LIST);
        }
        if (opcode == Opcode::CMSG_TRAINER_BUY_SPELL) {
            this->CMSG_TRAINER_BUY_SPELL = std::move(other.CMSG_TRAINER_BUY_SPELL);
        }
        if (opcode == Opcode::CMSG_BINDER_ACTIVATE) {
            this->CMSG_BINDER_ACTIVATE = std::move(other.CMSG_BINDER_ACTIVATE);
        }
        if (opcode == Opcode::CMSG_BANKER_ACTIVATE) {
            this->CMSG_BANKER_ACTIVATE = std::move(other.CMSG_BANKER_ACTIVATE);
        }
        if (opcode == Opcode::CMSG_BUY_BANK_SLOT) {
            this->CMSG_BUY_BANK_SLOT = std::move(other.CMSG_BUY_BANK_SLOT);
        }
        if (opcode == Opcode::CMSG_PETITION_SHOWLIST) {
            this->CMSG_PETITION_SHOWLIST = std::move(other.CMSG_PETITION_SHOWLIST);
        }
        if (opcode == Opcode::CMSG_PETITION_BUY) {
            this->CMSG_PETITION_BUY = std::move(other.CMSG_PETITION_BUY);
        }
        if (opcode == Opcode::CMSG_PETITION_SHOW_SIGNATURES) {
            this->CMSG_PETITION_SHOW_SIGNATURES = std::move(other.CMSG_PETITION_SHOW_SIGNATURES);
        }
        if (opcode == Opcode::CMSG_PETITION_SIGN) {
            this->CMSG_PETITION_SIGN = std::move(other.CMSG_PETITION_SIGN);
        }
        if (opcode == Opcode::MSG_PETITION_DECLINE) {
            this->MSG_PETITION_DECLINE = std::move(other.MSG_PETITION_DECLINE);
        }
        if (opcode == Opcode::CMSG_OFFER_PETITION) {
            this->CMSG_OFFER_PETITION = std::move(other.CMSG_OFFER_PETITION);
        }
        if (opcode == Opcode::CMSG_TURN_IN_PETITION) {
            this->CMSG_TURN_IN_PETITION = std::move(other.CMSG_TURN_IN_PETITION);
        }
        if (opcode == Opcode::CMSG_PETITION_QUERY) {
            this->CMSG_PETITION_QUERY = std::move(other.CMSG_PETITION_QUERY);
        }
        if (opcode == Opcode::CMSG_BUG) {
            this->CMSG_BUG = std::move(other.CMSG_BUG);
        }
        if (opcode == Opcode::CMSG_PLAYED_TIME) {
            this->CMSG_PLAYED_TIME = std::move(other.CMSG_PLAYED_TIME);
        }
        if (opcode == Opcode::CMSG_QUERY_TIME) {
            this->CMSG_QUERY_TIME = std::move(other.CMSG_QUERY_TIME);
        }
        if (opcode == Opcode::CMSG_RECLAIM_CORPSE) {
            this->CMSG_RECLAIM_CORPSE = std::move(other.CMSG_RECLAIM_CORPSE);
        }
        if (opcode == Opcode::CMSG_WRAP_ITEM) {
            this->CMSG_WRAP_ITEM = std::move(other.CMSG_WRAP_ITEM);
        }
        if (opcode == Opcode::MSG_MINIMAP_PING) {
            this->MSG_MINIMAP_PING = std::move(other.MSG_MINIMAP_PING);
        }
        if (opcode == Opcode::CMSG_PING) {
            this->CMSG_PING = std::move(other.CMSG_PING);
        }
        if (opcode == Opcode::CMSG_SETSHEATHED) {
            this->CMSG_SETSHEATHED = std::move(other.CMSG_SETSHEATHED);
        }
        if (opcode == Opcode::CMSG_QUEST_POI_QUERY) {
            this->CMSG_QUEST_POI_QUERY = std::move(other.CMSG_QUEST_POI_QUERY);
        }
        if (opcode == Opcode::CMSG_AUTH_SESSION) {
            this->CMSG_AUTH_SESSION = std::move(other.CMSG_AUTH_SESSION);
        }
        if (opcode == Opcode::CMSG_PET_CAST_SPELL) {
            this->CMSG_PET_CAST_SPELL = std::move(other.CMSG_PET_CAST_SPELL);
        }
        if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
            this->MSG_SAVE_GUILD_EMBLEM = std::move(other.MSG_SAVE_GUILD_EMBLEM);
        }
        if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
            this->MSG_TABARDVENDOR_ACTIVATE = std::move(other.MSG_TABARDVENDOR_ACTIVATE);
        }
        if (opcode == Opcode::CMSG_ZONEUPDATE) {
            this->CMSG_ZONEUPDATE = std::move(other.CMSG_ZONEUPDATE);
        }
        if (opcode == Opcode::MSG_RANDOM_ROLL) {
            this->MSG_RANDOM_ROLL = std::move(other.MSG_RANDOM_ROLL);
        }
        if (opcode == Opcode::CMSG_UNLEARN_SKILL) {
            this->CMSG_UNLEARN_SKILL = std::move(other.CMSG_UNLEARN_SKILL);
        }
        if (opcode == Opcode::CMSG_GMTICKET_CREATE) {
            this->CMSG_GMTICKET_CREATE = std::move(other.CMSG_GMTICKET_CREATE);
        }
        if (opcode == Opcode::CMSG_GMTICKET_UPDATETEXT) {
            this->CMSG_GMTICKET_UPDATETEXT = std::move(other.CMSG_GMTICKET_UPDATETEXT);
        }
        if (opcode == Opcode::CMSG_REQUEST_ACCOUNT_DATA) {
            this->CMSG_REQUEST_ACCOUNT_DATA = std::move(other.CMSG_REQUEST_ACCOUNT_DATA);
        }
        if (opcode == Opcode::CMSG_UPDATE_ACCOUNT_DATA) {
            this->CMSG_UPDATE_ACCOUNT_DATA = std::move(other.CMSG_UPDATE_ACCOUNT_DATA);
        }
        if (opcode == Opcode::CMSG_GMTICKET_GETTICKET) {
            this->CMSG_GMTICKET_GETTICKET = std::move(other.CMSG_GMTICKET_GETTICKET);
        }
        if (opcode == Opcode::CMSG_UNLEARN_TALENTS) {
            this->CMSG_UNLEARN_TALENTS = std::move(other.CMSG_UNLEARN_TALENTS);
        }
        if (opcode == Opcode::MSG_CORPSE_QUERY) {
            this->MSG_CORPSE_QUERY = std::move(other.MSG_CORPSE_QUERY);
        }
        if (opcode == Opcode::CMSG_GMTICKET_DELETETICKET) {
            this->CMSG_GMTICKET_DELETETICKET = std::move(other.CMSG_GMTICKET_DELETETICKET);
        }
        if (opcode == Opcode::CMSG_GMTICKET_SYSTEMSTATUS) {
            this->CMSG_GMTICKET_SYSTEMSTATUS = std::move(other.CMSG_GMTICKET_SYSTEMSTATUS);
        }
        if (opcode == Opcode::CMSG_SPIRIT_HEALER_ACTIVATE) {
            this->CMSG_SPIRIT_HEALER_ACTIVATE = std::move(other.CMSG_SPIRIT_HEALER_ACTIVATE);
        }
        if (opcode == Opcode::CMSG_CHAT_IGNORED) {
            this->CMSG_CHAT_IGNORED = std::move(other.CMSG_CHAT_IGNORED);
        }
        if (opcode == Opcode::CMSG_GUILD_RANK) {
            this->CMSG_GUILD_RANK = std::move(other.CMSG_GUILD_RANK);
        }
        if (opcode == Opcode::CMSG_GUILD_ADD_RANK) {
            this->CMSG_GUILD_ADD_RANK = std::move(other.CMSG_GUILD_ADD_RANK);
        }
        if (opcode == Opcode::CMSG_GUILD_DEL_RANK) {
            this->CMSG_GUILD_DEL_RANK = std::move(other.CMSG_GUILD_DEL_RANK);
        }
        if (opcode == Opcode::CMSG_GUILD_SET_PUBLIC_NOTE) {
            this->CMSG_GUILD_SET_PUBLIC_NOTE = std::move(other.CMSG_GUILD_SET_PUBLIC_NOTE);
        }
        if (opcode == Opcode::CMSG_GUILD_SET_OFFICER_NOTE) {
            this->CMSG_GUILD_SET_OFFICER_NOTE = std::move(other.CMSG_GUILD_SET_OFFICER_NOTE);
        }
        if (opcode == Opcode::CMSG_SEND_MAIL) {
            this->CMSG_SEND_MAIL = std::move(other.CMSG_SEND_MAIL);
        }
        if (opcode == Opcode::CMSG_GET_MAIL_LIST) {
            this->CMSG_GET_MAIL_LIST = std::move(other.CMSG_GET_MAIL_LIST);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_LIST) {
            this->CMSG_BATTLEFIELD_LIST = std::move(other.CMSG_BATTLEFIELD_LIST);
        }
        if (opcode == Opcode::CMSG_ITEM_TEXT_QUERY) {
            this->CMSG_ITEM_TEXT_QUERY = std::move(other.CMSG_ITEM_TEXT_QUERY);
        }
        if (opcode == Opcode::CMSG_MAIL_TAKE_MONEY) {
            this->CMSG_MAIL_TAKE_MONEY = std::move(other.CMSG_MAIL_TAKE_MONEY);
        }
        if (opcode == Opcode::CMSG_MAIL_TAKE_ITEM) {
            this->CMSG_MAIL_TAKE_ITEM = std::move(other.CMSG_MAIL_TAKE_ITEM);
        }
        if (opcode == Opcode::CMSG_MAIL_MARK_AS_READ) {
            this->CMSG_MAIL_MARK_AS_READ = std::move(other.CMSG_MAIL_MARK_AS_READ);
        }
        if (opcode == Opcode::CMSG_MAIL_RETURN_TO_SENDER) {
            this->CMSG_MAIL_RETURN_TO_SENDER = std::move(other.CMSG_MAIL_RETURN_TO_SENDER);
        }
        if (opcode == Opcode::CMSG_MAIL_DELETE) {
            this->CMSG_MAIL_DELETE = std::move(other.CMSG_MAIL_DELETE);
        }
        if (opcode == Opcode::CMSG_MAIL_CREATE_TEXT_ITEM) {
            this->CMSG_MAIL_CREATE_TEXT_ITEM = std::move(other.CMSG_MAIL_CREATE_TEXT_ITEM);
        }
        if (opcode == Opcode::CMSG_LEARN_TALENT) {
            this->CMSG_LEARN_TALENT = std::move(other.CMSG_LEARN_TALENT);
        }
        if (opcode == Opcode::CMSG_TOGGLE_PVP) {
            this->CMSG_TOGGLE_PVP = std::move(other.CMSG_TOGGLE_PVP);
        }
        if (opcode == Opcode::MSG_AUCTION_HELLO) {
            this->MSG_AUCTION_HELLO = std::move(other.MSG_AUCTION_HELLO);
        }
        if (opcode == Opcode::CMSG_AUCTION_SELL_ITEM) {
            this->CMSG_AUCTION_SELL_ITEM = std::move(other.CMSG_AUCTION_SELL_ITEM);
        }
        if (opcode == Opcode::CMSG_AUCTION_REMOVE_ITEM) {
            this->CMSG_AUCTION_REMOVE_ITEM = std::move(other.CMSG_AUCTION_REMOVE_ITEM);
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_ITEMS) {
            this->CMSG_AUCTION_LIST_ITEMS = std::move(other.CMSG_AUCTION_LIST_ITEMS);
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS) {
            this->CMSG_AUCTION_LIST_OWNER_ITEMS = std::move(other.CMSG_AUCTION_LIST_OWNER_ITEMS);
        }
        if (opcode == Opcode::CMSG_AUCTION_PLACE_BID) {
            this->CMSG_AUCTION_PLACE_BID = std::move(other.CMSG_AUCTION_PLACE_BID);
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS) {
            this->CMSG_AUCTION_LIST_BIDDER_ITEMS = std::move(other.CMSG_AUCTION_LIST_BIDDER_ITEMS);
        }
        if (opcode == Opcode::CMSG_SET_AMMO) {
            this->CMSG_SET_AMMO = std::move(other.CMSG_SET_AMMO);
        }
        if (opcode == Opcode::CMSG_SET_ACTIVE_MOVER) {
            this->CMSG_SET_ACTIVE_MOVER = std::move(other.CMSG_SET_ACTIVE_MOVER);
        }
        if (opcode == Opcode::CMSG_PET_CANCEL_AURA) {
            this->CMSG_PET_CANCEL_AURA = std::move(other.CMSG_PET_CANCEL_AURA);
        }
        if (opcode == Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL) {
            this->CMSG_CANCEL_AUTO_REPEAT_SPELL = std::move(other.CMSG_CANCEL_AUTO_REPEAT_SPELL);
        }
        if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
            this->MSG_LIST_STABLED_PETS = std::move(other.MSG_LIST_STABLED_PETS);
        }
        if (opcode == Opcode::CMSG_STABLE_PET) {
            this->CMSG_STABLE_PET = std::move(other.CMSG_STABLE_PET);
        }
        if (opcode == Opcode::CMSG_UNSTABLE_PET) {
            this->CMSG_UNSTABLE_PET = std::move(other.CMSG_UNSTABLE_PET);
        }
        if (opcode == Opcode::CMSG_BUY_STABLE_SLOT) {
            this->CMSG_BUY_STABLE_SLOT = std::move(other.CMSG_BUY_STABLE_SLOT);
        }
        if (opcode == Opcode::CMSG_STABLE_SWAP_PET) {
            this->CMSG_STABLE_SWAP_PET = std::move(other.CMSG_STABLE_SWAP_PET);
        }
        if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
            this->MSG_QUEST_PUSH_RESULT = std::move(other.MSG_QUEST_PUSH_RESULT);
        }
        if (opcode == Opcode::CMSG_REQUEST_PET_INFO) {
            this->CMSG_REQUEST_PET_INFO = std::move(other.CMSG_REQUEST_PET_INFO);
        }
        if (opcode == Opcode::CMSG_FAR_SIGHT) {
            this->CMSG_FAR_SIGHT = std::move(other.CMSG_FAR_SIGHT);
        }
        if (opcode == Opcode::CMSG_GROUP_CHANGE_SUB_GROUP) {
            this->CMSG_GROUP_CHANGE_SUB_GROUP = std::move(other.CMSG_GROUP_CHANGE_SUB_GROUP);
        }
        if (opcode == Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS) {
            this->CMSG_REQUEST_PARTY_MEMBER_STATS = std::move(other.CMSG_REQUEST_PARTY_MEMBER_STATS);
        }
        if (opcode == Opcode::CMSG_GROUP_SWAP_SUB_GROUP) {
            this->CMSG_GROUP_SWAP_SUB_GROUP = std::move(other.CMSG_GROUP_SWAP_SUB_GROUP);
        }
        if (opcode == Opcode::CMSG_AUTOSTORE_BANK_ITEM) {
            this->CMSG_AUTOSTORE_BANK_ITEM = std::move(other.CMSG_AUTOSTORE_BANK_ITEM);
        }
        if (opcode == Opcode::CMSG_AUTOBANK_ITEM) {
            this->CMSG_AUTOBANK_ITEM = std::move(other.CMSG_AUTOBANK_ITEM);
        }
        if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
            this->MSG_QUERY_NEXT_MAIL_TIME = std::move(other.MSG_QUERY_NEXT_MAIL_TIME);
        }
        if (opcode == Opcode::CMSG_GROUP_RAID_CONVERT) {
            this->CMSG_GROUP_RAID_CONVERT = std::move(other.CMSG_GROUP_RAID_CONVERT);
        }
        if (opcode == Opcode::CMSG_GROUP_ASSISTANT_LEADER) {
            this->CMSG_GROUP_ASSISTANT_LEADER = std::move(other.CMSG_GROUP_ASSISTANT_LEADER);
        }
        if (opcode == Opcode::CMSG_BUYBACK_ITEM) {
            this->CMSG_BUYBACK_ITEM = std::move(other.CMSG_BUYBACK_ITEM);
        }
        if (opcode == Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND) {
            this->CMSG_SET_SAVED_INSTANCE_EXTEND = std::move(other.CMSG_SET_SAVED_INSTANCE_EXTEND);
        }
        if (opcode == Opcode::CMSG_LFG_GET_STATUS) {
            this->CMSG_LFG_GET_STATUS = std::move(other.CMSG_LFG_GET_STATUS);
        }
        if (opcode == Opcode::CMSG_GMTICKETSYSTEM_TOGGLE) {
            this->CMSG_GMTICKETSYSTEM_TOGGLE = std::move(other.CMSG_GMTICKETSYSTEM_TOGGLE);
        }
        if (opcode == Opcode::CMSG_CANCEL_GROWTH_AURA) {
            this->CMSG_CANCEL_GROWTH_AURA = std::move(other.CMSG_CANCEL_GROWTH_AURA);
        }
        if (opcode == Opcode::CMSG_LOOT_ROLL) {
            this->CMSG_LOOT_ROLL = std::move(other.CMSG_LOOT_ROLL);
        }
        if (opcode == Opcode::CMSG_LOOT_MASTER_GIVE) {
            this->CMSG_LOOT_MASTER_GIVE = std::move(other.CMSG_LOOT_MASTER_GIVE);
        }
        if (opcode == Opcode::CMSG_REPAIR_ITEM) {
            this->CMSG_REPAIR_ITEM = std::move(other.CMSG_REPAIR_ITEM);
        }
        if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
            this->MSG_TALENT_WIPE_CONFIRM = std::move(other.MSG_TALENT_WIPE_CONFIRM);
        }
        if (opcode == Opcode::CMSG_SUMMON_RESPONSE) {
            this->CMSG_SUMMON_RESPONSE = std::move(other.CMSG_SUMMON_RESPONSE);
        }
        if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
            this->MSG_MOVE_WATER_WALK = std::move(other.MSG_MOVE_WATER_WALK);
        }
        if (opcode == Opcode::CMSG_SELF_RES) {
            this->CMSG_SELF_RES = std::move(other.CMSG_SELF_RES);
        }
        if (opcode == Opcode::CMSG_TOGGLE_HELM) {
            this->CMSG_TOGGLE_HELM = std::move(other.CMSG_TOGGLE_HELM);
        }
        if (opcode == Opcode::CMSG_TOGGLE_CLOAK) {
            this->CMSG_TOGGLE_CLOAK = std::move(other.CMSG_TOGGLE_CLOAK);
        }
        if (opcode == Opcode::CMSG_SET_ACTIONBAR_TOGGLES) {
            this->CMSG_SET_ACTIONBAR_TOGGLES = std::move(other.CMSG_SET_ACTIONBAR_TOGGLES);
        }
        if (opcode == Opcode::MSG_PETITION_RENAME) {
            this->MSG_PETITION_RENAME = std::move(other.MSG_PETITION_RENAME);
        }
        if (opcode == Opcode::CMSG_ITEM_NAME_QUERY) {
            this->CMSG_ITEM_NAME_QUERY = std::move(other.CMSG_ITEM_NAME_QUERY);
        }
        if (opcode == Opcode::CMSG_CHAR_RENAME) {
            this->CMSG_CHAR_RENAME = std::move(other.CMSG_CHAR_RENAME);
        }
        if (opcode == Opcode::CMSG_MOVE_SPLINE_DONE) {
            this->CMSG_MOVE_SPLINE_DONE = std::move(other.CMSG_MOVE_SPLINE_DONE);
        }
        if (opcode == Opcode::CMSG_MOVE_FALL_RESET) {
            this->CMSG_MOVE_FALL_RESET = std::move(other.CMSG_MOVE_FALL_RESET);
        }
        if (opcode == Opcode::CMSG_REQUEST_RAID_INFO) {
            this->CMSG_REQUEST_RAID_INFO = std::move(other.CMSG_REQUEST_RAID_INFO);
        }
        if (opcode == Opcode::CMSG_MOVE_TIME_SKIPPED) {
            this->CMSG_MOVE_TIME_SKIPPED = std::move(other.CMSG_MOVE_TIME_SKIPPED);
        }
        if (opcode == Opcode::CMSG_MOVE_FEATHER_FALL_ACK) {
            this->CMSG_MOVE_FEATHER_FALL_ACK = std::move(other.CMSG_MOVE_FEATHER_FALL_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_WATER_WALK_ACK) {
            this->CMSG_MOVE_WATER_WALK_ACK = std::move(other.CMSG_MOVE_WATER_WALK_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER) {
            this->CMSG_MOVE_NOT_ACTIVE_MOVER = std::move(other.CMSG_MOVE_NOT_ACTIVE_MOVER);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_STATUS) {
            this->CMSG_BATTLEFIELD_STATUS = std::move(other.CMSG_BATTLEFIELD_STATUS);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_PORT) {
            this->CMSG_BATTLEFIELD_PORT = std::move(other.CMSG_BATTLEFIELD_PORT);
        }
        if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
            this->MSG_INSPECT_HONOR_STATS = std::move(other.MSG_INSPECT_HONOR_STATS);
        }
        if (opcode == Opcode::CMSG_BATTLEMASTER_HELLO) {
            this->CMSG_BATTLEMASTER_HELLO = std::move(other.CMSG_BATTLEMASTER_HELLO);
        }
        if (opcode == Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_WALK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_WALK_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK) {
            this->CMSG_FORCE_TURN_RATE_CHANGE_ACK = std::move(other.CMSG_FORCE_TURN_RATE_CHANGE_ACK);
        }
        if (opcode == Opcode::MSG_PVP_LOG_DATA) {
            this->MSG_PVP_LOG_DATA = std::move(other.MSG_PVP_LOG_DATA);
        }
        if (opcode == Opcode::CMSG_LEAVE_BATTLEFIELD) {
            this->CMSG_LEAVE_BATTLEFIELD = std::move(other.CMSG_LEAVE_BATTLEFIELD);
        }
        if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY) {
            this->CMSG_AREA_SPIRIT_HEALER_QUERY = std::move(other.CMSG_AREA_SPIRIT_HEALER_QUERY);
        }
        if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE) {
            this->CMSG_AREA_SPIRIT_HEALER_QUEUE = std::move(other.CMSG_AREA_SPIRIT_HEALER_QUEUE);
        }
        if (opcode == Opcode::CMSG_WARDEN_DATA) {
            this->CMSG_WARDEN_DATA = std::move(other.CMSG_WARDEN_DATA);
        }
        if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
            this->MSG_BATTLEGROUND_PLAYER_POSITIONS = std::move(other.MSG_BATTLEGROUND_PLAYER_POSITIONS);
        }
        if (opcode == Opcode::CMSG_PET_STOP_ATTACK) {
            this->CMSG_PET_STOP_ATTACK = std::move(other.CMSG_PET_STOP_ATTACK);
        }
        if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN) {
            this->CMSG_BATTLEMASTER_JOIN = std::move(other.CMSG_BATTLEMASTER_JOIN);
        }
        if (opcode == Opcode::CMSG_PET_UNLEARN) {
            this->CMSG_PET_UNLEARN = std::move(other.CMSG_PET_UNLEARN);
        }
        if (opcode == Opcode::CMSG_PET_SPELL_AUTOCAST) {
            this->CMSG_PET_SPELL_AUTOCAST = std::move(other.CMSG_PET_SPELL_AUTOCAST);
        }
        if (opcode == Opcode::CMSG_GUILD_INFO_TEXT) {
            this->CMSG_GUILD_INFO_TEXT = std::move(other.CMSG_GUILD_INFO_TEXT);
        }
        if (opcode == Opcode::CMSG_ACTIVATETAXIEXPRESS) {
            this->CMSG_ACTIVATETAXIEXPRESS = std::move(other.CMSG_ACTIVATETAXIEXPRESS);
        }
        if (opcode == Opcode::CMSG_SET_FACTION_INACTIVE) {
            this->CMSG_SET_FACTION_INACTIVE = std::move(other.CMSG_SET_FACTION_INACTIVE);
        }
        if (opcode == Opcode::CMSG_SET_WATCHED_FACTION) {
            this->CMSG_SET_WATCHED_FACTION = std::move(other.CMSG_SET_WATCHED_FACTION);
        }
        if (opcode == Opcode::CMSG_RESET_INSTANCES) {
            this->CMSG_RESET_INSTANCES = std::move(other.CMSG_RESET_INSTANCES);
        }
        if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
            this->MSG_RAID_TARGET_UPDATE = std::move(other.MSG_RAID_TARGET_UPDATE);
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK) {
            this->MSG_RAID_READY_CHECK = std::move(other.MSG_RAID_READY_CHECK);
        }
        if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
            this->MSG_SET_DUNGEON_DIFFICULTY = std::move(other.MSG_SET_DUNGEON_DIFFICULTY);
        }
        if (opcode == Opcode::CMSG_GMSURVEY_SUBMIT) {
            this->CMSG_GMSURVEY_SUBMIT = std::move(other.CMSG_GMSURVEY_SUBMIT);
        }
        if (opcode == Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) {
            this->CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK = std::move(other.CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_SET_CAN_FLY_ACK) {
            this->CMSG_MOVE_SET_CAN_FLY_ACK = std::move(other.CMSG_MOVE_SET_CAN_FLY_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_SET_FLY) {
            this->CMSG_MOVE_SET_FLY = std::move(other.CMSG_MOVE_SET_FLY);
        }
        if (opcode == Opcode::CMSG_SOCKET_GEMS) {
            this->CMSG_SOCKET_GEMS = std::move(other.CMSG_SOCKET_GEMS);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_ROSTER) {
            this->CMSG_ARENA_TEAM_ROSTER = std::move(other.CMSG_ARENA_TEAM_ROSTER);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_INVITE) {
            this->CMSG_ARENA_TEAM_INVITE = std::move(other.CMSG_ARENA_TEAM_INVITE);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_ACCEPT) {
            this->CMSG_ARENA_TEAM_ACCEPT = std::move(other.CMSG_ARENA_TEAM_ACCEPT);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_DECLINE) {
            this->CMSG_ARENA_TEAM_DECLINE = std::move(other.CMSG_ARENA_TEAM_DECLINE);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_LEAVE) {
            this->CMSG_ARENA_TEAM_LEAVE = std::move(other.CMSG_ARENA_TEAM_LEAVE);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_REMOVE) {
            this->CMSG_ARENA_TEAM_REMOVE = std::move(other.CMSG_ARENA_TEAM_REMOVE);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_DISBAND) {
            this->CMSG_ARENA_TEAM_DISBAND = std::move(other.CMSG_ARENA_TEAM_DISBAND);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_LEADER) {
            this->CMSG_ARENA_TEAM_LEADER = std::move(other.CMSG_ARENA_TEAM_LEADER);
        }
        if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN_ARENA) {
            this->CMSG_BATTLEMASTER_JOIN_ARENA = std::move(other.CMSG_BATTLEMASTER_JOIN_ARENA);
        }
        if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
            this->MSG_MOVE_START_ASCEND = std::move(other.MSG_MOVE_START_ASCEND);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
            this->MSG_MOVE_STOP_ASCEND = std::move(other.MSG_MOVE_STOP_ASCEND);
        }
        if (opcode == Opcode::CMSG_LFG_JOIN) {
            this->CMSG_LFG_JOIN = std::move(other.CMSG_LFG_JOIN);
        }
        if (opcode == Opcode::CMSG_LFG_LEAVE) {
            this->CMSG_LFG_LEAVE = std::move(other.CMSG_LFG_LEAVE);
        }
        if (opcode == Opcode::CMSG_SEARCH_LFG_JOIN) {
            this->CMSG_SEARCH_LFG_JOIN = std::move(other.CMSG_SEARCH_LFG_JOIN);
        }
        if (opcode == Opcode::CMSG_SEARCH_LFG_LEAVE) {
            this->CMSG_SEARCH_LFG_LEAVE = std::move(other.CMSG_SEARCH_LFG_LEAVE);
        }
        if (opcode == Opcode::CMSG_LFG_PROPOSAL_RESULT) {
            this->CMSG_LFG_PROPOSAL_RESULT = std::move(other.CMSG_LFG_PROPOSAL_RESULT);
        }
        if (opcode == Opcode::CMSG_SET_LFG_COMMENT) {
            this->CMSG_SET_LFG_COMMENT = std::move(other.CMSG_SET_LFG_COMMENT);
        }
        if (opcode == Opcode::CMSG_LFG_SET_ROLES) {
            this->CMSG_LFG_SET_ROLES = std::move(other.CMSG_LFG_SET_ROLES);
        }
        if (opcode == Opcode::CMSG_LFG_SET_BOOT_VOTE) {
            this->CMSG_LFG_SET_BOOT_VOTE = std::move(other.CMSG_LFG_SET_BOOT_VOTE);
        }
        if (opcode == Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) {
            this->CMSG_LFD_PLAYER_LOCK_INFO_REQUEST = std::move(other.CMSG_LFD_PLAYER_LOCK_INFO_REQUEST);
        }
        if (opcode == Opcode::CMSG_LFG_TELEPORT) {
            this->CMSG_LFG_TELEPORT = std::move(other.CMSG_LFG_TELEPORT);
        }
        if (opcode == Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST) {
            this->CMSG_LFD_PARTY_LOCK_INFO_REQUEST = std::move(other.CMSG_LFD_PARTY_LOCK_INFO_REQUEST);
        }
        if (opcode == Opcode::CMSG_SET_TITLE) {
            this->CMSG_SET_TITLE = std::move(other.CMSG_SET_TITLE);
        }
        if (opcode == Opcode::CMSG_CANCEL_MOUNT_AURA) {
            this->CMSG_CANCEL_MOUNT_AURA = std::move(other.CMSG_CANCEL_MOUNT_AURA);
        }
        if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
            this->MSG_INSPECT_ARENA_TEAMS = std::move(other.MSG_INSPECT_ARENA_TEAMS);
        }
        if (opcode == Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT) {
            this->CMSG_CANCEL_TEMP_ENCHANTMENT = std::move(other.CMSG_CANCEL_TEMP_ENCHANTMENT);
        }
        if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
            this->MSG_MOVE_SET_FLIGHT_BACK_SPEED = std::move(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED);
        }
        if (opcode == Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_SET_TAXI_BENCHMARK_MODE) {
            this->CMSG_SET_TAXI_BENCHMARK_MODE = std::move(other.CMSG_SET_TAXI_BENCHMARK_MODE);
        }
        if (opcode == Opcode::CMSG_REALM_SPLIT) {
            this->CMSG_REALM_SPLIT = std::move(other.CMSG_REALM_SPLIT);
        }
        if (opcode == Opcode::CMSG_MOVE_CHNG_TRANSPORT) {
            this->CMSG_MOVE_CHNG_TRANSPORT = std::move(other.CMSG_MOVE_CHNG_TRANSPORT);
        }
        if (opcode == Opcode::MSG_PARTY_ASSIGNMENT) {
            this->MSG_PARTY_ASSIGNMENT = std::move(other.MSG_PARTY_ASSIGNMENT);
        }
        if (opcode == Opcode::CMSG_TIME_SYNC_RESP) {
            this->CMSG_TIME_SYNC_RESP = std::move(other.CMSG_TIME_SYNC_RESP);
        }
        if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
            this->MSG_MOVE_START_DESCEND = std::move(other.MSG_MOVE_START_DESCEND);
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
            this->MSG_RAID_READY_CHECK_CONFIRM = std::move(other.MSG_RAID_READY_CHECK_CONFIRM);
        }
        if (opcode == Opcode::CMSG_VOICE_SESSION_ENABLE) {
            this->CMSG_VOICE_SESSION_ENABLE = std::move(other.CMSG_VOICE_SESSION_ENABLE);
        }
        if (opcode == Opcode::CMSG_COMMENTATOR_ENABLE) {
            this->CMSG_COMMENTATOR_ENABLE = std::move(other.CMSG_COMMENTATOR_ENABLE);
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK_FINISHED) {
            this->MSG_RAID_READY_CHECK_FINISHED = std::move(other.MSG_RAID_READY_CHECK_FINISHED);
        }
        if (opcode == Opcode::CMSG_COMPLAIN) {
            this->CMSG_COMPLAIN = std::move(other.CMSG_COMPLAIN);
        }
        if (opcode == Opcode::CMSG_CHANNEL_DISPLAY_LIST) {
            this->CMSG_CHANNEL_DISPLAY_LIST = std::move(other.CMSG_CHANNEL_DISPLAY_LIST);
        }
        if (opcode == Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL) {
            this->CMSG_SET_ACTIVE_VOICE_CHANNEL = std::move(other.CMSG_SET_ACTIVE_VOICE_CHANNEL);
        }
        if (opcode == Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT) {
            this->CMSG_GET_CHANNEL_MEMBER_COUNT = std::move(other.CMSG_GET_CHANNEL_MEMBER_COUNT);
        }
        if (opcode == Opcode::CMSG_CHANNEL_VOICE_ON) {
            this->CMSG_CHANNEL_VOICE_ON = std::move(other.CMSG_CHANNEL_VOICE_ON);
        }
        if (opcode == Opcode::CMSG_REPORT_PVP_AFK) {
            this->CMSG_REPORT_PVP_AFK = std::move(other.CMSG_REPORT_PVP_AFK);
        }
        if (opcode == Opcode::CMSG_GUILD_BANKER_ACTIVATE) {
            this->CMSG_GUILD_BANKER_ACTIVATE = std::move(other.CMSG_GUILD_BANKER_ACTIVATE);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_QUERY_TAB) {
            this->CMSG_GUILD_BANK_QUERY_TAB = std::move(other.CMSG_GUILD_BANK_QUERY_TAB);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_SWAP_ITEMS) {
            this->CMSG_GUILD_BANK_SWAP_ITEMS = std::move(other.CMSG_GUILD_BANK_SWAP_ITEMS);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_BUY_TAB) {
            this->CMSG_GUILD_BANK_BUY_TAB = std::move(other.CMSG_GUILD_BANK_BUY_TAB);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_UPDATE_TAB) {
            this->CMSG_GUILD_BANK_UPDATE_TAB = std::move(other.CMSG_GUILD_BANK_UPDATE_TAB);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY) {
            this->CMSG_GUILD_BANK_DEPOSIT_MONEY = std::move(other.CMSG_GUILD_BANK_DEPOSIT_MONEY);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY) {
            this->CMSG_GUILD_BANK_WITHDRAW_MONEY = std::move(other.CMSG_GUILD_BANK_WITHDRAW_MONEY);
        }
        if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
            this->MSG_GUILD_BANK_LOG_QUERY = std::move(other.MSG_GUILD_BANK_LOG_QUERY);
        }
        if (opcode == Opcode::CMSG_SET_CHANNEL_WATCH) {
            this->CMSG_SET_CHANNEL_WATCH = std::move(other.CMSG_SET_CHANNEL_WATCH);
        }
        if (opcode == Opcode::CMSG_CLEAR_CHANNEL_WATCH) {
            this->CMSG_CLEAR_CHANNEL_WATCH = std::move(other.CMSG_CLEAR_CHANNEL_WATCH);
        }
        if (opcode == Opcode::CMSG_SPELLCLICK) {
            this->CMSG_SPELLCLICK = std::move(other.CMSG_SPELLCLICK);
        }
        if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
            this->MSG_GUILD_PERMISSIONS = std::move(other.MSG_GUILD_PERMISSIONS);
        }
        if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
            this->MSG_GUILD_BANK_MONEY_WITHDRAWN = std::move(other.MSG_GUILD_BANK_MONEY_WITHDRAWN);
        }
        if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
            this->MSG_GUILD_EVENT_LOG_QUERY = std::move(other.MSG_GUILD_EVENT_LOG_QUERY);
        }
        if (opcode == Opcode::CMSG_GET_MIRRORIMAGE_DATA) {
            this->CMSG_GET_MIRRORIMAGE_DATA = std::move(other.CMSG_GET_MIRRORIMAGE_DATA);
        }
        if (opcode == Opcode::CMSG_KEEP_ALIVE) {
            this->CMSG_KEEP_ALIVE = std::move(other.CMSG_KEEP_ALIVE);
        }
        if (opcode == Opcode::CMSG_OPT_OUT_OF_LOOT) {
            this->CMSG_OPT_OUT_OF_LOOT = std::move(other.CMSG_OPT_OUT_OF_LOOT);
        }
        if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
            this->MSG_QUERY_GUILD_BANK_TEXT = std::move(other.MSG_QUERY_GUILD_BANK_TEXT);
        }
        if (opcode == Opcode::CMSG_SET_GUILD_BANK_TEXT) {
            this->CMSG_SET_GUILD_BANK_TEXT = std::move(other.CMSG_SET_GUILD_BANK_TEXT);
        }
        if (opcode == Opcode::CMSG_GRANT_LEVEL) {
            this->CMSG_GRANT_LEVEL = std::move(other.CMSG_GRANT_LEVEL);
        }
        if (opcode == Opcode::CMSG_TOTEM_DESTROYED) {
            this->CMSG_TOTEM_DESTROYED = std::move(other.CMSG_TOTEM_DESTROYED);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) {
            this->CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY = std::move(other.CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY);
        }
        if (opcode == Opcode::CMSG_SET_PLAYER_DECLINED_NAMES) {
            this->CMSG_SET_PLAYER_DECLINED_NAMES = std::move(other.CMSG_SET_PLAYER_DECLINED_NAMES);
        }
        if (opcode == Opcode::CMSG_ACCEPT_LEVEL_GRANT) {
            this->CMSG_ACCEPT_LEVEL_GRANT = std::move(other.CMSG_ACCEPT_LEVEL_GRANT);
        }
        if (opcode == Opcode::CMSG_ALTER_APPEARANCE) {
            this->CMSG_ALTER_APPEARANCE = std::move(other.CMSG_ALTER_APPEARANCE);
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_CALENDAR) {
            this->CMSG_CALENDAR_GET_CALENDAR = std::move(other.CMSG_CALENDAR_GET_CALENDAR);
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_EVENT) {
            this->CMSG_CALENDAR_GET_EVENT = std::move(other.CMSG_CALENDAR_GET_EVENT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_GUILD_FILTER) {
            this->CMSG_CALENDAR_GUILD_FILTER = std::move(other.CMSG_CALENDAR_GUILD_FILTER);
        }
        if (opcode == Opcode::CMSG_CALENDAR_ARENA_TEAM) {
            this->CMSG_CALENDAR_ARENA_TEAM = std::move(other.CMSG_CALENDAR_ARENA_TEAM);
        }
        if (opcode == Opcode::CMSG_CALENDAR_ADD_EVENT) {
            this->CMSG_CALENDAR_ADD_EVENT = std::move(other.CMSG_CALENDAR_ADD_EVENT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_UPDATE_EVENT) {
            this->CMSG_CALENDAR_UPDATE_EVENT = std::move(other.CMSG_CALENDAR_UPDATE_EVENT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_REMOVE_EVENT) {
            this->CMSG_CALENDAR_REMOVE_EVENT = std::move(other.CMSG_CALENDAR_REMOVE_EVENT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_COPY_EVENT) {
            this->CMSG_CALENDAR_COPY_EVENT = std::move(other.CMSG_CALENDAR_COPY_EVENT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_INVITE) {
            this->CMSG_CALENDAR_EVENT_INVITE = std::move(other.CMSG_CALENDAR_EVENT_INVITE);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_RSVP) {
            this->CMSG_CALENDAR_EVENT_RSVP = std::move(other.CMSG_CALENDAR_EVENT_RSVP);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE) {
            this->CMSG_CALENDAR_EVENT_REMOVE_INVITE = std::move(other.CMSG_CALENDAR_EVENT_REMOVE_INVITE);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_STATUS) {
            this->CMSG_CALENDAR_EVENT_STATUS = std::move(other.CMSG_CALENDAR_EVENT_STATUS);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS) {
            this->CMSG_CALENDAR_EVENT_MODERATOR_STATUS = std::move(other.CMSG_CALENDAR_EVENT_MODERATOR_STATUS);
        }
        if (opcode == Opcode::CMSG_CALENDAR_COMPLAIN) {
            this->CMSG_CALENDAR_COMPLAIN = std::move(other.CMSG_CALENDAR_COMPLAIN);
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
            this->CMSG_CALENDAR_GET_NUM_PENDING = std::move(other.CMSG_CALENDAR_GET_NUM_PENDING);
        }
        if (opcode == Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY) {
            this->CMSG_UPDATE_MISSILE_TRAJECTORY = std::move(other.CMSG_UPDATE_MISSILE_TRAJECTORY);
        }
        if (opcode == Opcode::CMSG_COMPLETE_MOVIE) {
            this->CMSG_COMPLETE_MOVIE = std::move(other.CMSG_COMPLETE_MOVIE);
        }
        if (opcode == Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS) {
            this->CMSG_QUERY_INSPECT_ACHIEVEMENTS = std::move(other.CMSG_QUERY_INSPECT_ACHIEVEMENTS);
        }
        if (opcode == Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE) {
            this->CMSG_DISMISS_CONTROLLED_VEHICLE = std::move(other.CMSG_DISMISS_CONTROLLED_VEHICLE);
        }
        if (opcode == Opcode::CMSG_CHAR_CUSTOMIZE) {
            this->CMSG_CHAR_CUSTOMIZE = std::move(other.CMSG_CHAR_CUSTOMIZE);
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_EXIT) {
            this->CMSG_REQUEST_VEHICLE_EXIT = std::move(other.CMSG_REQUEST_VEHICLE_EXIT);
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT) {
            this->CMSG_REQUEST_VEHICLE_PREV_SEAT = std::move(other.CMSG_REQUEST_VEHICLE_PREV_SEAT);
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT) {
            this->CMSG_REQUEST_VEHICLE_NEXT_SEAT = std::move(other.CMSG_REQUEST_VEHICLE_NEXT_SEAT);
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT) {
            this->CMSG_REQUEST_VEHICLE_SWITCH_SEAT = std::move(other.CMSG_REQUEST_VEHICLE_SWITCH_SEAT);
        }
        if (opcode == Opcode::CMSG_PET_LEARN_TALENT) {
            this->CMSG_PET_LEARN_TALENT = std::move(other.CMSG_PET_LEARN_TALENT);
        }
        if (opcode == Opcode::CMSG_GAMEOBJ_REPORT_USE) {
            this->CMSG_GAMEOBJ_REPORT_USE = std::move(other.CMSG_GAMEOBJ_REPORT_USE);
        }
        if (opcode == Opcode::CMSG_REMOVE_GLYPH) {
            this->CMSG_REMOVE_GLYPH = std::move(other.CMSG_REMOVE_GLYPH);
        }
        if (opcode == Opcode::CMSG_DISMISS_CRITTER) {
            this->CMSG_DISMISS_CRITTER = std::move(other.CMSG_DISMISS_CRITTER);
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_PENDING_SALES) {
            this->CMSG_AUCTION_LIST_PENDING_SALES = std::move(other.CMSG_AUCTION_LIST_PENDING_SALES);
        }
        if (opcode == Opcode::CMSG_ENABLETAXI) {
            this->CMSG_ENABLETAXI = std::move(other.CMSG_ENABLETAXI);
        }
        if (opcode == Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) {
            this->CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE = std::move(other.CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE);
        }
        if (opcode == Opcode::CMSG_HEARTH_AND_RESURRECT) {
            this->CMSG_HEARTH_AND_RESURRECT = std::move(other.CMSG_HEARTH_AND_RESURRECT);
        }
        if (opcode == Opcode::CMSG_PLAYER_VEHICLE_ENTER) {
            this->CMSG_PLAYER_VEHICLE_ENTER = std::move(other.CMSG_PLAYER_VEHICLE_ENTER);
        }
        if (opcode == Opcode::CMSG_CONTROLLER_EJECT_PASSENGER) {
            this->CMSG_CONTROLLER_EJECT_PASSENGER = std::move(other.CMSG_CONTROLLER_EJECT_PASSENGER);
        }
        if (opcode == Opcode::CMSG_ITEM_REFUND_INFO) {
            this->CMSG_ITEM_REFUND_INFO = std::move(other.CMSG_ITEM_REFUND_INFO);
        }
        if (opcode == Opcode::CMSG_ITEM_REFUND) {
            this->CMSG_ITEM_REFUND = std::move(other.CMSG_ITEM_REFUND);
        }
        if (opcode == Opcode::CMSG_CORPSE_MAP_POSITION_QUERY) {
            this->CMSG_CORPSE_MAP_POSITION_QUERY = std::move(other.CMSG_CORPSE_MAP_POSITION_QUERY);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_SIGNUP) {
            this->CMSG_CALENDAR_EVENT_SIGNUP = std::move(other.CMSG_CALENDAR_EVENT_SIGNUP);
        }
        if (opcode == Opcode::CMSG_EQUIPMENT_SET_SAVE) {
            this->CMSG_EQUIPMENT_SET_SAVE = std::move(other.CMSG_EQUIPMENT_SET_SAVE);
        }
        if (opcode == Opcode::CMSG_UPDATE_PROJECTILE_POSITION) {
            this->CMSG_UPDATE_PROJECTILE_POSITION = std::move(other.CMSG_UPDATE_PROJECTILE_POSITION);
        }
        if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS) {
            this->CMSG_LEARN_PREVIEW_TALENTS = std::move(other.CMSG_LEARN_PREVIEW_TALENTS);
        }
        if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET) {
            this->CMSG_LEARN_PREVIEW_TALENTS_PET = std::move(other.CMSG_LEARN_PREVIEW_TALENTS_PET);
        }
        if (opcode == Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK) {
            this->CMSG_MOVE_GRAVITY_DISABLE_ACK = std::move(other.CMSG_MOVE_GRAVITY_DISABLE_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK) {
            this->CMSG_MOVE_GRAVITY_ENABLE_ACK = std::move(other.CMSG_MOVE_GRAVITY_ENABLE_ACK);
        }
        if (opcode == Opcode::CMSG_EQUIPMENT_SET_USE) {
            this->CMSG_EQUIPMENT_SET_USE = std::move(other.CMSG_EQUIPMENT_SET_USE);
        }
        if (opcode == Opcode::CMSG_CHAR_FACTION_CHANGE) {
            this->CMSG_CHAR_FACTION_CHANGE = std::move(other.CMSG_CHAR_FACTION_CHANGE);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) {
            this->CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE = std::move(other.CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) {
            this->CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE = std::move(other.CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) {
            this->CMSG_BATTLEFIELD_MGR_EXIT_REQUEST = std::move(other.CMSG_BATTLEFIELD_MGR_EXIT_REQUEST);
        }
        if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
            this->MSG_SET_RAID_DIFFICULTY = std::move(other.MSG_SET_RAID_DIFFICULTY);
        }
        if (opcode == Opcode::CMSG_GMRESPONSE_RESOLVE) {
            this->CMSG_GMRESPONSE_RESOLVE = std::move(other.CMSG_GMRESPONSE_RESOLVE);
        }
        if (opcode == Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE) {
            this->CMSG_WORLD_STATE_UI_TIMER_UPDATE = std::move(other.CMSG_WORLD_STATE_UI_TIMER_UPDATE);
        }
        if (opcode == Opcode::CMSG_CHAR_RACE_CHANGE) {
            this->CMSG_CHAR_RACE_CHANGE = std::move(other.CMSG_CHAR_RACE_CHANGE);
        }
        if (opcode == Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES) {
            this->CMSG_READY_FOR_ACCOUNT_DATA_TIMES = std::move(other.CMSG_READY_FOR_ACCOUNT_DATA_TIMES);
        }
        if (opcode == Opcode::CMSG_QUERY_QUESTS_COMPLETED) {
            this->CMSG_QUERY_QUESTS_COMPLETED = std::move(other.CMSG_QUERY_QUESTS_COMPLETED);
        }
        if (opcode == Opcode::CMSG_GM_REPORT_LAG) {
            this->CMSG_GM_REPORT_LAG = std::move(other.CMSG_GM_REPORT_LAG);
        }
        if (opcode == Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK) {
            this->CMSG_MOVE_SET_COLLISION_HGT_ACK = std::move(other.CMSG_MOVE_SET_COLLISION_HGT_ACK);
        }
    }

    ClientOpcode operator=(ClientOpcode&& other) noexcept {
        this->opcode = other.opcode;
        other.opcode = Opcode::NONE;
        if (opcode == Opcode::CMSG_BOOTME) {
            this->CMSG_BOOTME = std::move(other.CMSG_BOOTME);
        }
        if (opcode == Opcode::CMSG_DBLOOKUP) {
            this->CMSG_DBLOOKUP = std::move(other.CMSG_DBLOOKUP);
        }
        if (opcode == Opcode::CMSG_WORLD_TELEPORT) {
            this->CMSG_WORLD_TELEPORT = std::move(other.CMSG_WORLD_TELEPORT);
        }
        if (opcode == Opcode::CMSG_TELEPORT_TO_UNIT) {
            this->CMSG_TELEPORT_TO_UNIT = std::move(other.CMSG_TELEPORT_TO_UNIT);
        }
        if (opcode == Opcode::CMSG_CHAR_CREATE) {
            this->CMSG_CHAR_CREATE = std::move(other.CMSG_CHAR_CREATE);
        }
        if (opcode == Opcode::CMSG_CHAR_ENUM) {
            this->CMSG_CHAR_ENUM = std::move(other.CMSG_CHAR_ENUM);
        }
        if (opcode == Opcode::CMSG_CHAR_DELETE) {
            this->CMSG_CHAR_DELETE = std::move(other.CMSG_CHAR_DELETE);
        }
        if (opcode == Opcode::CMSG_PLAYER_LOGIN) {
            this->CMSG_PLAYER_LOGIN = std::move(other.CMSG_PLAYER_LOGIN);
        }
        if (opcode == Opcode::CMSG_PLAYER_LOGOUT) {
            this->CMSG_PLAYER_LOGOUT = std::move(other.CMSG_PLAYER_LOGOUT);
        }
        if (opcode == Opcode::CMSG_LOGOUT_REQUEST) {
            this->CMSG_LOGOUT_REQUEST = std::move(other.CMSG_LOGOUT_REQUEST);
        }
        if (opcode == Opcode::CMSG_LOGOUT_CANCEL) {
            this->CMSG_LOGOUT_CANCEL = std::move(other.CMSG_LOGOUT_CANCEL);
        }
        if (opcode == Opcode::CMSG_NAME_QUERY) {
            this->CMSG_NAME_QUERY = std::move(other.CMSG_NAME_QUERY);
        }
        if (opcode == Opcode::CMSG_PET_NAME_QUERY) {
            this->CMSG_PET_NAME_QUERY = std::move(other.CMSG_PET_NAME_QUERY);
        }
        if (opcode == Opcode::CMSG_GUILD_QUERY) {
            this->CMSG_GUILD_QUERY = std::move(other.CMSG_GUILD_QUERY);
        }
        if (opcode == Opcode::CMSG_ITEM_QUERY_SINGLE) {
            this->CMSG_ITEM_QUERY_SINGLE = std::move(other.CMSG_ITEM_QUERY_SINGLE);
        }
        if (opcode == Opcode::CMSG_PAGE_TEXT_QUERY) {
            this->CMSG_PAGE_TEXT_QUERY = std::move(other.CMSG_PAGE_TEXT_QUERY);
        }
        if (opcode == Opcode::CMSG_QUEST_QUERY) {
            this->CMSG_QUEST_QUERY = std::move(other.CMSG_QUEST_QUERY);
        }
        if (opcode == Opcode::CMSG_GAMEOBJECT_QUERY) {
            this->CMSG_GAMEOBJECT_QUERY = std::move(other.CMSG_GAMEOBJECT_QUERY);
        }
        if (opcode == Opcode::CMSG_CREATURE_QUERY) {
            this->CMSG_CREATURE_QUERY = std::move(other.CMSG_CREATURE_QUERY);
        }
        if (opcode == Opcode::CMSG_WHO) {
            this->CMSG_WHO = std::move(other.CMSG_WHO);
        }
        if (opcode == Opcode::CMSG_WHOIS) {
            this->CMSG_WHOIS = std::move(other.CMSG_WHOIS);
        }
        if (opcode == Opcode::CMSG_CONTACT_LIST) {
            this->CMSG_CONTACT_LIST = std::move(other.CMSG_CONTACT_LIST);
        }
        if (opcode == Opcode::CMSG_ADD_FRIEND) {
            this->CMSG_ADD_FRIEND = std::move(other.CMSG_ADD_FRIEND);
        }
        if (opcode == Opcode::CMSG_DEL_FRIEND) {
            this->CMSG_DEL_FRIEND = std::move(other.CMSG_DEL_FRIEND);
        }
        if (opcode == Opcode::CMSG_SET_CONTACT_NOTES) {
            this->CMSG_SET_CONTACT_NOTES = std::move(other.CMSG_SET_CONTACT_NOTES);
        }
        if (opcode == Opcode::CMSG_ADD_IGNORE) {
            this->CMSG_ADD_IGNORE = std::move(other.CMSG_ADD_IGNORE);
        }
        if (opcode == Opcode::CMSG_DEL_IGNORE) {
            this->CMSG_DEL_IGNORE = std::move(other.CMSG_DEL_IGNORE);
        }
        if (opcode == Opcode::CMSG_GROUP_INVITE) {
            this->CMSG_GROUP_INVITE = std::move(other.CMSG_GROUP_INVITE);
        }
        if (opcode == Opcode::CMSG_GROUP_CANCEL) {
            this->CMSG_GROUP_CANCEL = std::move(other.CMSG_GROUP_CANCEL);
        }
        if (opcode == Opcode::CMSG_GROUP_ACCEPT) {
            this->CMSG_GROUP_ACCEPT = std::move(other.CMSG_GROUP_ACCEPT);
        }
        if (opcode == Opcode::CMSG_GROUP_DECLINE) {
            this->CMSG_GROUP_DECLINE = std::move(other.CMSG_GROUP_DECLINE);
        }
        if (opcode == Opcode::CMSG_GROUP_UNINVITE) {
            this->CMSG_GROUP_UNINVITE = std::move(other.CMSG_GROUP_UNINVITE);
        }
        if (opcode == Opcode::CMSG_GROUP_UNINVITE_GUID) {
            this->CMSG_GROUP_UNINVITE_GUID = std::move(other.CMSG_GROUP_UNINVITE_GUID);
        }
        if (opcode == Opcode::CMSG_GROUP_SET_LEADER) {
            this->CMSG_GROUP_SET_LEADER = std::move(other.CMSG_GROUP_SET_LEADER);
        }
        if (opcode == Opcode::CMSG_LOOT_METHOD) {
            this->CMSG_LOOT_METHOD = std::move(other.CMSG_LOOT_METHOD);
        }
        if (opcode == Opcode::CMSG_GROUP_DISBAND) {
            this->CMSG_GROUP_DISBAND = std::move(other.CMSG_GROUP_DISBAND);
        }
        if (opcode == Opcode::CMSG_GUILD_CREATE) {
            this->CMSG_GUILD_CREATE = std::move(other.CMSG_GUILD_CREATE);
        }
        if (opcode == Opcode::CMSG_GUILD_INVITE) {
            this->CMSG_GUILD_INVITE = std::move(other.CMSG_GUILD_INVITE);
        }
        if (opcode == Opcode::CMSG_GUILD_ACCEPT) {
            this->CMSG_GUILD_ACCEPT = std::move(other.CMSG_GUILD_ACCEPT);
        }
        if (opcode == Opcode::CMSG_GUILD_DECLINE) {
            this->CMSG_GUILD_DECLINE = std::move(other.CMSG_GUILD_DECLINE);
        }
        if (opcode == Opcode::CMSG_GUILD_INFO) {
            this->CMSG_GUILD_INFO = std::move(other.CMSG_GUILD_INFO);
        }
        if (opcode == Opcode::CMSG_GUILD_ROSTER) {
            this->CMSG_GUILD_ROSTER = std::move(other.CMSG_GUILD_ROSTER);
        }
        if (opcode == Opcode::CMSG_GUILD_PROMOTE) {
            this->CMSG_GUILD_PROMOTE = std::move(other.CMSG_GUILD_PROMOTE);
        }
        if (opcode == Opcode::CMSG_GUILD_DEMOTE) {
            this->CMSG_GUILD_DEMOTE = std::move(other.CMSG_GUILD_DEMOTE);
        }
        if (opcode == Opcode::CMSG_GUILD_LEAVE) {
            this->CMSG_GUILD_LEAVE = std::move(other.CMSG_GUILD_LEAVE);
        }
        if (opcode == Opcode::CMSG_GUILD_REMOVE) {
            this->CMSG_GUILD_REMOVE = std::move(other.CMSG_GUILD_REMOVE);
        }
        if (opcode == Opcode::CMSG_GUILD_DISBAND) {
            this->CMSG_GUILD_DISBAND = std::move(other.CMSG_GUILD_DISBAND);
        }
        if (opcode == Opcode::CMSG_GUILD_LEADER) {
            this->CMSG_GUILD_LEADER = std::move(other.CMSG_GUILD_LEADER);
        }
        if (opcode == Opcode::CMSG_GUILD_MOTD) {
            this->CMSG_GUILD_MOTD = std::move(other.CMSG_GUILD_MOTD);
        }
        if (opcode == Opcode::CMSG_MESSAGECHAT) {
            this->CMSG_MESSAGECHAT = std::move(other.CMSG_MESSAGECHAT);
        }
        if (opcode == Opcode::CMSG_JOIN_CHANNEL) {
            this->CMSG_JOIN_CHANNEL = std::move(other.CMSG_JOIN_CHANNEL);
        }
        if (opcode == Opcode::CMSG_LEAVE_CHANNEL) {
            this->CMSG_LEAVE_CHANNEL = std::move(other.CMSG_LEAVE_CHANNEL);
        }
        if (opcode == Opcode::CMSG_CHANNEL_LIST) {
            this->CMSG_CHANNEL_LIST = std::move(other.CMSG_CHANNEL_LIST);
        }
        if (opcode == Opcode::CMSG_CHANNEL_PASSWORD) {
            this->CMSG_CHANNEL_PASSWORD = std::move(other.CMSG_CHANNEL_PASSWORD);
        }
        if (opcode == Opcode::CMSG_CHANNEL_SET_OWNER) {
            this->CMSG_CHANNEL_SET_OWNER = std::move(other.CMSG_CHANNEL_SET_OWNER);
        }
        if (opcode == Opcode::CMSG_CHANNEL_OWNER) {
            this->CMSG_CHANNEL_OWNER = std::move(other.CMSG_CHANNEL_OWNER);
        }
        if (opcode == Opcode::CMSG_CHANNEL_MODERATOR) {
            this->CMSG_CHANNEL_MODERATOR = std::move(other.CMSG_CHANNEL_MODERATOR);
        }
        if (opcode == Opcode::CMSG_CHANNEL_UNMODERATOR) {
            this->CMSG_CHANNEL_UNMODERATOR = std::move(other.CMSG_CHANNEL_UNMODERATOR);
        }
        if (opcode == Opcode::CMSG_CHANNEL_MUTE) {
            this->CMSG_CHANNEL_MUTE = std::move(other.CMSG_CHANNEL_MUTE);
        }
        if (opcode == Opcode::CMSG_CHANNEL_UNMUTE) {
            this->CMSG_CHANNEL_UNMUTE = std::move(other.CMSG_CHANNEL_UNMUTE);
        }
        if (opcode == Opcode::CMSG_CHANNEL_INVITE) {
            this->CMSG_CHANNEL_INVITE = std::move(other.CMSG_CHANNEL_INVITE);
        }
        if (opcode == Opcode::CMSG_CHANNEL_KICK) {
            this->CMSG_CHANNEL_KICK = std::move(other.CMSG_CHANNEL_KICK);
        }
        if (opcode == Opcode::CMSG_CHANNEL_BAN) {
            this->CMSG_CHANNEL_BAN = std::move(other.CMSG_CHANNEL_BAN);
        }
        if (opcode == Opcode::CMSG_CHANNEL_UNBAN) {
            this->CMSG_CHANNEL_UNBAN = std::move(other.CMSG_CHANNEL_UNBAN);
        }
        if (opcode == Opcode::CMSG_CHANNEL_ANNOUNCEMENTS) {
            this->CMSG_CHANNEL_ANNOUNCEMENTS = std::move(other.CMSG_CHANNEL_ANNOUNCEMENTS);
        }
        if (opcode == Opcode::CMSG_CHANNEL_MODERATE) {
            this->CMSG_CHANNEL_MODERATE = std::move(other.CMSG_CHANNEL_MODERATE);
        }
        if (opcode == Opcode::CMSG_USE_ITEM) {
            this->CMSG_USE_ITEM = std::move(other.CMSG_USE_ITEM);
        }
        if (opcode == Opcode::CMSG_OPEN_ITEM) {
            this->CMSG_OPEN_ITEM = std::move(other.CMSG_OPEN_ITEM);
        }
        if (opcode == Opcode::CMSG_READ_ITEM) {
            this->CMSG_READ_ITEM = std::move(other.CMSG_READ_ITEM);
        }
        if (opcode == Opcode::CMSG_GAMEOBJ_USE) {
            this->CMSG_GAMEOBJ_USE = std::move(other.CMSG_GAMEOBJ_USE);
        }
        if (opcode == Opcode::CMSG_AREATRIGGER) {
            this->CMSG_AREATRIGGER = std::move(other.CMSG_AREATRIGGER);
        }
        if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
            this->MSG_MOVE_START_FORWARD = std::move(other.MSG_MOVE_START_FORWARD);
        }
        if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
            this->MSG_MOVE_START_BACKWARD = std::move(other.MSG_MOVE_START_BACKWARD);
        }
        if (opcode == Opcode::MSG_MOVE_STOP) {
            this->MSG_MOVE_STOP = std::move(other.MSG_MOVE_STOP);
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
            this->MSG_MOVE_START_STRAFE_LEFT = std::move(other.MSG_MOVE_START_STRAFE_LEFT);
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
            this->MSG_MOVE_START_STRAFE_RIGHT = std::move(other.MSG_MOVE_START_STRAFE_RIGHT);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
            this->MSG_MOVE_STOP_STRAFE = std::move(other.MSG_MOVE_STOP_STRAFE);
        }
        if (opcode == Opcode::MSG_MOVE_JUMP) {
            this->MSG_MOVE_JUMP = std::move(other.MSG_MOVE_JUMP);
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
            this->MSG_MOVE_START_TURN_LEFT = std::move(other.MSG_MOVE_START_TURN_LEFT);
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
            this->MSG_MOVE_START_TURN_RIGHT = std::move(other.MSG_MOVE_START_TURN_RIGHT);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
            this->MSG_MOVE_STOP_TURN = std::move(other.MSG_MOVE_STOP_TURN);
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
            this->MSG_MOVE_START_PITCH_UP = std::move(other.MSG_MOVE_START_PITCH_UP);
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
            this->MSG_MOVE_START_PITCH_DOWN = std::move(other.MSG_MOVE_START_PITCH_DOWN);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
            this->MSG_MOVE_STOP_PITCH = std::move(other.MSG_MOVE_STOP_PITCH);
        }
        if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
            this->MSG_MOVE_SET_RUN_MODE = std::move(other.MSG_MOVE_SET_RUN_MODE);
        }
        if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
            this->MSG_MOVE_SET_WALK_MODE = std::move(other.MSG_MOVE_SET_WALK_MODE);
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT) {
            this->MSG_MOVE_TELEPORT = std::move(other.MSG_MOVE_TELEPORT);
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
            this->MSG_MOVE_TELEPORT_ACK = std::move(other.MSG_MOVE_TELEPORT_ACK);
        }
        if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
            this->MSG_MOVE_FALL_LAND = std::move(other.MSG_MOVE_FALL_LAND);
        }
        if (opcode == Opcode::MSG_MOVE_START_SWIM) {
            this->MSG_MOVE_START_SWIM = std::move(other.MSG_MOVE_START_SWIM);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
            this->MSG_MOVE_STOP_SWIM = std::move(other.MSG_MOVE_STOP_SWIM);
        }
        if (opcode == Opcode::MSG_MOVE_SET_FACING) {
            this->MSG_MOVE_SET_FACING = std::move(other.MSG_MOVE_SET_FACING);
        }
        if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
            this->MSG_MOVE_SET_PITCH = std::move(other.MSG_MOVE_SET_PITCH);
        }
        if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
            this->MSG_MOVE_WORLDPORT_ACK = std::move(other.MSG_MOVE_WORLDPORT_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_SET_RAW_POSITION) {
            this->CMSG_MOVE_SET_RAW_POSITION = std::move(other.CMSG_MOVE_SET_RAW_POSITION);
        }
        if (opcode == Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_RUN_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_RUN_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_SWIM_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_SWIM_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_MOVE_ROOT_ACK) {
            this->CMSG_FORCE_MOVE_ROOT_ACK = std::move(other.CMSG_FORCE_MOVE_ROOT_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_MOVE_UNROOT_ACK) {
            this->CMSG_FORCE_MOVE_UNROOT_ACK = std::move(other.CMSG_FORCE_MOVE_UNROOT_ACK);
        }
        if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
            this->MSG_MOVE_HEARTBEAT = std::move(other.MSG_MOVE_HEARTBEAT);
        }
        if (opcode == Opcode::CMSG_MOVE_KNOCK_BACK_ACK) {
            this->CMSG_MOVE_KNOCK_BACK_ACK = std::move(other.CMSG_MOVE_KNOCK_BACK_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_HOVER_ACK) {
            this->CMSG_MOVE_HOVER_ACK = std::move(other.CMSG_MOVE_HOVER_ACK);
        }
        if (opcode == Opcode::MSG_MOVE_HOVER) {
            this->MSG_MOVE_HOVER = std::move(other.MSG_MOVE_HOVER);
        }
        if (opcode == Opcode::CMSG_NEXT_CINEMATIC_CAMERA) {
            this->CMSG_NEXT_CINEMATIC_CAMERA = std::move(other.CMSG_NEXT_CINEMATIC_CAMERA);
        }
        if (opcode == Opcode::CMSG_COMPLETE_CINEMATIC) {
            this->CMSG_COMPLETE_CINEMATIC = std::move(other.CMSG_COMPLETE_CINEMATIC);
        }
        if (opcode == Opcode::CMSG_TUTORIAL_FLAG) {
            this->CMSG_TUTORIAL_FLAG = std::move(other.CMSG_TUTORIAL_FLAG);
        }
        if (opcode == Opcode::CMSG_TUTORIAL_CLEAR) {
            this->CMSG_TUTORIAL_CLEAR = std::move(other.CMSG_TUTORIAL_CLEAR);
        }
        if (opcode == Opcode::CMSG_TUTORIAL_RESET) {
            this->CMSG_TUTORIAL_RESET = std::move(other.CMSG_TUTORIAL_RESET);
        }
        if (opcode == Opcode::CMSG_STANDSTATECHANGE) {
            this->CMSG_STANDSTATECHANGE = std::move(other.CMSG_STANDSTATECHANGE);
        }
        if (opcode == Opcode::CMSG_EMOTE) {
            this->CMSG_EMOTE = std::move(other.CMSG_EMOTE);
        }
        if (opcode == Opcode::CMSG_TEXT_EMOTE) {
            this->CMSG_TEXT_EMOTE = std::move(other.CMSG_TEXT_EMOTE);
        }
        if (opcode == Opcode::CMSG_AUTOSTORE_LOOT_ITEM) {
            this->CMSG_AUTOSTORE_LOOT_ITEM = std::move(other.CMSG_AUTOSTORE_LOOT_ITEM);
        }
        if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM) {
            this->CMSG_AUTOEQUIP_ITEM = std::move(other.CMSG_AUTOEQUIP_ITEM);
        }
        if (opcode == Opcode::CMSG_AUTOSTORE_BAG_ITEM) {
            this->CMSG_AUTOSTORE_BAG_ITEM = std::move(other.CMSG_AUTOSTORE_BAG_ITEM);
        }
        if (opcode == Opcode::CMSG_SWAP_ITEM) {
            this->CMSG_SWAP_ITEM = std::move(other.CMSG_SWAP_ITEM);
        }
        if (opcode == Opcode::CMSG_SWAP_INV_ITEM) {
            this->CMSG_SWAP_INV_ITEM = std::move(other.CMSG_SWAP_INV_ITEM);
        }
        if (opcode == Opcode::CMSG_SPLIT_ITEM) {
            this->CMSG_SPLIT_ITEM = std::move(other.CMSG_SPLIT_ITEM);
        }
        if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM_SLOT) {
            this->CMSG_AUTOEQUIP_ITEM_SLOT = std::move(other.CMSG_AUTOEQUIP_ITEM_SLOT);
        }
        if (opcode == Opcode::CMSG_DESTROYITEM) {
            this->CMSG_DESTROYITEM = std::move(other.CMSG_DESTROYITEM);
        }
        if (opcode == Opcode::CMSG_INSPECT) {
            this->CMSG_INSPECT = std::move(other.CMSG_INSPECT);
        }
        if (opcode == Opcode::CMSG_INITIATE_TRADE) {
            this->CMSG_INITIATE_TRADE = std::move(other.CMSG_INITIATE_TRADE);
        }
        if (opcode == Opcode::CMSG_BEGIN_TRADE) {
            this->CMSG_BEGIN_TRADE = std::move(other.CMSG_BEGIN_TRADE);
        }
        if (opcode == Opcode::CMSG_BUSY_TRADE) {
            this->CMSG_BUSY_TRADE = std::move(other.CMSG_BUSY_TRADE);
        }
        if (opcode == Opcode::CMSG_IGNORE_TRADE) {
            this->CMSG_IGNORE_TRADE = std::move(other.CMSG_IGNORE_TRADE);
        }
        if (opcode == Opcode::CMSG_ACCEPT_TRADE) {
            this->CMSG_ACCEPT_TRADE = std::move(other.CMSG_ACCEPT_TRADE);
        }
        if (opcode == Opcode::CMSG_UNACCEPT_TRADE) {
            this->CMSG_UNACCEPT_TRADE = std::move(other.CMSG_UNACCEPT_TRADE);
        }
        if (opcode == Opcode::CMSG_CANCEL_TRADE) {
            this->CMSG_CANCEL_TRADE = std::move(other.CMSG_CANCEL_TRADE);
        }
        if (opcode == Opcode::CMSG_SET_TRADE_ITEM) {
            this->CMSG_SET_TRADE_ITEM = std::move(other.CMSG_SET_TRADE_ITEM);
        }
        if (opcode == Opcode::CMSG_CLEAR_TRADE_ITEM) {
            this->CMSG_CLEAR_TRADE_ITEM = std::move(other.CMSG_CLEAR_TRADE_ITEM);
        }
        if (opcode == Opcode::CMSG_SET_TRADE_GOLD) {
            this->CMSG_SET_TRADE_GOLD = std::move(other.CMSG_SET_TRADE_GOLD);
        }
        if (opcode == Opcode::CMSG_SET_FACTION_ATWAR) {
            this->CMSG_SET_FACTION_ATWAR = std::move(other.CMSG_SET_FACTION_ATWAR);
        }
        if (opcode == Opcode::CMSG_SET_ACTION_BUTTON) {
            this->CMSG_SET_ACTION_BUTTON = std::move(other.CMSG_SET_ACTION_BUTTON);
        }
        if (opcode == Opcode::CMSG_CAST_SPELL) {
            this->CMSG_CAST_SPELL = std::move(other.CMSG_CAST_SPELL);
        }
        if (opcode == Opcode::CMSG_CANCEL_CAST) {
            this->CMSG_CANCEL_CAST = std::move(other.CMSG_CANCEL_CAST);
        }
        if (opcode == Opcode::CMSG_CANCEL_AURA) {
            this->CMSG_CANCEL_AURA = std::move(other.CMSG_CANCEL_AURA);
        }
        if (opcode == Opcode::CMSG_CANCEL_CHANNELLING) {
            this->CMSG_CANCEL_CHANNELLING = std::move(other.CMSG_CANCEL_CHANNELLING);
        }
        if (opcode == Opcode::CMSG_SET_SELECTION) {
            this->CMSG_SET_SELECTION = std::move(other.CMSG_SET_SELECTION);
        }
        if (opcode == Opcode::CMSG_DELETEEQUIPMENT_SET) {
            this->CMSG_DELETEEQUIPMENT_SET = std::move(other.CMSG_DELETEEQUIPMENT_SET);
        }
        if (opcode == Opcode::CMSG_INSTANCE_LOCK_RESPONSE) {
            this->CMSG_INSTANCE_LOCK_RESPONSE = std::move(other.CMSG_INSTANCE_LOCK_RESPONSE);
        }
        if (opcode == Opcode::CMSG_ATTACKSWING) {
            this->CMSG_ATTACKSWING = std::move(other.CMSG_ATTACKSWING);
        }
        if (opcode == Opcode::CMSG_ATTACKSTOP) {
            this->CMSG_ATTACKSTOP = std::move(other.CMSG_ATTACKSTOP);
        }
        if (opcode == Opcode::CMSG_REPOP_REQUEST) {
            this->CMSG_REPOP_REQUEST = std::move(other.CMSG_REPOP_REQUEST);
        }
        if (opcode == Opcode::CMSG_RESURRECT_RESPONSE) {
            this->CMSG_RESURRECT_RESPONSE = std::move(other.CMSG_RESURRECT_RESPONSE);
        }
        if (opcode == Opcode::CMSG_LOOT) {
            this->CMSG_LOOT = std::move(other.CMSG_LOOT);
        }
        if (opcode == Opcode::CMSG_LOOT_MONEY) {
            this->CMSG_LOOT_MONEY = std::move(other.CMSG_LOOT_MONEY);
        }
        if (opcode == Opcode::CMSG_LOOT_RELEASE) {
            this->CMSG_LOOT_RELEASE = std::move(other.CMSG_LOOT_RELEASE);
        }
        if (opcode == Opcode::CMSG_DUEL_ACCEPTED) {
            this->CMSG_DUEL_ACCEPTED = std::move(other.CMSG_DUEL_ACCEPTED);
        }
        if (opcode == Opcode::CMSG_DUEL_CANCELLED) {
            this->CMSG_DUEL_CANCELLED = std::move(other.CMSG_DUEL_CANCELLED);
        }
        if (opcode == Opcode::CMSG_MOUNTSPECIAL_ANIM) {
            this->CMSG_MOUNTSPECIAL_ANIM = std::move(other.CMSG_MOUNTSPECIAL_ANIM);
        }
        if (opcode == Opcode::CMSG_PET_SET_ACTION) {
            this->CMSG_PET_SET_ACTION = std::move(other.CMSG_PET_SET_ACTION);
        }
        if (opcode == Opcode::CMSG_PET_ACTION) {
            this->CMSG_PET_ACTION = std::move(other.CMSG_PET_ACTION);
        }
        if (opcode == Opcode::CMSG_PET_ABANDON) {
            this->CMSG_PET_ABANDON = std::move(other.CMSG_PET_ABANDON);
        }
        if (opcode == Opcode::CMSG_PET_RENAME) {
            this->CMSG_PET_RENAME = std::move(other.CMSG_PET_RENAME);
        }
        if (opcode == Opcode::CMSG_GOSSIP_HELLO) {
            this->CMSG_GOSSIP_HELLO = std::move(other.CMSG_GOSSIP_HELLO);
        }
        if (opcode == Opcode::CMSG_GOSSIP_SELECT_OPTION) {
            this->CMSG_GOSSIP_SELECT_OPTION = std::move(other.CMSG_GOSSIP_SELECT_OPTION);
        }
        if (opcode == Opcode::CMSG_NPC_TEXT_QUERY) {
            this->CMSG_NPC_TEXT_QUERY = std::move(other.CMSG_NPC_TEXT_QUERY);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_QUERY) {
            this->CMSG_QUESTGIVER_STATUS_QUERY = std::move(other.CMSG_QUESTGIVER_STATUS_QUERY);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_HELLO) {
            this->CMSG_QUESTGIVER_HELLO = std::move(other.CMSG_QUESTGIVER_HELLO);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_QUERY_QUEST) {
            this->CMSG_QUESTGIVER_QUERY_QUEST = std::move(other.CMSG_QUESTGIVER_QUERY_QUEST);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) {
            this->CMSG_QUESTGIVER_QUEST_AUTOLAUNCH = std::move(other.CMSG_QUESTGIVER_QUEST_AUTOLAUNCH);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST) {
            this->CMSG_QUESTGIVER_ACCEPT_QUEST = std::move(other.CMSG_QUESTGIVER_ACCEPT_QUEST);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST) {
            this->CMSG_QUESTGIVER_COMPLETE_QUEST = std::move(other.CMSG_QUESTGIVER_COMPLETE_QUEST);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_REQUEST_REWARD) {
            this->CMSG_QUESTGIVER_REQUEST_REWARD = std::move(other.CMSG_QUESTGIVER_REQUEST_REWARD);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD) {
            this->CMSG_QUESTGIVER_CHOOSE_REWARD = std::move(other.CMSG_QUESTGIVER_CHOOSE_REWARD);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_CANCEL) {
            this->CMSG_QUESTGIVER_CANCEL = std::move(other.CMSG_QUESTGIVER_CANCEL);
        }
        if (opcode == Opcode::CMSG_QUESTLOG_SWAP_QUEST) {
            this->CMSG_QUESTLOG_SWAP_QUEST = std::move(other.CMSG_QUESTLOG_SWAP_QUEST);
        }
        if (opcode == Opcode::CMSG_QUESTLOG_REMOVE_QUEST) {
            this->CMSG_QUESTLOG_REMOVE_QUEST = std::move(other.CMSG_QUESTLOG_REMOVE_QUEST);
        }
        if (opcode == Opcode::CMSG_QUEST_CONFIRM_ACCEPT) {
            this->CMSG_QUEST_CONFIRM_ACCEPT = std::move(other.CMSG_QUEST_CONFIRM_ACCEPT);
        }
        if (opcode == Opcode::CMSG_PUSHQUESTTOPARTY) {
            this->CMSG_PUSHQUESTTOPARTY = std::move(other.CMSG_PUSHQUESTTOPARTY);
        }
        if (opcode == Opcode::CMSG_LIST_INVENTORY) {
            this->CMSG_LIST_INVENTORY = std::move(other.CMSG_LIST_INVENTORY);
        }
        if (opcode == Opcode::CMSG_SELL_ITEM) {
            this->CMSG_SELL_ITEM = std::move(other.CMSG_SELL_ITEM);
        }
        if (opcode == Opcode::CMSG_BUY_ITEM) {
            this->CMSG_BUY_ITEM = std::move(other.CMSG_BUY_ITEM);
        }
        if (opcode == Opcode::CMSG_BUY_ITEM_IN_SLOT) {
            this->CMSG_BUY_ITEM_IN_SLOT = std::move(other.CMSG_BUY_ITEM_IN_SLOT);
        }
        if (opcode == Opcode::CMSG_TAXINODE_STATUS_QUERY) {
            this->CMSG_TAXINODE_STATUS_QUERY = std::move(other.CMSG_TAXINODE_STATUS_QUERY);
        }
        if (opcode == Opcode::CMSG_TAXIQUERYAVAILABLENODES) {
            this->CMSG_TAXIQUERYAVAILABLENODES = std::move(other.CMSG_TAXIQUERYAVAILABLENODES);
        }
        if (opcode == Opcode::CMSG_ACTIVATETAXI) {
            this->CMSG_ACTIVATETAXI = std::move(other.CMSG_ACTIVATETAXI);
        }
        if (opcode == Opcode::CMSG_TRAINER_LIST) {
            this->CMSG_TRAINER_LIST = std::move(other.CMSG_TRAINER_LIST);
        }
        if (opcode == Opcode::CMSG_TRAINER_BUY_SPELL) {
            this->CMSG_TRAINER_BUY_SPELL = std::move(other.CMSG_TRAINER_BUY_SPELL);
        }
        if (opcode == Opcode::CMSG_BINDER_ACTIVATE) {
            this->CMSG_BINDER_ACTIVATE = std::move(other.CMSG_BINDER_ACTIVATE);
        }
        if (opcode == Opcode::CMSG_BANKER_ACTIVATE) {
            this->CMSG_BANKER_ACTIVATE = std::move(other.CMSG_BANKER_ACTIVATE);
        }
        if (opcode == Opcode::CMSG_BUY_BANK_SLOT) {
            this->CMSG_BUY_BANK_SLOT = std::move(other.CMSG_BUY_BANK_SLOT);
        }
        if (opcode == Opcode::CMSG_PETITION_SHOWLIST) {
            this->CMSG_PETITION_SHOWLIST = std::move(other.CMSG_PETITION_SHOWLIST);
        }
        if (opcode == Opcode::CMSG_PETITION_BUY) {
            this->CMSG_PETITION_BUY = std::move(other.CMSG_PETITION_BUY);
        }
        if (opcode == Opcode::CMSG_PETITION_SHOW_SIGNATURES) {
            this->CMSG_PETITION_SHOW_SIGNATURES = std::move(other.CMSG_PETITION_SHOW_SIGNATURES);
        }
        if (opcode == Opcode::CMSG_PETITION_SIGN) {
            this->CMSG_PETITION_SIGN = std::move(other.CMSG_PETITION_SIGN);
        }
        if (opcode == Opcode::MSG_PETITION_DECLINE) {
            this->MSG_PETITION_DECLINE = std::move(other.MSG_PETITION_DECLINE);
        }
        if (opcode == Opcode::CMSG_OFFER_PETITION) {
            this->CMSG_OFFER_PETITION = std::move(other.CMSG_OFFER_PETITION);
        }
        if (opcode == Opcode::CMSG_TURN_IN_PETITION) {
            this->CMSG_TURN_IN_PETITION = std::move(other.CMSG_TURN_IN_PETITION);
        }
        if (opcode == Opcode::CMSG_PETITION_QUERY) {
            this->CMSG_PETITION_QUERY = std::move(other.CMSG_PETITION_QUERY);
        }
        if (opcode == Opcode::CMSG_BUG) {
            this->CMSG_BUG = std::move(other.CMSG_BUG);
        }
        if (opcode == Opcode::CMSG_PLAYED_TIME) {
            this->CMSG_PLAYED_TIME = std::move(other.CMSG_PLAYED_TIME);
        }
        if (opcode == Opcode::CMSG_QUERY_TIME) {
            this->CMSG_QUERY_TIME = std::move(other.CMSG_QUERY_TIME);
        }
        if (opcode == Opcode::CMSG_RECLAIM_CORPSE) {
            this->CMSG_RECLAIM_CORPSE = std::move(other.CMSG_RECLAIM_CORPSE);
        }
        if (opcode == Opcode::CMSG_WRAP_ITEM) {
            this->CMSG_WRAP_ITEM = std::move(other.CMSG_WRAP_ITEM);
        }
        if (opcode == Opcode::MSG_MINIMAP_PING) {
            this->MSG_MINIMAP_PING = std::move(other.MSG_MINIMAP_PING);
        }
        if (opcode == Opcode::CMSG_PING) {
            this->CMSG_PING = std::move(other.CMSG_PING);
        }
        if (opcode == Opcode::CMSG_SETSHEATHED) {
            this->CMSG_SETSHEATHED = std::move(other.CMSG_SETSHEATHED);
        }
        if (opcode == Opcode::CMSG_QUEST_POI_QUERY) {
            this->CMSG_QUEST_POI_QUERY = std::move(other.CMSG_QUEST_POI_QUERY);
        }
        if (opcode == Opcode::CMSG_AUTH_SESSION) {
            this->CMSG_AUTH_SESSION = std::move(other.CMSG_AUTH_SESSION);
        }
        if (opcode == Opcode::CMSG_PET_CAST_SPELL) {
            this->CMSG_PET_CAST_SPELL = std::move(other.CMSG_PET_CAST_SPELL);
        }
        if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
            this->MSG_SAVE_GUILD_EMBLEM = std::move(other.MSG_SAVE_GUILD_EMBLEM);
        }
        if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
            this->MSG_TABARDVENDOR_ACTIVATE = std::move(other.MSG_TABARDVENDOR_ACTIVATE);
        }
        if (opcode == Opcode::CMSG_ZONEUPDATE) {
            this->CMSG_ZONEUPDATE = std::move(other.CMSG_ZONEUPDATE);
        }
        if (opcode == Opcode::MSG_RANDOM_ROLL) {
            this->MSG_RANDOM_ROLL = std::move(other.MSG_RANDOM_ROLL);
        }
        if (opcode == Opcode::CMSG_UNLEARN_SKILL) {
            this->CMSG_UNLEARN_SKILL = std::move(other.CMSG_UNLEARN_SKILL);
        }
        if (opcode == Opcode::CMSG_GMTICKET_CREATE) {
            this->CMSG_GMTICKET_CREATE = std::move(other.CMSG_GMTICKET_CREATE);
        }
        if (opcode == Opcode::CMSG_GMTICKET_UPDATETEXT) {
            this->CMSG_GMTICKET_UPDATETEXT = std::move(other.CMSG_GMTICKET_UPDATETEXT);
        }
        if (opcode == Opcode::CMSG_REQUEST_ACCOUNT_DATA) {
            this->CMSG_REQUEST_ACCOUNT_DATA = std::move(other.CMSG_REQUEST_ACCOUNT_DATA);
        }
        if (opcode == Opcode::CMSG_UPDATE_ACCOUNT_DATA) {
            this->CMSG_UPDATE_ACCOUNT_DATA = std::move(other.CMSG_UPDATE_ACCOUNT_DATA);
        }
        if (opcode == Opcode::CMSG_GMTICKET_GETTICKET) {
            this->CMSG_GMTICKET_GETTICKET = std::move(other.CMSG_GMTICKET_GETTICKET);
        }
        if (opcode == Opcode::CMSG_UNLEARN_TALENTS) {
            this->CMSG_UNLEARN_TALENTS = std::move(other.CMSG_UNLEARN_TALENTS);
        }
        if (opcode == Opcode::MSG_CORPSE_QUERY) {
            this->MSG_CORPSE_QUERY = std::move(other.MSG_CORPSE_QUERY);
        }
        if (opcode == Opcode::CMSG_GMTICKET_DELETETICKET) {
            this->CMSG_GMTICKET_DELETETICKET = std::move(other.CMSG_GMTICKET_DELETETICKET);
        }
        if (opcode == Opcode::CMSG_GMTICKET_SYSTEMSTATUS) {
            this->CMSG_GMTICKET_SYSTEMSTATUS = std::move(other.CMSG_GMTICKET_SYSTEMSTATUS);
        }
        if (opcode == Opcode::CMSG_SPIRIT_HEALER_ACTIVATE) {
            this->CMSG_SPIRIT_HEALER_ACTIVATE = std::move(other.CMSG_SPIRIT_HEALER_ACTIVATE);
        }
        if (opcode == Opcode::CMSG_CHAT_IGNORED) {
            this->CMSG_CHAT_IGNORED = std::move(other.CMSG_CHAT_IGNORED);
        }
        if (opcode == Opcode::CMSG_GUILD_RANK) {
            this->CMSG_GUILD_RANK = std::move(other.CMSG_GUILD_RANK);
        }
        if (opcode == Opcode::CMSG_GUILD_ADD_RANK) {
            this->CMSG_GUILD_ADD_RANK = std::move(other.CMSG_GUILD_ADD_RANK);
        }
        if (opcode == Opcode::CMSG_GUILD_DEL_RANK) {
            this->CMSG_GUILD_DEL_RANK = std::move(other.CMSG_GUILD_DEL_RANK);
        }
        if (opcode == Opcode::CMSG_GUILD_SET_PUBLIC_NOTE) {
            this->CMSG_GUILD_SET_PUBLIC_NOTE = std::move(other.CMSG_GUILD_SET_PUBLIC_NOTE);
        }
        if (opcode == Opcode::CMSG_GUILD_SET_OFFICER_NOTE) {
            this->CMSG_GUILD_SET_OFFICER_NOTE = std::move(other.CMSG_GUILD_SET_OFFICER_NOTE);
        }
        if (opcode == Opcode::CMSG_SEND_MAIL) {
            this->CMSG_SEND_MAIL = std::move(other.CMSG_SEND_MAIL);
        }
        if (opcode == Opcode::CMSG_GET_MAIL_LIST) {
            this->CMSG_GET_MAIL_LIST = std::move(other.CMSG_GET_MAIL_LIST);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_LIST) {
            this->CMSG_BATTLEFIELD_LIST = std::move(other.CMSG_BATTLEFIELD_LIST);
        }
        if (opcode == Opcode::CMSG_ITEM_TEXT_QUERY) {
            this->CMSG_ITEM_TEXT_QUERY = std::move(other.CMSG_ITEM_TEXT_QUERY);
        }
        if (opcode == Opcode::CMSG_MAIL_TAKE_MONEY) {
            this->CMSG_MAIL_TAKE_MONEY = std::move(other.CMSG_MAIL_TAKE_MONEY);
        }
        if (opcode == Opcode::CMSG_MAIL_TAKE_ITEM) {
            this->CMSG_MAIL_TAKE_ITEM = std::move(other.CMSG_MAIL_TAKE_ITEM);
        }
        if (opcode == Opcode::CMSG_MAIL_MARK_AS_READ) {
            this->CMSG_MAIL_MARK_AS_READ = std::move(other.CMSG_MAIL_MARK_AS_READ);
        }
        if (opcode == Opcode::CMSG_MAIL_RETURN_TO_SENDER) {
            this->CMSG_MAIL_RETURN_TO_SENDER = std::move(other.CMSG_MAIL_RETURN_TO_SENDER);
        }
        if (opcode == Opcode::CMSG_MAIL_DELETE) {
            this->CMSG_MAIL_DELETE = std::move(other.CMSG_MAIL_DELETE);
        }
        if (opcode == Opcode::CMSG_MAIL_CREATE_TEXT_ITEM) {
            this->CMSG_MAIL_CREATE_TEXT_ITEM = std::move(other.CMSG_MAIL_CREATE_TEXT_ITEM);
        }
        if (opcode == Opcode::CMSG_LEARN_TALENT) {
            this->CMSG_LEARN_TALENT = std::move(other.CMSG_LEARN_TALENT);
        }
        if (opcode == Opcode::CMSG_TOGGLE_PVP) {
            this->CMSG_TOGGLE_PVP = std::move(other.CMSG_TOGGLE_PVP);
        }
        if (opcode == Opcode::MSG_AUCTION_HELLO) {
            this->MSG_AUCTION_HELLO = std::move(other.MSG_AUCTION_HELLO);
        }
        if (opcode == Opcode::CMSG_AUCTION_SELL_ITEM) {
            this->CMSG_AUCTION_SELL_ITEM = std::move(other.CMSG_AUCTION_SELL_ITEM);
        }
        if (opcode == Opcode::CMSG_AUCTION_REMOVE_ITEM) {
            this->CMSG_AUCTION_REMOVE_ITEM = std::move(other.CMSG_AUCTION_REMOVE_ITEM);
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_ITEMS) {
            this->CMSG_AUCTION_LIST_ITEMS = std::move(other.CMSG_AUCTION_LIST_ITEMS);
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS) {
            this->CMSG_AUCTION_LIST_OWNER_ITEMS = std::move(other.CMSG_AUCTION_LIST_OWNER_ITEMS);
        }
        if (opcode == Opcode::CMSG_AUCTION_PLACE_BID) {
            this->CMSG_AUCTION_PLACE_BID = std::move(other.CMSG_AUCTION_PLACE_BID);
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS) {
            this->CMSG_AUCTION_LIST_BIDDER_ITEMS = std::move(other.CMSG_AUCTION_LIST_BIDDER_ITEMS);
        }
        if (opcode == Opcode::CMSG_SET_AMMO) {
            this->CMSG_SET_AMMO = std::move(other.CMSG_SET_AMMO);
        }
        if (opcode == Opcode::CMSG_SET_ACTIVE_MOVER) {
            this->CMSG_SET_ACTIVE_MOVER = std::move(other.CMSG_SET_ACTIVE_MOVER);
        }
        if (opcode == Opcode::CMSG_PET_CANCEL_AURA) {
            this->CMSG_PET_CANCEL_AURA = std::move(other.CMSG_PET_CANCEL_AURA);
        }
        if (opcode == Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL) {
            this->CMSG_CANCEL_AUTO_REPEAT_SPELL = std::move(other.CMSG_CANCEL_AUTO_REPEAT_SPELL);
        }
        if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
            this->MSG_LIST_STABLED_PETS = std::move(other.MSG_LIST_STABLED_PETS);
        }
        if (opcode == Opcode::CMSG_STABLE_PET) {
            this->CMSG_STABLE_PET = std::move(other.CMSG_STABLE_PET);
        }
        if (opcode == Opcode::CMSG_UNSTABLE_PET) {
            this->CMSG_UNSTABLE_PET = std::move(other.CMSG_UNSTABLE_PET);
        }
        if (opcode == Opcode::CMSG_BUY_STABLE_SLOT) {
            this->CMSG_BUY_STABLE_SLOT = std::move(other.CMSG_BUY_STABLE_SLOT);
        }
        if (opcode == Opcode::CMSG_STABLE_SWAP_PET) {
            this->CMSG_STABLE_SWAP_PET = std::move(other.CMSG_STABLE_SWAP_PET);
        }
        if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
            this->MSG_QUEST_PUSH_RESULT = std::move(other.MSG_QUEST_PUSH_RESULT);
        }
        if (opcode == Opcode::CMSG_REQUEST_PET_INFO) {
            this->CMSG_REQUEST_PET_INFO = std::move(other.CMSG_REQUEST_PET_INFO);
        }
        if (opcode == Opcode::CMSG_FAR_SIGHT) {
            this->CMSG_FAR_SIGHT = std::move(other.CMSG_FAR_SIGHT);
        }
        if (opcode == Opcode::CMSG_GROUP_CHANGE_SUB_GROUP) {
            this->CMSG_GROUP_CHANGE_SUB_GROUP = std::move(other.CMSG_GROUP_CHANGE_SUB_GROUP);
        }
        if (opcode == Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS) {
            this->CMSG_REQUEST_PARTY_MEMBER_STATS = std::move(other.CMSG_REQUEST_PARTY_MEMBER_STATS);
        }
        if (opcode == Opcode::CMSG_GROUP_SWAP_SUB_GROUP) {
            this->CMSG_GROUP_SWAP_SUB_GROUP = std::move(other.CMSG_GROUP_SWAP_SUB_GROUP);
        }
        if (opcode == Opcode::CMSG_AUTOSTORE_BANK_ITEM) {
            this->CMSG_AUTOSTORE_BANK_ITEM = std::move(other.CMSG_AUTOSTORE_BANK_ITEM);
        }
        if (opcode == Opcode::CMSG_AUTOBANK_ITEM) {
            this->CMSG_AUTOBANK_ITEM = std::move(other.CMSG_AUTOBANK_ITEM);
        }
        if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
            this->MSG_QUERY_NEXT_MAIL_TIME = std::move(other.MSG_QUERY_NEXT_MAIL_TIME);
        }
        if (opcode == Opcode::CMSG_GROUP_RAID_CONVERT) {
            this->CMSG_GROUP_RAID_CONVERT = std::move(other.CMSG_GROUP_RAID_CONVERT);
        }
        if (opcode == Opcode::CMSG_GROUP_ASSISTANT_LEADER) {
            this->CMSG_GROUP_ASSISTANT_LEADER = std::move(other.CMSG_GROUP_ASSISTANT_LEADER);
        }
        if (opcode == Opcode::CMSG_BUYBACK_ITEM) {
            this->CMSG_BUYBACK_ITEM = std::move(other.CMSG_BUYBACK_ITEM);
        }
        if (opcode == Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND) {
            this->CMSG_SET_SAVED_INSTANCE_EXTEND = std::move(other.CMSG_SET_SAVED_INSTANCE_EXTEND);
        }
        if (opcode == Opcode::CMSG_LFG_GET_STATUS) {
            this->CMSG_LFG_GET_STATUS = std::move(other.CMSG_LFG_GET_STATUS);
        }
        if (opcode == Opcode::CMSG_GMTICKETSYSTEM_TOGGLE) {
            this->CMSG_GMTICKETSYSTEM_TOGGLE = std::move(other.CMSG_GMTICKETSYSTEM_TOGGLE);
        }
        if (opcode == Opcode::CMSG_CANCEL_GROWTH_AURA) {
            this->CMSG_CANCEL_GROWTH_AURA = std::move(other.CMSG_CANCEL_GROWTH_AURA);
        }
        if (opcode == Opcode::CMSG_LOOT_ROLL) {
            this->CMSG_LOOT_ROLL = std::move(other.CMSG_LOOT_ROLL);
        }
        if (opcode == Opcode::CMSG_LOOT_MASTER_GIVE) {
            this->CMSG_LOOT_MASTER_GIVE = std::move(other.CMSG_LOOT_MASTER_GIVE);
        }
        if (opcode == Opcode::CMSG_REPAIR_ITEM) {
            this->CMSG_REPAIR_ITEM = std::move(other.CMSG_REPAIR_ITEM);
        }
        if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
            this->MSG_TALENT_WIPE_CONFIRM = std::move(other.MSG_TALENT_WIPE_CONFIRM);
        }
        if (opcode == Opcode::CMSG_SUMMON_RESPONSE) {
            this->CMSG_SUMMON_RESPONSE = std::move(other.CMSG_SUMMON_RESPONSE);
        }
        if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
            this->MSG_MOVE_WATER_WALK = std::move(other.MSG_MOVE_WATER_WALK);
        }
        if (opcode == Opcode::CMSG_SELF_RES) {
            this->CMSG_SELF_RES = std::move(other.CMSG_SELF_RES);
        }
        if (opcode == Opcode::CMSG_TOGGLE_HELM) {
            this->CMSG_TOGGLE_HELM = std::move(other.CMSG_TOGGLE_HELM);
        }
        if (opcode == Opcode::CMSG_TOGGLE_CLOAK) {
            this->CMSG_TOGGLE_CLOAK = std::move(other.CMSG_TOGGLE_CLOAK);
        }
        if (opcode == Opcode::CMSG_SET_ACTIONBAR_TOGGLES) {
            this->CMSG_SET_ACTIONBAR_TOGGLES = std::move(other.CMSG_SET_ACTIONBAR_TOGGLES);
        }
        if (opcode == Opcode::MSG_PETITION_RENAME) {
            this->MSG_PETITION_RENAME = std::move(other.MSG_PETITION_RENAME);
        }
        if (opcode == Opcode::CMSG_ITEM_NAME_QUERY) {
            this->CMSG_ITEM_NAME_QUERY = std::move(other.CMSG_ITEM_NAME_QUERY);
        }
        if (opcode == Opcode::CMSG_CHAR_RENAME) {
            this->CMSG_CHAR_RENAME = std::move(other.CMSG_CHAR_RENAME);
        }
        if (opcode == Opcode::CMSG_MOVE_SPLINE_DONE) {
            this->CMSG_MOVE_SPLINE_DONE = std::move(other.CMSG_MOVE_SPLINE_DONE);
        }
        if (opcode == Opcode::CMSG_MOVE_FALL_RESET) {
            this->CMSG_MOVE_FALL_RESET = std::move(other.CMSG_MOVE_FALL_RESET);
        }
        if (opcode == Opcode::CMSG_REQUEST_RAID_INFO) {
            this->CMSG_REQUEST_RAID_INFO = std::move(other.CMSG_REQUEST_RAID_INFO);
        }
        if (opcode == Opcode::CMSG_MOVE_TIME_SKIPPED) {
            this->CMSG_MOVE_TIME_SKIPPED = std::move(other.CMSG_MOVE_TIME_SKIPPED);
        }
        if (opcode == Opcode::CMSG_MOVE_FEATHER_FALL_ACK) {
            this->CMSG_MOVE_FEATHER_FALL_ACK = std::move(other.CMSG_MOVE_FEATHER_FALL_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_WATER_WALK_ACK) {
            this->CMSG_MOVE_WATER_WALK_ACK = std::move(other.CMSG_MOVE_WATER_WALK_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER) {
            this->CMSG_MOVE_NOT_ACTIVE_MOVER = std::move(other.CMSG_MOVE_NOT_ACTIVE_MOVER);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_STATUS) {
            this->CMSG_BATTLEFIELD_STATUS = std::move(other.CMSG_BATTLEFIELD_STATUS);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_PORT) {
            this->CMSG_BATTLEFIELD_PORT = std::move(other.CMSG_BATTLEFIELD_PORT);
        }
        if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
            this->MSG_INSPECT_HONOR_STATS = std::move(other.MSG_INSPECT_HONOR_STATS);
        }
        if (opcode == Opcode::CMSG_BATTLEMASTER_HELLO) {
            this->CMSG_BATTLEMASTER_HELLO = std::move(other.CMSG_BATTLEMASTER_HELLO);
        }
        if (opcode == Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_WALK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_WALK_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK) {
            this->CMSG_FORCE_TURN_RATE_CHANGE_ACK = std::move(other.CMSG_FORCE_TURN_RATE_CHANGE_ACK);
        }
        if (opcode == Opcode::MSG_PVP_LOG_DATA) {
            this->MSG_PVP_LOG_DATA = std::move(other.MSG_PVP_LOG_DATA);
        }
        if (opcode == Opcode::CMSG_LEAVE_BATTLEFIELD) {
            this->CMSG_LEAVE_BATTLEFIELD = std::move(other.CMSG_LEAVE_BATTLEFIELD);
        }
        if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY) {
            this->CMSG_AREA_SPIRIT_HEALER_QUERY = std::move(other.CMSG_AREA_SPIRIT_HEALER_QUERY);
        }
        if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE) {
            this->CMSG_AREA_SPIRIT_HEALER_QUEUE = std::move(other.CMSG_AREA_SPIRIT_HEALER_QUEUE);
        }
        if (opcode == Opcode::CMSG_WARDEN_DATA) {
            this->CMSG_WARDEN_DATA = std::move(other.CMSG_WARDEN_DATA);
        }
        if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
            this->MSG_BATTLEGROUND_PLAYER_POSITIONS = std::move(other.MSG_BATTLEGROUND_PLAYER_POSITIONS);
        }
        if (opcode == Opcode::CMSG_PET_STOP_ATTACK) {
            this->CMSG_PET_STOP_ATTACK = std::move(other.CMSG_PET_STOP_ATTACK);
        }
        if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN) {
            this->CMSG_BATTLEMASTER_JOIN = std::move(other.CMSG_BATTLEMASTER_JOIN);
        }
        if (opcode == Opcode::CMSG_PET_UNLEARN) {
            this->CMSG_PET_UNLEARN = std::move(other.CMSG_PET_UNLEARN);
        }
        if (opcode == Opcode::CMSG_PET_SPELL_AUTOCAST) {
            this->CMSG_PET_SPELL_AUTOCAST = std::move(other.CMSG_PET_SPELL_AUTOCAST);
        }
        if (opcode == Opcode::CMSG_GUILD_INFO_TEXT) {
            this->CMSG_GUILD_INFO_TEXT = std::move(other.CMSG_GUILD_INFO_TEXT);
        }
        if (opcode == Opcode::CMSG_ACTIVATETAXIEXPRESS) {
            this->CMSG_ACTIVATETAXIEXPRESS = std::move(other.CMSG_ACTIVATETAXIEXPRESS);
        }
        if (opcode == Opcode::CMSG_SET_FACTION_INACTIVE) {
            this->CMSG_SET_FACTION_INACTIVE = std::move(other.CMSG_SET_FACTION_INACTIVE);
        }
        if (opcode == Opcode::CMSG_SET_WATCHED_FACTION) {
            this->CMSG_SET_WATCHED_FACTION = std::move(other.CMSG_SET_WATCHED_FACTION);
        }
        if (opcode == Opcode::CMSG_RESET_INSTANCES) {
            this->CMSG_RESET_INSTANCES = std::move(other.CMSG_RESET_INSTANCES);
        }
        if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
            this->MSG_RAID_TARGET_UPDATE = std::move(other.MSG_RAID_TARGET_UPDATE);
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK) {
            this->MSG_RAID_READY_CHECK = std::move(other.MSG_RAID_READY_CHECK);
        }
        if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
            this->MSG_SET_DUNGEON_DIFFICULTY = std::move(other.MSG_SET_DUNGEON_DIFFICULTY);
        }
        if (opcode == Opcode::CMSG_GMSURVEY_SUBMIT) {
            this->CMSG_GMSURVEY_SUBMIT = std::move(other.CMSG_GMSURVEY_SUBMIT);
        }
        if (opcode == Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) {
            this->CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK = std::move(other.CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_SET_CAN_FLY_ACK) {
            this->CMSG_MOVE_SET_CAN_FLY_ACK = std::move(other.CMSG_MOVE_SET_CAN_FLY_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_SET_FLY) {
            this->CMSG_MOVE_SET_FLY = std::move(other.CMSG_MOVE_SET_FLY);
        }
        if (opcode == Opcode::CMSG_SOCKET_GEMS) {
            this->CMSG_SOCKET_GEMS = std::move(other.CMSG_SOCKET_GEMS);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_ROSTER) {
            this->CMSG_ARENA_TEAM_ROSTER = std::move(other.CMSG_ARENA_TEAM_ROSTER);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_INVITE) {
            this->CMSG_ARENA_TEAM_INVITE = std::move(other.CMSG_ARENA_TEAM_INVITE);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_ACCEPT) {
            this->CMSG_ARENA_TEAM_ACCEPT = std::move(other.CMSG_ARENA_TEAM_ACCEPT);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_DECLINE) {
            this->CMSG_ARENA_TEAM_DECLINE = std::move(other.CMSG_ARENA_TEAM_DECLINE);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_LEAVE) {
            this->CMSG_ARENA_TEAM_LEAVE = std::move(other.CMSG_ARENA_TEAM_LEAVE);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_REMOVE) {
            this->CMSG_ARENA_TEAM_REMOVE = std::move(other.CMSG_ARENA_TEAM_REMOVE);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_DISBAND) {
            this->CMSG_ARENA_TEAM_DISBAND = std::move(other.CMSG_ARENA_TEAM_DISBAND);
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_LEADER) {
            this->CMSG_ARENA_TEAM_LEADER = std::move(other.CMSG_ARENA_TEAM_LEADER);
        }
        if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN_ARENA) {
            this->CMSG_BATTLEMASTER_JOIN_ARENA = std::move(other.CMSG_BATTLEMASTER_JOIN_ARENA);
        }
        if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
            this->MSG_MOVE_START_ASCEND = std::move(other.MSG_MOVE_START_ASCEND);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
            this->MSG_MOVE_STOP_ASCEND = std::move(other.MSG_MOVE_STOP_ASCEND);
        }
        if (opcode == Opcode::CMSG_LFG_JOIN) {
            this->CMSG_LFG_JOIN = std::move(other.CMSG_LFG_JOIN);
        }
        if (opcode == Opcode::CMSG_LFG_LEAVE) {
            this->CMSG_LFG_LEAVE = std::move(other.CMSG_LFG_LEAVE);
        }
        if (opcode == Opcode::CMSG_SEARCH_LFG_JOIN) {
            this->CMSG_SEARCH_LFG_JOIN = std::move(other.CMSG_SEARCH_LFG_JOIN);
        }
        if (opcode == Opcode::CMSG_SEARCH_LFG_LEAVE) {
            this->CMSG_SEARCH_LFG_LEAVE = std::move(other.CMSG_SEARCH_LFG_LEAVE);
        }
        if (opcode == Opcode::CMSG_LFG_PROPOSAL_RESULT) {
            this->CMSG_LFG_PROPOSAL_RESULT = std::move(other.CMSG_LFG_PROPOSAL_RESULT);
        }
        if (opcode == Opcode::CMSG_SET_LFG_COMMENT) {
            this->CMSG_SET_LFG_COMMENT = std::move(other.CMSG_SET_LFG_COMMENT);
        }
        if (opcode == Opcode::CMSG_LFG_SET_ROLES) {
            this->CMSG_LFG_SET_ROLES = std::move(other.CMSG_LFG_SET_ROLES);
        }
        if (opcode == Opcode::CMSG_LFG_SET_BOOT_VOTE) {
            this->CMSG_LFG_SET_BOOT_VOTE = std::move(other.CMSG_LFG_SET_BOOT_VOTE);
        }
        if (opcode == Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) {
            this->CMSG_LFD_PLAYER_LOCK_INFO_REQUEST = std::move(other.CMSG_LFD_PLAYER_LOCK_INFO_REQUEST);
        }
        if (opcode == Opcode::CMSG_LFG_TELEPORT) {
            this->CMSG_LFG_TELEPORT = std::move(other.CMSG_LFG_TELEPORT);
        }
        if (opcode == Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST) {
            this->CMSG_LFD_PARTY_LOCK_INFO_REQUEST = std::move(other.CMSG_LFD_PARTY_LOCK_INFO_REQUEST);
        }
        if (opcode == Opcode::CMSG_SET_TITLE) {
            this->CMSG_SET_TITLE = std::move(other.CMSG_SET_TITLE);
        }
        if (opcode == Opcode::CMSG_CANCEL_MOUNT_AURA) {
            this->CMSG_CANCEL_MOUNT_AURA = std::move(other.CMSG_CANCEL_MOUNT_AURA);
        }
        if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
            this->MSG_INSPECT_ARENA_TEAMS = std::move(other.MSG_INSPECT_ARENA_TEAMS);
        }
        if (opcode == Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT) {
            this->CMSG_CANCEL_TEMP_ENCHANTMENT = std::move(other.CMSG_CANCEL_TEMP_ENCHANTMENT);
        }
        if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
            this->MSG_MOVE_SET_FLIGHT_BACK_SPEED = std::move(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED);
        }
        if (opcode == Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK);
        }
        if (opcode == Opcode::CMSG_SET_TAXI_BENCHMARK_MODE) {
            this->CMSG_SET_TAXI_BENCHMARK_MODE = std::move(other.CMSG_SET_TAXI_BENCHMARK_MODE);
        }
        if (opcode == Opcode::CMSG_REALM_SPLIT) {
            this->CMSG_REALM_SPLIT = std::move(other.CMSG_REALM_SPLIT);
        }
        if (opcode == Opcode::CMSG_MOVE_CHNG_TRANSPORT) {
            this->CMSG_MOVE_CHNG_TRANSPORT = std::move(other.CMSG_MOVE_CHNG_TRANSPORT);
        }
        if (opcode == Opcode::MSG_PARTY_ASSIGNMENT) {
            this->MSG_PARTY_ASSIGNMENT = std::move(other.MSG_PARTY_ASSIGNMENT);
        }
        if (opcode == Opcode::CMSG_TIME_SYNC_RESP) {
            this->CMSG_TIME_SYNC_RESP = std::move(other.CMSG_TIME_SYNC_RESP);
        }
        if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
            this->MSG_MOVE_START_DESCEND = std::move(other.MSG_MOVE_START_DESCEND);
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
            this->MSG_RAID_READY_CHECK_CONFIRM = std::move(other.MSG_RAID_READY_CHECK_CONFIRM);
        }
        if (opcode == Opcode::CMSG_VOICE_SESSION_ENABLE) {
            this->CMSG_VOICE_SESSION_ENABLE = std::move(other.CMSG_VOICE_SESSION_ENABLE);
        }
        if (opcode == Opcode::CMSG_COMMENTATOR_ENABLE) {
            this->CMSG_COMMENTATOR_ENABLE = std::move(other.CMSG_COMMENTATOR_ENABLE);
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK_FINISHED) {
            this->MSG_RAID_READY_CHECK_FINISHED = std::move(other.MSG_RAID_READY_CHECK_FINISHED);
        }
        if (opcode == Opcode::CMSG_COMPLAIN) {
            this->CMSG_COMPLAIN = std::move(other.CMSG_COMPLAIN);
        }
        if (opcode == Opcode::CMSG_CHANNEL_DISPLAY_LIST) {
            this->CMSG_CHANNEL_DISPLAY_LIST = std::move(other.CMSG_CHANNEL_DISPLAY_LIST);
        }
        if (opcode == Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL) {
            this->CMSG_SET_ACTIVE_VOICE_CHANNEL = std::move(other.CMSG_SET_ACTIVE_VOICE_CHANNEL);
        }
        if (opcode == Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT) {
            this->CMSG_GET_CHANNEL_MEMBER_COUNT = std::move(other.CMSG_GET_CHANNEL_MEMBER_COUNT);
        }
        if (opcode == Opcode::CMSG_CHANNEL_VOICE_ON) {
            this->CMSG_CHANNEL_VOICE_ON = std::move(other.CMSG_CHANNEL_VOICE_ON);
        }
        if (opcode == Opcode::CMSG_REPORT_PVP_AFK) {
            this->CMSG_REPORT_PVP_AFK = std::move(other.CMSG_REPORT_PVP_AFK);
        }
        if (opcode == Opcode::CMSG_GUILD_BANKER_ACTIVATE) {
            this->CMSG_GUILD_BANKER_ACTIVATE = std::move(other.CMSG_GUILD_BANKER_ACTIVATE);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_QUERY_TAB) {
            this->CMSG_GUILD_BANK_QUERY_TAB = std::move(other.CMSG_GUILD_BANK_QUERY_TAB);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_SWAP_ITEMS) {
            this->CMSG_GUILD_BANK_SWAP_ITEMS = std::move(other.CMSG_GUILD_BANK_SWAP_ITEMS);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_BUY_TAB) {
            this->CMSG_GUILD_BANK_BUY_TAB = std::move(other.CMSG_GUILD_BANK_BUY_TAB);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_UPDATE_TAB) {
            this->CMSG_GUILD_BANK_UPDATE_TAB = std::move(other.CMSG_GUILD_BANK_UPDATE_TAB);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY) {
            this->CMSG_GUILD_BANK_DEPOSIT_MONEY = std::move(other.CMSG_GUILD_BANK_DEPOSIT_MONEY);
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY) {
            this->CMSG_GUILD_BANK_WITHDRAW_MONEY = std::move(other.CMSG_GUILD_BANK_WITHDRAW_MONEY);
        }
        if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
            this->MSG_GUILD_BANK_LOG_QUERY = std::move(other.MSG_GUILD_BANK_LOG_QUERY);
        }
        if (opcode == Opcode::CMSG_SET_CHANNEL_WATCH) {
            this->CMSG_SET_CHANNEL_WATCH = std::move(other.CMSG_SET_CHANNEL_WATCH);
        }
        if (opcode == Opcode::CMSG_CLEAR_CHANNEL_WATCH) {
            this->CMSG_CLEAR_CHANNEL_WATCH = std::move(other.CMSG_CLEAR_CHANNEL_WATCH);
        }
        if (opcode == Opcode::CMSG_SPELLCLICK) {
            this->CMSG_SPELLCLICK = std::move(other.CMSG_SPELLCLICK);
        }
        if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
            this->MSG_GUILD_PERMISSIONS = std::move(other.MSG_GUILD_PERMISSIONS);
        }
        if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
            this->MSG_GUILD_BANK_MONEY_WITHDRAWN = std::move(other.MSG_GUILD_BANK_MONEY_WITHDRAWN);
        }
        if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
            this->MSG_GUILD_EVENT_LOG_QUERY = std::move(other.MSG_GUILD_EVENT_LOG_QUERY);
        }
        if (opcode == Opcode::CMSG_GET_MIRRORIMAGE_DATA) {
            this->CMSG_GET_MIRRORIMAGE_DATA = std::move(other.CMSG_GET_MIRRORIMAGE_DATA);
        }
        if (opcode == Opcode::CMSG_KEEP_ALIVE) {
            this->CMSG_KEEP_ALIVE = std::move(other.CMSG_KEEP_ALIVE);
        }
        if (opcode == Opcode::CMSG_OPT_OUT_OF_LOOT) {
            this->CMSG_OPT_OUT_OF_LOOT = std::move(other.CMSG_OPT_OUT_OF_LOOT);
        }
        if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
            this->MSG_QUERY_GUILD_BANK_TEXT = std::move(other.MSG_QUERY_GUILD_BANK_TEXT);
        }
        if (opcode == Opcode::CMSG_SET_GUILD_BANK_TEXT) {
            this->CMSG_SET_GUILD_BANK_TEXT = std::move(other.CMSG_SET_GUILD_BANK_TEXT);
        }
        if (opcode == Opcode::CMSG_GRANT_LEVEL) {
            this->CMSG_GRANT_LEVEL = std::move(other.CMSG_GRANT_LEVEL);
        }
        if (opcode == Opcode::CMSG_TOTEM_DESTROYED) {
            this->CMSG_TOTEM_DESTROYED = std::move(other.CMSG_TOTEM_DESTROYED);
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) {
            this->CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY = std::move(other.CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY);
        }
        if (opcode == Opcode::CMSG_SET_PLAYER_DECLINED_NAMES) {
            this->CMSG_SET_PLAYER_DECLINED_NAMES = std::move(other.CMSG_SET_PLAYER_DECLINED_NAMES);
        }
        if (opcode == Opcode::CMSG_ACCEPT_LEVEL_GRANT) {
            this->CMSG_ACCEPT_LEVEL_GRANT = std::move(other.CMSG_ACCEPT_LEVEL_GRANT);
        }
        if (opcode == Opcode::CMSG_ALTER_APPEARANCE) {
            this->CMSG_ALTER_APPEARANCE = std::move(other.CMSG_ALTER_APPEARANCE);
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_CALENDAR) {
            this->CMSG_CALENDAR_GET_CALENDAR = std::move(other.CMSG_CALENDAR_GET_CALENDAR);
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_EVENT) {
            this->CMSG_CALENDAR_GET_EVENT = std::move(other.CMSG_CALENDAR_GET_EVENT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_GUILD_FILTER) {
            this->CMSG_CALENDAR_GUILD_FILTER = std::move(other.CMSG_CALENDAR_GUILD_FILTER);
        }
        if (opcode == Opcode::CMSG_CALENDAR_ARENA_TEAM) {
            this->CMSG_CALENDAR_ARENA_TEAM = std::move(other.CMSG_CALENDAR_ARENA_TEAM);
        }
        if (opcode == Opcode::CMSG_CALENDAR_ADD_EVENT) {
            this->CMSG_CALENDAR_ADD_EVENT = std::move(other.CMSG_CALENDAR_ADD_EVENT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_UPDATE_EVENT) {
            this->CMSG_CALENDAR_UPDATE_EVENT = std::move(other.CMSG_CALENDAR_UPDATE_EVENT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_REMOVE_EVENT) {
            this->CMSG_CALENDAR_REMOVE_EVENT = std::move(other.CMSG_CALENDAR_REMOVE_EVENT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_COPY_EVENT) {
            this->CMSG_CALENDAR_COPY_EVENT = std::move(other.CMSG_CALENDAR_COPY_EVENT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_INVITE) {
            this->CMSG_CALENDAR_EVENT_INVITE = std::move(other.CMSG_CALENDAR_EVENT_INVITE);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_RSVP) {
            this->CMSG_CALENDAR_EVENT_RSVP = std::move(other.CMSG_CALENDAR_EVENT_RSVP);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE) {
            this->CMSG_CALENDAR_EVENT_REMOVE_INVITE = std::move(other.CMSG_CALENDAR_EVENT_REMOVE_INVITE);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_STATUS) {
            this->CMSG_CALENDAR_EVENT_STATUS = std::move(other.CMSG_CALENDAR_EVENT_STATUS);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS) {
            this->CMSG_CALENDAR_EVENT_MODERATOR_STATUS = std::move(other.CMSG_CALENDAR_EVENT_MODERATOR_STATUS);
        }
        if (opcode == Opcode::CMSG_CALENDAR_COMPLAIN) {
            this->CMSG_CALENDAR_COMPLAIN = std::move(other.CMSG_CALENDAR_COMPLAIN);
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
            this->CMSG_CALENDAR_GET_NUM_PENDING = std::move(other.CMSG_CALENDAR_GET_NUM_PENDING);
        }
        if (opcode == Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY) {
            this->CMSG_UPDATE_MISSILE_TRAJECTORY = std::move(other.CMSG_UPDATE_MISSILE_TRAJECTORY);
        }
        if (opcode == Opcode::CMSG_COMPLETE_MOVIE) {
            this->CMSG_COMPLETE_MOVIE = std::move(other.CMSG_COMPLETE_MOVIE);
        }
        if (opcode == Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS) {
            this->CMSG_QUERY_INSPECT_ACHIEVEMENTS = std::move(other.CMSG_QUERY_INSPECT_ACHIEVEMENTS);
        }
        if (opcode == Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE) {
            this->CMSG_DISMISS_CONTROLLED_VEHICLE = std::move(other.CMSG_DISMISS_CONTROLLED_VEHICLE);
        }
        if (opcode == Opcode::CMSG_CHAR_CUSTOMIZE) {
            this->CMSG_CHAR_CUSTOMIZE = std::move(other.CMSG_CHAR_CUSTOMIZE);
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_EXIT) {
            this->CMSG_REQUEST_VEHICLE_EXIT = std::move(other.CMSG_REQUEST_VEHICLE_EXIT);
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT) {
            this->CMSG_REQUEST_VEHICLE_PREV_SEAT = std::move(other.CMSG_REQUEST_VEHICLE_PREV_SEAT);
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT) {
            this->CMSG_REQUEST_VEHICLE_NEXT_SEAT = std::move(other.CMSG_REQUEST_VEHICLE_NEXT_SEAT);
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT) {
            this->CMSG_REQUEST_VEHICLE_SWITCH_SEAT = std::move(other.CMSG_REQUEST_VEHICLE_SWITCH_SEAT);
        }
        if (opcode == Opcode::CMSG_PET_LEARN_TALENT) {
            this->CMSG_PET_LEARN_TALENT = std::move(other.CMSG_PET_LEARN_TALENT);
        }
        if (opcode == Opcode::CMSG_GAMEOBJ_REPORT_USE) {
            this->CMSG_GAMEOBJ_REPORT_USE = std::move(other.CMSG_GAMEOBJ_REPORT_USE);
        }
        if (opcode == Opcode::CMSG_REMOVE_GLYPH) {
            this->CMSG_REMOVE_GLYPH = std::move(other.CMSG_REMOVE_GLYPH);
        }
        if (opcode == Opcode::CMSG_DISMISS_CRITTER) {
            this->CMSG_DISMISS_CRITTER = std::move(other.CMSG_DISMISS_CRITTER);
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_PENDING_SALES) {
            this->CMSG_AUCTION_LIST_PENDING_SALES = std::move(other.CMSG_AUCTION_LIST_PENDING_SALES);
        }
        if (opcode == Opcode::CMSG_ENABLETAXI) {
            this->CMSG_ENABLETAXI = std::move(other.CMSG_ENABLETAXI);
        }
        if (opcode == Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) {
            this->CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE = std::move(other.CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE);
        }
        if (opcode == Opcode::CMSG_HEARTH_AND_RESURRECT) {
            this->CMSG_HEARTH_AND_RESURRECT = std::move(other.CMSG_HEARTH_AND_RESURRECT);
        }
        if (opcode == Opcode::CMSG_PLAYER_VEHICLE_ENTER) {
            this->CMSG_PLAYER_VEHICLE_ENTER = std::move(other.CMSG_PLAYER_VEHICLE_ENTER);
        }
        if (opcode == Opcode::CMSG_CONTROLLER_EJECT_PASSENGER) {
            this->CMSG_CONTROLLER_EJECT_PASSENGER = std::move(other.CMSG_CONTROLLER_EJECT_PASSENGER);
        }
        if (opcode == Opcode::CMSG_ITEM_REFUND_INFO) {
            this->CMSG_ITEM_REFUND_INFO = std::move(other.CMSG_ITEM_REFUND_INFO);
        }
        if (opcode == Opcode::CMSG_ITEM_REFUND) {
            this->CMSG_ITEM_REFUND = std::move(other.CMSG_ITEM_REFUND);
        }
        if (opcode == Opcode::CMSG_CORPSE_MAP_POSITION_QUERY) {
            this->CMSG_CORPSE_MAP_POSITION_QUERY = std::move(other.CMSG_CORPSE_MAP_POSITION_QUERY);
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_SIGNUP) {
            this->CMSG_CALENDAR_EVENT_SIGNUP = std::move(other.CMSG_CALENDAR_EVENT_SIGNUP);
        }
        if (opcode == Opcode::CMSG_EQUIPMENT_SET_SAVE) {
            this->CMSG_EQUIPMENT_SET_SAVE = std::move(other.CMSG_EQUIPMENT_SET_SAVE);
        }
        if (opcode == Opcode::CMSG_UPDATE_PROJECTILE_POSITION) {
            this->CMSG_UPDATE_PROJECTILE_POSITION = std::move(other.CMSG_UPDATE_PROJECTILE_POSITION);
        }
        if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS) {
            this->CMSG_LEARN_PREVIEW_TALENTS = std::move(other.CMSG_LEARN_PREVIEW_TALENTS);
        }
        if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET) {
            this->CMSG_LEARN_PREVIEW_TALENTS_PET = std::move(other.CMSG_LEARN_PREVIEW_TALENTS_PET);
        }
        if (opcode == Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK) {
            this->CMSG_MOVE_GRAVITY_DISABLE_ACK = std::move(other.CMSG_MOVE_GRAVITY_DISABLE_ACK);
        }
        if (opcode == Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK) {
            this->CMSG_MOVE_GRAVITY_ENABLE_ACK = std::move(other.CMSG_MOVE_GRAVITY_ENABLE_ACK);
        }
        if (opcode == Opcode::CMSG_EQUIPMENT_SET_USE) {
            this->CMSG_EQUIPMENT_SET_USE = std::move(other.CMSG_EQUIPMENT_SET_USE);
        }
        if (opcode == Opcode::CMSG_CHAR_FACTION_CHANGE) {
            this->CMSG_CHAR_FACTION_CHANGE = std::move(other.CMSG_CHAR_FACTION_CHANGE);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) {
            this->CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE = std::move(other.CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) {
            this->CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE = std::move(other.CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE);
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) {
            this->CMSG_BATTLEFIELD_MGR_EXIT_REQUEST = std::move(other.CMSG_BATTLEFIELD_MGR_EXIT_REQUEST);
        }
        if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
            this->MSG_SET_RAID_DIFFICULTY = std::move(other.MSG_SET_RAID_DIFFICULTY);
        }
        if (opcode == Opcode::CMSG_GMRESPONSE_RESOLVE) {
            this->CMSG_GMRESPONSE_RESOLVE = std::move(other.CMSG_GMRESPONSE_RESOLVE);
        }
        if (opcode == Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE) {
            this->CMSG_WORLD_STATE_UI_TIMER_UPDATE = std::move(other.CMSG_WORLD_STATE_UI_TIMER_UPDATE);
        }
        if (opcode == Opcode::CMSG_CHAR_RACE_CHANGE) {
            this->CMSG_CHAR_RACE_CHANGE = std::move(other.CMSG_CHAR_RACE_CHANGE);
        }
        if (opcode == Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES) {
            this->CMSG_READY_FOR_ACCOUNT_DATA_TIMES = std::move(other.CMSG_READY_FOR_ACCOUNT_DATA_TIMES);
        }
        if (opcode == Opcode::CMSG_QUERY_QUESTS_COMPLETED) {
            this->CMSG_QUERY_QUESTS_COMPLETED = std::move(other.CMSG_QUERY_QUESTS_COMPLETED);
        }
        if (opcode == Opcode::CMSG_GM_REPORT_LAG) {
            this->CMSG_GM_REPORT_LAG = std::move(other.CMSG_GM_REPORT_LAG);
        }
        if (opcode == Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK) {
            this->CMSG_MOVE_SET_COLLISION_HGT_ACK = std::move(other.CMSG_MOVE_SET_COLLISION_HGT_ACK);
        }
        return std::move(*this);
    }

    ~ClientOpcode() {
        if (opcode == Opcode::CMSG_BOOTME) {
            this->CMSG_BOOTME.~CMSG_BOOTME();
        }
        if (opcode == Opcode::CMSG_DBLOOKUP) {
            this->CMSG_DBLOOKUP.~CMSG_DBLOOKUP();
        }
        if (opcode == Opcode::CMSG_WORLD_TELEPORT) {
            this->CMSG_WORLD_TELEPORT.~CMSG_WORLD_TELEPORT();
        }
        if (opcode == Opcode::CMSG_TELEPORT_TO_UNIT) {
            this->CMSG_TELEPORT_TO_UNIT.~CMSG_TELEPORT_TO_UNIT();
        }
        if (opcode == Opcode::CMSG_CHAR_CREATE) {
            this->CMSG_CHAR_CREATE.~CMSG_CHAR_CREATE();
        }
        if (opcode == Opcode::CMSG_CHAR_ENUM) {
            this->CMSG_CHAR_ENUM.~CMSG_CHAR_ENUM();
        }
        if (opcode == Opcode::CMSG_CHAR_DELETE) {
            this->CMSG_CHAR_DELETE.~CMSG_CHAR_DELETE();
        }
        if (opcode == Opcode::CMSG_PLAYER_LOGIN) {
            this->CMSG_PLAYER_LOGIN.~CMSG_PLAYER_LOGIN();
        }
        if (opcode == Opcode::CMSG_PLAYER_LOGOUT) {
            this->CMSG_PLAYER_LOGOUT.~CMSG_PLAYER_LOGOUT();
        }
        if (opcode == Opcode::CMSG_LOGOUT_REQUEST) {
            this->CMSG_LOGOUT_REQUEST.~CMSG_LOGOUT_REQUEST();
        }
        if (opcode == Opcode::CMSG_LOGOUT_CANCEL) {
            this->CMSG_LOGOUT_CANCEL.~CMSG_LOGOUT_CANCEL();
        }
        if (opcode == Opcode::CMSG_NAME_QUERY) {
            this->CMSG_NAME_QUERY.~CMSG_NAME_QUERY();
        }
        if (opcode == Opcode::CMSG_PET_NAME_QUERY) {
            this->CMSG_PET_NAME_QUERY.~CMSG_PET_NAME_QUERY();
        }
        if (opcode == Opcode::CMSG_GUILD_QUERY) {
            this->CMSG_GUILD_QUERY.~CMSG_GUILD_QUERY();
        }
        if (opcode == Opcode::CMSG_ITEM_QUERY_SINGLE) {
            this->CMSG_ITEM_QUERY_SINGLE.~CMSG_ITEM_QUERY_SINGLE();
        }
        if (opcode == Opcode::CMSG_PAGE_TEXT_QUERY) {
            this->CMSG_PAGE_TEXT_QUERY.~CMSG_PAGE_TEXT_QUERY();
        }
        if (opcode == Opcode::CMSG_QUEST_QUERY) {
            this->CMSG_QUEST_QUERY.~CMSG_QUEST_QUERY();
        }
        if (opcode == Opcode::CMSG_GAMEOBJECT_QUERY) {
            this->CMSG_GAMEOBJECT_QUERY.~CMSG_GAMEOBJECT_QUERY();
        }
        if (opcode == Opcode::CMSG_CREATURE_QUERY) {
            this->CMSG_CREATURE_QUERY.~CMSG_CREATURE_QUERY();
        }
        if (opcode == Opcode::CMSG_WHO) {
            this->CMSG_WHO.~CMSG_WHO();
        }
        if (opcode == Opcode::CMSG_WHOIS) {
            this->CMSG_WHOIS.~CMSG_WHOIS();
        }
        if (opcode == Opcode::CMSG_CONTACT_LIST) {
            this->CMSG_CONTACT_LIST.~CMSG_CONTACT_LIST();
        }
        if (opcode == Opcode::CMSG_ADD_FRIEND) {
            this->CMSG_ADD_FRIEND.~CMSG_ADD_FRIEND();
        }
        if (opcode == Opcode::CMSG_DEL_FRIEND) {
            this->CMSG_DEL_FRIEND.~CMSG_DEL_FRIEND();
        }
        if (opcode == Opcode::CMSG_SET_CONTACT_NOTES) {
            this->CMSG_SET_CONTACT_NOTES.~CMSG_SET_CONTACT_NOTES();
        }
        if (opcode == Opcode::CMSG_ADD_IGNORE) {
            this->CMSG_ADD_IGNORE.~CMSG_ADD_IGNORE();
        }
        if (opcode == Opcode::CMSG_DEL_IGNORE) {
            this->CMSG_DEL_IGNORE.~CMSG_DEL_IGNORE();
        }
        if (opcode == Opcode::CMSG_GROUP_INVITE) {
            this->CMSG_GROUP_INVITE.~CMSG_GROUP_INVITE();
        }
        if (opcode == Opcode::CMSG_GROUP_CANCEL) {
            this->CMSG_GROUP_CANCEL.~CMSG_GROUP_CANCEL();
        }
        if (opcode == Opcode::CMSG_GROUP_ACCEPT) {
            this->CMSG_GROUP_ACCEPT.~CMSG_GROUP_ACCEPT();
        }
        if (opcode == Opcode::CMSG_GROUP_DECLINE) {
            this->CMSG_GROUP_DECLINE.~CMSG_GROUP_DECLINE();
        }
        if (opcode == Opcode::CMSG_GROUP_UNINVITE) {
            this->CMSG_GROUP_UNINVITE.~CMSG_GROUP_UNINVITE();
        }
        if (opcode == Opcode::CMSG_GROUP_UNINVITE_GUID) {
            this->CMSG_GROUP_UNINVITE_GUID.~CMSG_GROUP_UNINVITE_GUID();
        }
        if (opcode == Opcode::CMSG_GROUP_SET_LEADER) {
            this->CMSG_GROUP_SET_LEADER.~CMSG_GROUP_SET_LEADER();
        }
        if (opcode == Opcode::CMSG_LOOT_METHOD) {
            this->CMSG_LOOT_METHOD.~CMSG_LOOT_METHOD();
        }
        if (opcode == Opcode::CMSG_GROUP_DISBAND) {
            this->CMSG_GROUP_DISBAND.~CMSG_GROUP_DISBAND();
        }
        if (opcode == Opcode::CMSG_GUILD_CREATE) {
            this->CMSG_GUILD_CREATE.~CMSG_GUILD_CREATE();
        }
        if (opcode == Opcode::CMSG_GUILD_INVITE) {
            this->CMSG_GUILD_INVITE.~CMSG_GUILD_INVITE();
        }
        if (opcode == Opcode::CMSG_GUILD_ACCEPT) {
            this->CMSG_GUILD_ACCEPT.~CMSG_GUILD_ACCEPT();
        }
        if (opcode == Opcode::CMSG_GUILD_DECLINE) {
            this->CMSG_GUILD_DECLINE.~CMSG_GUILD_DECLINE();
        }
        if (opcode == Opcode::CMSG_GUILD_INFO) {
            this->CMSG_GUILD_INFO.~CMSG_GUILD_INFO();
        }
        if (opcode == Opcode::CMSG_GUILD_ROSTER) {
            this->CMSG_GUILD_ROSTER.~CMSG_GUILD_ROSTER();
        }
        if (opcode == Opcode::CMSG_GUILD_PROMOTE) {
            this->CMSG_GUILD_PROMOTE.~CMSG_GUILD_PROMOTE();
        }
        if (opcode == Opcode::CMSG_GUILD_DEMOTE) {
            this->CMSG_GUILD_DEMOTE.~CMSG_GUILD_DEMOTE();
        }
        if (opcode == Opcode::CMSG_GUILD_LEAVE) {
            this->CMSG_GUILD_LEAVE.~CMSG_GUILD_LEAVE();
        }
        if (opcode == Opcode::CMSG_GUILD_REMOVE) {
            this->CMSG_GUILD_REMOVE.~CMSG_GUILD_REMOVE();
        }
        if (opcode == Opcode::CMSG_GUILD_DISBAND) {
            this->CMSG_GUILD_DISBAND.~CMSG_GUILD_DISBAND();
        }
        if (opcode == Opcode::CMSG_GUILD_LEADER) {
            this->CMSG_GUILD_LEADER.~CMSG_GUILD_LEADER();
        }
        if (opcode == Opcode::CMSG_GUILD_MOTD) {
            this->CMSG_GUILD_MOTD.~CMSG_GUILD_MOTD();
        }
        if (opcode == Opcode::CMSG_MESSAGECHAT) {
            this->CMSG_MESSAGECHAT.~CMSG_MESSAGECHAT();
        }
        if (opcode == Opcode::CMSG_JOIN_CHANNEL) {
            this->CMSG_JOIN_CHANNEL.~CMSG_JOIN_CHANNEL();
        }
        if (opcode == Opcode::CMSG_LEAVE_CHANNEL) {
            this->CMSG_LEAVE_CHANNEL.~CMSG_LEAVE_CHANNEL();
        }
        if (opcode == Opcode::CMSG_CHANNEL_LIST) {
            this->CMSG_CHANNEL_LIST.~CMSG_CHANNEL_LIST();
        }
        if (opcode == Opcode::CMSG_CHANNEL_PASSWORD) {
            this->CMSG_CHANNEL_PASSWORD.~CMSG_CHANNEL_PASSWORD();
        }
        if (opcode == Opcode::CMSG_CHANNEL_SET_OWNER) {
            this->CMSG_CHANNEL_SET_OWNER.~CMSG_CHANNEL_SET_OWNER();
        }
        if (opcode == Opcode::CMSG_CHANNEL_OWNER) {
            this->CMSG_CHANNEL_OWNER.~CMSG_CHANNEL_OWNER();
        }
        if (opcode == Opcode::CMSG_CHANNEL_MODERATOR) {
            this->CMSG_CHANNEL_MODERATOR.~CMSG_CHANNEL_MODERATOR();
        }
        if (opcode == Opcode::CMSG_CHANNEL_UNMODERATOR) {
            this->CMSG_CHANNEL_UNMODERATOR.~CMSG_CHANNEL_UNMODERATOR();
        }
        if (opcode == Opcode::CMSG_CHANNEL_MUTE) {
            this->CMSG_CHANNEL_MUTE.~CMSG_CHANNEL_MUTE();
        }
        if (opcode == Opcode::CMSG_CHANNEL_UNMUTE) {
            this->CMSG_CHANNEL_UNMUTE.~CMSG_CHANNEL_UNMUTE();
        }
        if (opcode == Opcode::CMSG_CHANNEL_INVITE) {
            this->CMSG_CHANNEL_INVITE.~CMSG_CHANNEL_INVITE();
        }
        if (opcode == Opcode::CMSG_CHANNEL_KICK) {
            this->CMSG_CHANNEL_KICK.~CMSG_CHANNEL_KICK();
        }
        if (opcode == Opcode::CMSG_CHANNEL_BAN) {
            this->CMSG_CHANNEL_BAN.~CMSG_CHANNEL_BAN();
        }
        if (opcode == Opcode::CMSG_CHANNEL_UNBAN) {
            this->CMSG_CHANNEL_UNBAN.~CMSG_CHANNEL_UNBAN();
        }
        if (opcode == Opcode::CMSG_CHANNEL_ANNOUNCEMENTS) {
            this->CMSG_CHANNEL_ANNOUNCEMENTS.~CMSG_CHANNEL_ANNOUNCEMENTS();
        }
        if (opcode == Opcode::CMSG_CHANNEL_MODERATE) {
            this->CMSG_CHANNEL_MODERATE.~CMSG_CHANNEL_MODERATE();
        }
        if (opcode == Opcode::CMSG_USE_ITEM) {
            this->CMSG_USE_ITEM.~CMSG_USE_ITEM();
        }
        if (opcode == Opcode::CMSG_OPEN_ITEM) {
            this->CMSG_OPEN_ITEM.~CMSG_OPEN_ITEM();
        }
        if (opcode == Opcode::CMSG_READ_ITEM) {
            this->CMSG_READ_ITEM.~CMSG_READ_ITEM();
        }
        if (opcode == Opcode::CMSG_GAMEOBJ_USE) {
            this->CMSG_GAMEOBJ_USE.~CMSG_GAMEOBJ_USE();
        }
        if (opcode == Opcode::CMSG_AREATRIGGER) {
            this->CMSG_AREATRIGGER.~CMSG_AREATRIGGER();
        }
        if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
            this->MSG_MOVE_START_FORWARD.~MSG_MOVE_START_FORWARD();
        }
        if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
            this->MSG_MOVE_START_BACKWARD.~MSG_MOVE_START_BACKWARD();
        }
        if (opcode == Opcode::MSG_MOVE_STOP) {
            this->MSG_MOVE_STOP.~MSG_MOVE_STOP();
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
            this->MSG_MOVE_START_STRAFE_LEFT.~MSG_MOVE_START_STRAFE_LEFT();
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
            this->MSG_MOVE_START_STRAFE_RIGHT.~MSG_MOVE_START_STRAFE_RIGHT();
        }
        if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
            this->MSG_MOVE_STOP_STRAFE.~MSG_MOVE_STOP_STRAFE();
        }
        if (opcode == Opcode::MSG_MOVE_JUMP) {
            this->MSG_MOVE_JUMP.~MSG_MOVE_JUMP();
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
            this->MSG_MOVE_START_TURN_LEFT.~MSG_MOVE_START_TURN_LEFT();
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
            this->MSG_MOVE_START_TURN_RIGHT.~MSG_MOVE_START_TURN_RIGHT();
        }
        if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
            this->MSG_MOVE_STOP_TURN.~MSG_MOVE_STOP_TURN();
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
            this->MSG_MOVE_START_PITCH_UP.~MSG_MOVE_START_PITCH_UP();
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
            this->MSG_MOVE_START_PITCH_DOWN.~MSG_MOVE_START_PITCH_DOWN();
        }
        if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
            this->MSG_MOVE_STOP_PITCH.~MSG_MOVE_STOP_PITCH();
        }
        if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
            this->MSG_MOVE_SET_RUN_MODE.~MSG_MOVE_SET_RUN_MODE();
        }
        if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
            this->MSG_MOVE_SET_WALK_MODE.~MSG_MOVE_SET_WALK_MODE();
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT) {
            this->MSG_MOVE_TELEPORT.~MSG_MOVE_TELEPORT_Server();
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
            this->MSG_MOVE_TELEPORT_ACK.~MSG_MOVE_TELEPORT_ACK_Client();
        }
        if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
            this->MSG_MOVE_FALL_LAND.~MSG_MOVE_FALL_LAND();
        }
        if (opcode == Opcode::MSG_MOVE_START_SWIM) {
            this->MSG_MOVE_START_SWIM.~MSG_MOVE_START_SWIM();
        }
        if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
            this->MSG_MOVE_STOP_SWIM.~MSG_MOVE_STOP_SWIM();
        }
        if (opcode == Opcode::MSG_MOVE_SET_FACING) {
            this->MSG_MOVE_SET_FACING.~MSG_MOVE_SET_FACING();
        }
        if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
            this->MSG_MOVE_SET_PITCH.~MSG_MOVE_SET_PITCH();
        }
        if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
            this->MSG_MOVE_WORLDPORT_ACK.~MSG_MOVE_WORLDPORT_ACK();
        }
        if (opcode == Opcode::CMSG_MOVE_SET_RAW_POSITION) {
            this->CMSG_MOVE_SET_RAW_POSITION.~CMSG_MOVE_SET_RAW_POSITION();
        }
        if (opcode == Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_RUN_SPEED_CHANGE_ACK.~CMSG_FORCE_RUN_SPEED_CHANGE_ACK();
        }
        if (opcode == Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK.~CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK();
        }
        if (opcode == Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_SWIM_SPEED_CHANGE_ACK.~CMSG_FORCE_SWIM_SPEED_CHANGE_ACK();
        }
        if (opcode == Opcode::CMSG_FORCE_MOVE_ROOT_ACK) {
            this->CMSG_FORCE_MOVE_ROOT_ACK.~CMSG_FORCE_MOVE_ROOT_ACK();
        }
        if (opcode == Opcode::CMSG_FORCE_MOVE_UNROOT_ACK) {
            this->CMSG_FORCE_MOVE_UNROOT_ACK.~CMSG_FORCE_MOVE_UNROOT_ACK();
        }
        if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
            this->MSG_MOVE_HEARTBEAT.~MSG_MOVE_HEARTBEAT();
        }
        if (opcode == Opcode::CMSG_MOVE_KNOCK_BACK_ACK) {
            this->CMSG_MOVE_KNOCK_BACK_ACK.~CMSG_MOVE_KNOCK_BACK_ACK();
        }
        if (opcode == Opcode::CMSG_MOVE_HOVER_ACK) {
            this->CMSG_MOVE_HOVER_ACK.~CMSG_MOVE_HOVER_ACK();
        }
        if (opcode == Opcode::MSG_MOVE_HOVER) {
            this->MSG_MOVE_HOVER.~MSG_MOVE_HOVER();
        }
        if (opcode == Opcode::CMSG_NEXT_CINEMATIC_CAMERA) {
            this->CMSG_NEXT_CINEMATIC_CAMERA.~CMSG_NEXT_CINEMATIC_CAMERA();
        }
        if (opcode == Opcode::CMSG_COMPLETE_CINEMATIC) {
            this->CMSG_COMPLETE_CINEMATIC.~CMSG_COMPLETE_CINEMATIC();
        }
        if (opcode == Opcode::CMSG_TUTORIAL_FLAG) {
            this->CMSG_TUTORIAL_FLAG.~CMSG_TUTORIAL_FLAG();
        }
        if (opcode == Opcode::CMSG_TUTORIAL_CLEAR) {
            this->CMSG_TUTORIAL_CLEAR.~CMSG_TUTORIAL_CLEAR();
        }
        if (opcode == Opcode::CMSG_TUTORIAL_RESET) {
            this->CMSG_TUTORIAL_RESET.~CMSG_TUTORIAL_RESET();
        }
        if (opcode == Opcode::CMSG_STANDSTATECHANGE) {
            this->CMSG_STANDSTATECHANGE.~CMSG_STANDSTATECHANGE();
        }
        if (opcode == Opcode::CMSG_EMOTE) {
            this->CMSG_EMOTE.~CMSG_EMOTE();
        }
        if (opcode == Opcode::CMSG_TEXT_EMOTE) {
            this->CMSG_TEXT_EMOTE.~CMSG_TEXT_EMOTE();
        }
        if (opcode == Opcode::CMSG_AUTOSTORE_LOOT_ITEM) {
            this->CMSG_AUTOSTORE_LOOT_ITEM.~CMSG_AUTOSTORE_LOOT_ITEM();
        }
        if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM) {
            this->CMSG_AUTOEQUIP_ITEM.~CMSG_AUTOEQUIP_ITEM();
        }
        if (opcode == Opcode::CMSG_AUTOSTORE_BAG_ITEM) {
            this->CMSG_AUTOSTORE_BAG_ITEM.~CMSG_AUTOSTORE_BAG_ITEM();
        }
        if (opcode == Opcode::CMSG_SWAP_ITEM) {
            this->CMSG_SWAP_ITEM.~CMSG_SWAP_ITEM();
        }
        if (opcode == Opcode::CMSG_SWAP_INV_ITEM) {
            this->CMSG_SWAP_INV_ITEM.~CMSG_SWAP_INV_ITEM();
        }
        if (opcode == Opcode::CMSG_SPLIT_ITEM) {
            this->CMSG_SPLIT_ITEM.~CMSG_SPLIT_ITEM();
        }
        if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM_SLOT) {
            this->CMSG_AUTOEQUIP_ITEM_SLOT.~CMSG_AUTOEQUIP_ITEM_SLOT();
        }
        if (opcode == Opcode::CMSG_DESTROYITEM) {
            this->CMSG_DESTROYITEM.~CMSG_DESTROYITEM();
        }
        if (opcode == Opcode::CMSG_INSPECT) {
            this->CMSG_INSPECT.~CMSG_INSPECT();
        }
        if (opcode == Opcode::CMSG_INITIATE_TRADE) {
            this->CMSG_INITIATE_TRADE.~CMSG_INITIATE_TRADE();
        }
        if (opcode == Opcode::CMSG_BEGIN_TRADE) {
            this->CMSG_BEGIN_TRADE.~CMSG_BEGIN_TRADE();
        }
        if (opcode == Opcode::CMSG_BUSY_TRADE) {
            this->CMSG_BUSY_TRADE.~CMSG_BUSY_TRADE();
        }
        if (opcode == Opcode::CMSG_IGNORE_TRADE) {
            this->CMSG_IGNORE_TRADE.~CMSG_IGNORE_TRADE();
        }
        if (opcode == Opcode::CMSG_ACCEPT_TRADE) {
            this->CMSG_ACCEPT_TRADE.~CMSG_ACCEPT_TRADE();
        }
        if (opcode == Opcode::CMSG_UNACCEPT_TRADE) {
            this->CMSG_UNACCEPT_TRADE.~CMSG_UNACCEPT_TRADE();
        }
        if (opcode == Opcode::CMSG_CANCEL_TRADE) {
            this->CMSG_CANCEL_TRADE.~CMSG_CANCEL_TRADE();
        }
        if (opcode == Opcode::CMSG_SET_TRADE_ITEM) {
            this->CMSG_SET_TRADE_ITEM.~CMSG_SET_TRADE_ITEM();
        }
        if (opcode == Opcode::CMSG_CLEAR_TRADE_ITEM) {
            this->CMSG_CLEAR_TRADE_ITEM.~CMSG_CLEAR_TRADE_ITEM();
        }
        if (opcode == Opcode::CMSG_SET_TRADE_GOLD) {
            this->CMSG_SET_TRADE_GOLD.~CMSG_SET_TRADE_GOLD();
        }
        if (opcode == Opcode::CMSG_SET_FACTION_ATWAR) {
            this->CMSG_SET_FACTION_ATWAR.~CMSG_SET_FACTION_ATWAR();
        }
        if (opcode == Opcode::CMSG_SET_ACTION_BUTTON) {
            this->CMSG_SET_ACTION_BUTTON.~CMSG_SET_ACTION_BUTTON();
        }
        if (opcode == Opcode::CMSG_CAST_SPELL) {
            this->CMSG_CAST_SPELL.~CMSG_CAST_SPELL();
        }
        if (opcode == Opcode::CMSG_CANCEL_CAST) {
            this->CMSG_CANCEL_CAST.~CMSG_CANCEL_CAST();
        }
        if (opcode == Opcode::CMSG_CANCEL_AURA) {
            this->CMSG_CANCEL_AURA.~CMSG_CANCEL_AURA();
        }
        if (opcode == Opcode::CMSG_CANCEL_CHANNELLING) {
            this->CMSG_CANCEL_CHANNELLING.~CMSG_CANCEL_CHANNELLING();
        }
        if (opcode == Opcode::CMSG_SET_SELECTION) {
            this->CMSG_SET_SELECTION.~CMSG_SET_SELECTION();
        }
        if (opcode == Opcode::CMSG_DELETEEQUIPMENT_SET) {
            this->CMSG_DELETEEQUIPMENT_SET.~CMSG_DELETEEQUIPMENT_SET();
        }
        if (opcode == Opcode::CMSG_INSTANCE_LOCK_RESPONSE) {
            this->CMSG_INSTANCE_LOCK_RESPONSE.~CMSG_INSTANCE_LOCK_RESPONSE();
        }
        if (opcode == Opcode::CMSG_ATTACKSWING) {
            this->CMSG_ATTACKSWING.~CMSG_ATTACKSWING();
        }
        if (opcode == Opcode::CMSG_ATTACKSTOP) {
            this->CMSG_ATTACKSTOP.~CMSG_ATTACKSTOP();
        }
        if (opcode == Opcode::CMSG_REPOP_REQUEST) {
            this->CMSG_REPOP_REQUEST.~CMSG_REPOP_REQUEST();
        }
        if (opcode == Opcode::CMSG_RESURRECT_RESPONSE) {
            this->CMSG_RESURRECT_RESPONSE.~CMSG_RESURRECT_RESPONSE();
        }
        if (opcode == Opcode::CMSG_LOOT) {
            this->CMSG_LOOT.~CMSG_LOOT();
        }
        if (opcode == Opcode::CMSG_LOOT_MONEY) {
            this->CMSG_LOOT_MONEY.~CMSG_LOOT_MONEY();
        }
        if (opcode == Opcode::CMSG_LOOT_RELEASE) {
            this->CMSG_LOOT_RELEASE.~CMSG_LOOT_RELEASE();
        }
        if (opcode == Opcode::CMSG_DUEL_ACCEPTED) {
            this->CMSG_DUEL_ACCEPTED.~CMSG_DUEL_ACCEPTED();
        }
        if (opcode == Opcode::CMSG_DUEL_CANCELLED) {
            this->CMSG_DUEL_CANCELLED.~CMSG_DUEL_CANCELLED();
        }
        if (opcode == Opcode::CMSG_MOUNTSPECIAL_ANIM) {
            this->CMSG_MOUNTSPECIAL_ANIM.~CMSG_MOUNTSPECIAL_ANIM();
        }
        if (opcode == Opcode::CMSG_PET_SET_ACTION) {
            this->CMSG_PET_SET_ACTION.~CMSG_PET_SET_ACTION();
        }
        if (opcode == Opcode::CMSG_PET_ACTION) {
            this->CMSG_PET_ACTION.~CMSG_PET_ACTION();
        }
        if (opcode == Opcode::CMSG_PET_ABANDON) {
            this->CMSG_PET_ABANDON.~CMSG_PET_ABANDON();
        }
        if (opcode == Opcode::CMSG_PET_RENAME) {
            this->CMSG_PET_RENAME.~CMSG_PET_RENAME();
        }
        if (opcode == Opcode::CMSG_GOSSIP_HELLO) {
            this->CMSG_GOSSIP_HELLO.~CMSG_GOSSIP_HELLO();
        }
        if (opcode == Opcode::CMSG_GOSSIP_SELECT_OPTION) {
            this->CMSG_GOSSIP_SELECT_OPTION.~CMSG_GOSSIP_SELECT_OPTION();
        }
        if (opcode == Opcode::CMSG_NPC_TEXT_QUERY) {
            this->CMSG_NPC_TEXT_QUERY.~CMSG_NPC_TEXT_QUERY();
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_QUERY) {
            this->CMSG_QUESTGIVER_STATUS_QUERY.~CMSG_QUESTGIVER_STATUS_QUERY();
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_HELLO) {
            this->CMSG_QUESTGIVER_HELLO.~CMSG_QUESTGIVER_HELLO();
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_QUERY_QUEST) {
            this->CMSG_QUESTGIVER_QUERY_QUEST.~CMSG_QUESTGIVER_QUERY_QUEST();
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) {
            this->CMSG_QUESTGIVER_QUEST_AUTOLAUNCH.~CMSG_QUESTGIVER_QUEST_AUTOLAUNCH();
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST) {
            this->CMSG_QUESTGIVER_ACCEPT_QUEST.~CMSG_QUESTGIVER_ACCEPT_QUEST();
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST) {
            this->CMSG_QUESTGIVER_COMPLETE_QUEST.~CMSG_QUESTGIVER_COMPLETE_QUEST();
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_REQUEST_REWARD) {
            this->CMSG_QUESTGIVER_REQUEST_REWARD.~CMSG_QUESTGIVER_REQUEST_REWARD();
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD) {
            this->CMSG_QUESTGIVER_CHOOSE_REWARD.~CMSG_QUESTGIVER_CHOOSE_REWARD();
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_CANCEL) {
            this->CMSG_QUESTGIVER_CANCEL.~CMSG_QUESTGIVER_CANCEL();
        }
        if (opcode == Opcode::CMSG_QUESTLOG_SWAP_QUEST) {
            this->CMSG_QUESTLOG_SWAP_QUEST.~CMSG_QUESTLOG_SWAP_QUEST();
        }
        if (opcode == Opcode::CMSG_QUESTLOG_REMOVE_QUEST) {
            this->CMSG_QUESTLOG_REMOVE_QUEST.~CMSG_QUESTLOG_REMOVE_QUEST();
        }
        if (opcode == Opcode::CMSG_QUEST_CONFIRM_ACCEPT) {
            this->CMSG_QUEST_CONFIRM_ACCEPT.~CMSG_QUEST_CONFIRM_ACCEPT();
        }
        if (opcode == Opcode::CMSG_PUSHQUESTTOPARTY) {
            this->CMSG_PUSHQUESTTOPARTY.~CMSG_PUSHQUESTTOPARTY();
        }
        if (opcode == Opcode::CMSG_LIST_INVENTORY) {
            this->CMSG_LIST_INVENTORY.~CMSG_LIST_INVENTORY();
        }
        if (opcode == Opcode::CMSG_SELL_ITEM) {
            this->CMSG_SELL_ITEM.~CMSG_SELL_ITEM();
        }
        if (opcode == Opcode::CMSG_BUY_ITEM) {
            this->CMSG_BUY_ITEM.~CMSG_BUY_ITEM();
        }
        if (opcode == Opcode::CMSG_BUY_ITEM_IN_SLOT) {
            this->CMSG_BUY_ITEM_IN_SLOT.~CMSG_BUY_ITEM_IN_SLOT();
        }
        if (opcode == Opcode::CMSG_TAXINODE_STATUS_QUERY) {
            this->CMSG_TAXINODE_STATUS_QUERY.~CMSG_TAXINODE_STATUS_QUERY();
        }
        if (opcode == Opcode::CMSG_TAXIQUERYAVAILABLENODES) {
            this->CMSG_TAXIQUERYAVAILABLENODES.~CMSG_TAXIQUERYAVAILABLENODES();
        }
        if (opcode == Opcode::CMSG_ACTIVATETAXI) {
            this->CMSG_ACTIVATETAXI.~CMSG_ACTIVATETAXI();
        }
        if (opcode == Opcode::CMSG_TRAINER_LIST) {
            this->CMSG_TRAINER_LIST.~CMSG_TRAINER_LIST();
        }
        if (opcode == Opcode::CMSG_TRAINER_BUY_SPELL) {
            this->CMSG_TRAINER_BUY_SPELL.~CMSG_TRAINER_BUY_SPELL();
        }
        if (opcode == Opcode::CMSG_BINDER_ACTIVATE) {
            this->CMSG_BINDER_ACTIVATE.~CMSG_BINDER_ACTIVATE();
        }
        if (opcode == Opcode::CMSG_BANKER_ACTIVATE) {
            this->CMSG_BANKER_ACTIVATE.~CMSG_BANKER_ACTIVATE();
        }
        if (opcode == Opcode::CMSG_BUY_BANK_SLOT) {
            this->CMSG_BUY_BANK_SLOT.~CMSG_BUY_BANK_SLOT();
        }
        if (opcode == Opcode::CMSG_PETITION_SHOWLIST) {
            this->CMSG_PETITION_SHOWLIST.~CMSG_PETITION_SHOWLIST();
        }
        if (opcode == Opcode::CMSG_PETITION_BUY) {
            this->CMSG_PETITION_BUY.~CMSG_PETITION_BUY();
        }
        if (opcode == Opcode::CMSG_PETITION_SHOW_SIGNATURES) {
            this->CMSG_PETITION_SHOW_SIGNATURES.~CMSG_PETITION_SHOW_SIGNATURES();
        }
        if (opcode == Opcode::CMSG_PETITION_SIGN) {
            this->CMSG_PETITION_SIGN.~CMSG_PETITION_SIGN();
        }
        if (opcode == Opcode::MSG_PETITION_DECLINE) {
            this->MSG_PETITION_DECLINE.~MSG_PETITION_DECLINE();
        }
        if (opcode == Opcode::CMSG_OFFER_PETITION) {
            this->CMSG_OFFER_PETITION.~CMSG_OFFER_PETITION();
        }
        if (opcode == Opcode::CMSG_TURN_IN_PETITION) {
            this->CMSG_TURN_IN_PETITION.~CMSG_TURN_IN_PETITION();
        }
        if (opcode == Opcode::CMSG_PETITION_QUERY) {
            this->CMSG_PETITION_QUERY.~CMSG_PETITION_QUERY();
        }
        if (opcode == Opcode::CMSG_BUG) {
            this->CMSG_BUG.~CMSG_BUG();
        }
        if (opcode == Opcode::CMSG_PLAYED_TIME) {
            this->CMSG_PLAYED_TIME.~CMSG_PLAYED_TIME();
        }
        if (opcode == Opcode::CMSG_QUERY_TIME) {
            this->CMSG_QUERY_TIME.~CMSG_QUERY_TIME();
        }
        if (opcode == Opcode::CMSG_RECLAIM_CORPSE) {
            this->CMSG_RECLAIM_CORPSE.~CMSG_RECLAIM_CORPSE();
        }
        if (opcode == Opcode::CMSG_WRAP_ITEM) {
            this->CMSG_WRAP_ITEM.~CMSG_WRAP_ITEM();
        }
        if (opcode == Opcode::MSG_MINIMAP_PING) {
            this->MSG_MINIMAP_PING.~MSG_MINIMAP_PING_Client();
        }
        if (opcode == Opcode::CMSG_PING) {
            this->CMSG_PING.~CMSG_PING();
        }
        if (opcode == Opcode::CMSG_SETSHEATHED) {
            this->CMSG_SETSHEATHED.~CMSG_SETSHEATHED();
        }
        if (opcode == Opcode::CMSG_QUEST_POI_QUERY) {
            this->CMSG_QUEST_POI_QUERY.~CMSG_QUEST_POI_QUERY();
        }
        if (opcode == Opcode::CMSG_AUTH_SESSION) {
            this->CMSG_AUTH_SESSION.~CMSG_AUTH_SESSION();
        }
        if (opcode == Opcode::CMSG_PET_CAST_SPELL) {
            this->CMSG_PET_CAST_SPELL.~CMSG_PET_CAST_SPELL();
        }
        if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
            this->MSG_SAVE_GUILD_EMBLEM.~MSG_SAVE_GUILD_EMBLEM_Client();
        }
        if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
            this->MSG_TABARDVENDOR_ACTIVATE.~MSG_TABARDVENDOR_ACTIVATE();
        }
        if (opcode == Opcode::CMSG_ZONEUPDATE) {
            this->CMSG_ZONEUPDATE.~CMSG_ZONEUPDATE();
        }
        if (opcode == Opcode::MSG_RANDOM_ROLL) {
            this->MSG_RANDOM_ROLL.~MSG_RANDOM_ROLL_Client();
        }
        if (opcode == Opcode::CMSG_UNLEARN_SKILL) {
            this->CMSG_UNLEARN_SKILL.~CMSG_UNLEARN_SKILL();
        }
        if (opcode == Opcode::CMSG_GMTICKET_CREATE) {
            this->CMSG_GMTICKET_CREATE.~CMSG_GMTICKET_CREATE();
        }
        if (opcode == Opcode::CMSG_GMTICKET_UPDATETEXT) {
            this->CMSG_GMTICKET_UPDATETEXT.~CMSG_GMTICKET_UPDATETEXT();
        }
        if (opcode == Opcode::CMSG_REQUEST_ACCOUNT_DATA) {
            this->CMSG_REQUEST_ACCOUNT_DATA.~CMSG_REQUEST_ACCOUNT_DATA();
        }
        if (opcode == Opcode::CMSG_UPDATE_ACCOUNT_DATA) {
            this->CMSG_UPDATE_ACCOUNT_DATA.~CMSG_UPDATE_ACCOUNT_DATA();
        }
        if (opcode == Opcode::CMSG_GMTICKET_GETTICKET) {
            this->CMSG_GMTICKET_GETTICKET.~CMSG_GMTICKET_GETTICKET();
        }
        if (opcode == Opcode::CMSG_UNLEARN_TALENTS) {
            this->CMSG_UNLEARN_TALENTS.~CMSG_UNLEARN_TALENTS();
        }
        if (opcode == Opcode::MSG_CORPSE_QUERY) {
            this->MSG_CORPSE_QUERY.~MSG_CORPSE_QUERY_Client();
        }
        if (opcode == Opcode::CMSG_GMTICKET_DELETETICKET) {
            this->CMSG_GMTICKET_DELETETICKET.~CMSG_GMTICKET_DELETETICKET();
        }
        if (opcode == Opcode::CMSG_GMTICKET_SYSTEMSTATUS) {
            this->CMSG_GMTICKET_SYSTEMSTATUS.~CMSG_GMTICKET_SYSTEMSTATUS();
        }
        if (opcode == Opcode::CMSG_SPIRIT_HEALER_ACTIVATE) {
            this->CMSG_SPIRIT_HEALER_ACTIVATE.~CMSG_SPIRIT_HEALER_ACTIVATE();
        }
        if (opcode == Opcode::CMSG_CHAT_IGNORED) {
            this->CMSG_CHAT_IGNORED.~CMSG_CHAT_IGNORED();
        }
        if (opcode == Opcode::CMSG_GUILD_RANK) {
            this->CMSG_GUILD_RANK.~CMSG_GUILD_RANK();
        }
        if (opcode == Opcode::CMSG_GUILD_ADD_RANK) {
            this->CMSG_GUILD_ADD_RANK.~CMSG_GUILD_ADD_RANK();
        }
        if (opcode == Opcode::CMSG_GUILD_DEL_RANK) {
            this->CMSG_GUILD_DEL_RANK.~CMSG_GUILD_DEL_RANK();
        }
        if (opcode == Opcode::CMSG_GUILD_SET_PUBLIC_NOTE) {
            this->CMSG_GUILD_SET_PUBLIC_NOTE.~CMSG_GUILD_SET_PUBLIC_NOTE();
        }
        if (opcode == Opcode::CMSG_GUILD_SET_OFFICER_NOTE) {
            this->CMSG_GUILD_SET_OFFICER_NOTE.~CMSG_GUILD_SET_OFFICER_NOTE();
        }
        if (opcode == Opcode::CMSG_SEND_MAIL) {
            this->CMSG_SEND_MAIL.~CMSG_SEND_MAIL();
        }
        if (opcode == Opcode::CMSG_GET_MAIL_LIST) {
            this->CMSG_GET_MAIL_LIST.~CMSG_GET_MAIL_LIST();
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_LIST) {
            this->CMSG_BATTLEFIELD_LIST.~CMSG_BATTLEFIELD_LIST();
        }
        if (opcode == Opcode::CMSG_ITEM_TEXT_QUERY) {
            this->CMSG_ITEM_TEXT_QUERY.~CMSG_ITEM_TEXT_QUERY();
        }
        if (opcode == Opcode::CMSG_MAIL_TAKE_MONEY) {
            this->CMSG_MAIL_TAKE_MONEY.~CMSG_MAIL_TAKE_MONEY();
        }
        if (opcode == Opcode::CMSG_MAIL_TAKE_ITEM) {
            this->CMSG_MAIL_TAKE_ITEM.~CMSG_MAIL_TAKE_ITEM();
        }
        if (opcode == Opcode::CMSG_MAIL_MARK_AS_READ) {
            this->CMSG_MAIL_MARK_AS_READ.~CMSG_MAIL_MARK_AS_READ();
        }
        if (opcode == Opcode::CMSG_MAIL_RETURN_TO_SENDER) {
            this->CMSG_MAIL_RETURN_TO_SENDER.~CMSG_MAIL_RETURN_TO_SENDER();
        }
        if (opcode == Opcode::CMSG_MAIL_DELETE) {
            this->CMSG_MAIL_DELETE.~CMSG_MAIL_DELETE();
        }
        if (opcode == Opcode::CMSG_MAIL_CREATE_TEXT_ITEM) {
            this->CMSG_MAIL_CREATE_TEXT_ITEM.~CMSG_MAIL_CREATE_TEXT_ITEM();
        }
        if (opcode == Opcode::CMSG_LEARN_TALENT) {
            this->CMSG_LEARN_TALENT.~CMSG_LEARN_TALENT();
        }
        if (opcode == Opcode::CMSG_TOGGLE_PVP) {
            this->CMSG_TOGGLE_PVP.~CMSG_TOGGLE_PVP();
        }
        if (opcode == Opcode::MSG_AUCTION_HELLO) {
            this->MSG_AUCTION_HELLO.~MSG_AUCTION_HELLO_Client();
        }
        if (opcode == Opcode::CMSG_AUCTION_SELL_ITEM) {
            this->CMSG_AUCTION_SELL_ITEM.~CMSG_AUCTION_SELL_ITEM();
        }
        if (opcode == Opcode::CMSG_AUCTION_REMOVE_ITEM) {
            this->CMSG_AUCTION_REMOVE_ITEM.~CMSG_AUCTION_REMOVE_ITEM();
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_ITEMS) {
            this->CMSG_AUCTION_LIST_ITEMS.~CMSG_AUCTION_LIST_ITEMS();
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS) {
            this->CMSG_AUCTION_LIST_OWNER_ITEMS.~CMSG_AUCTION_LIST_OWNER_ITEMS();
        }
        if (opcode == Opcode::CMSG_AUCTION_PLACE_BID) {
            this->CMSG_AUCTION_PLACE_BID.~CMSG_AUCTION_PLACE_BID();
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS) {
            this->CMSG_AUCTION_LIST_BIDDER_ITEMS.~CMSG_AUCTION_LIST_BIDDER_ITEMS();
        }
        if (opcode == Opcode::CMSG_SET_AMMO) {
            this->CMSG_SET_AMMO.~CMSG_SET_AMMO();
        }
        if (opcode == Opcode::CMSG_SET_ACTIVE_MOVER) {
            this->CMSG_SET_ACTIVE_MOVER.~CMSG_SET_ACTIVE_MOVER();
        }
        if (opcode == Opcode::CMSG_PET_CANCEL_AURA) {
            this->CMSG_PET_CANCEL_AURA.~CMSG_PET_CANCEL_AURA();
        }
        if (opcode == Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL) {
            this->CMSG_CANCEL_AUTO_REPEAT_SPELL.~CMSG_CANCEL_AUTO_REPEAT_SPELL();
        }
        if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
            this->MSG_LIST_STABLED_PETS.~MSG_LIST_STABLED_PETS_Client();
        }
        if (opcode == Opcode::CMSG_STABLE_PET) {
            this->CMSG_STABLE_PET.~CMSG_STABLE_PET();
        }
        if (opcode == Opcode::CMSG_UNSTABLE_PET) {
            this->CMSG_UNSTABLE_PET.~CMSG_UNSTABLE_PET();
        }
        if (opcode == Opcode::CMSG_BUY_STABLE_SLOT) {
            this->CMSG_BUY_STABLE_SLOT.~CMSG_BUY_STABLE_SLOT();
        }
        if (opcode == Opcode::CMSG_STABLE_SWAP_PET) {
            this->CMSG_STABLE_SWAP_PET.~CMSG_STABLE_SWAP_PET();
        }
        if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
            this->MSG_QUEST_PUSH_RESULT.~MSG_QUEST_PUSH_RESULT();
        }
        if (opcode == Opcode::CMSG_REQUEST_PET_INFO) {
            this->CMSG_REQUEST_PET_INFO.~CMSG_REQUEST_PET_INFO();
        }
        if (opcode == Opcode::CMSG_FAR_SIGHT) {
            this->CMSG_FAR_SIGHT.~CMSG_FAR_SIGHT();
        }
        if (opcode == Opcode::CMSG_GROUP_CHANGE_SUB_GROUP) {
            this->CMSG_GROUP_CHANGE_SUB_GROUP.~CMSG_GROUP_CHANGE_SUB_GROUP();
        }
        if (opcode == Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS) {
            this->CMSG_REQUEST_PARTY_MEMBER_STATS.~CMSG_REQUEST_PARTY_MEMBER_STATS();
        }
        if (opcode == Opcode::CMSG_GROUP_SWAP_SUB_GROUP) {
            this->CMSG_GROUP_SWAP_SUB_GROUP.~CMSG_GROUP_SWAP_SUB_GROUP();
        }
        if (opcode == Opcode::CMSG_AUTOSTORE_BANK_ITEM) {
            this->CMSG_AUTOSTORE_BANK_ITEM.~CMSG_AUTOSTORE_BANK_ITEM();
        }
        if (opcode == Opcode::CMSG_AUTOBANK_ITEM) {
            this->CMSG_AUTOBANK_ITEM.~CMSG_AUTOBANK_ITEM();
        }
        if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
            this->MSG_QUERY_NEXT_MAIL_TIME.~MSG_QUERY_NEXT_MAIL_TIME_Client();
        }
        if (opcode == Opcode::CMSG_GROUP_RAID_CONVERT) {
            this->CMSG_GROUP_RAID_CONVERT.~CMSG_GROUP_RAID_CONVERT();
        }
        if (opcode == Opcode::CMSG_GROUP_ASSISTANT_LEADER) {
            this->CMSG_GROUP_ASSISTANT_LEADER.~CMSG_GROUP_ASSISTANT_LEADER();
        }
        if (opcode == Opcode::CMSG_BUYBACK_ITEM) {
            this->CMSG_BUYBACK_ITEM.~CMSG_BUYBACK_ITEM();
        }
        if (opcode == Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND) {
            this->CMSG_SET_SAVED_INSTANCE_EXTEND.~CMSG_SET_SAVED_INSTANCE_EXTEND();
        }
        if (opcode == Opcode::CMSG_LFG_GET_STATUS) {
            this->CMSG_LFG_GET_STATUS.~CMSG_LFG_GET_STATUS();
        }
        if (opcode == Opcode::CMSG_GMTICKETSYSTEM_TOGGLE) {
            this->CMSG_GMTICKETSYSTEM_TOGGLE.~CMSG_GMTICKETSYSTEM_TOGGLE();
        }
        if (opcode == Opcode::CMSG_CANCEL_GROWTH_AURA) {
            this->CMSG_CANCEL_GROWTH_AURA.~CMSG_CANCEL_GROWTH_AURA();
        }
        if (opcode == Opcode::CMSG_LOOT_ROLL) {
            this->CMSG_LOOT_ROLL.~CMSG_LOOT_ROLL();
        }
        if (opcode == Opcode::CMSG_LOOT_MASTER_GIVE) {
            this->CMSG_LOOT_MASTER_GIVE.~CMSG_LOOT_MASTER_GIVE();
        }
        if (opcode == Opcode::CMSG_REPAIR_ITEM) {
            this->CMSG_REPAIR_ITEM.~CMSG_REPAIR_ITEM();
        }
        if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
            this->MSG_TALENT_WIPE_CONFIRM.~MSG_TALENT_WIPE_CONFIRM_Client();
        }
        if (opcode == Opcode::CMSG_SUMMON_RESPONSE) {
            this->CMSG_SUMMON_RESPONSE.~CMSG_SUMMON_RESPONSE();
        }
        if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
            this->MSG_MOVE_WATER_WALK.~MSG_MOVE_WATER_WALK();
        }
        if (opcode == Opcode::CMSG_SELF_RES) {
            this->CMSG_SELF_RES.~CMSG_SELF_RES();
        }
        if (opcode == Opcode::CMSG_TOGGLE_HELM) {
            this->CMSG_TOGGLE_HELM.~CMSG_TOGGLE_HELM();
        }
        if (opcode == Opcode::CMSG_TOGGLE_CLOAK) {
            this->CMSG_TOGGLE_CLOAK.~CMSG_TOGGLE_CLOAK();
        }
        if (opcode == Opcode::CMSG_SET_ACTIONBAR_TOGGLES) {
            this->CMSG_SET_ACTIONBAR_TOGGLES.~CMSG_SET_ACTIONBAR_TOGGLES();
        }
        if (opcode == Opcode::MSG_PETITION_RENAME) {
            this->MSG_PETITION_RENAME.~MSG_PETITION_RENAME();
        }
        if (opcode == Opcode::CMSG_ITEM_NAME_QUERY) {
            this->CMSG_ITEM_NAME_QUERY.~CMSG_ITEM_NAME_QUERY();
        }
        if (opcode == Opcode::CMSG_CHAR_RENAME) {
            this->CMSG_CHAR_RENAME.~CMSG_CHAR_RENAME();
        }
        if (opcode == Opcode::CMSG_MOVE_SPLINE_DONE) {
            this->CMSG_MOVE_SPLINE_DONE.~CMSG_MOVE_SPLINE_DONE();
        }
        if (opcode == Opcode::CMSG_MOVE_FALL_RESET) {
            this->CMSG_MOVE_FALL_RESET.~CMSG_MOVE_FALL_RESET();
        }
        if (opcode == Opcode::CMSG_REQUEST_RAID_INFO) {
            this->CMSG_REQUEST_RAID_INFO.~CMSG_REQUEST_RAID_INFO();
        }
        if (opcode == Opcode::CMSG_MOVE_TIME_SKIPPED) {
            this->CMSG_MOVE_TIME_SKIPPED.~CMSG_MOVE_TIME_SKIPPED();
        }
        if (opcode == Opcode::CMSG_MOVE_FEATHER_FALL_ACK) {
            this->CMSG_MOVE_FEATHER_FALL_ACK.~CMSG_MOVE_FEATHER_FALL_ACK();
        }
        if (opcode == Opcode::CMSG_MOVE_WATER_WALK_ACK) {
            this->CMSG_MOVE_WATER_WALK_ACK.~CMSG_MOVE_WATER_WALK_ACK();
        }
        if (opcode == Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER) {
            this->CMSG_MOVE_NOT_ACTIVE_MOVER.~CMSG_MOVE_NOT_ACTIVE_MOVER();
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_STATUS) {
            this->CMSG_BATTLEFIELD_STATUS.~CMSG_BATTLEFIELD_STATUS();
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_PORT) {
            this->CMSG_BATTLEFIELD_PORT.~CMSG_BATTLEFIELD_PORT();
        }
        if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
            this->MSG_INSPECT_HONOR_STATS.~MSG_INSPECT_HONOR_STATS_Client();
        }
        if (opcode == Opcode::CMSG_BATTLEMASTER_HELLO) {
            this->CMSG_BATTLEMASTER_HELLO.~CMSG_BATTLEMASTER_HELLO();
        }
        if (opcode == Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_WALK_SPEED_CHANGE_ACK.~CMSG_FORCE_WALK_SPEED_CHANGE_ACK();
        }
        if (opcode == Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK.~CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK();
        }
        if (opcode == Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK) {
            this->CMSG_FORCE_TURN_RATE_CHANGE_ACK.~CMSG_FORCE_TURN_RATE_CHANGE_ACK();
        }
        if (opcode == Opcode::MSG_PVP_LOG_DATA) {
            this->MSG_PVP_LOG_DATA.~MSG_PVP_LOG_DATA_Client();
        }
        if (opcode == Opcode::CMSG_LEAVE_BATTLEFIELD) {
            this->CMSG_LEAVE_BATTLEFIELD.~CMSG_LEAVE_BATTLEFIELD();
        }
        if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY) {
            this->CMSG_AREA_SPIRIT_HEALER_QUERY.~CMSG_AREA_SPIRIT_HEALER_QUERY();
        }
        if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE) {
            this->CMSG_AREA_SPIRIT_HEALER_QUEUE.~CMSG_AREA_SPIRIT_HEALER_QUEUE();
        }
        if (opcode == Opcode::CMSG_WARDEN_DATA) {
            this->CMSG_WARDEN_DATA.~CMSG_WARDEN_DATA();
        }
        if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
            this->MSG_BATTLEGROUND_PLAYER_POSITIONS.~MSG_BATTLEGROUND_PLAYER_POSITIONS_Client();
        }
        if (opcode == Opcode::CMSG_PET_STOP_ATTACK) {
            this->CMSG_PET_STOP_ATTACK.~CMSG_PET_STOP_ATTACK();
        }
        if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN) {
            this->CMSG_BATTLEMASTER_JOIN.~CMSG_BATTLEMASTER_JOIN();
        }
        if (opcode == Opcode::CMSG_PET_UNLEARN) {
            this->CMSG_PET_UNLEARN.~CMSG_PET_UNLEARN();
        }
        if (opcode == Opcode::CMSG_PET_SPELL_AUTOCAST) {
            this->CMSG_PET_SPELL_AUTOCAST.~CMSG_PET_SPELL_AUTOCAST();
        }
        if (opcode == Opcode::CMSG_GUILD_INFO_TEXT) {
            this->CMSG_GUILD_INFO_TEXT.~CMSG_GUILD_INFO_TEXT();
        }
        if (opcode == Opcode::CMSG_ACTIVATETAXIEXPRESS) {
            this->CMSG_ACTIVATETAXIEXPRESS.~CMSG_ACTIVATETAXIEXPRESS();
        }
        if (opcode == Opcode::CMSG_SET_FACTION_INACTIVE) {
            this->CMSG_SET_FACTION_INACTIVE.~CMSG_SET_FACTION_INACTIVE();
        }
        if (opcode == Opcode::CMSG_SET_WATCHED_FACTION) {
            this->CMSG_SET_WATCHED_FACTION.~CMSG_SET_WATCHED_FACTION();
        }
        if (opcode == Opcode::CMSG_RESET_INSTANCES) {
            this->CMSG_RESET_INSTANCES.~CMSG_RESET_INSTANCES();
        }
        if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
            this->MSG_RAID_TARGET_UPDATE.~MSG_RAID_TARGET_UPDATE_Client();
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK) {
            this->MSG_RAID_READY_CHECK.~MSG_RAID_READY_CHECK_Client();
        }
        if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
            this->MSG_SET_DUNGEON_DIFFICULTY.~MSG_SET_DUNGEON_DIFFICULTY_Client();
        }
        if (opcode == Opcode::CMSG_GMSURVEY_SUBMIT) {
            this->CMSG_GMSURVEY_SUBMIT.~CMSG_GMSURVEY_SUBMIT();
        }
        if (opcode == Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) {
            this->CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK.~CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK();
        }
        if (opcode == Opcode::CMSG_MOVE_SET_CAN_FLY_ACK) {
            this->CMSG_MOVE_SET_CAN_FLY_ACK.~CMSG_MOVE_SET_CAN_FLY_ACK();
        }
        if (opcode == Opcode::CMSG_MOVE_SET_FLY) {
            this->CMSG_MOVE_SET_FLY.~CMSG_MOVE_SET_FLY();
        }
        if (opcode == Opcode::CMSG_SOCKET_GEMS) {
            this->CMSG_SOCKET_GEMS.~CMSG_SOCKET_GEMS();
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_ROSTER) {
            this->CMSG_ARENA_TEAM_ROSTER.~CMSG_ARENA_TEAM_ROSTER();
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_INVITE) {
            this->CMSG_ARENA_TEAM_INVITE.~CMSG_ARENA_TEAM_INVITE();
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_ACCEPT) {
            this->CMSG_ARENA_TEAM_ACCEPT.~CMSG_ARENA_TEAM_ACCEPT();
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_DECLINE) {
            this->CMSG_ARENA_TEAM_DECLINE.~CMSG_ARENA_TEAM_DECLINE();
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_LEAVE) {
            this->CMSG_ARENA_TEAM_LEAVE.~CMSG_ARENA_TEAM_LEAVE();
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_REMOVE) {
            this->CMSG_ARENA_TEAM_REMOVE.~CMSG_ARENA_TEAM_REMOVE();
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_DISBAND) {
            this->CMSG_ARENA_TEAM_DISBAND.~CMSG_ARENA_TEAM_DISBAND();
        }
        if (opcode == Opcode::CMSG_ARENA_TEAM_LEADER) {
            this->CMSG_ARENA_TEAM_LEADER.~CMSG_ARENA_TEAM_LEADER();
        }
        if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN_ARENA) {
            this->CMSG_BATTLEMASTER_JOIN_ARENA.~CMSG_BATTLEMASTER_JOIN_ARENA();
        }
        if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
            this->MSG_MOVE_START_ASCEND.~MSG_MOVE_START_ASCEND();
        }
        if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
            this->MSG_MOVE_STOP_ASCEND.~MSG_MOVE_STOP_ASCEND();
        }
        if (opcode == Opcode::CMSG_LFG_JOIN) {
            this->CMSG_LFG_JOIN.~CMSG_LFG_JOIN();
        }
        if (opcode == Opcode::CMSG_LFG_LEAVE) {
            this->CMSG_LFG_LEAVE.~CMSG_LFG_LEAVE();
        }
        if (opcode == Opcode::CMSG_SEARCH_LFG_JOIN) {
            this->CMSG_SEARCH_LFG_JOIN.~CMSG_SEARCH_LFG_JOIN();
        }
        if (opcode == Opcode::CMSG_SEARCH_LFG_LEAVE) {
            this->CMSG_SEARCH_LFG_LEAVE.~CMSG_SEARCH_LFG_LEAVE();
        }
        if (opcode == Opcode::CMSG_LFG_PROPOSAL_RESULT) {
            this->CMSG_LFG_PROPOSAL_RESULT.~CMSG_LFG_PROPOSAL_RESULT();
        }
        if (opcode == Opcode::CMSG_SET_LFG_COMMENT) {
            this->CMSG_SET_LFG_COMMENT.~CMSG_SET_LFG_COMMENT();
        }
        if (opcode == Opcode::CMSG_LFG_SET_ROLES) {
            this->CMSG_LFG_SET_ROLES.~CMSG_LFG_SET_ROLES();
        }
        if (opcode == Opcode::CMSG_LFG_SET_BOOT_VOTE) {
            this->CMSG_LFG_SET_BOOT_VOTE.~CMSG_LFG_SET_BOOT_VOTE();
        }
        if (opcode == Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) {
            this->CMSG_LFD_PLAYER_LOCK_INFO_REQUEST.~CMSG_LFD_PLAYER_LOCK_INFO_REQUEST();
        }
        if (opcode == Opcode::CMSG_LFG_TELEPORT) {
            this->CMSG_LFG_TELEPORT.~CMSG_LFG_TELEPORT();
        }
        if (opcode == Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST) {
            this->CMSG_LFD_PARTY_LOCK_INFO_REQUEST.~CMSG_LFD_PARTY_LOCK_INFO_REQUEST();
        }
        if (opcode == Opcode::CMSG_SET_TITLE) {
            this->CMSG_SET_TITLE.~CMSG_SET_TITLE();
        }
        if (opcode == Opcode::CMSG_CANCEL_MOUNT_AURA) {
            this->CMSG_CANCEL_MOUNT_AURA.~CMSG_CANCEL_MOUNT_AURA();
        }
        if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
            this->MSG_INSPECT_ARENA_TEAMS.~MSG_INSPECT_ARENA_TEAMS_Client();
        }
        if (opcode == Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT) {
            this->CMSG_CANCEL_TEMP_ENCHANTMENT.~CMSG_CANCEL_TEMP_ENCHANTMENT();
        }
        if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
            this->MSG_MOVE_SET_FLIGHT_BACK_SPEED.~MSG_MOVE_SET_FLIGHT_BACK_SPEED();
        }
        if (opcode == Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK.~CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK();
        }
        if (opcode == Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) {
            this->CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK.~CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK();
        }
        if (opcode == Opcode::CMSG_SET_TAXI_BENCHMARK_MODE) {
            this->CMSG_SET_TAXI_BENCHMARK_MODE.~CMSG_SET_TAXI_BENCHMARK_MODE();
        }
        if (opcode == Opcode::CMSG_REALM_SPLIT) {
            this->CMSG_REALM_SPLIT.~CMSG_REALM_SPLIT();
        }
        if (opcode == Opcode::CMSG_MOVE_CHNG_TRANSPORT) {
            this->CMSG_MOVE_CHNG_TRANSPORT.~CMSG_MOVE_CHNG_TRANSPORT();
        }
        if (opcode == Opcode::MSG_PARTY_ASSIGNMENT) {
            this->MSG_PARTY_ASSIGNMENT.~MSG_PARTY_ASSIGNMENT_Client();
        }
        if (opcode == Opcode::CMSG_TIME_SYNC_RESP) {
            this->CMSG_TIME_SYNC_RESP.~CMSG_TIME_SYNC_RESP();
        }
        if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
            this->MSG_MOVE_START_DESCEND.~MSG_MOVE_START_DESCEND();
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
            this->MSG_RAID_READY_CHECK_CONFIRM.~MSG_RAID_READY_CHECK_CONFIRM_Client();
        }
        if (opcode == Opcode::CMSG_VOICE_SESSION_ENABLE) {
            this->CMSG_VOICE_SESSION_ENABLE.~CMSG_VOICE_SESSION_ENABLE();
        }
        if (opcode == Opcode::CMSG_COMMENTATOR_ENABLE) {
            this->CMSG_COMMENTATOR_ENABLE.~CMSG_COMMENTATOR_ENABLE();
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK_FINISHED) {
            this->MSG_RAID_READY_CHECK_FINISHED.~MSG_RAID_READY_CHECK_FINISHED_Client();
        }
        if (opcode == Opcode::CMSG_COMPLAIN) {
            this->CMSG_COMPLAIN.~CMSG_COMPLAIN();
        }
        if (opcode == Opcode::CMSG_CHANNEL_DISPLAY_LIST) {
            this->CMSG_CHANNEL_DISPLAY_LIST.~CMSG_CHANNEL_DISPLAY_LIST();
        }
        if (opcode == Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL) {
            this->CMSG_SET_ACTIVE_VOICE_CHANNEL.~CMSG_SET_ACTIVE_VOICE_CHANNEL();
        }
        if (opcode == Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT) {
            this->CMSG_GET_CHANNEL_MEMBER_COUNT.~CMSG_GET_CHANNEL_MEMBER_COUNT();
        }
        if (opcode == Opcode::CMSG_CHANNEL_VOICE_ON) {
            this->CMSG_CHANNEL_VOICE_ON.~CMSG_CHANNEL_VOICE_ON();
        }
        if (opcode == Opcode::CMSG_REPORT_PVP_AFK) {
            this->CMSG_REPORT_PVP_AFK.~CMSG_REPORT_PVP_AFK();
        }
        if (opcode == Opcode::CMSG_GUILD_BANKER_ACTIVATE) {
            this->CMSG_GUILD_BANKER_ACTIVATE.~CMSG_GUILD_BANKER_ACTIVATE();
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_QUERY_TAB) {
            this->CMSG_GUILD_BANK_QUERY_TAB.~CMSG_GUILD_BANK_QUERY_TAB();
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_SWAP_ITEMS) {
            this->CMSG_GUILD_BANK_SWAP_ITEMS.~CMSG_GUILD_BANK_SWAP_ITEMS();
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_BUY_TAB) {
            this->CMSG_GUILD_BANK_BUY_TAB.~CMSG_GUILD_BANK_BUY_TAB();
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_UPDATE_TAB) {
            this->CMSG_GUILD_BANK_UPDATE_TAB.~CMSG_GUILD_BANK_UPDATE_TAB();
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY) {
            this->CMSG_GUILD_BANK_DEPOSIT_MONEY.~CMSG_GUILD_BANK_DEPOSIT_MONEY();
        }
        if (opcode == Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY) {
            this->CMSG_GUILD_BANK_WITHDRAW_MONEY.~CMSG_GUILD_BANK_WITHDRAW_MONEY();
        }
        if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
            this->MSG_GUILD_BANK_LOG_QUERY.~MSG_GUILD_BANK_LOG_QUERY_Client();
        }
        if (opcode == Opcode::CMSG_SET_CHANNEL_WATCH) {
            this->CMSG_SET_CHANNEL_WATCH.~CMSG_SET_CHANNEL_WATCH();
        }
        if (opcode == Opcode::CMSG_CLEAR_CHANNEL_WATCH) {
            this->CMSG_CLEAR_CHANNEL_WATCH.~CMSG_CLEAR_CHANNEL_WATCH();
        }
        if (opcode == Opcode::CMSG_SPELLCLICK) {
            this->CMSG_SPELLCLICK.~CMSG_SPELLCLICK();
        }
        if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
            this->MSG_GUILD_PERMISSIONS.~MSG_GUILD_PERMISSIONS_Client();
        }
        if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
            this->MSG_GUILD_BANK_MONEY_WITHDRAWN.~MSG_GUILD_BANK_MONEY_WITHDRAWN_Client();
        }
        if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
            this->MSG_GUILD_EVENT_LOG_QUERY.~MSG_GUILD_EVENT_LOG_QUERY_Client();
        }
        if (opcode == Opcode::CMSG_GET_MIRRORIMAGE_DATA) {
            this->CMSG_GET_MIRRORIMAGE_DATA.~CMSG_GET_MIRRORIMAGE_DATA();
        }
        if (opcode == Opcode::CMSG_KEEP_ALIVE) {
            this->CMSG_KEEP_ALIVE.~CMSG_KEEP_ALIVE();
        }
        if (opcode == Opcode::CMSG_OPT_OUT_OF_LOOT) {
            this->CMSG_OPT_OUT_OF_LOOT.~CMSG_OPT_OUT_OF_LOOT();
        }
        if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
            this->MSG_QUERY_GUILD_BANK_TEXT.~MSG_QUERY_GUILD_BANK_TEXT_Client();
        }
        if (opcode == Opcode::CMSG_SET_GUILD_BANK_TEXT) {
            this->CMSG_SET_GUILD_BANK_TEXT.~CMSG_SET_GUILD_BANK_TEXT();
        }
        if (opcode == Opcode::CMSG_GRANT_LEVEL) {
            this->CMSG_GRANT_LEVEL.~CMSG_GRANT_LEVEL();
        }
        if (opcode == Opcode::CMSG_TOTEM_DESTROYED) {
            this->CMSG_TOTEM_DESTROYED.~CMSG_TOTEM_DESTROYED();
        }
        if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) {
            this->CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY.~CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY();
        }
        if (opcode == Opcode::CMSG_SET_PLAYER_DECLINED_NAMES) {
            this->CMSG_SET_PLAYER_DECLINED_NAMES.~CMSG_SET_PLAYER_DECLINED_NAMES();
        }
        if (opcode == Opcode::CMSG_ACCEPT_LEVEL_GRANT) {
            this->CMSG_ACCEPT_LEVEL_GRANT.~CMSG_ACCEPT_LEVEL_GRANT();
        }
        if (opcode == Opcode::CMSG_ALTER_APPEARANCE) {
            this->CMSG_ALTER_APPEARANCE.~CMSG_ALTER_APPEARANCE();
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_CALENDAR) {
            this->CMSG_CALENDAR_GET_CALENDAR.~CMSG_CALENDAR_GET_CALENDAR();
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_EVENT) {
            this->CMSG_CALENDAR_GET_EVENT.~CMSG_CALENDAR_GET_EVENT();
        }
        if (opcode == Opcode::CMSG_CALENDAR_GUILD_FILTER) {
            this->CMSG_CALENDAR_GUILD_FILTER.~CMSG_CALENDAR_GUILD_FILTER();
        }
        if (opcode == Opcode::CMSG_CALENDAR_ARENA_TEAM) {
            this->CMSG_CALENDAR_ARENA_TEAM.~CMSG_CALENDAR_ARENA_TEAM();
        }
        if (opcode == Opcode::CMSG_CALENDAR_ADD_EVENT) {
            this->CMSG_CALENDAR_ADD_EVENT.~CMSG_CALENDAR_ADD_EVENT();
        }
        if (opcode == Opcode::CMSG_CALENDAR_UPDATE_EVENT) {
            this->CMSG_CALENDAR_UPDATE_EVENT.~CMSG_CALENDAR_UPDATE_EVENT();
        }
        if (opcode == Opcode::CMSG_CALENDAR_REMOVE_EVENT) {
            this->CMSG_CALENDAR_REMOVE_EVENT.~CMSG_CALENDAR_REMOVE_EVENT();
        }
        if (opcode == Opcode::CMSG_CALENDAR_COPY_EVENT) {
            this->CMSG_CALENDAR_COPY_EVENT.~CMSG_CALENDAR_COPY_EVENT();
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_INVITE) {
            this->CMSG_CALENDAR_EVENT_INVITE.~CMSG_CALENDAR_EVENT_INVITE();
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_RSVP) {
            this->CMSG_CALENDAR_EVENT_RSVP.~CMSG_CALENDAR_EVENT_RSVP();
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE) {
            this->CMSG_CALENDAR_EVENT_REMOVE_INVITE.~CMSG_CALENDAR_EVENT_REMOVE_INVITE();
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_STATUS) {
            this->CMSG_CALENDAR_EVENT_STATUS.~CMSG_CALENDAR_EVENT_STATUS();
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS) {
            this->CMSG_CALENDAR_EVENT_MODERATOR_STATUS.~CMSG_CALENDAR_EVENT_MODERATOR_STATUS();
        }
        if (opcode == Opcode::CMSG_CALENDAR_COMPLAIN) {
            this->CMSG_CALENDAR_COMPLAIN.~CMSG_CALENDAR_COMPLAIN();
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
            this->CMSG_CALENDAR_GET_NUM_PENDING.~CMSG_CALENDAR_GET_NUM_PENDING();
        }
        if (opcode == Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY) {
            this->CMSG_UPDATE_MISSILE_TRAJECTORY.~CMSG_UPDATE_MISSILE_TRAJECTORY();
        }
        if (opcode == Opcode::CMSG_COMPLETE_MOVIE) {
            this->CMSG_COMPLETE_MOVIE.~CMSG_COMPLETE_MOVIE();
        }
        if (opcode == Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS) {
            this->CMSG_QUERY_INSPECT_ACHIEVEMENTS.~CMSG_QUERY_INSPECT_ACHIEVEMENTS();
        }
        if (opcode == Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE) {
            this->CMSG_DISMISS_CONTROLLED_VEHICLE.~CMSG_DISMISS_CONTROLLED_VEHICLE();
        }
        if (opcode == Opcode::CMSG_CHAR_CUSTOMIZE) {
            this->CMSG_CHAR_CUSTOMIZE.~CMSG_CHAR_CUSTOMIZE();
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_EXIT) {
            this->CMSG_REQUEST_VEHICLE_EXIT.~CMSG_REQUEST_VEHICLE_EXIT();
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT) {
            this->CMSG_REQUEST_VEHICLE_PREV_SEAT.~CMSG_REQUEST_VEHICLE_PREV_SEAT();
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT) {
            this->CMSG_REQUEST_VEHICLE_NEXT_SEAT.~CMSG_REQUEST_VEHICLE_NEXT_SEAT();
        }
        if (opcode == Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT) {
            this->CMSG_REQUEST_VEHICLE_SWITCH_SEAT.~CMSG_REQUEST_VEHICLE_SWITCH_SEAT();
        }
        if (opcode == Opcode::CMSG_PET_LEARN_TALENT) {
            this->CMSG_PET_LEARN_TALENT.~CMSG_PET_LEARN_TALENT();
        }
        if (opcode == Opcode::CMSG_GAMEOBJ_REPORT_USE) {
            this->CMSG_GAMEOBJ_REPORT_USE.~CMSG_GAMEOBJ_REPORT_USE();
        }
        if (opcode == Opcode::CMSG_REMOVE_GLYPH) {
            this->CMSG_REMOVE_GLYPH.~CMSG_REMOVE_GLYPH();
        }
        if (opcode == Opcode::CMSG_DISMISS_CRITTER) {
            this->CMSG_DISMISS_CRITTER.~CMSG_DISMISS_CRITTER();
        }
        if (opcode == Opcode::CMSG_AUCTION_LIST_PENDING_SALES) {
            this->CMSG_AUCTION_LIST_PENDING_SALES.~CMSG_AUCTION_LIST_PENDING_SALES();
        }
        if (opcode == Opcode::CMSG_ENABLETAXI) {
            this->CMSG_ENABLETAXI.~CMSG_ENABLETAXI();
        }
        if (opcode == Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) {
            this->CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE.~CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE();
        }
        if (opcode == Opcode::CMSG_HEARTH_AND_RESURRECT) {
            this->CMSG_HEARTH_AND_RESURRECT.~CMSG_HEARTH_AND_RESURRECT();
        }
        if (opcode == Opcode::CMSG_PLAYER_VEHICLE_ENTER) {
            this->CMSG_PLAYER_VEHICLE_ENTER.~CMSG_PLAYER_VEHICLE_ENTER();
        }
        if (opcode == Opcode::CMSG_CONTROLLER_EJECT_PASSENGER) {
            this->CMSG_CONTROLLER_EJECT_PASSENGER.~CMSG_CONTROLLER_EJECT_PASSENGER();
        }
        if (opcode == Opcode::CMSG_ITEM_REFUND_INFO) {
            this->CMSG_ITEM_REFUND_INFO.~CMSG_ITEM_REFUND_INFO();
        }
        if (opcode == Opcode::CMSG_ITEM_REFUND) {
            this->CMSG_ITEM_REFUND.~CMSG_ITEM_REFUND();
        }
        if (opcode == Opcode::CMSG_CORPSE_MAP_POSITION_QUERY) {
            this->CMSG_CORPSE_MAP_POSITION_QUERY.~CMSG_CORPSE_MAP_POSITION_QUERY();
        }
        if (opcode == Opcode::CMSG_CALENDAR_EVENT_SIGNUP) {
            this->CMSG_CALENDAR_EVENT_SIGNUP.~CMSG_CALENDAR_EVENT_SIGNUP();
        }
        if (opcode == Opcode::CMSG_EQUIPMENT_SET_SAVE) {
            this->CMSG_EQUIPMENT_SET_SAVE.~CMSG_EQUIPMENT_SET_SAVE();
        }
        if (opcode == Opcode::CMSG_UPDATE_PROJECTILE_POSITION) {
            this->CMSG_UPDATE_PROJECTILE_POSITION.~CMSG_UPDATE_PROJECTILE_POSITION();
        }
        if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS) {
            this->CMSG_LEARN_PREVIEW_TALENTS.~CMSG_LEARN_PREVIEW_TALENTS();
        }
        if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET) {
            this->CMSG_LEARN_PREVIEW_TALENTS_PET.~CMSG_LEARN_PREVIEW_TALENTS_PET();
        }
        if (opcode == Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK) {
            this->CMSG_MOVE_GRAVITY_DISABLE_ACK.~CMSG_MOVE_GRAVITY_DISABLE_ACK();
        }
        if (opcode == Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK) {
            this->CMSG_MOVE_GRAVITY_ENABLE_ACK.~CMSG_MOVE_GRAVITY_ENABLE_ACK();
        }
        if (opcode == Opcode::CMSG_EQUIPMENT_SET_USE) {
            this->CMSG_EQUIPMENT_SET_USE.~CMSG_EQUIPMENT_SET_USE();
        }
        if (opcode == Opcode::CMSG_CHAR_FACTION_CHANGE) {
            this->CMSG_CHAR_FACTION_CHANGE.~CMSG_CHAR_FACTION_CHANGE();
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) {
            this->CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE.~CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE();
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) {
            this->CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE.~CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE();
        }
        if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) {
            this->CMSG_BATTLEFIELD_MGR_EXIT_REQUEST.~CMSG_BATTLEFIELD_MGR_EXIT_REQUEST();
        }
        if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
            this->MSG_SET_RAID_DIFFICULTY.~MSG_SET_RAID_DIFFICULTY_Client();
        }
        if (opcode == Opcode::CMSG_GMRESPONSE_RESOLVE) {
            this->CMSG_GMRESPONSE_RESOLVE.~CMSG_GMRESPONSE_RESOLVE();
        }
        if (opcode == Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE) {
            this->CMSG_WORLD_STATE_UI_TIMER_UPDATE.~CMSG_WORLD_STATE_UI_TIMER_UPDATE();
        }
        if (opcode == Opcode::CMSG_CHAR_RACE_CHANGE) {
            this->CMSG_CHAR_RACE_CHANGE.~CMSG_CHAR_RACE_CHANGE();
        }
        if (opcode == Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES) {
            this->CMSG_READY_FOR_ACCOUNT_DATA_TIMES.~CMSG_READY_FOR_ACCOUNT_DATA_TIMES();
        }
        if (opcode == Opcode::CMSG_QUERY_QUESTS_COMPLETED) {
            this->CMSG_QUERY_QUESTS_COMPLETED.~CMSG_QUERY_QUESTS_COMPLETED();
        }
        if (opcode == Opcode::CMSG_GM_REPORT_LAG) {
            this->CMSG_GM_REPORT_LAG.~CMSG_GM_REPORT_LAG();
        }
        if (opcode == Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK) {
            this->CMSG_MOVE_SET_COLLISION_HGT_ACK.~CMSG_MOVE_SET_COLLISION_HGT_ACK();
        }
    }

    explicit ClientOpcode(wrath::CMSG_BOOTME&& obj) {
        opcode = Opcode::CMSG_BOOTME;
        new (&this->CMSG_BOOTME) wrath::CMSG_BOOTME (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_DBLOOKUP&& obj) {
        opcode = Opcode::CMSG_DBLOOKUP;
        new (&this->CMSG_DBLOOKUP) wrath::CMSG_DBLOOKUP (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_WORLD_TELEPORT&& obj) {
        opcode = Opcode::CMSG_WORLD_TELEPORT;
        new (&this->CMSG_WORLD_TELEPORT) wrath::CMSG_WORLD_TELEPORT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TELEPORT_TO_UNIT&& obj) {
        opcode = Opcode::CMSG_TELEPORT_TO_UNIT;
        new (&this->CMSG_TELEPORT_TO_UNIT) wrath::CMSG_TELEPORT_TO_UNIT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHAR_CREATE&& obj) {
        opcode = Opcode::CMSG_CHAR_CREATE;
        new (&this->CMSG_CHAR_CREATE) wrath::CMSG_CHAR_CREATE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHAR_ENUM&& obj) {
        opcode = Opcode::CMSG_CHAR_ENUM;
        new (&this->CMSG_CHAR_ENUM) wrath::CMSG_CHAR_ENUM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHAR_DELETE&& obj) {
        opcode = Opcode::CMSG_CHAR_DELETE;
        new (&this->CMSG_CHAR_DELETE) wrath::CMSG_CHAR_DELETE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PLAYER_LOGIN&& obj) {
        opcode = Opcode::CMSG_PLAYER_LOGIN;
        new (&this->CMSG_PLAYER_LOGIN) wrath::CMSG_PLAYER_LOGIN (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PLAYER_LOGOUT&& obj) {
        opcode = Opcode::CMSG_PLAYER_LOGOUT;
        new (&this->CMSG_PLAYER_LOGOUT) wrath::CMSG_PLAYER_LOGOUT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LOGOUT_REQUEST&& obj) {
        opcode = Opcode::CMSG_LOGOUT_REQUEST;
        new (&this->CMSG_LOGOUT_REQUEST) wrath::CMSG_LOGOUT_REQUEST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LOGOUT_CANCEL&& obj) {
        opcode = Opcode::CMSG_LOGOUT_CANCEL;
        new (&this->CMSG_LOGOUT_CANCEL) wrath::CMSG_LOGOUT_CANCEL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_NAME_QUERY&& obj) {
        opcode = Opcode::CMSG_NAME_QUERY;
        new (&this->CMSG_NAME_QUERY) wrath::CMSG_NAME_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PET_NAME_QUERY&& obj) {
        opcode = Opcode::CMSG_PET_NAME_QUERY;
        new (&this->CMSG_PET_NAME_QUERY) wrath::CMSG_PET_NAME_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_QUERY&& obj) {
        opcode = Opcode::CMSG_GUILD_QUERY;
        new (&this->CMSG_GUILD_QUERY) wrath::CMSG_GUILD_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ITEM_QUERY_SINGLE&& obj) {
        opcode = Opcode::CMSG_ITEM_QUERY_SINGLE;
        new (&this->CMSG_ITEM_QUERY_SINGLE) wrath::CMSG_ITEM_QUERY_SINGLE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PAGE_TEXT_QUERY&& obj) {
        opcode = Opcode::CMSG_PAGE_TEXT_QUERY;
        new (&this->CMSG_PAGE_TEXT_QUERY) wrath::CMSG_PAGE_TEXT_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUEST_QUERY&& obj) {
        opcode = Opcode::CMSG_QUEST_QUERY;
        new (&this->CMSG_QUEST_QUERY) wrath::CMSG_QUEST_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GAMEOBJECT_QUERY&& obj) {
        opcode = Opcode::CMSG_GAMEOBJECT_QUERY;
        new (&this->CMSG_GAMEOBJECT_QUERY) wrath::CMSG_GAMEOBJECT_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CREATURE_QUERY&& obj) {
        opcode = Opcode::CMSG_CREATURE_QUERY;
        new (&this->CMSG_CREATURE_QUERY) wrath::CMSG_CREATURE_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_WHO&& obj) {
        opcode = Opcode::CMSG_WHO;
        new (&this->CMSG_WHO) wrath::CMSG_WHO (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_WHOIS&& obj) {
        opcode = Opcode::CMSG_WHOIS;
        new (&this->CMSG_WHOIS) wrath::CMSG_WHOIS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CONTACT_LIST&& obj) {
        opcode = Opcode::CMSG_CONTACT_LIST;
        new (&this->CMSG_CONTACT_LIST) wrath::CMSG_CONTACT_LIST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ADD_FRIEND&& obj) {
        opcode = Opcode::CMSG_ADD_FRIEND;
        new (&this->CMSG_ADD_FRIEND) wrath::CMSG_ADD_FRIEND (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_DEL_FRIEND&& obj) {
        opcode = Opcode::CMSG_DEL_FRIEND;
        new (&this->CMSG_DEL_FRIEND) wrath::CMSG_DEL_FRIEND (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_CONTACT_NOTES&& obj) {
        opcode = Opcode::CMSG_SET_CONTACT_NOTES;
        new (&this->CMSG_SET_CONTACT_NOTES) wrath::CMSG_SET_CONTACT_NOTES (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ADD_IGNORE&& obj) {
        opcode = Opcode::CMSG_ADD_IGNORE;
        new (&this->CMSG_ADD_IGNORE) wrath::CMSG_ADD_IGNORE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_DEL_IGNORE&& obj) {
        opcode = Opcode::CMSG_DEL_IGNORE;
        new (&this->CMSG_DEL_IGNORE) wrath::CMSG_DEL_IGNORE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_INVITE&& obj) {
        opcode = Opcode::CMSG_GROUP_INVITE;
        new (&this->CMSG_GROUP_INVITE) wrath::CMSG_GROUP_INVITE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_CANCEL&& obj) {
        opcode = Opcode::CMSG_GROUP_CANCEL;
        new (&this->CMSG_GROUP_CANCEL) wrath::CMSG_GROUP_CANCEL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_ACCEPT&& obj) {
        opcode = Opcode::CMSG_GROUP_ACCEPT;
        new (&this->CMSG_GROUP_ACCEPT) wrath::CMSG_GROUP_ACCEPT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_DECLINE&& obj) {
        opcode = Opcode::CMSG_GROUP_DECLINE;
        new (&this->CMSG_GROUP_DECLINE) wrath::CMSG_GROUP_DECLINE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_UNINVITE&& obj) {
        opcode = Opcode::CMSG_GROUP_UNINVITE;
        new (&this->CMSG_GROUP_UNINVITE) wrath::CMSG_GROUP_UNINVITE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_UNINVITE_GUID&& obj) {
        opcode = Opcode::CMSG_GROUP_UNINVITE_GUID;
        new (&this->CMSG_GROUP_UNINVITE_GUID) wrath::CMSG_GROUP_UNINVITE_GUID (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_SET_LEADER&& obj) {
        opcode = Opcode::CMSG_GROUP_SET_LEADER;
        new (&this->CMSG_GROUP_SET_LEADER) wrath::CMSG_GROUP_SET_LEADER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LOOT_METHOD&& obj) {
        opcode = Opcode::CMSG_LOOT_METHOD;
        new (&this->CMSG_LOOT_METHOD) wrath::CMSG_LOOT_METHOD (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_DISBAND&& obj) {
        opcode = Opcode::CMSG_GROUP_DISBAND;
        new (&this->CMSG_GROUP_DISBAND) wrath::CMSG_GROUP_DISBAND (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_CREATE&& obj) {
        opcode = Opcode::CMSG_GUILD_CREATE;
        new (&this->CMSG_GUILD_CREATE) wrath::CMSG_GUILD_CREATE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_INVITE&& obj) {
        opcode = Opcode::CMSG_GUILD_INVITE;
        new (&this->CMSG_GUILD_INVITE) wrath::CMSG_GUILD_INVITE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_ACCEPT&& obj) {
        opcode = Opcode::CMSG_GUILD_ACCEPT;
        new (&this->CMSG_GUILD_ACCEPT) wrath::CMSG_GUILD_ACCEPT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_DECLINE&& obj) {
        opcode = Opcode::CMSG_GUILD_DECLINE;
        new (&this->CMSG_GUILD_DECLINE) wrath::CMSG_GUILD_DECLINE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_INFO&& obj) {
        opcode = Opcode::CMSG_GUILD_INFO;
        new (&this->CMSG_GUILD_INFO) wrath::CMSG_GUILD_INFO (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_ROSTER&& obj) {
        opcode = Opcode::CMSG_GUILD_ROSTER;
        new (&this->CMSG_GUILD_ROSTER) wrath::CMSG_GUILD_ROSTER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_PROMOTE&& obj) {
        opcode = Opcode::CMSG_GUILD_PROMOTE;
        new (&this->CMSG_GUILD_PROMOTE) wrath::CMSG_GUILD_PROMOTE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_DEMOTE&& obj) {
        opcode = Opcode::CMSG_GUILD_DEMOTE;
        new (&this->CMSG_GUILD_DEMOTE) wrath::CMSG_GUILD_DEMOTE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_LEAVE&& obj) {
        opcode = Opcode::CMSG_GUILD_LEAVE;
        new (&this->CMSG_GUILD_LEAVE) wrath::CMSG_GUILD_LEAVE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_REMOVE&& obj) {
        opcode = Opcode::CMSG_GUILD_REMOVE;
        new (&this->CMSG_GUILD_REMOVE) wrath::CMSG_GUILD_REMOVE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_DISBAND&& obj) {
        opcode = Opcode::CMSG_GUILD_DISBAND;
        new (&this->CMSG_GUILD_DISBAND) wrath::CMSG_GUILD_DISBAND (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_LEADER&& obj) {
        opcode = Opcode::CMSG_GUILD_LEADER;
        new (&this->CMSG_GUILD_LEADER) wrath::CMSG_GUILD_LEADER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_MOTD&& obj) {
        opcode = Opcode::CMSG_GUILD_MOTD;
        new (&this->CMSG_GUILD_MOTD) wrath::CMSG_GUILD_MOTD (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MESSAGECHAT&& obj) {
        opcode = Opcode::CMSG_MESSAGECHAT;
        new (&this->CMSG_MESSAGECHAT) wrath::CMSG_MESSAGECHAT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_JOIN_CHANNEL&& obj) {
        opcode = Opcode::CMSG_JOIN_CHANNEL;
        new (&this->CMSG_JOIN_CHANNEL) wrath::CMSG_JOIN_CHANNEL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LEAVE_CHANNEL&& obj) {
        opcode = Opcode::CMSG_LEAVE_CHANNEL;
        new (&this->CMSG_LEAVE_CHANNEL) wrath::CMSG_LEAVE_CHANNEL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_LIST&& obj) {
        opcode = Opcode::CMSG_CHANNEL_LIST;
        new (&this->CMSG_CHANNEL_LIST) wrath::CMSG_CHANNEL_LIST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_PASSWORD&& obj) {
        opcode = Opcode::CMSG_CHANNEL_PASSWORD;
        new (&this->CMSG_CHANNEL_PASSWORD) wrath::CMSG_CHANNEL_PASSWORD (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_SET_OWNER&& obj) {
        opcode = Opcode::CMSG_CHANNEL_SET_OWNER;
        new (&this->CMSG_CHANNEL_SET_OWNER) wrath::CMSG_CHANNEL_SET_OWNER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_OWNER&& obj) {
        opcode = Opcode::CMSG_CHANNEL_OWNER;
        new (&this->CMSG_CHANNEL_OWNER) wrath::CMSG_CHANNEL_OWNER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_MODERATOR&& obj) {
        opcode = Opcode::CMSG_CHANNEL_MODERATOR;
        new (&this->CMSG_CHANNEL_MODERATOR) wrath::CMSG_CHANNEL_MODERATOR (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_UNMODERATOR&& obj) {
        opcode = Opcode::CMSG_CHANNEL_UNMODERATOR;
        new (&this->CMSG_CHANNEL_UNMODERATOR) wrath::CMSG_CHANNEL_UNMODERATOR (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_MUTE&& obj) {
        opcode = Opcode::CMSG_CHANNEL_MUTE;
        new (&this->CMSG_CHANNEL_MUTE) wrath::CMSG_CHANNEL_MUTE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_UNMUTE&& obj) {
        opcode = Opcode::CMSG_CHANNEL_UNMUTE;
        new (&this->CMSG_CHANNEL_UNMUTE) wrath::CMSG_CHANNEL_UNMUTE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_INVITE&& obj) {
        opcode = Opcode::CMSG_CHANNEL_INVITE;
        new (&this->CMSG_CHANNEL_INVITE) wrath::CMSG_CHANNEL_INVITE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_KICK&& obj) {
        opcode = Opcode::CMSG_CHANNEL_KICK;
        new (&this->CMSG_CHANNEL_KICK) wrath::CMSG_CHANNEL_KICK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_BAN&& obj) {
        opcode = Opcode::CMSG_CHANNEL_BAN;
        new (&this->CMSG_CHANNEL_BAN) wrath::CMSG_CHANNEL_BAN (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_UNBAN&& obj) {
        opcode = Opcode::CMSG_CHANNEL_UNBAN;
        new (&this->CMSG_CHANNEL_UNBAN) wrath::CMSG_CHANNEL_UNBAN (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_ANNOUNCEMENTS&& obj) {
        opcode = Opcode::CMSG_CHANNEL_ANNOUNCEMENTS;
        new (&this->CMSG_CHANNEL_ANNOUNCEMENTS) wrath::CMSG_CHANNEL_ANNOUNCEMENTS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_MODERATE&& obj) {
        opcode = Opcode::CMSG_CHANNEL_MODERATE;
        new (&this->CMSG_CHANNEL_MODERATE) wrath::CMSG_CHANNEL_MODERATE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_USE_ITEM&& obj) {
        opcode = Opcode::CMSG_USE_ITEM;
        new (&this->CMSG_USE_ITEM) wrath::CMSG_USE_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_OPEN_ITEM&& obj) {
        opcode = Opcode::CMSG_OPEN_ITEM;
        new (&this->CMSG_OPEN_ITEM) wrath::CMSG_OPEN_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_READ_ITEM&& obj) {
        opcode = Opcode::CMSG_READ_ITEM;
        new (&this->CMSG_READ_ITEM) wrath::CMSG_READ_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GAMEOBJ_USE&& obj) {
        opcode = Opcode::CMSG_GAMEOBJ_USE;
        new (&this->CMSG_GAMEOBJ_USE) wrath::CMSG_GAMEOBJ_USE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AREATRIGGER&& obj) {
        opcode = Opcode::CMSG_AREATRIGGER;
        new (&this->CMSG_AREATRIGGER) wrath::CMSG_AREATRIGGER (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_START_FORWARD&& obj) {
        opcode = Opcode::MSG_MOVE_START_FORWARD;
        new (&this->MSG_MOVE_START_FORWARD) wrath::MSG_MOVE_START_FORWARD (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_START_BACKWARD&& obj) {
        opcode = Opcode::MSG_MOVE_START_BACKWARD;
        new (&this->MSG_MOVE_START_BACKWARD) wrath::MSG_MOVE_START_BACKWARD (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_STOP&& obj) {
        opcode = Opcode::MSG_MOVE_STOP;
        new (&this->MSG_MOVE_STOP) wrath::MSG_MOVE_STOP (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_START_STRAFE_LEFT&& obj) {
        opcode = Opcode::MSG_MOVE_START_STRAFE_LEFT;
        new (&this->MSG_MOVE_START_STRAFE_LEFT) wrath::MSG_MOVE_START_STRAFE_LEFT (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_START_STRAFE_RIGHT&& obj) {
        opcode = Opcode::MSG_MOVE_START_STRAFE_RIGHT;
        new (&this->MSG_MOVE_START_STRAFE_RIGHT) wrath::MSG_MOVE_START_STRAFE_RIGHT (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_STOP_STRAFE&& obj) {
        opcode = Opcode::MSG_MOVE_STOP_STRAFE;
        new (&this->MSG_MOVE_STOP_STRAFE) wrath::MSG_MOVE_STOP_STRAFE (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_JUMP&& obj) {
        opcode = Opcode::MSG_MOVE_JUMP;
        new (&this->MSG_MOVE_JUMP) wrath::MSG_MOVE_JUMP (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_START_TURN_LEFT&& obj) {
        opcode = Opcode::MSG_MOVE_START_TURN_LEFT;
        new (&this->MSG_MOVE_START_TURN_LEFT) wrath::MSG_MOVE_START_TURN_LEFT (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_START_TURN_RIGHT&& obj) {
        opcode = Opcode::MSG_MOVE_START_TURN_RIGHT;
        new (&this->MSG_MOVE_START_TURN_RIGHT) wrath::MSG_MOVE_START_TURN_RIGHT (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_STOP_TURN&& obj) {
        opcode = Opcode::MSG_MOVE_STOP_TURN;
        new (&this->MSG_MOVE_STOP_TURN) wrath::MSG_MOVE_STOP_TURN (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_START_PITCH_UP&& obj) {
        opcode = Opcode::MSG_MOVE_START_PITCH_UP;
        new (&this->MSG_MOVE_START_PITCH_UP) wrath::MSG_MOVE_START_PITCH_UP (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_START_PITCH_DOWN&& obj) {
        opcode = Opcode::MSG_MOVE_START_PITCH_DOWN;
        new (&this->MSG_MOVE_START_PITCH_DOWN) wrath::MSG_MOVE_START_PITCH_DOWN (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_STOP_PITCH&& obj) {
        opcode = Opcode::MSG_MOVE_STOP_PITCH;
        new (&this->MSG_MOVE_STOP_PITCH) wrath::MSG_MOVE_STOP_PITCH (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_SET_RUN_MODE&& obj) {
        opcode = Opcode::MSG_MOVE_SET_RUN_MODE;
        new (&this->MSG_MOVE_SET_RUN_MODE) wrath::MSG_MOVE_SET_RUN_MODE (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_SET_WALK_MODE&& obj) {
        opcode = Opcode::MSG_MOVE_SET_WALK_MODE;
        new (&this->MSG_MOVE_SET_WALK_MODE) wrath::MSG_MOVE_SET_WALK_MODE (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_TELEPORT_Server&& obj) {
        opcode = Opcode::MSG_MOVE_TELEPORT;
        new (&this->MSG_MOVE_TELEPORT) wrath::MSG_MOVE_TELEPORT_Server (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_TELEPORT_ACK_Client&& obj) {
        opcode = Opcode::MSG_MOVE_TELEPORT_ACK;
        new (&this->MSG_MOVE_TELEPORT_ACK) wrath::MSG_MOVE_TELEPORT_ACK_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_FALL_LAND&& obj) {
        opcode = Opcode::MSG_MOVE_FALL_LAND;
        new (&this->MSG_MOVE_FALL_LAND) wrath::MSG_MOVE_FALL_LAND (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_START_SWIM&& obj) {
        opcode = Opcode::MSG_MOVE_START_SWIM;
        new (&this->MSG_MOVE_START_SWIM) wrath::MSG_MOVE_START_SWIM (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_STOP_SWIM&& obj) {
        opcode = Opcode::MSG_MOVE_STOP_SWIM;
        new (&this->MSG_MOVE_STOP_SWIM) wrath::MSG_MOVE_STOP_SWIM (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_SET_FACING&& obj) {
        opcode = Opcode::MSG_MOVE_SET_FACING;
        new (&this->MSG_MOVE_SET_FACING) wrath::MSG_MOVE_SET_FACING (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_SET_PITCH&& obj) {
        opcode = Opcode::MSG_MOVE_SET_PITCH;
        new (&this->MSG_MOVE_SET_PITCH) wrath::MSG_MOVE_SET_PITCH (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_WORLDPORT_ACK&& obj) {
        opcode = Opcode::MSG_MOVE_WORLDPORT_ACK;
        new (&this->MSG_MOVE_WORLDPORT_ACK) wrath::MSG_MOVE_WORLDPORT_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_SET_RAW_POSITION&& obj) {
        opcode = Opcode::CMSG_MOVE_SET_RAW_POSITION;
        new (&this->CMSG_MOVE_SET_RAW_POSITION) wrath::CMSG_MOVE_SET_RAW_POSITION (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK&& obj) {
        opcode = Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK;
        new (&this->CMSG_FORCE_RUN_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK&& obj) {
        opcode = Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK;
        new (&this->CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK&& obj) {
        opcode = Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK;
        new (&this->CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_FORCE_MOVE_ROOT_ACK&& obj) {
        opcode = Opcode::CMSG_FORCE_MOVE_ROOT_ACK;
        new (&this->CMSG_FORCE_MOVE_ROOT_ACK) wrath::CMSG_FORCE_MOVE_ROOT_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_FORCE_MOVE_UNROOT_ACK&& obj) {
        opcode = Opcode::CMSG_FORCE_MOVE_UNROOT_ACK;
        new (&this->CMSG_FORCE_MOVE_UNROOT_ACK) wrath::CMSG_FORCE_MOVE_UNROOT_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_HEARTBEAT&& obj) {
        opcode = Opcode::MSG_MOVE_HEARTBEAT;
        new (&this->MSG_MOVE_HEARTBEAT) wrath::MSG_MOVE_HEARTBEAT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_KNOCK_BACK_ACK&& obj) {
        opcode = Opcode::CMSG_MOVE_KNOCK_BACK_ACK;
        new (&this->CMSG_MOVE_KNOCK_BACK_ACK) wrath::CMSG_MOVE_KNOCK_BACK_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_HOVER_ACK&& obj) {
        opcode = Opcode::CMSG_MOVE_HOVER_ACK;
        new (&this->CMSG_MOVE_HOVER_ACK) wrath::CMSG_MOVE_HOVER_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_HOVER&& obj) {
        opcode = Opcode::MSG_MOVE_HOVER;
        new (&this->MSG_MOVE_HOVER) wrath::MSG_MOVE_HOVER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_NEXT_CINEMATIC_CAMERA&& obj) {
        opcode = Opcode::CMSG_NEXT_CINEMATIC_CAMERA;
        new (&this->CMSG_NEXT_CINEMATIC_CAMERA) wrath::CMSG_NEXT_CINEMATIC_CAMERA (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_COMPLETE_CINEMATIC&& obj) {
        opcode = Opcode::CMSG_COMPLETE_CINEMATIC;
        new (&this->CMSG_COMPLETE_CINEMATIC) wrath::CMSG_COMPLETE_CINEMATIC (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TUTORIAL_FLAG&& obj) {
        opcode = Opcode::CMSG_TUTORIAL_FLAG;
        new (&this->CMSG_TUTORIAL_FLAG) wrath::CMSG_TUTORIAL_FLAG (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TUTORIAL_CLEAR&& obj) {
        opcode = Opcode::CMSG_TUTORIAL_CLEAR;
        new (&this->CMSG_TUTORIAL_CLEAR) wrath::CMSG_TUTORIAL_CLEAR (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TUTORIAL_RESET&& obj) {
        opcode = Opcode::CMSG_TUTORIAL_RESET;
        new (&this->CMSG_TUTORIAL_RESET) wrath::CMSG_TUTORIAL_RESET (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_STANDSTATECHANGE&& obj) {
        opcode = Opcode::CMSG_STANDSTATECHANGE;
        new (&this->CMSG_STANDSTATECHANGE) wrath::CMSG_STANDSTATECHANGE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_EMOTE&& obj) {
        opcode = Opcode::CMSG_EMOTE;
        new (&this->CMSG_EMOTE) wrath::CMSG_EMOTE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TEXT_EMOTE&& obj) {
        opcode = Opcode::CMSG_TEXT_EMOTE;
        new (&this->CMSG_TEXT_EMOTE) wrath::CMSG_TEXT_EMOTE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUTOSTORE_LOOT_ITEM&& obj) {
        opcode = Opcode::CMSG_AUTOSTORE_LOOT_ITEM;
        new (&this->CMSG_AUTOSTORE_LOOT_ITEM) wrath::CMSG_AUTOSTORE_LOOT_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUTOEQUIP_ITEM&& obj) {
        opcode = Opcode::CMSG_AUTOEQUIP_ITEM;
        new (&this->CMSG_AUTOEQUIP_ITEM) wrath::CMSG_AUTOEQUIP_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUTOSTORE_BAG_ITEM&& obj) {
        opcode = Opcode::CMSG_AUTOSTORE_BAG_ITEM;
        new (&this->CMSG_AUTOSTORE_BAG_ITEM) wrath::CMSG_AUTOSTORE_BAG_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SWAP_ITEM&& obj) {
        opcode = Opcode::CMSG_SWAP_ITEM;
        new (&this->CMSG_SWAP_ITEM) wrath::CMSG_SWAP_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SWAP_INV_ITEM&& obj) {
        opcode = Opcode::CMSG_SWAP_INV_ITEM;
        new (&this->CMSG_SWAP_INV_ITEM) wrath::CMSG_SWAP_INV_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SPLIT_ITEM&& obj) {
        opcode = Opcode::CMSG_SPLIT_ITEM;
        new (&this->CMSG_SPLIT_ITEM) wrath::CMSG_SPLIT_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUTOEQUIP_ITEM_SLOT&& obj) {
        opcode = Opcode::CMSG_AUTOEQUIP_ITEM_SLOT;
        new (&this->CMSG_AUTOEQUIP_ITEM_SLOT) wrath::CMSG_AUTOEQUIP_ITEM_SLOT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_DESTROYITEM&& obj) {
        opcode = Opcode::CMSG_DESTROYITEM;
        new (&this->CMSG_DESTROYITEM) wrath::CMSG_DESTROYITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_INSPECT&& obj) {
        opcode = Opcode::CMSG_INSPECT;
        new (&this->CMSG_INSPECT) wrath::CMSG_INSPECT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_INITIATE_TRADE&& obj) {
        opcode = Opcode::CMSG_INITIATE_TRADE;
        new (&this->CMSG_INITIATE_TRADE) wrath::CMSG_INITIATE_TRADE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BEGIN_TRADE&& obj) {
        opcode = Opcode::CMSG_BEGIN_TRADE;
        new (&this->CMSG_BEGIN_TRADE) wrath::CMSG_BEGIN_TRADE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BUSY_TRADE&& obj) {
        opcode = Opcode::CMSG_BUSY_TRADE;
        new (&this->CMSG_BUSY_TRADE) wrath::CMSG_BUSY_TRADE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_IGNORE_TRADE&& obj) {
        opcode = Opcode::CMSG_IGNORE_TRADE;
        new (&this->CMSG_IGNORE_TRADE) wrath::CMSG_IGNORE_TRADE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ACCEPT_TRADE&& obj) {
        opcode = Opcode::CMSG_ACCEPT_TRADE;
        new (&this->CMSG_ACCEPT_TRADE) wrath::CMSG_ACCEPT_TRADE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_UNACCEPT_TRADE&& obj) {
        opcode = Opcode::CMSG_UNACCEPT_TRADE;
        new (&this->CMSG_UNACCEPT_TRADE) wrath::CMSG_UNACCEPT_TRADE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CANCEL_TRADE&& obj) {
        opcode = Opcode::CMSG_CANCEL_TRADE;
        new (&this->CMSG_CANCEL_TRADE) wrath::CMSG_CANCEL_TRADE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_TRADE_ITEM&& obj) {
        opcode = Opcode::CMSG_SET_TRADE_ITEM;
        new (&this->CMSG_SET_TRADE_ITEM) wrath::CMSG_SET_TRADE_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CLEAR_TRADE_ITEM&& obj) {
        opcode = Opcode::CMSG_CLEAR_TRADE_ITEM;
        new (&this->CMSG_CLEAR_TRADE_ITEM) wrath::CMSG_CLEAR_TRADE_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_TRADE_GOLD&& obj) {
        opcode = Opcode::CMSG_SET_TRADE_GOLD;
        new (&this->CMSG_SET_TRADE_GOLD) wrath::CMSG_SET_TRADE_GOLD (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_FACTION_ATWAR&& obj) {
        opcode = Opcode::CMSG_SET_FACTION_ATWAR;
        new (&this->CMSG_SET_FACTION_ATWAR) wrath::CMSG_SET_FACTION_ATWAR (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_ACTION_BUTTON&& obj) {
        opcode = Opcode::CMSG_SET_ACTION_BUTTON;
        new (&this->CMSG_SET_ACTION_BUTTON) wrath::CMSG_SET_ACTION_BUTTON (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CAST_SPELL&& obj) {
        opcode = Opcode::CMSG_CAST_SPELL;
        new (&this->CMSG_CAST_SPELL) wrath::CMSG_CAST_SPELL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CANCEL_CAST&& obj) {
        opcode = Opcode::CMSG_CANCEL_CAST;
        new (&this->CMSG_CANCEL_CAST) wrath::CMSG_CANCEL_CAST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CANCEL_AURA&& obj) {
        opcode = Opcode::CMSG_CANCEL_AURA;
        new (&this->CMSG_CANCEL_AURA) wrath::CMSG_CANCEL_AURA (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CANCEL_CHANNELLING&& obj) {
        opcode = Opcode::CMSG_CANCEL_CHANNELLING;
        new (&this->CMSG_CANCEL_CHANNELLING) wrath::CMSG_CANCEL_CHANNELLING (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_SELECTION&& obj) {
        opcode = Opcode::CMSG_SET_SELECTION;
        new (&this->CMSG_SET_SELECTION) wrath::CMSG_SET_SELECTION (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_DELETEEQUIPMENT_SET&& obj) {
        opcode = Opcode::CMSG_DELETEEQUIPMENT_SET;
        new (&this->CMSG_DELETEEQUIPMENT_SET) wrath::CMSG_DELETEEQUIPMENT_SET (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_INSTANCE_LOCK_RESPONSE&& obj) {
        opcode = Opcode::CMSG_INSTANCE_LOCK_RESPONSE;
        new (&this->CMSG_INSTANCE_LOCK_RESPONSE) wrath::CMSG_INSTANCE_LOCK_RESPONSE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ATTACKSWING&& obj) {
        opcode = Opcode::CMSG_ATTACKSWING;
        new (&this->CMSG_ATTACKSWING) wrath::CMSG_ATTACKSWING (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ATTACKSTOP&& obj) {
        opcode = Opcode::CMSG_ATTACKSTOP;
        new (&this->CMSG_ATTACKSTOP) wrath::CMSG_ATTACKSTOP (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REPOP_REQUEST&& obj) {
        opcode = Opcode::CMSG_REPOP_REQUEST;
        new (&this->CMSG_REPOP_REQUEST) wrath::CMSG_REPOP_REQUEST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_RESURRECT_RESPONSE&& obj) {
        opcode = Opcode::CMSG_RESURRECT_RESPONSE;
        new (&this->CMSG_RESURRECT_RESPONSE) wrath::CMSG_RESURRECT_RESPONSE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LOOT&& obj) {
        opcode = Opcode::CMSG_LOOT;
        new (&this->CMSG_LOOT) wrath::CMSG_LOOT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LOOT_MONEY&& obj) {
        opcode = Opcode::CMSG_LOOT_MONEY;
        new (&this->CMSG_LOOT_MONEY) wrath::CMSG_LOOT_MONEY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LOOT_RELEASE&& obj) {
        opcode = Opcode::CMSG_LOOT_RELEASE;
        new (&this->CMSG_LOOT_RELEASE) wrath::CMSG_LOOT_RELEASE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_DUEL_ACCEPTED&& obj) {
        opcode = Opcode::CMSG_DUEL_ACCEPTED;
        new (&this->CMSG_DUEL_ACCEPTED) wrath::CMSG_DUEL_ACCEPTED (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_DUEL_CANCELLED&& obj) {
        opcode = Opcode::CMSG_DUEL_CANCELLED;
        new (&this->CMSG_DUEL_CANCELLED) wrath::CMSG_DUEL_CANCELLED (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOUNTSPECIAL_ANIM&& obj) {
        opcode = Opcode::CMSG_MOUNTSPECIAL_ANIM;
        new (&this->CMSG_MOUNTSPECIAL_ANIM) wrath::CMSG_MOUNTSPECIAL_ANIM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PET_SET_ACTION&& obj) {
        opcode = Opcode::CMSG_PET_SET_ACTION;
        new (&this->CMSG_PET_SET_ACTION) wrath::CMSG_PET_SET_ACTION (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PET_ACTION&& obj) {
        opcode = Opcode::CMSG_PET_ACTION;
        new (&this->CMSG_PET_ACTION) wrath::CMSG_PET_ACTION (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PET_ABANDON&& obj) {
        opcode = Opcode::CMSG_PET_ABANDON;
        new (&this->CMSG_PET_ABANDON) wrath::CMSG_PET_ABANDON (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PET_RENAME&& obj) {
        opcode = Opcode::CMSG_PET_RENAME;
        new (&this->CMSG_PET_RENAME) wrath::CMSG_PET_RENAME (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GOSSIP_HELLO&& obj) {
        opcode = Opcode::CMSG_GOSSIP_HELLO;
        new (&this->CMSG_GOSSIP_HELLO) wrath::CMSG_GOSSIP_HELLO (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GOSSIP_SELECT_OPTION&& obj) {
        opcode = Opcode::CMSG_GOSSIP_SELECT_OPTION;
        new (&this->CMSG_GOSSIP_SELECT_OPTION) wrath::CMSG_GOSSIP_SELECT_OPTION (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_NPC_TEXT_QUERY&& obj) {
        opcode = Opcode::CMSG_NPC_TEXT_QUERY;
        new (&this->CMSG_NPC_TEXT_QUERY) wrath::CMSG_NPC_TEXT_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTGIVER_STATUS_QUERY&& obj) {
        opcode = Opcode::CMSG_QUESTGIVER_STATUS_QUERY;
        new (&this->CMSG_QUESTGIVER_STATUS_QUERY) wrath::CMSG_QUESTGIVER_STATUS_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTGIVER_HELLO&& obj) {
        opcode = Opcode::CMSG_QUESTGIVER_HELLO;
        new (&this->CMSG_QUESTGIVER_HELLO) wrath::CMSG_QUESTGIVER_HELLO (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTGIVER_QUERY_QUEST&& obj) {
        opcode = Opcode::CMSG_QUESTGIVER_QUERY_QUEST;
        new (&this->CMSG_QUESTGIVER_QUERY_QUEST) wrath::CMSG_QUESTGIVER_QUERY_QUEST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH&& obj) {
        opcode = Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH;
        new (&this->CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTGIVER_ACCEPT_QUEST&& obj) {
        opcode = Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST;
        new (&this->CMSG_QUESTGIVER_ACCEPT_QUEST) wrath::CMSG_QUESTGIVER_ACCEPT_QUEST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTGIVER_COMPLETE_QUEST&& obj) {
        opcode = Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST;
        new (&this->CMSG_QUESTGIVER_COMPLETE_QUEST) wrath::CMSG_QUESTGIVER_COMPLETE_QUEST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTGIVER_REQUEST_REWARD&& obj) {
        opcode = Opcode::CMSG_QUESTGIVER_REQUEST_REWARD;
        new (&this->CMSG_QUESTGIVER_REQUEST_REWARD) wrath::CMSG_QUESTGIVER_REQUEST_REWARD (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTGIVER_CHOOSE_REWARD&& obj) {
        opcode = Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD;
        new (&this->CMSG_QUESTGIVER_CHOOSE_REWARD) wrath::CMSG_QUESTGIVER_CHOOSE_REWARD (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTGIVER_CANCEL&& obj) {
        opcode = Opcode::CMSG_QUESTGIVER_CANCEL;
        new (&this->CMSG_QUESTGIVER_CANCEL) wrath::CMSG_QUESTGIVER_CANCEL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTLOG_SWAP_QUEST&& obj) {
        opcode = Opcode::CMSG_QUESTLOG_SWAP_QUEST;
        new (&this->CMSG_QUESTLOG_SWAP_QUEST) wrath::CMSG_QUESTLOG_SWAP_QUEST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTLOG_REMOVE_QUEST&& obj) {
        opcode = Opcode::CMSG_QUESTLOG_REMOVE_QUEST;
        new (&this->CMSG_QUESTLOG_REMOVE_QUEST) wrath::CMSG_QUESTLOG_REMOVE_QUEST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUEST_CONFIRM_ACCEPT&& obj) {
        opcode = Opcode::CMSG_QUEST_CONFIRM_ACCEPT;
        new (&this->CMSG_QUEST_CONFIRM_ACCEPT) wrath::CMSG_QUEST_CONFIRM_ACCEPT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PUSHQUESTTOPARTY&& obj) {
        opcode = Opcode::CMSG_PUSHQUESTTOPARTY;
        new (&this->CMSG_PUSHQUESTTOPARTY) wrath::CMSG_PUSHQUESTTOPARTY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LIST_INVENTORY&& obj) {
        opcode = Opcode::CMSG_LIST_INVENTORY;
        new (&this->CMSG_LIST_INVENTORY) wrath::CMSG_LIST_INVENTORY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SELL_ITEM&& obj) {
        opcode = Opcode::CMSG_SELL_ITEM;
        new (&this->CMSG_SELL_ITEM) wrath::CMSG_SELL_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BUY_ITEM&& obj) {
        opcode = Opcode::CMSG_BUY_ITEM;
        new (&this->CMSG_BUY_ITEM) wrath::CMSG_BUY_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BUY_ITEM_IN_SLOT&& obj) {
        opcode = Opcode::CMSG_BUY_ITEM_IN_SLOT;
        new (&this->CMSG_BUY_ITEM_IN_SLOT) wrath::CMSG_BUY_ITEM_IN_SLOT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TAXINODE_STATUS_QUERY&& obj) {
        opcode = Opcode::CMSG_TAXINODE_STATUS_QUERY;
        new (&this->CMSG_TAXINODE_STATUS_QUERY) wrath::CMSG_TAXINODE_STATUS_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TAXIQUERYAVAILABLENODES&& obj) {
        opcode = Opcode::CMSG_TAXIQUERYAVAILABLENODES;
        new (&this->CMSG_TAXIQUERYAVAILABLENODES) wrath::CMSG_TAXIQUERYAVAILABLENODES (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ACTIVATETAXI&& obj) {
        opcode = Opcode::CMSG_ACTIVATETAXI;
        new (&this->CMSG_ACTIVATETAXI) wrath::CMSG_ACTIVATETAXI (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TRAINER_LIST&& obj) {
        opcode = Opcode::CMSG_TRAINER_LIST;
        new (&this->CMSG_TRAINER_LIST) wrath::CMSG_TRAINER_LIST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TRAINER_BUY_SPELL&& obj) {
        opcode = Opcode::CMSG_TRAINER_BUY_SPELL;
        new (&this->CMSG_TRAINER_BUY_SPELL) wrath::CMSG_TRAINER_BUY_SPELL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BINDER_ACTIVATE&& obj) {
        opcode = Opcode::CMSG_BINDER_ACTIVATE;
        new (&this->CMSG_BINDER_ACTIVATE) wrath::CMSG_BINDER_ACTIVATE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BANKER_ACTIVATE&& obj) {
        opcode = Opcode::CMSG_BANKER_ACTIVATE;
        new (&this->CMSG_BANKER_ACTIVATE) wrath::CMSG_BANKER_ACTIVATE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BUY_BANK_SLOT&& obj) {
        opcode = Opcode::CMSG_BUY_BANK_SLOT;
        new (&this->CMSG_BUY_BANK_SLOT) wrath::CMSG_BUY_BANK_SLOT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PETITION_SHOWLIST&& obj) {
        opcode = Opcode::CMSG_PETITION_SHOWLIST;
        new (&this->CMSG_PETITION_SHOWLIST) wrath::CMSG_PETITION_SHOWLIST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PETITION_BUY&& obj) {
        opcode = Opcode::CMSG_PETITION_BUY;
        new (&this->CMSG_PETITION_BUY) wrath::CMSG_PETITION_BUY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PETITION_SHOW_SIGNATURES&& obj) {
        opcode = Opcode::CMSG_PETITION_SHOW_SIGNATURES;
        new (&this->CMSG_PETITION_SHOW_SIGNATURES) wrath::CMSG_PETITION_SHOW_SIGNATURES (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PETITION_SIGN&& obj) {
        opcode = Opcode::CMSG_PETITION_SIGN;
        new (&this->CMSG_PETITION_SIGN) wrath::CMSG_PETITION_SIGN (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_PETITION_DECLINE&& obj) {
        opcode = Opcode::MSG_PETITION_DECLINE;
        new (&this->MSG_PETITION_DECLINE) wrath::MSG_PETITION_DECLINE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_OFFER_PETITION&& obj) {
        opcode = Opcode::CMSG_OFFER_PETITION;
        new (&this->CMSG_OFFER_PETITION) wrath::CMSG_OFFER_PETITION (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TURN_IN_PETITION&& obj) {
        opcode = Opcode::CMSG_TURN_IN_PETITION;
        new (&this->CMSG_TURN_IN_PETITION) wrath::CMSG_TURN_IN_PETITION (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PETITION_QUERY&& obj) {
        opcode = Opcode::CMSG_PETITION_QUERY;
        new (&this->CMSG_PETITION_QUERY) wrath::CMSG_PETITION_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BUG&& obj) {
        opcode = Opcode::CMSG_BUG;
        new (&this->CMSG_BUG) wrath::CMSG_BUG (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PLAYED_TIME&& obj) {
        opcode = Opcode::CMSG_PLAYED_TIME;
        new (&this->CMSG_PLAYED_TIME) wrath::CMSG_PLAYED_TIME (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUERY_TIME&& obj) {
        opcode = Opcode::CMSG_QUERY_TIME;
        new (&this->CMSG_QUERY_TIME) wrath::CMSG_QUERY_TIME (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_RECLAIM_CORPSE&& obj) {
        opcode = Opcode::CMSG_RECLAIM_CORPSE;
        new (&this->CMSG_RECLAIM_CORPSE) wrath::CMSG_RECLAIM_CORPSE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_WRAP_ITEM&& obj) {
        opcode = Opcode::CMSG_WRAP_ITEM;
        new (&this->CMSG_WRAP_ITEM) wrath::CMSG_WRAP_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MINIMAP_PING_Client&& obj) {
        opcode = Opcode::MSG_MINIMAP_PING;
        new (&this->MSG_MINIMAP_PING) wrath::MSG_MINIMAP_PING_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PING&& obj) {
        opcode = Opcode::CMSG_PING;
        new (&this->CMSG_PING) wrath::CMSG_PING (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SETSHEATHED&& obj) {
        opcode = Opcode::CMSG_SETSHEATHED;
        new (&this->CMSG_SETSHEATHED) wrath::CMSG_SETSHEATHED (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUEST_POI_QUERY&& obj) {
        opcode = Opcode::CMSG_QUEST_POI_QUERY;
        new (&this->CMSG_QUEST_POI_QUERY) wrath::CMSG_QUEST_POI_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUTH_SESSION&& obj) {
        opcode = Opcode::CMSG_AUTH_SESSION;
        new (&this->CMSG_AUTH_SESSION) wrath::CMSG_AUTH_SESSION (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PET_CAST_SPELL&& obj) {
        opcode = Opcode::CMSG_PET_CAST_SPELL;
        new (&this->CMSG_PET_CAST_SPELL) wrath::CMSG_PET_CAST_SPELL (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_SAVE_GUILD_EMBLEM_Client&& obj) {
        opcode = Opcode::MSG_SAVE_GUILD_EMBLEM;
        new (&this->MSG_SAVE_GUILD_EMBLEM) wrath::MSG_SAVE_GUILD_EMBLEM_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_TABARDVENDOR_ACTIVATE&& obj) {
        opcode = Opcode::MSG_TABARDVENDOR_ACTIVATE;
        new (&this->MSG_TABARDVENDOR_ACTIVATE) wrath::MSG_TABARDVENDOR_ACTIVATE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ZONEUPDATE&& obj) {
        opcode = Opcode::CMSG_ZONEUPDATE;
        new (&this->CMSG_ZONEUPDATE) wrath::CMSG_ZONEUPDATE (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_RANDOM_ROLL_Client&& obj) {
        opcode = Opcode::MSG_RANDOM_ROLL;
        new (&this->MSG_RANDOM_ROLL) wrath::MSG_RANDOM_ROLL_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_UNLEARN_SKILL&& obj) {
        opcode = Opcode::CMSG_UNLEARN_SKILL;
        new (&this->CMSG_UNLEARN_SKILL) wrath::CMSG_UNLEARN_SKILL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GMTICKET_CREATE&& obj) {
        opcode = Opcode::CMSG_GMTICKET_CREATE;
        new (&this->CMSG_GMTICKET_CREATE) wrath::CMSG_GMTICKET_CREATE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GMTICKET_UPDATETEXT&& obj) {
        opcode = Opcode::CMSG_GMTICKET_UPDATETEXT;
        new (&this->CMSG_GMTICKET_UPDATETEXT) wrath::CMSG_GMTICKET_UPDATETEXT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REQUEST_ACCOUNT_DATA&& obj) {
        opcode = Opcode::CMSG_REQUEST_ACCOUNT_DATA;
        new (&this->CMSG_REQUEST_ACCOUNT_DATA) wrath::CMSG_REQUEST_ACCOUNT_DATA (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_UPDATE_ACCOUNT_DATA&& obj) {
        opcode = Opcode::CMSG_UPDATE_ACCOUNT_DATA;
        new (&this->CMSG_UPDATE_ACCOUNT_DATA) wrath::CMSG_UPDATE_ACCOUNT_DATA (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GMTICKET_GETTICKET&& obj) {
        opcode = Opcode::CMSG_GMTICKET_GETTICKET;
        new (&this->CMSG_GMTICKET_GETTICKET) wrath::CMSG_GMTICKET_GETTICKET (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_UNLEARN_TALENTS&& obj) {
        opcode = Opcode::CMSG_UNLEARN_TALENTS;
        new (&this->CMSG_UNLEARN_TALENTS) wrath::CMSG_UNLEARN_TALENTS (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_CORPSE_QUERY_Client&& obj) {
        opcode = Opcode::MSG_CORPSE_QUERY;
        new (&this->MSG_CORPSE_QUERY) wrath::MSG_CORPSE_QUERY_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GMTICKET_DELETETICKET&& obj) {
        opcode = Opcode::CMSG_GMTICKET_DELETETICKET;
        new (&this->CMSG_GMTICKET_DELETETICKET) wrath::CMSG_GMTICKET_DELETETICKET (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GMTICKET_SYSTEMSTATUS&& obj) {
        opcode = Opcode::CMSG_GMTICKET_SYSTEMSTATUS;
        new (&this->CMSG_GMTICKET_SYSTEMSTATUS) wrath::CMSG_GMTICKET_SYSTEMSTATUS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SPIRIT_HEALER_ACTIVATE&& obj) {
        opcode = Opcode::CMSG_SPIRIT_HEALER_ACTIVATE;
        new (&this->CMSG_SPIRIT_HEALER_ACTIVATE) wrath::CMSG_SPIRIT_HEALER_ACTIVATE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHAT_IGNORED&& obj) {
        opcode = Opcode::CMSG_CHAT_IGNORED;
        new (&this->CMSG_CHAT_IGNORED) wrath::CMSG_CHAT_IGNORED (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_RANK&& obj) {
        opcode = Opcode::CMSG_GUILD_RANK;
        new (&this->CMSG_GUILD_RANK) wrath::CMSG_GUILD_RANK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_ADD_RANK&& obj) {
        opcode = Opcode::CMSG_GUILD_ADD_RANK;
        new (&this->CMSG_GUILD_ADD_RANK) wrath::CMSG_GUILD_ADD_RANK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_DEL_RANK&& obj) {
        opcode = Opcode::CMSG_GUILD_DEL_RANK;
        new (&this->CMSG_GUILD_DEL_RANK) wrath::CMSG_GUILD_DEL_RANK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_SET_PUBLIC_NOTE&& obj) {
        opcode = Opcode::CMSG_GUILD_SET_PUBLIC_NOTE;
        new (&this->CMSG_GUILD_SET_PUBLIC_NOTE) wrath::CMSG_GUILD_SET_PUBLIC_NOTE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_SET_OFFICER_NOTE&& obj) {
        opcode = Opcode::CMSG_GUILD_SET_OFFICER_NOTE;
        new (&this->CMSG_GUILD_SET_OFFICER_NOTE) wrath::CMSG_GUILD_SET_OFFICER_NOTE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SEND_MAIL&& obj) {
        opcode = Opcode::CMSG_SEND_MAIL;
        new (&this->CMSG_SEND_MAIL) wrath::CMSG_SEND_MAIL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GET_MAIL_LIST&& obj) {
        opcode = Opcode::CMSG_GET_MAIL_LIST;
        new (&this->CMSG_GET_MAIL_LIST) wrath::CMSG_GET_MAIL_LIST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BATTLEFIELD_LIST&& obj) {
        opcode = Opcode::CMSG_BATTLEFIELD_LIST;
        new (&this->CMSG_BATTLEFIELD_LIST) wrath::CMSG_BATTLEFIELD_LIST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ITEM_TEXT_QUERY&& obj) {
        opcode = Opcode::CMSG_ITEM_TEXT_QUERY;
        new (&this->CMSG_ITEM_TEXT_QUERY) wrath::CMSG_ITEM_TEXT_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MAIL_TAKE_MONEY&& obj) {
        opcode = Opcode::CMSG_MAIL_TAKE_MONEY;
        new (&this->CMSG_MAIL_TAKE_MONEY) wrath::CMSG_MAIL_TAKE_MONEY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MAIL_TAKE_ITEM&& obj) {
        opcode = Opcode::CMSG_MAIL_TAKE_ITEM;
        new (&this->CMSG_MAIL_TAKE_ITEM) wrath::CMSG_MAIL_TAKE_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MAIL_MARK_AS_READ&& obj) {
        opcode = Opcode::CMSG_MAIL_MARK_AS_READ;
        new (&this->CMSG_MAIL_MARK_AS_READ) wrath::CMSG_MAIL_MARK_AS_READ (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MAIL_RETURN_TO_SENDER&& obj) {
        opcode = Opcode::CMSG_MAIL_RETURN_TO_SENDER;
        new (&this->CMSG_MAIL_RETURN_TO_SENDER) wrath::CMSG_MAIL_RETURN_TO_SENDER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MAIL_DELETE&& obj) {
        opcode = Opcode::CMSG_MAIL_DELETE;
        new (&this->CMSG_MAIL_DELETE) wrath::CMSG_MAIL_DELETE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MAIL_CREATE_TEXT_ITEM&& obj) {
        opcode = Opcode::CMSG_MAIL_CREATE_TEXT_ITEM;
        new (&this->CMSG_MAIL_CREATE_TEXT_ITEM) wrath::CMSG_MAIL_CREATE_TEXT_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LEARN_TALENT&& obj) {
        opcode = Opcode::CMSG_LEARN_TALENT;
        new (&this->CMSG_LEARN_TALENT) wrath::CMSG_LEARN_TALENT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TOGGLE_PVP&& obj) {
        opcode = Opcode::CMSG_TOGGLE_PVP;
        new (&this->CMSG_TOGGLE_PVP) wrath::CMSG_TOGGLE_PVP (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_AUCTION_HELLO_Client&& obj) {
        opcode = Opcode::MSG_AUCTION_HELLO;
        new (&this->MSG_AUCTION_HELLO) wrath::MSG_AUCTION_HELLO_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUCTION_SELL_ITEM&& obj) {
        opcode = Opcode::CMSG_AUCTION_SELL_ITEM;
        new (&this->CMSG_AUCTION_SELL_ITEM) wrath::CMSG_AUCTION_SELL_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUCTION_REMOVE_ITEM&& obj) {
        opcode = Opcode::CMSG_AUCTION_REMOVE_ITEM;
        new (&this->CMSG_AUCTION_REMOVE_ITEM) wrath::CMSG_AUCTION_REMOVE_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUCTION_LIST_ITEMS&& obj) {
        opcode = Opcode::CMSG_AUCTION_LIST_ITEMS;
        new (&this->CMSG_AUCTION_LIST_ITEMS) wrath::CMSG_AUCTION_LIST_ITEMS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUCTION_LIST_OWNER_ITEMS&& obj) {
        opcode = Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS;
        new (&this->CMSG_AUCTION_LIST_OWNER_ITEMS) wrath::CMSG_AUCTION_LIST_OWNER_ITEMS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUCTION_PLACE_BID&& obj) {
        opcode = Opcode::CMSG_AUCTION_PLACE_BID;
        new (&this->CMSG_AUCTION_PLACE_BID) wrath::CMSG_AUCTION_PLACE_BID (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS&& obj) {
        opcode = Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS;
        new (&this->CMSG_AUCTION_LIST_BIDDER_ITEMS) wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_AMMO&& obj) {
        opcode = Opcode::CMSG_SET_AMMO;
        new (&this->CMSG_SET_AMMO) wrath::CMSG_SET_AMMO (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_ACTIVE_MOVER&& obj) {
        opcode = Opcode::CMSG_SET_ACTIVE_MOVER;
        new (&this->CMSG_SET_ACTIVE_MOVER) wrath::CMSG_SET_ACTIVE_MOVER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PET_CANCEL_AURA&& obj) {
        opcode = Opcode::CMSG_PET_CANCEL_AURA;
        new (&this->CMSG_PET_CANCEL_AURA) wrath::CMSG_PET_CANCEL_AURA (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL&& obj) {
        opcode = Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL;
        new (&this->CMSG_CANCEL_AUTO_REPEAT_SPELL) wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_LIST_STABLED_PETS_Client&& obj) {
        opcode = Opcode::MSG_LIST_STABLED_PETS;
        new (&this->MSG_LIST_STABLED_PETS) wrath::MSG_LIST_STABLED_PETS_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_STABLE_PET&& obj) {
        opcode = Opcode::CMSG_STABLE_PET;
        new (&this->CMSG_STABLE_PET) wrath::CMSG_STABLE_PET (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_UNSTABLE_PET&& obj) {
        opcode = Opcode::CMSG_UNSTABLE_PET;
        new (&this->CMSG_UNSTABLE_PET) wrath::CMSG_UNSTABLE_PET (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BUY_STABLE_SLOT&& obj) {
        opcode = Opcode::CMSG_BUY_STABLE_SLOT;
        new (&this->CMSG_BUY_STABLE_SLOT) wrath::CMSG_BUY_STABLE_SLOT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_STABLE_SWAP_PET&& obj) {
        opcode = Opcode::CMSG_STABLE_SWAP_PET;
        new (&this->CMSG_STABLE_SWAP_PET) wrath::CMSG_STABLE_SWAP_PET (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_QUEST_PUSH_RESULT&& obj) {
        opcode = Opcode::MSG_QUEST_PUSH_RESULT;
        new (&this->MSG_QUEST_PUSH_RESULT) wrath::MSG_QUEST_PUSH_RESULT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REQUEST_PET_INFO&& obj) {
        opcode = Opcode::CMSG_REQUEST_PET_INFO;
        new (&this->CMSG_REQUEST_PET_INFO) wrath::CMSG_REQUEST_PET_INFO (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_FAR_SIGHT&& obj) {
        opcode = Opcode::CMSG_FAR_SIGHT;
        new (&this->CMSG_FAR_SIGHT) wrath::CMSG_FAR_SIGHT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_CHANGE_SUB_GROUP&& obj) {
        opcode = Opcode::CMSG_GROUP_CHANGE_SUB_GROUP;
        new (&this->CMSG_GROUP_CHANGE_SUB_GROUP) wrath::CMSG_GROUP_CHANGE_SUB_GROUP (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REQUEST_PARTY_MEMBER_STATS&& obj) {
        opcode = Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS;
        new (&this->CMSG_REQUEST_PARTY_MEMBER_STATS) wrath::CMSG_REQUEST_PARTY_MEMBER_STATS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_SWAP_SUB_GROUP&& obj) {
        opcode = Opcode::CMSG_GROUP_SWAP_SUB_GROUP;
        new (&this->CMSG_GROUP_SWAP_SUB_GROUP) wrath::CMSG_GROUP_SWAP_SUB_GROUP (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUTOSTORE_BANK_ITEM&& obj) {
        opcode = Opcode::CMSG_AUTOSTORE_BANK_ITEM;
        new (&this->CMSG_AUTOSTORE_BANK_ITEM) wrath::CMSG_AUTOSTORE_BANK_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUTOBANK_ITEM&& obj) {
        opcode = Opcode::CMSG_AUTOBANK_ITEM;
        new (&this->CMSG_AUTOBANK_ITEM) wrath::CMSG_AUTOBANK_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_QUERY_NEXT_MAIL_TIME_Client&& obj) {
        opcode = Opcode::MSG_QUERY_NEXT_MAIL_TIME;
        new (&this->MSG_QUERY_NEXT_MAIL_TIME) wrath::MSG_QUERY_NEXT_MAIL_TIME_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_RAID_CONVERT&& obj) {
        opcode = Opcode::CMSG_GROUP_RAID_CONVERT;
        new (&this->CMSG_GROUP_RAID_CONVERT) wrath::CMSG_GROUP_RAID_CONVERT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GROUP_ASSISTANT_LEADER&& obj) {
        opcode = Opcode::CMSG_GROUP_ASSISTANT_LEADER;
        new (&this->CMSG_GROUP_ASSISTANT_LEADER) wrath::CMSG_GROUP_ASSISTANT_LEADER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BUYBACK_ITEM&& obj) {
        opcode = Opcode::CMSG_BUYBACK_ITEM;
        new (&this->CMSG_BUYBACK_ITEM) wrath::CMSG_BUYBACK_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_SAVED_INSTANCE_EXTEND&& obj) {
        opcode = Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND;
        new (&this->CMSG_SET_SAVED_INSTANCE_EXTEND) wrath::CMSG_SET_SAVED_INSTANCE_EXTEND (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LFG_GET_STATUS&& obj) {
        opcode = Opcode::CMSG_LFG_GET_STATUS;
        new (&this->CMSG_LFG_GET_STATUS) wrath::CMSG_LFG_GET_STATUS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GMTICKETSYSTEM_TOGGLE&& obj) {
        opcode = Opcode::CMSG_GMTICKETSYSTEM_TOGGLE;
        new (&this->CMSG_GMTICKETSYSTEM_TOGGLE) wrath::CMSG_GMTICKETSYSTEM_TOGGLE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CANCEL_GROWTH_AURA&& obj) {
        opcode = Opcode::CMSG_CANCEL_GROWTH_AURA;
        new (&this->CMSG_CANCEL_GROWTH_AURA) wrath::CMSG_CANCEL_GROWTH_AURA (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LOOT_ROLL&& obj) {
        opcode = Opcode::CMSG_LOOT_ROLL;
        new (&this->CMSG_LOOT_ROLL) wrath::CMSG_LOOT_ROLL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LOOT_MASTER_GIVE&& obj) {
        opcode = Opcode::CMSG_LOOT_MASTER_GIVE;
        new (&this->CMSG_LOOT_MASTER_GIVE) wrath::CMSG_LOOT_MASTER_GIVE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REPAIR_ITEM&& obj) {
        opcode = Opcode::CMSG_REPAIR_ITEM;
        new (&this->CMSG_REPAIR_ITEM) wrath::CMSG_REPAIR_ITEM (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_TALENT_WIPE_CONFIRM_Client&& obj) {
        opcode = Opcode::MSG_TALENT_WIPE_CONFIRM;
        new (&this->MSG_TALENT_WIPE_CONFIRM) wrath::MSG_TALENT_WIPE_CONFIRM_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SUMMON_RESPONSE&& obj) {
        opcode = Opcode::CMSG_SUMMON_RESPONSE;
        new (&this->CMSG_SUMMON_RESPONSE) wrath::CMSG_SUMMON_RESPONSE (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_WATER_WALK&& obj) {
        opcode = Opcode::MSG_MOVE_WATER_WALK;
        new (&this->MSG_MOVE_WATER_WALK) wrath::MSG_MOVE_WATER_WALK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SELF_RES&& obj) {
        opcode = Opcode::CMSG_SELF_RES;
        new (&this->CMSG_SELF_RES) wrath::CMSG_SELF_RES (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TOGGLE_HELM&& obj) {
        opcode = Opcode::CMSG_TOGGLE_HELM;
        new (&this->CMSG_TOGGLE_HELM) wrath::CMSG_TOGGLE_HELM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TOGGLE_CLOAK&& obj) {
        opcode = Opcode::CMSG_TOGGLE_CLOAK;
        new (&this->CMSG_TOGGLE_CLOAK) wrath::CMSG_TOGGLE_CLOAK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_ACTIONBAR_TOGGLES&& obj) {
        opcode = Opcode::CMSG_SET_ACTIONBAR_TOGGLES;
        new (&this->CMSG_SET_ACTIONBAR_TOGGLES) wrath::CMSG_SET_ACTIONBAR_TOGGLES (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_PETITION_RENAME&& obj) {
        opcode = Opcode::MSG_PETITION_RENAME;
        new (&this->MSG_PETITION_RENAME) wrath::MSG_PETITION_RENAME (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ITEM_NAME_QUERY&& obj) {
        opcode = Opcode::CMSG_ITEM_NAME_QUERY;
        new (&this->CMSG_ITEM_NAME_QUERY) wrath::CMSG_ITEM_NAME_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHAR_RENAME&& obj) {
        opcode = Opcode::CMSG_CHAR_RENAME;
        new (&this->CMSG_CHAR_RENAME) wrath::CMSG_CHAR_RENAME (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_SPLINE_DONE&& obj) {
        opcode = Opcode::CMSG_MOVE_SPLINE_DONE;
        new (&this->CMSG_MOVE_SPLINE_DONE) wrath::CMSG_MOVE_SPLINE_DONE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_FALL_RESET&& obj) {
        opcode = Opcode::CMSG_MOVE_FALL_RESET;
        new (&this->CMSG_MOVE_FALL_RESET) wrath::CMSG_MOVE_FALL_RESET (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REQUEST_RAID_INFO&& obj) {
        opcode = Opcode::CMSG_REQUEST_RAID_INFO;
        new (&this->CMSG_REQUEST_RAID_INFO) wrath::CMSG_REQUEST_RAID_INFO (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_TIME_SKIPPED&& obj) {
        opcode = Opcode::CMSG_MOVE_TIME_SKIPPED;
        new (&this->CMSG_MOVE_TIME_SKIPPED) wrath::CMSG_MOVE_TIME_SKIPPED (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_FEATHER_FALL_ACK&& obj) {
        opcode = Opcode::CMSG_MOVE_FEATHER_FALL_ACK;
        new (&this->CMSG_MOVE_FEATHER_FALL_ACK) wrath::CMSG_MOVE_FEATHER_FALL_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_WATER_WALK_ACK&& obj) {
        opcode = Opcode::CMSG_MOVE_WATER_WALK_ACK;
        new (&this->CMSG_MOVE_WATER_WALK_ACK) wrath::CMSG_MOVE_WATER_WALK_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_NOT_ACTIVE_MOVER&& obj) {
        opcode = Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER;
        new (&this->CMSG_MOVE_NOT_ACTIVE_MOVER) wrath::CMSG_MOVE_NOT_ACTIVE_MOVER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BATTLEFIELD_STATUS&& obj) {
        opcode = Opcode::CMSG_BATTLEFIELD_STATUS;
        new (&this->CMSG_BATTLEFIELD_STATUS) wrath::CMSG_BATTLEFIELD_STATUS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BATTLEFIELD_PORT&& obj) {
        opcode = Opcode::CMSG_BATTLEFIELD_PORT;
        new (&this->CMSG_BATTLEFIELD_PORT) wrath::CMSG_BATTLEFIELD_PORT (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_INSPECT_HONOR_STATS_Client&& obj) {
        opcode = Opcode::MSG_INSPECT_HONOR_STATS;
        new (&this->MSG_INSPECT_HONOR_STATS) wrath::MSG_INSPECT_HONOR_STATS_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BATTLEMASTER_HELLO&& obj) {
        opcode = Opcode::CMSG_BATTLEMASTER_HELLO;
        new (&this->CMSG_BATTLEMASTER_HELLO) wrath::CMSG_BATTLEMASTER_HELLO (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK&& obj) {
        opcode = Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK;
        new (&this->CMSG_FORCE_WALK_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK&& obj) {
        opcode = Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK;
        new (&this->CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK&& obj) {
        opcode = Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK;
        new (&this->CMSG_FORCE_TURN_RATE_CHANGE_ACK) wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_PVP_LOG_DATA_Client&& obj) {
        opcode = Opcode::MSG_PVP_LOG_DATA;
        new (&this->MSG_PVP_LOG_DATA) wrath::MSG_PVP_LOG_DATA_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LEAVE_BATTLEFIELD&& obj) {
        opcode = Opcode::CMSG_LEAVE_BATTLEFIELD;
        new (&this->CMSG_LEAVE_BATTLEFIELD) wrath::CMSG_LEAVE_BATTLEFIELD (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AREA_SPIRIT_HEALER_QUERY&& obj) {
        opcode = Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY;
        new (&this->CMSG_AREA_SPIRIT_HEALER_QUERY) wrath::CMSG_AREA_SPIRIT_HEALER_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE&& obj) {
        opcode = Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE;
        new (&this->CMSG_AREA_SPIRIT_HEALER_QUEUE) wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_WARDEN_DATA&& obj) {
        opcode = Opcode::CMSG_WARDEN_DATA;
        new (&this->CMSG_WARDEN_DATA) wrath::CMSG_WARDEN_DATA (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client&& obj) {
        opcode = Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS;
        new (&this->MSG_BATTLEGROUND_PLAYER_POSITIONS) wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PET_STOP_ATTACK&& obj) {
        opcode = Opcode::CMSG_PET_STOP_ATTACK;
        new (&this->CMSG_PET_STOP_ATTACK) wrath::CMSG_PET_STOP_ATTACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BATTLEMASTER_JOIN&& obj) {
        opcode = Opcode::CMSG_BATTLEMASTER_JOIN;
        new (&this->CMSG_BATTLEMASTER_JOIN) wrath::CMSG_BATTLEMASTER_JOIN (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PET_UNLEARN&& obj) {
        opcode = Opcode::CMSG_PET_UNLEARN;
        new (&this->CMSG_PET_UNLEARN) wrath::CMSG_PET_UNLEARN (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PET_SPELL_AUTOCAST&& obj) {
        opcode = Opcode::CMSG_PET_SPELL_AUTOCAST;
        new (&this->CMSG_PET_SPELL_AUTOCAST) wrath::CMSG_PET_SPELL_AUTOCAST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_INFO_TEXT&& obj) {
        opcode = Opcode::CMSG_GUILD_INFO_TEXT;
        new (&this->CMSG_GUILD_INFO_TEXT) wrath::CMSG_GUILD_INFO_TEXT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ACTIVATETAXIEXPRESS&& obj) {
        opcode = Opcode::CMSG_ACTIVATETAXIEXPRESS;
        new (&this->CMSG_ACTIVATETAXIEXPRESS) wrath::CMSG_ACTIVATETAXIEXPRESS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_FACTION_INACTIVE&& obj) {
        opcode = Opcode::CMSG_SET_FACTION_INACTIVE;
        new (&this->CMSG_SET_FACTION_INACTIVE) wrath::CMSG_SET_FACTION_INACTIVE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_WATCHED_FACTION&& obj) {
        opcode = Opcode::CMSG_SET_WATCHED_FACTION;
        new (&this->CMSG_SET_WATCHED_FACTION) wrath::CMSG_SET_WATCHED_FACTION (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_RESET_INSTANCES&& obj) {
        opcode = Opcode::CMSG_RESET_INSTANCES;
        new (&this->CMSG_RESET_INSTANCES) wrath::CMSG_RESET_INSTANCES (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_RAID_TARGET_UPDATE_Client&& obj) {
        opcode = Opcode::MSG_RAID_TARGET_UPDATE;
        new (&this->MSG_RAID_TARGET_UPDATE) wrath::MSG_RAID_TARGET_UPDATE_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_RAID_READY_CHECK_Client&& obj) {
        opcode = Opcode::MSG_RAID_READY_CHECK;
        new (&this->MSG_RAID_READY_CHECK) wrath::MSG_RAID_READY_CHECK_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_SET_DUNGEON_DIFFICULTY_Client&& obj) {
        opcode = Opcode::MSG_SET_DUNGEON_DIFFICULTY;
        new (&this->MSG_SET_DUNGEON_DIFFICULTY) wrath::MSG_SET_DUNGEON_DIFFICULTY_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GMSURVEY_SUBMIT&& obj) {
        opcode = Opcode::CMSG_GMSURVEY_SUBMIT;
        new (&this->CMSG_GMSURVEY_SUBMIT) wrath::CMSG_GMSURVEY_SUBMIT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK&& obj) {
        opcode = Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK;
        new (&this->CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_SET_CAN_FLY_ACK&& obj) {
        opcode = Opcode::CMSG_MOVE_SET_CAN_FLY_ACK;
        new (&this->CMSG_MOVE_SET_CAN_FLY_ACK) wrath::CMSG_MOVE_SET_CAN_FLY_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_SET_FLY&& obj) {
        opcode = Opcode::CMSG_MOVE_SET_FLY;
        new (&this->CMSG_MOVE_SET_FLY) wrath::CMSG_MOVE_SET_FLY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SOCKET_GEMS&& obj) {
        opcode = Opcode::CMSG_SOCKET_GEMS;
        new (&this->CMSG_SOCKET_GEMS) wrath::CMSG_SOCKET_GEMS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ARENA_TEAM_ROSTER&& obj) {
        opcode = Opcode::CMSG_ARENA_TEAM_ROSTER;
        new (&this->CMSG_ARENA_TEAM_ROSTER) wrath::CMSG_ARENA_TEAM_ROSTER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ARENA_TEAM_INVITE&& obj) {
        opcode = Opcode::CMSG_ARENA_TEAM_INVITE;
        new (&this->CMSG_ARENA_TEAM_INVITE) wrath::CMSG_ARENA_TEAM_INVITE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ARENA_TEAM_ACCEPT&& obj) {
        opcode = Opcode::CMSG_ARENA_TEAM_ACCEPT;
        new (&this->CMSG_ARENA_TEAM_ACCEPT) wrath::CMSG_ARENA_TEAM_ACCEPT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ARENA_TEAM_DECLINE&& obj) {
        opcode = Opcode::CMSG_ARENA_TEAM_DECLINE;
        new (&this->CMSG_ARENA_TEAM_DECLINE) wrath::CMSG_ARENA_TEAM_DECLINE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ARENA_TEAM_LEAVE&& obj) {
        opcode = Opcode::CMSG_ARENA_TEAM_LEAVE;
        new (&this->CMSG_ARENA_TEAM_LEAVE) wrath::CMSG_ARENA_TEAM_LEAVE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ARENA_TEAM_REMOVE&& obj) {
        opcode = Opcode::CMSG_ARENA_TEAM_REMOVE;
        new (&this->CMSG_ARENA_TEAM_REMOVE) wrath::CMSG_ARENA_TEAM_REMOVE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ARENA_TEAM_DISBAND&& obj) {
        opcode = Opcode::CMSG_ARENA_TEAM_DISBAND;
        new (&this->CMSG_ARENA_TEAM_DISBAND) wrath::CMSG_ARENA_TEAM_DISBAND (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ARENA_TEAM_LEADER&& obj) {
        opcode = Opcode::CMSG_ARENA_TEAM_LEADER;
        new (&this->CMSG_ARENA_TEAM_LEADER) wrath::CMSG_ARENA_TEAM_LEADER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BATTLEMASTER_JOIN_ARENA&& obj) {
        opcode = Opcode::CMSG_BATTLEMASTER_JOIN_ARENA;
        new (&this->CMSG_BATTLEMASTER_JOIN_ARENA) wrath::CMSG_BATTLEMASTER_JOIN_ARENA (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_START_ASCEND&& obj) {
        opcode = Opcode::MSG_MOVE_START_ASCEND;
        new (&this->MSG_MOVE_START_ASCEND) wrath::MSG_MOVE_START_ASCEND (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_STOP_ASCEND&& obj) {
        opcode = Opcode::MSG_MOVE_STOP_ASCEND;
        new (&this->MSG_MOVE_STOP_ASCEND) wrath::MSG_MOVE_STOP_ASCEND (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LFG_JOIN&& obj) {
        opcode = Opcode::CMSG_LFG_JOIN;
        new (&this->CMSG_LFG_JOIN) wrath::CMSG_LFG_JOIN (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LFG_LEAVE&& obj) {
        opcode = Opcode::CMSG_LFG_LEAVE;
        new (&this->CMSG_LFG_LEAVE) wrath::CMSG_LFG_LEAVE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SEARCH_LFG_JOIN&& obj) {
        opcode = Opcode::CMSG_SEARCH_LFG_JOIN;
        new (&this->CMSG_SEARCH_LFG_JOIN) wrath::CMSG_SEARCH_LFG_JOIN (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SEARCH_LFG_LEAVE&& obj) {
        opcode = Opcode::CMSG_SEARCH_LFG_LEAVE;
        new (&this->CMSG_SEARCH_LFG_LEAVE) wrath::CMSG_SEARCH_LFG_LEAVE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LFG_PROPOSAL_RESULT&& obj) {
        opcode = Opcode::CMSG_LFG_PROPOSAL_RESULT;
        new (&this->CMSG_LFG_PROPOSAL_RESULT) wrath::CMSG_LFG_PROPOSAL_RESULT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_LFG_COMMENT&& obj) {
        opcode = Opcode::CMSG_SET_LFG_COMMENT;
        new (&this->CMSG_SET_LFG_COMMENT) wrath::CMSG_SET_LFG_COMMENT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LFG_SET_ROLES&& obj) {
        opcode = Opcode::CMSG_LFG_SET_ROLES;
        new (&this->CMSG_LFG_SET_ROLES) wrath::CMSG_LFG_SET_ROLES (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LFG_SET_BOOT_VOTE&& obj) {
        opcode = Opcode::CMSG_LFG_SET_BOOT_VOTE;
        new (&this->CMSG_LFG_SET_BOOT_VOTE) wrath::CMSG_LFG_SET_BOOT_VOTE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST&& obj) {
        opcode = Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST;
        new (&this->CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LFG_TELEPORT&& obj) {
        opcode = Opcode::CMSG_LFG_TELEPORT;
        new (&this->CMSG_LFG_TELEPORT) wrath::CMSG_LFG_TELEPORT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST&& obj) {
        opcode = Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST;
        new (&this->CMSG_LFD_PARTY_LOCK_INFO_REQUEST) wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_TITLE&& obj) {
        opcode = Opcode::CMSG_SET_TITLE;
        new (&this->CMSG_SET_TITLE) wrath::CMSG_SET_TITLE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CANCEL_MOUNT_AURA&& obj) {
        opcode = Opcode::CMSG_CANCEL_MOUNT_AURA;
        new (&this->CMSG_CANCEL_MOUNT_AURA) wrath::CMSG_CANCEL_MOUNT_AURA (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_INSPECT_ARENA_TEAMS_Client&& obj) {
        opcode = Opcode::MSG_INSPECT_ARENA_TEAMS;
        new (&this->MSG_INSPECT_ARENA_TEAMS) wrath::MSG_INSPECT_ARENA_TEAMS_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CANCEL_TEMP_ENCHANTMENT&& obj) {
        opcode = Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT;
        new (&this->CMSG_CANCEL_TEMP_ENCHANTMENT) wrath::CMSG_CANCEL_TEMP_ENCHANTMENT (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED&& obj) {
        opcode = Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED;
        new (&this->MSG_MOVE_SET_FLIGHT_BACK_SPEED) wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK&& obj) {
        opcode = Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK;
        new (&this->CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK&& obj) {
        opcode = Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK;
        new (&this->CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_TAXI_BENCHMARK_MODE&& obj) {
        opcode = Opcode::CMSG_SET_TAXI_BENCHMARK_MODE;
        new (&this->CMSG_SET_TAXI_BENCHMARK_MODE) wrath::CMSG_SET_TAXI_BENCHMARK_MODE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REALM_SPLIT&& obj) {
        opcode = Opcode::CMSG_REALM_SPLIT;
        new (&this->CMSG_REALM_SPLIT) wrath::CMSG_REALM_SPLIT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_CHNG_TRANSPORT&& obj) {
        opcode = Opcode::CMSG_MOVE_CHNG_TRANSPORT;
        new (&this->CMSG_MOVE_CHNG_TRANSPORT) wrath::CMSG_MOVE_CHNG_TRANSPORT (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_PARTY_ASSIGNMENT_Client&& obj) {
        opcode = Opcode::MSG_PARTY_ASSIGNMENT;
        new (&this->MSG_PARTY_ASSIGNMENT) wrath::MSG_PARTY_ASSIGNMENT_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TIME_SYNC_RESP&& obj) {
        opcode = Opcode::CMSG_TIME_SYNC_RESP;
        new (&this->CMSG_TIME_SYNC_RESP) wrath::CMSG_TIME_SYNC_RESP (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_MOVE_START_DESCEND&& obj) {
        opcode = Opcode::MSG_MOVE_START_DESCEND;
        new (&this->MSG_MOVE_START_DESCEND) wrath::MSG_MOVE_START_DESCEND (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_RAID_READY_CHECK_CONFIRM_Client&& obj) {
        opcode = Opcode::MSG_RAID_READY_CHECK_CONFIRM;
        new (&this->MSG_RAID_READY_CHECK_CONFIRM) wrath::MSG_RAID_READY_CHECK_CONFIRM_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_VOICE_SESSION_ENABLE&& obj) {
        opcode = Opcode::CMSG_VOICE_SESSION_ENABLE;
        new (&this->CMSG_VOICE_SESSION_ENABLE) wrath::CMSG_VOICE_SESSION_ENABLE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_COMMENTATOR_ENABLE&& obj) {
        opcode = Opcode::CMSG_COMMENTATOR_ENABLE;
        new (&this->CMSG_COMMENTATOR_ENABLE) wrath::CMSG_COMMENTATOR_ENABLE (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_RAID_READY_CHECK_FINISHED_Client&& obj) {
        opcode = Opcode::MSG_RAID_READY_CHECK_FINISHED;
        new (&this->MSG_RAID_READY_CHECK_FINISHED) wrath::MSG_RAID_READY_CHECK_FINISHED_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_COMPLAIN&& obj) {
        opcode = Opcode::CMSG_COMPLAIN;
        new (&this->CMSG_COMPLAIN) wrath::CMSG_COMPLAIN (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_DISPLAY_LIST&& obj) {
        opcode = Opcode::CMSG_CHANNEL_DISPLAY_LIST;
        new (&this->CMSG_CHANNEL_DISPLAY_LIST) wrath::CMSG_CHANNEL_DISPLAY_LIST (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL&& obj) {
        opcode = Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL;
        new (&this->CMSG_SET_ACTIVE_VOICE_CHANNEL) wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GET_CHANNEL_MEMBER_COUNT&& obj) {
        opcode = Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT;
        new (&this->CMSG_GET_CHANNEL_MEMBER_COUNT) wrath::CMSG_GET_CHANNEL_MEMBER_COUNT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANNEL_VOICE_ON&& obj) {
        opcode = Opcode::CMSG_CHANNEL_VOICE_ON;
        new (&this->CMSG_CHANNEL_VOICE_ON) wrath::CMSG_CHANNEL_VOICE_ON (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REPORT_PVP_AFK&& obj) {
        opcode = Opcode::CMSG_REPORT_PVP_AFK;
        new (&this->CMSG_REPORT_PVP_AFK) wrath::CMSG_REPORT_PVP_AFK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_BANKER_ACTIVATE&& obj) {
        opcode = Opcode::CMSG_GUILD_BANKER_ACTIVATE;
        new (&this->CMSG_GUILD_BANKER_ACTIVATE) wrath::CMSG_GUILD_BANKER_ACTIVATE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_BANK_QUERY_TAB&& obj) {
        opcode = Opcode::CMSG_GUILD_BANK_QUERY_TAB;
        new (&this->CMSG_GUILD_BANK_QUERY_TAB) wrath::CMSG_GUILD_BANK_QUERY_TAB (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_BANK_SWAP_ITEMS&& obj) {
        opcode = Opcode::CMSG_GUILD_BANK_SWAP_ITEMS;
        new (&this->CMSG_GUILD_BANK_SWAP_ITEMS) wrath::CMSG_GUILD_BANK_SWAP_ITEMS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_BANK_BUY_TAB&& obj) {
        opcode = Opcode::CMSG_GUILD_BANK_BUY_TAB;
        new (&this->CMSG_GUILD_BANK_BUY_TAB) wrath::CMSG_GUILD_BANK_BUY_TAB (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_BANK_UPDATE_TAB&& obj) {
        opcode = Opcode::CMSG_GUILD_BANK_UPDATE_TAB;
        new (&this->CMSG_GUILD_BANK_UPDATE_TAB) wrath::CMSG_GUILD_BANK_UPDATE_TAB (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY&& obj) {
        opcode = Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY;
        new (&this->CMSG_GUILD_BANK_DEPOSIT_MONEY) wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY&& obj) {
        opcode = Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY;
        new (&this->CMSG_GUILD_BANK_WITHDRAW_MONEY) wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_GUILD_BANK_LOG_QUERY_Client&& obj) {
        opcode = Opcode::MSG_GUILD_BANK_LOG_QUERY;
        new (&this->MSG_GUILD_BANK_LOG_QUERY) wrath::MSG_GUILD_BANK_LOG_QUERY_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_CHANNEL_WATCH&& obj) {
        opcode = Opcode::CMSG_SET_CHANNEL_WATCH;
        new (&this->CMSG_SET_CHANNEL_WATCH) wrath::CMSG_SET_CHANNEL_WATCH (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CLEAR_CHANNEL_WATCH&& obj) {
        opcode = Opcode::CMSG_CLEAR_CHANNEL_WATCH;
        new (&this->CMSG_CLEAR_CHANNEL_WATCH) wrath::CMSG_CLEAR_CHANNEL_WATCH (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SPELLCLICK&& obj) {
        opcode = Opcode::CMSG_SPELLCLICK;
        new (&this->CMSG_SPELLCLICK) wrath::CMSG_SPELLCLICK (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_GUILD_PERMISSIONS_Client&& obj) {
        opcode = Opcode::MSG_GUILD_PERMISSIONS;
        new (&this->MSG_GUILD_PERMISSIONS) wrath::MSG_GUILD_PERMISSIONS_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client&& obj) {
        opcode = Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN;
        new (&this->MSG_GUILD_BANK_MONEY_WITHDRAWN) wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_GUILD_EVENT_LOG_QUERY_Client&& obj) {
        opcode = Opcode::MSG_GUILD_EVENT_LOG_QUERY;
        new (&this->MSG_GUILD_EVENT_LOG_QUERY) wrath::MSG_GUILD_EVENT_LOG_QUERY_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GET_MIRRORIMAGE_DATA&& obj) {
        opcode = Opcode::CMSG_GET_MIRRORIMAGE_DATA;
        new (&this->CMSG_GET_MIRRORIMAGE_DATA) wrath::CMSG_GET_MIRRORIMAGE_DATA (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_KEEP_ALIVE&& obj) {
        opcode = Opcode::CMSG_KEEP_ALIVE;
        new (&this->CMSG_KEEP_ALIVE) wrath::CMSG_KEEP_ALIVE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_OPT_OUT_OF_LOOT&& obj) {
        opcode = Opcode::CMSG_OPT_OUT_OF_LOOT;
        new (&this->CMSG_OPT_OUT_OF_LOOT) wrath::CMSG_OPT_OUT_OF_LOOT (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_QUERY_GUILD_BANK_TEXT_Client&& obj) {
        opcode = Opcode::MSG_QUERY_GUILD_BANK_TEXT;
        new (&this->MSG_QUERY_GUILD_BANK_TEXT) wrath::MSG_QUERY_GUILD_BANK_TEXT_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_GUILD_BANK_TEXT&& obj) {
        opcode = Opcode::CMSG_SET_GUILD_BANK_TEXT;
        new (&this->CMSG_SET_GUILD_BANK_TEXT) wrath::CMSG_SET_GUILD_BANK_TEXT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GRANT_LEVEL&& obj) {
        opcode = Opcode::CMSG_GRANT_LEVEL;
        new (&this->CMSG_GRANT_LEVEL) wrath::CMSG_GRANT_LEVEL (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_TOTEM_DESTROYED&& obj) {
        opcode = Opcode::CMSG_TOTEM_DESTROYED;
        new (&this->CMSG_TOTEM_DESTROYED) wrath::CMSG_TOTEM_DESTROYED (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY&& obj) {
        opcode = Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY;
        new (&this->CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_SET_PLAYER_DECLINED_NAMES&& obj) {
        opcode = Opcode::CMSG_SET_PLAYER_DECLINED_NAMES;
        new (&this->CMSG_SET_PLAYER_DECLINED_NAMES) wrath::CMSG_SET_PLAYER_DECLINED_NAMES (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ACCEPT_LEVEL_GRANT&& obj) {
        opcode = Opcode::CMSG_ACCEPT_LEVEL_GRANT;
        new (&this->CMSG_ACCEPT_LEVEL_GRANT) wrath::CMSG_ACCEPT_LEVEL_GRANT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ALTER_APPEARANCE&& obj) {
        opcode = Opcode::CMSG_ALTER_APPEARANCE;
        new (&this->CMSG_ALTER_APPEARANCE) wrath::CMSG_ALTER_APPEARANCE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_GET_CALENDAR&& obj) {
        opcode = Opcode::CMSG_CALENDAR_GET_CALENDAR;
        new (&this->CMSG_CALENDAR_GET_CALENDAR) wrath::CMSG_CALENDAR_GET_CALENDAR (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_GET_EVENT&& obj) {
        opcode = Opcode::CMSG_CALENDAR_GET_EVENT;
        new (&this->CMSG_CALENDAR_GET_EVENT) wrath::CMSG_CALENDAR_GET_EVENT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_GUILD_FILTER&& obj) {
        opcode = Opcode::CMSG_CALENDAR_GUILD_FILTER;
        new (&this->CMSG_CALENDAR_GUILD_FILTER) wrath::CMSG_CALENDAR_GUILD_FILTER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_ARENA_TEAM&& obj) {
        opcode = Opcode::CMSG_CALENDAR_ARENA_TEAM;
        new (&this->CMSG_CALENDAR_ARENA_TEAM) wrath::CMSG_CALENDAR_ARENA_TEAM (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_ADD_EVENT&& obj) {
        opcode = Opcode::CMSG_CALENDAR_ADD_EVENT;
        new (&this->CMSG_CALENDAR_ADD_EVENT) wrath::CMSG_CALENDAR_ADD_EVENT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_UPDATE_EVENT&& obj) {
        opcode = Opcode::CMSG_CALENDAR_UPDATE_EVENT;
        new (&this->CMSG_CALENDAR_UPDATE_EVENT) wrath::CMSG_CALENDAR_UPDATE_EVENT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_REMOVE_EVENT&& obj) {
        opcode = Opcode::CMSG_CALENDAR_REMOVE_EVENT;
        new (&this->CMSG_CALENDAR_REMOVE_EVENT) wrath::CMSG_CALENDAR_REMOVE_EVENT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_COPY_EVENT&& obj) {
        opcode = Opcode::CMSG_CALENDAR_COPY_EVENT;
        new (&this->CMSG_CALENDAR_COPY_EVENT) wrath::CMSG_CALENDAR_COPY_EVENT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_EVENT_INVITE&& obj) {
        opcode = Opcode::CMSG_CALENDAR_EVENT_INVITE;
        new (&this->CMSG_CALENDAR_EVENT_INVITE) wrath::CMSG_CALENDAR_EVENT_INVITE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_EVENT_RSVP&& obj) {
        opcode = Opcode::CMSG_CALENDAR_EVENT_RSVP;
        new (&this->CMSG_CALENDAR_EVENT_RSVP) wrath::CMSG_CALENDAR_EVENT_RSVP (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE&& obj) {
        opcode = Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE;
        new (&this->CMSG_CALENDAR_EVENT_REMOVE_INVITE) wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_EVENT_STATUS&& obj) {
        opcode = Opcode::CMSG_CALENDAR_EVENT_STATUS;
        new (&this->CMSG_CALENDAR_EVENT_STATUS) wrath::CMSG_CALENDAR_EVENT_STATUS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS&& obj) {
        opcode = Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS;
        new (&this->CMSG_CALENDAR_EVENT_MODERATOR_STATUS) wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_COMPLAIN&& obj) {
        opcode = Opcode::CMSG_CALENDAR_COMPLAIN;
        new (&this->CMSG_CALENDAR_COMPLAIN) wrath::CMSG_CALENDAR_COMPLAIN (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_GET_NUM_PENDING&& obj) {
        opcode = Opcode::CMSG_CALENDAR_GET_NUM_PENDING;
        new (&this->CMSG_CALENDAR_GET_NUM_PENDING) wrath::CMSG_CALENDAR_GET_NUM_PENDING (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_UPDATE_MISSILE_TRAJECTORY&& obj) {
        opcode = Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY;
        new (&this->CMSG_UPDATE_MISSILE_TRAJECTORY) wrath::CMSG_UPDATE_MISSILE_TRAJECTORY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_COMPLETE_MOVIE&& obj) {
        opcode = Opcode::CMSG_COMPLETE_MOVIE;
        new (&this->CMSG_COMPLETE_MOVIE) wrath::CMSG_COMPLETE_MOVIE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS&& obj) {
        opcode = Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS;
        new (&this->CMSG_QUERY_INSPECT_ACHIEVEMENTS) wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_DISMISS_CONTROLLED_VEHICLE&& obj) {
        opcode = Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE;
        new (&this->CMSG_DISMISS_CONTROLLED_VEHICLE) wrath::CMSG_DISMISS_CONTROLLED_VEHICLE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHAR_CUSTOMIZE&& obj) {
        opcode = Opcode::CMSG_CHAR_CUSTOMIZE;
        new (&this->CMSG_CHAR_CUSTOMIZE) wrath::CMSG_CHAR_CUSTOMIZE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REQUEST_VEHICLE_EXIT&& obj) {
        opcode = Opcode::CMSG_REQUEST_VEHICLE_EXIT;
        new (&this->CMSG_REQUEST_VEHICLE_EXIT) wrath::CMSG_REQUEST_VEHICLE_EXIT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT&& obj) {
        opcode = Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT;
        new (&this->CMSG_REQUEST_VEHICLE_PREV_SEAT) wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT&& obj) {
        opcode = Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT;
        new (&this->CMSG_REQUEST_VEHICLE_NEXT_SEAT) wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT&& obj) {
        opcode = Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT;
        new (&this->CMSG_REQUEST_VEHICLE_SWITCH_SEAT) wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PET_LEARN_TALENT&& obj) {
        opcode = Opcode::CMSG_PET_LEARN_TALENT;
        new (&this->CMSG_PET_LEARN_TALENT) wrath::CMSG_PET_LEARN_TALENT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GAMEOBJ_REPORT_USE&& obj) {
        opcode = Opcode::CMSG_GAMEOBJ_REPORT_USE;
        new (&this->CMSG_GAMEOBJ_REPORT_USE) wrath::CMSG_GAMEOBJ_REPORT_USE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_REMOVE_GLYPH&& obj) {
        opcode = Opcode::CMSG_REMOVE_GLYPH;
        new (&this->CMSG_REMOVE_GLYPH) wrath::CMSG_REMOVE_GLYPH (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_DISMISS_CRITTER&& obj) {
        opcode = Opcode::CMSG_DISMISS_CRITTER;
        new (&this->CMSG_DISMISS_CRITTER) wrath::CMSG_DISMISS_CRITTER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_AUCTION_LIST_PENDING_SALES&& obj) {
        opcode = Opcode::CMSG_AUCTION_LIST_PENDING_SALES;
        new (&this->CMSG_AUCTION_LIST_PENDING_SALES) wrath::CMSG_AUCTION_LIST_PENDING_SALES (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ENABLETAXI&& obj) {
        opcode = Opcode::CMSG_ENABLETAXI;
        new (&this->CMSG_ENABLETAXI) wrath::CMSG_ENABLETAXI (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE&& obj) {
        opcode = Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE;
        new (&this->CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_HEARTH_AND_RESURRECT&& obj) {
        opcode = Opcode::CMSG_HEARTH_AND_RESURRECT;
        new (&this->CMSG_HEARTH_AND_RESURRECT) wrath::CMSG_HEARTH_AND_RESURRECT (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_PLAYER_VEHICLE_ENTER&& obj) {
        opcode = Opcode::CMSG_PLAYER_VEHICLE_ENTER;
        new (&this->CMSG_PLAYER_VEHICLE_ENTER) wrath::CMSG_PLAYER_VEHICLE_ENTER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CONTROLLER_EJECT_PASSENGER&& obj) {
        opcode = Opcode::CMSG_CONTROLLER_EJECT_PASSENGER;
        new (&this->CMSG_CONTROLLER_EJECT_PASSENGER) wrath::CMSG_CONTROLLER_EJECT_PASSENGER (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ITEM_REFUND_INFO&& obj) {
        opcode = Opcode::CMSG_ITEM_REFUND_INFO;
        new (&this->CMSG_ITEM_REFUND_INFO) wrath::CMSG_ITEM_REFUND_INFO (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_ITEM_REFUND&& obj) {
        opcode = Opcode::CMSG_ITEM_REFUND;
        new (&this->CMSG_ITEM_REFUND) wrath::CMSG_ITEM_REFUND (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CORPSE_MAP_POSITION_QUERY&& obj) {
        opcode = Opcode::CMSG_CORPSE_MAP_POSITION_QUERY;
        new (&this->CMSG_CORPSE_MAP_POSITION_QUERY) wrath::CMSG_CORPSE_MAP_POSITION_QUERY (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CALENDAR_EVENT_SIGNUP&& obj) {
        opcode = Opcode::CMSG_CALENDAR_EVENT_SIGNUP;
        new (&this->CMSG_CALENDAR_EVENT_SIGNUP) wrath::CMSG_CALENDAR_EVENT_SIGNUP (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_EQUIPMENT_SET_SAVE&& obj) {
        opcode = Opcode::CMSG_EQUIPMENT_SET_SAVE;
        new (&this->CMSG_EQUIPMENT_SET_SAVE) wrath::CMSG_EQUIPMENT_SET_SAVE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_UPDATE_PROJECTILE_POSITION&& obj) {
        opcode = Opcode::CMSG_UPDATE_PROJECTILE_POSITION;
        new (&this->CMSG_UPDATE_PROJECTILE_POSITION) wrath::CMSG_UPDATE_PROJECTILE_POSITION (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LEARN_PREVIEW_TALENTS&& obj) {
        opcode = Opcode::CMSG_LEARN_PREVIEW_TALENTS;
        new (&this->CMSG_LEARN_PREVIEW_TALENTS) wrath::CMSG_LEARN_PREVIEW_TALENTS (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_LEARN_PREVIEW_TALENTS_PET&& obj) {
        opcode = Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET;
        new (&this->CMSG_LEARN_PREVIEW_TALENTS_PET) wrath::CMSG_LEARN_PREVIEW_TALENTS_PET (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK&& obj) {
        opcode = Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK;
        new (&this->CMSG_MOVE_GRAVITY_DISABLE_ACK) wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK&& obj) {
        opcode = Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK;
        new (&this->CMSG_MOVE_GRAVITY_ENABLE_ACK) wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_EQUIPMENT_SET_USE&& obj) {
        opcode = Opcode::CMSG_EQUIPMENT_SET_USE;
        new (&this->CMSG_EQUIPMENT_SET_USE) wrath::CMSG_EQUIPMENT_SET_USE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHAR_FACTION_CHANGE&& obj) {
        opcode = Opcode::CMSG_CHAR_FACTION_CHANGE;
        new (&this->CMSG_CHAR_FACTION_CHANGE) wrath::CMSG_CHAR_FACTION_CHANGE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE&& obj) {
        opcode = Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE;
        new (&this->CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE&& obj) {
        opcode = Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE;
        new (&this->CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST&& obj) {
        opcode = Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST;
        new (&this->CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST (std::move(obj));
    }
    explicit ClientOpcode(wrath::MSG_SET_RAID_DIFFICULTY_Client&& obj) {
        opcode = Opcode::MSG_SET_RAID_DIFFICULTY;
        new (&this->MSG_SET_RAID_DIFFICULTY) wrath::MSG_SET_RAID_DIFFICULTY_Client (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GMRESPONSE_RESOLVE&& obj) {
        opcode = Opcode::CMSG_GMRESPONSE_RESOLVE;
        new (&this->CMSG_GMRESPONSE_RESOLVE) wrath::CMSG_GMRESPONSE_RESOLVE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE&& obj) {
        opcode = Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE;
        new (&this->CMSG_WORLD_STATE_UI_TIMER_UPDATE) wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_CHAR_RACE_CHANGE&& obj) {
        opcode = Opcode::CMSG_CHAR_RACE_CHANGE;
        new (&this->CMSG_CHAR_RACE_CHANGE) wrath::CMSG_CHAR_RACE_CHANGE (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES&& obj) {
        opcode = Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES;
        new (&this->CMSG_READY_FOR_ACCOUNT_DATA_TIMES) wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_QUERY_QUESTS_COMPLETED&& obj) {
        opcode = Opcode::CMSG_QUERY_QUESTS_COMPLETED;
        new (&this->CMSG_QUERY_QUESTS_COMPLETED) wrath::CMSG_QUERY_QUESTS_COMPLETED (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_GM_REPORT_LAG&& obj) {
        opcode = Opcode::CMSG_GM_REPORT_LAG;
        new (&this->CMSG_GM_REPORT_LAG) wrath::CMSG_GM_REPORT_LAG (std::move(obj));
    }
    explicit ClientOpcode(wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK&& obj) {
        opcode = Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK;
        new (&this->CMSG_MOVE_SET_COLLISION_HGT_ACK) wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK (std::move(obj));
    }

    template<typename T>
    // NOLINTNEXTLINE
    WOW_WORLD_MESSAGES_CPP_EXPORT T& get(); // All possible types have been specialized

    template<typename T>
    // NOLINTNEXTLINE
    WOW_WORLD_MESSAGES_CPP_EXPORT T* get_if(); // All possible types have been specialized

    WOW_WORLD_MESSAGES_CPP_EXPORT const char* to_string() const;
};

template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BOOTME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BOOTME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DBLOOKUP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DBLOOKUP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WORLD_TELEPORT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WORLD_TELEPORT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TELEPORT_TO_UNIT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TELEPORT_TO_UNIT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_CREATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_CREATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_ENUM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_ENUM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_DELETE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_DELETE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_LOGIN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_LOGIN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_LOGOUT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_LOGOUT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOGOUT_REQUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOGOUT_REQUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOGOUT_CANCEL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOGOUT_CANCEL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NAME_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NAME_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_NAME_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_NAME_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_QUERY_SINGLE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_QUERY_SINGLE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PAGE_TEXT_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PAGE_TEXT_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJECT_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJECT_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CREATURE_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CREATURE_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WHO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WHO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WHOIS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WHOIS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CONTACT_LIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CONTACT_LIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ADD_FRIEND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ADD_FRIEND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DEL_FRIEND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DEL_FRIEND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_CONTACT_NOTES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_CONTACT_NOTES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ADD_IGNORE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ADD_IGNORE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DEL_IGNORE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DEL_IGNORE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_INVITE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_INVITE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_CANCEL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_CANCEL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_ACCEPT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_ACCEPT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_DECLINE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_DECLINE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_UNINVITE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_UNINVITE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_UNINVITE_GUID* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_UNINVITE_GUID& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_SET_LEADER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_SET_LEADER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_METHOD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_METHOD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_DISBAND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_DISBAND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_CREATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_CREATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INVITE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INVITE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ACCEPT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ACCEPT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DECLINE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DECLINE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INFO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INFO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ROSTER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ROSTER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_PROMOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_PROMOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DEMOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DEMOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_LEAVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_LEAVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_REMOVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_REMOVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DISBAND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DISBAND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_LEADER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_LEADER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_MOTD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_MOTD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MESSAGECHAT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MESSAGECHAT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_JOIN_CHANNEL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_JOIN_CHANNEL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEAVE_CHANNEL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEAVE_CHANNEL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_LIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_LIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_PASSWORD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_PASSWORD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_SET_OWNER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_SET_OWNER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_OWNER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_OWNER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MODERATOR* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MODERATOR& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNMODERATOR* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNMODERATOR& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MUTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MUTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNMUTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNMUTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_INVITE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_INVITE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_KICK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_KICK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_BAN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_BAN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNBAN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNBAN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_ANNOUNCEMENTS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_ANNOUNCEMENTS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MODERATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MODERATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_USE_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_USE_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OPEN_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OPEN_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_READ_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_READ_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJ_USE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJ_USE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREATRIGGER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREATRIGGER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_FORWARD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_FORWARD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_BACKWARD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_BACKWARD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_LEFT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_LEFT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_RIGHT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_RIGHT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_STRAFE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_STRAFE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_JUMP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_JUMP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_LEFT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_LEFT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_RIGHT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_RIGHT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_TURN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_TURN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_UP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_UP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_DOWN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_DOWN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_PITCH* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_PITCH& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_RUN_MODE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_RUN_MODE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_WALK_MODE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_WALK_MODE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_Server* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_Server& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_ACK_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_ACK_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FALL_LAND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FALL_LAND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_SWIM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_SWIM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_SWIM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_SWIM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FACING* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FACING& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WORLDPORT_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WORLDPORT_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_RAW_POSITION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_RAW_POSITION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_MOVE_ROOT_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_MOVE_ROOT_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_MOVE_UNROOT_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_MOVE_UNROOT_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HEARTBEAT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HEARTBEAT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_KNOCK_BACK_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_KNOCK_BACK_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_HOVER_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_HOVER_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HOVER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HOVER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NEXT_CINEMATIC_CAMERA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NEXT_CINEMATIC_CAMERA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLETE_CINEMATIC* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLETE_CINEMATIC& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_FLAG* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_FLAG& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_CLEAR* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_CLEAR& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_RESET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_RESET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STANDSTATECHANGE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STANDSTATECHANGE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EMOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EMOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TEXT_EMOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TEXT_EMOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_LOOT_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_LOOT_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOEQUIP_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOEQUIP_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_BAG_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_BAG_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SWAP_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SWAP_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SWAP_INV_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SWAP_INV_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPLIT_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPLIT_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOEQUIP_ITEM_SLOT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOEQUIP_ITEM_SLOT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DESTROYITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DESTROYITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INSPECT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INSPECT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INITIATE_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INITIATE_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BEGIN_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BEGIN_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUSY_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUSY_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_IGNORE_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_IGNORE_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACCEPT_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACCEPT_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNACCEPT_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNACCEPT_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TRADE_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TRADE_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CLEAR_TRADE_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CLEAR_TRADE_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TRADE_GOLD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TRADE_GOLD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_FACTION_ATWAR* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_FACTION_ATWAR& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTION_BUTTON* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTION_BUTTON& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CAST_SPELL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CAST_SPELL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_CAST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_CAST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_AURA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_AURA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_CHANNELLING* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_CHANNELLING& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_SELECTION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_SELECTION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DELETEEQUIPMENT_SET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DELETEEQUIPMENT_SET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INSTANCE_LOCK_RESPONSE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INSTANCE_LOCK_RESPONSE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ATTACKSWING* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ATTACKSWING& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ATTACKSTOP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ATTACKSTOP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPOP_REQUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPOP_REQUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RESURRECT_RESPONSE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RESURRECT_RESPONSE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_MONEY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_MONEY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_RELEASE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_RELEASE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DUEL_ACCEPTED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DUEL_ACCEPTED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DUEL_CANCELLED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DUEL_CANCELLED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOUNTSPECIAL_ANIM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOUNTSPECIAL_ANIM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_SET_ACTION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_SET_ACTION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_ACTION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_ACTION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_ABANDON* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_ABANDON& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_RENAME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_RENAME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GOSSIP_HELLO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GOSSIP_HELLO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GOSSIP_SELECT_OPTION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GOSSIP_SELECT_OPTION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NPC_TEXT_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NPC_TEXT_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_STATUS_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_STATUS_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_HELLO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_HELLO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_QUERY_QUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_QUERY_QUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_ACCEPT_QUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_ACCEPT_QUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_COMPLETE_QUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_COMPLETE_QUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_REQUEST_REWARD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_REQUEST_REWARD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_CHOOSE_REWARD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_CHOOSE_REWARD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_CANCEL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_CANCEL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTLOG_SWAP_QUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTLOG_SWAP_QUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTLOG_REMOVE_QUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTLOG_REMOVE_QUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_CONFIRM_ACCEPT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_CONFIRM_ACCEPT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PUSHQUESTTOPARTY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PUSHQUESTTOPARTY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LIST_INVENTORY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LIST_INVENTORY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SELL_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SELL_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_ITEM_IN_SLOT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_ITEM_IN_SLOT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TAXINODE_STATUS_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TAXINODE_STATUS_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TAXIQUERYAVAILABLENODES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TAXIQUERYAVAILABLENODES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACTIVATETAXI* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACTIVATETAXI& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TRAINER_LIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TRAINER_LIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TRAINER_BUY_SPELL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TRAINER_BUY_SPELL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BINDER_ACTIVATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BINDER_ACTIVATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BANKER_ACTIVATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BANKER_ACTIVATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_BANK_SLOT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_BANK_SLOT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SHOWLIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SHOWLIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_BUY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_BUY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SHOW_SIGNATURES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SHOW_SIGNATURES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SIGN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SIGN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_DECLINE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_DECLINE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OFFER_PETITION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OFFER_PETITION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TURN_IN_PETITION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TURN_IN_PETITION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUG* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUG& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYED_TIME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYED_TIME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_TIME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_TIME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RECLAIM_CORPSE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RECLAIM_CORPSE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WRAP_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WRAP_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MINIMAP_PING_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MINIMAP_PING_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PING* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PING& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SETSHEATHED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SETSHEATHED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_POI_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_POI_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTH_SESSION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTH_SESSION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_CAST_SPELL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_CAST_SPELL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SAVE_GUILD_EMBLEM_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SAVE_GUILD_EMBLEM_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TABARDVENDOR_ACTIVATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TABARDVENDOR_ACTIVATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ZONEUPDATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ZONEUPDATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RANDOM_ROLL_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RANDOM_ROLL_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNLEARN_SKILL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNLEARN_SKILL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_CREATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_CREATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_UPDATETEXT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_UPDATETEXT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_ACCOUNT_DATA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_ACCOUNT_DATA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_ACCOUNT_DATA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_ACCOUNT_DATA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_GETTICKET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_GETTICKET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNLEARN_TALENTS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNLEARN_TALENTS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CORPSE_QUERY_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CORPSE_QUERY_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_DELETETICKET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_DELETETICKET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_SYSTEMSTATUS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_SYSTEMSTATUS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPIRIT_HEALER_ACTIVATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPIRIT_HEALER_ACTIVATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAT_IGNORED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAT_IGNORED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_RANK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_RANK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ADD_RANK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ADD_RANK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DEL_RANK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DEL_RANK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_SET_PUBLIC_NOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_SET_PUBLIC_NOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_SET_OFFICER_NOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_SET_OFFICER_NOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEND_MAIL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEND_MAIL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_MAIL_LIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_MAIL_LIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_LIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_LIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_TEXT_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_TEXT_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_TAKE_MONEY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_TAKE_MONEY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_TAKE_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_TAKE_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_MARK_AS_READ* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_MARK_AS_READ& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_RETURN_TO_SENDER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_RETURN_TO_SENDER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_DELETE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_DELETE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_CREATE_TEXT_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_CREATE_TEXT_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_TALENT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_TALENT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_PVP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_PVP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_AUCTION_HELLO_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_AUCTION_HELLO_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_SELL_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_SELL_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_REMOVE_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_REMOVE_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_ITEMS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_ITEMS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_OWNER_ITEMS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_OWNER_ITEMS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_PLACE_BID* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_PLACE_BID& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_AMMO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_AMMO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIVE_MOVER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIVE_MOVER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_CANCEL_AURA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_CANCEL_AURA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_LIST_STABLED_PETS_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_LIST_STABLED_PETS_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STABLE_PET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STABLE_PET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNSTABLE_PET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNSTABLE_PET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_STABLE_SLOT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_STABLE_SLOT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STABLE_SWAP_PET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STABLE_SWAP_PET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUEST_PUSH_RESULT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUEST_PUSH_RESULT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_PET_INFO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_PET_INFO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FAR_SIGHT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FAR_SIGHT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_CHANGE_SUB_GROUP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_CHANGE_SUB_GROUP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_PARTY_MEMBER_STATS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_PARTY_MEMBER_STATS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_SWAP_SUB_GROUP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_SWAP_SUB_GROUP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_BANK_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_BANK_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOBANK_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOBANK_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_NEXT_MAIL_TIME_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_NEXT_MAIL_TIME_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_RAID_CONVERT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_RAID_CONVERT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_ASSISTANT_LEADER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_ASSISTANT_LEADER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUYBACK_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUYBACK_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_SAVED_INSTANCE_EXTEND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_SAVED_INSTANCE_EXTEND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_GET_STATUS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_GET_STATUS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKETSYSTEM_TOGGLE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKETSYSTEM_TOGGLE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_GROWTH_AURA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_GROWTH_AURA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_ROLL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_ROLL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_MASTER_GIVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_MASTER_GIVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPAIR_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPAIR_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TALENT_WIPE_CONFIRM_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TALENT_WIPE_CONFIRM_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SUMMON_RESPONSE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SUMMON_RESPONSE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WATER_WALK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WATER_WALK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SELF_RES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SELF_RES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_HELM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_HELM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_CLOAK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_CLOAK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIONBAR_TOGGLES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIONBAR_TOGGLES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_RENAME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_RENAME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_NAME_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_NAME_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_RENAME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_RENAME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SPLINE_DONE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SPLINE_DONE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_FALL_RESET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_FALL_RESET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_RAID_INFO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_RAID_INFO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_TIME_SKIPPED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_TIME_SKIPPED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_FEATHER_FALL_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_FEATHER_FALL_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_WATER_WALK_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_WATER_WALK_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_NOT_ACTIVE_MOVER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_NOT_ACTIVE_MOVER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_STATUS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_STATUS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_PORT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_PORT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_HONOR_STATS_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_HONOR_STATS_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_HELLO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_HELLO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PVP_LOG_DATA_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PVP_LOG_DATA_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEAVE_BATTLEFIELD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEAVE_BATTLEFIELD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREA_SPIRIT_HEALER_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREA_SPIRIT_HEALER_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WARDEN_DATA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WARDEN_DATA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_STOP_ATTACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_STOP_ATTACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_JOIN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_JOIN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_UNLEARN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_UNLEARN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_SPELL_AUTOCAST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_SPELL_AUTOCAST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INFO_TEXT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INFO_TEXT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACTIVATETAXIEXPRESS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACTIVATETAXIEXPRESS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_FACTION_INACTIVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_FACTION_INACTIVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_WATCHED_FACTION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_WATCHED_FACTION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RESET_INSTANCES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RESET_INSTANCES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_TARGET_UPDATE_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_TARGET_UPDATE_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_DUNGEON_DIFFICULTY_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_DUNGEON_DIFFICULTY_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMSURVEY_SUBMIT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMSURVEY_SUBMIT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_CAN_FLY_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_CAN_FLY_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_FLY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_FLY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SOCKET_GEMS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SOCKET_GEMS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_ROSTER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_ROSTER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_INVITE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_INVITE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_ACCEPT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_ACCEPT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_DECLINE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_DECLINE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_LEAVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_LEAVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_REMOVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_REMOVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_DISBAND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_DISBAND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_LEADER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_LEADER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_JOIN_ARENA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_JOIN_ARENA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_ASCEND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_ASCEND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_ASCEND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_ASCEND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_JOIN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_JOIN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_LEAVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_LEAVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEARCH_LFG_JOIN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEARCH_LFG_JOIN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEARCH_LFG_LEAVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEARCH_LFG_LEAVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_PROPOSAL_RESULT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_PROPOSAL_RESULT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_LFG_COMMENT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_LFG_COMMENT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_SET_ROLES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_SET_ROLES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_SET_BOOT_VOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_SET_BOOT_VOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_TELEPORT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_TELEPORT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TITLE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TITLE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_MOUNT_AURA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_MOUNT_AURA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_ARENA_TEAMS_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_ARENA_TEAMS_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_TEMP_ENCHANTMENT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_TEMP_ENCHANTMENT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TAXI_BENCHMARK_MODE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TAXI_BENCHMARK_MODE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REALM_SPLIT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REALM_SPLIT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_CHNG_TRANSPORT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_CHNG_TRANSPORT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PARTY_ASSIGNMENT_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PARTY_ASSIGNMENT_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TIME_SYNC_RESP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TIME_SYNC_RESP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_DESCEND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_DESCEND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_CONFIRM_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_CONFIRM_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_VOICE_SESSION_ENABLE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_VOICE_SESSION_ENABLE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMMENTATOR_ENABLE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMMENTATOR_ENABLE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_FINISHED_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_FINISHED_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLAIN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLAIN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_DISPLAY_LIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_DISPLAY_LIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_CHANNEL_MEMBER_COUNT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_CHANNEL_MEMBER_COUNT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_VOICE_ON* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_VOICE_ON& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPORT_PVP_AFK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPORT_PVP_AFK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANKER_ACTIVATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANKER_ACTIVATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_QUERY_TAB* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_QUERY_TAB& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_SWAP_ITEMS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_SWAP_ITEMS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_BUY_TAB* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_BUY_TAB& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_UPDATE_TAB* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_UPDATE_TAB& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_LOG_QUERY_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_LOG_QUERY_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_CHANNEL_WATCH* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_CHANNEL_WATCH& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CLEAR_CHANNEL_WATCH* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CLEAR_CHANNEL_WATCH& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPELLCLICK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPELLCLICK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_PERMISSIONS_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_PERMISSIONS_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_EVENT_LOG_QUERY_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_EVENT_LOG_QUERY_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_MIRRORIMAGE_DATA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_MIRRORIMAGE_DATA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_KEEP_ALIVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_KEEP_ALIVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OPT_OUT_OF_LOOT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OPT_OUT_OF_LOOT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_GUILD_BANK_TEXT_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_GUILD_BANK_TEXT_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_GUILD_BANK_TEXT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_GUILD_BANK_TEXT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GRANT_LEVEL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GRANT_LEVEL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOTEM_DESTROYED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOTEM_DESTROYED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_PLAYER_DECLINED_NAMES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_PLAYER_DECLINED_NAMES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACCEPT_LEVEL_GRANT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACCEPT_LEVEL_GRANT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ALTER_APPEARANCE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ALTER_APPEARANCE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_CALENDAR* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_CALENDAR& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_EVENT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_EVENT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GUILD_FILTER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GUILD_FILTER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_ARENA_TEAM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_ARENA_TEAM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_ADD_EVENT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_ADD_EVENT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_UPDATE_EVENT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_UPDATE_EVENT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_REMOVE_EVENT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_REMOVE_EVENT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_COPY_EVENT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_COPY_EVENT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_INVITE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_INVITE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_RSVP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_RSVP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_STATUS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_STATUS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_COMPLAIN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_COMPLAIN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_NUM_PENDING* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_NUM_PENDING& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_MISSILE_TRAJECTORY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_MISSILE_TRAJECTORY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLETE_MOVIE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLETE_MOVIE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DISMISS_CONTROLLED_VEHICLE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DISMISS_CONTROLLED_VEHICLE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_CUSTOMIZE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_CUSTOMIZE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_EXIT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_EXIT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_LEARN_TALENT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_LEARN_TALENT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJ_REPORT_USE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJ_REPORT_USE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REMOVE_GLYPH* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REMOVE_GLYPH& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DISMISS_CRITTER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DISMISS_CRITTER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_PENDING_SALES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_PENDING_SALES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ENABLETAXI* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ENABLETAXI& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_HEARTH_AND_RESURRECT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_HEARTH_AND_RESURRECT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_VEHICLE_ENTER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_VEHICLE_ENTER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CONTROLLER_EJECT_PASSENGER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CONTROLLER_EJECT_PASSENGER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_REFUND_INFO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_REFUND_INFO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_REFUND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_REFUND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CORPSE_MAP_POSITION_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CORPSE_MAP_POSITION_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_SIGNUP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_SIGNUP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EQUIPMENT_SET_SAVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EQUIPMENT_SET_SAVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_PROJECTILE_POSITION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_PROJECTILE_POSITION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_PREVIEW_TALENTS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_PREVIEW_TALENTS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_PREVIEW_TALENTS_PET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_PREVIEW_TALENTS_PET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EQUIPMENT_SET_USE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EQUIPMENT_SET_USE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_FACTION_CHANGE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_FACTION_CHANGE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_RAID_DIFFICULTY_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_RAID_DIFFICULTY_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMRESPONSE_RESOLVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMRESPONSE_RESOLVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_RACE_CHANGE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_RACE_CHANGE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_QUESTS_COMPLETED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_QUESTS_COMPLETED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GM_REPORT_LAG* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GM_REPORT_LAG& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK& ClientOpcode::get();

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_opcode(const ClientOpcode& opcode);

WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode read_client_opcode(Reader& reader);

struct ServerOpcode {
    enum class Opcode {
        NONE = 0xFFFF,
        SMSG_CHAR_CREATE = 58,
        SMSG_CHAR_ENUM = 59,
        SMSG_CHAR_DELETE = 60,
        SMSG_NEW_WORLD = 62,
        SMSG_TRANSFER_PENDING = 63,
        SMSG_TRANSFER_ABORTED = 64,
        SMSG_CHARACTER_LOGIN_FAILED = 65,
        SMSG_LOGIN_SETTIMESPEED = 66,
        SMSG_LOGOUT_RESPONSE = 76,
        SMSG_LOGOUT_COMPLETE = 77,
        SMSG_LOGOUT_CANCEL_ACK = 79,
        SMSG_NAME_QUERY_RESPONSE = 81,
        SMSG_PET_NAME_QUERY_RESPONSE = 83,
        SMSG_GUILD_QUERY_RESPONSE = 85,
        SMSG_ITEM_QUERY_SINGLE_RESPONSE = 88,
        SMSG_PAGE_TEXT_QUERY_RESPONSE = 91,
        SMSG_QUEST_QUERY_RESPONSE = 93,
        SMSG_GAMEOBJECT_QUERY_RESPONSE = 95,
        SMSG_CREATURE_QUERY_RESPONSE = 97,
        SMSG_WHO = 99,
        SMSG_WHOIS = 101,
        SMSG_CONTACT_LIST = 103,
        SMSG_FRIEND_STATUS = 104,
        SMSG_GROUP_INVITE = 111,
        SMSG_GROUP_DECLINE = 116,
        SMSG_GROUP_UNINVITE = 119,
        SMSG_GROUP_SET_LEADER = 121,
        SMSG_GROUP_DESTROYED = 124,
        SMSG_GROUP_LIST = 125,
        SMSG_PARTY_MEMBER_STATS = 126,
        SMSG_PARTY_COMMAND_RESULT = 127,
        SMSG_GUILD_INVITE = 131,
        SMSG_GUILD_DECLINE = 134,
        SMSG_GUILD_INFO = 136,
        SMSG_GUILD_ROSTER = 138,
        SMSG_GUILD_EVENT = 146,
        SMSG_GUILD_COMMAND_RESULT = 147,
        SMSG_MESSAGECHAT = 150,
        SMSG_CHANNEL_NOTIFY = 153,
        SMSG_CHANNEL_LIST = 155,
        SMSG_UPDATE_OBJECT = 169,
        SMSG_DESTROY_OBJECT = 170,
        SMSG_READ_ITEM_OK = 174,
        SMSG_READ_ITEM_FAILED = 175,
        SMSG_ITEM_COOLDOWN = 176,
        SMSG_GAMEOBJECT_CUSTOM_ANIM = 179,
        MSG_MOVE_START_FORWARD = 181,
        MSG_MOVE_START_BACKWARD = 182,
        MSG_MOVE_STOP = 183,
        MSG_MOVE_START_STRAFE_LEFT = 184,
        MSG_MOVE_START_STRAFE_RIGHT = 185,
        MSG_MOVE_STOP_STRAFE = 186,
        MSG_MOVE_JUMP = 187,
        MSG_MOVE_START_TURN_LEFT = 188,
        MSG_MOVE_START_TURN_RIGHT = 189,
        MSG_MOVE_STOP_TURN = 190,
        MSG_MOVE_START_PITCH_UP = 191,
        MSG_MOVE_START_PITCH_DOWN = 192,
        MSG_MOVE_STOP_PITCH = 193,
        MSG_MOVE_SET_RUN_MODE = 194,
        MSG_MOVE_SET_WALK_MODE = 195,
        MSG_MOVE_TELEPORT_CHEAT = 198,
        MSG_MOVE_TELEPORT_ACK = 199,
        MSG_MOVE_FALL_LAND = 201,
        MSG_MOVE_START_SWIM = 202,
        MSG_MOVE_STOP_SWIM = 203,
        MSG_MOVE_SET_FACING = 218,
        MSG_MOVE_SET_PITCH = 219,
        MSG_MOVE_WORLDPORT_ACK = 220,
        SMSG_MONSTER_MOVE = 221,
        SMSG_MOVE_WATER_WALK = 222,
        SMSG_MOVE_LAND_WALK = 223,
        SMSG_FORCE_RUN_SPEED_CHANGE = 226,
        SMSG_FORCE_RUN_BACK_SPEED_CHANGE = 228,
        SMSG_FORCE_SWIM_SPEED_CHANGE = 230,
        SMSG_FORCE_MOVE_ROOT = 232,
        SMSG_FORCE_MOVE_UNROOT = 234,
        MSG_MOVE_ROOT = 236,
        MSG_MOVE_UNROOT = 237,
        MSG_MOVE_HEARTBEAT = 238,
        SMSG_MOVE_KNOCK_BACK = 239,
        MSG_MOVE_KNOCK_BACK = 241,
        SMSG_MOVE_FEATHER_FALL = 242,
        SMSG_MOVE_NORMAL_FALL = 243,
        SMSG_MOVE_SET_HOVER = 244,
        SMSG_MOVE_UNSET_HOVER = 245,
        MSG_MOVE_HOVER = 247,
        SMSG_TRIGGER_CINEMATIC = 250,
        SMSG_TUTORIAL_FLAGS = 253,
        SMSG_EMOTE = 259,
        SMSG_TEXT_EMOTE = 261,
        SMSG_INVENTORY_CHANGE_FAILURE = 274,
        SMSG_TRADE_STATUS = 288,
        SMSG_TRADE_STATUS_EXTENDED = 289,
        SMSG_INITIALIZE_FACTIONS = 290,
        SMSG_SET_FACTION_VISIBLE = 291,
        SMSG_SET_FACTION_STANDING = 292,
        SMSG_SET_PROFICIENCY = 295,
        SMSG_ACTION_BUTTONS = 297,
        SMSG_INITIAL_SPELLS = 298,
        SMSG_LEARNED_SPELL = 299,
        SMSG_SUPERCEDED_SPELL = 300,
        SMSG_CAST_FAILED = 304,
        SMSG_SPELL_START = 305,
        SMSG_SPELL_GO = 306,
        SMSG_SPELL_FAILURE = 307,
        SMSG_SPELL_COOLDOWN = 308,
        SMSG_COOLDOWN_EVENT = 309,
        SMSG_PET_CAST_FAILED = 312,
        MSG_CHANNEL_START = 313,
        MSG_CHANNEL_UPDATE = 314,
        SMSG_AI_REACTION = 316,
        SMSG_ATTACKSTART = 323,
        SMSG_ATTACKSTOP = 324,
        SMSG_ATTACKSWING_NOTINRANGE = 325,
        SMSG_ATTACKSWING_BADFACING = 326,
        SMSG_INSTANCE_LOCK_WARNING_QUERY = 327,
        SMSG_ATTACKSWING_DEADTARGET = 328,
        SMSG_ATTACKSWING_CANT_ATTACK = 329,
        SMSG_ATTACKERSTATEUPDATE = 330,
        SMSG_CANCEL_COMBAT = 334,
        SMSG_SPELLHEALLOG = 336,
        SMSG_SPELLENERGIZELOG = 337,
        SMSG_BREAK_TARGET = 338,
        SMSG_BINDPOINTUPDATE = 341,
        SMSG_PLAYERBOUND = 344,
        SMSG_CLIENT_CONTROL_UPDATE = 345,
        SMSG_RESURRECT_REQUEST = 347,
        SMSG_LOOT_RESPONSE = 352,
        SMSG_LOOT_RELEASE_RESPONSE = 353,
        SMSG_LOOT_REMOVED = 354,
        SMSG_LOOT_MONEY_NOTIFY = 355,
        SMSG_LOOT_CLEAR_MONEY = 357,
        SMSG_ITEM_PUSH_RESULT = 358,
        SMSG_DUEL_REQUESTED = 359,
        SMSG_DUEL_OUTOFBOUNDS = 360,
        SMSG_DUEL_INBOUNDS = 361,
        SMSG_DUEL_COMPLETE = 362,
        SMSG_DUEL_WINNER = 363,
        SMSG_MOUNTRESULT = 366,
        SMSG_MOUNTSPECIAL_ANIM = 370,
        SMSG_PET_TAME_FAILURE = 371,
        SMSG_PET_NAME_INVALID = 376,
        SMSG_PET_SPELLS = 377,
        SMSG_PET_MODE = 378,
        SMSG_GOSSIP_MESSAGE = 381,
        SMSG_GOSSIP_COMPLETE = 382,
        SMSG_NPC_TEXT_UPDATE = 384,
        SMSG_QUESTGIVER_STATUS = 387,
        SMSG_QUESTGIVER_QUEST_LIST = 389,
        SMSG_QUESTGIVER_QUEST_DETAILS = 392,
        SMSG_QUESTGIVER_REQUEST_ITEMS = 395,
        SMSG_QUESTGIVER_OFFER_REWARD = 397,
        SMSG_QUESTGIVER_QUEST_INVALID = 399,
        SMSG_QUESTGIVER_QUEST_COMPLETE = 401,
        SMSG_QUESTGIVER_QUEST_FAILED = 402,
        SMSG_QUESTLOG_FULL = 405,
        SMSG_QUESTUPDATE_FAILED = 406,
        SMSG_QUESTUPDATE_FAILEDTIMER = 407,
        SMSG_QUESTUPDATE_COMPLETE = 408,
        SMSG_QUESTUPDATE_ADD_KILL = 409,
        SMSG_QUESTUPDATE_ADD_ITEM = 410,
        SMSG_QUEST_CONFIRM_ACCEPT = 412,
        SMSG_LIST_INVENTORY = 415,
        SMSG_SELL_ITEM = 417,
        SMSG_BUY_ITEM = 420,
        SMSG_BUY_FAILED = 421,
        SMSG_SHOWTAXINODES = 425,
        SMSG_TAXINODE_STATUS = 427,
        SMSG_ACTIVATETAXIREPLY = 430,
        SMSG_NEW_TAXI_PATH = 431,
        SMSG_TRAINER_LIST = 433,
        SMSG_TRAINER_BUY_SUCCEEDED = 435,
        SMSG_TRAINER_BUY_FAILED = 436,
        SMSG_SHOW_BANK = 440,
        SMSG_BUY_BANK_SLOT_RESULT = 442,
        SMSG_PETITION_SHOWLIST = 444,
        SMSG_PETITION_SHOW_SIGNATURES = 447,
        SMSG_PETITION_SIGN_RESULTS = 449,
        MSG_PETITION_DECLINE = 450,
        SMSG_TURN_IN_PETITION_RESULTS = 453,
        SMSG_PETITION_QUERY_RESPONSE = 455,
        SMSG_FISH_NOT_HOOKED = 456,
        SMSG_FISH_ESCAPED = 457,
        SMSG_NOTIFICATION = 459,
        SMSG_PLAYED_TIME = 461,
        SMSG_QUERY_TIME_RESPONSE = 463,
        SMSG_LOG_XPGAIN = 464,
        SMSG_LEVELUP_INFO = 468,
        MSG_MINIMAP_PING = 469,
        SMSG_ENCHANTMENTLOG = 471,
        SMSG_START_MIRROR_TIMER = 473,
        SMSG_PAUSE_MIRROR_TIMER = 474,
        SMSG_STOP_MIRROR_TIMER = 475,
        SMSG_PONG = 477,
        SMSG_CLEAR_COOLDOWN = 478,
        SMSG_GAMEOBJECT_PAGETEXT = 479,
        SMSG_SPELL_DELAYED = 482,
        SMSG_QUEST_POI_QUERY_RESPONSE = 484,
        SMSG_ITEM_TIME_UPDATE = 490,
        SMSG_ITEM_ENCHANT_TIME_UPDATE = 491,
        SMSG_AUTH_CHALLENGE = 492,
        SMSG_AUTH_RESPONSE = 494,
        MSG_SAVE_GUILD_EMBLEM = 497,
        MSG_TABARDVENDOR_ACTIVATE = 498,
        SMSG_PLAY_SPELL_VISUAL = 499,
        SMSG_PARTYKILLLOG = 501,
        SMSG_COMPRESSED_UPDATE_OBJECT = 502,
        SMSG_PLAY_SPELL_IMPACT = 503,
        SMSG_EXPLORATION_EXPERIENCE = 504,
        MSG_RANDOM_ROLL = 507,
        SMSG_ENVIRONMENTAL_DAMAGE_LOG = 508,
        SMSG_LFG_PLAYER_REWARD = 511,
        SMSG_LFG_TELEPORT_DENIED = 512,
        SMSG_REMOVED_SPELL = 515,
        SMSG_GMTICKET_CREATE = 518,
        SMSG_GMTICKET_UPDATETEXT = 520,
        SMSG_ACCOUNT_DATA_TIMES = 521,
        SMSG_UPDATE_ACCOUNT_DATA = 524,
        SMSG_GMTICKET_GETTICKET = 530,
        SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT = 532,
        SMSG_GAMEOBJECT_DESPAWN_ANIM = 533,
        MSG_CORPSE_QUERY = 534,
        SMSG_GMTICKET_DELETETICKET = 536,
        SMSG_CHAT_WRONG_FACTION = 537,
        SMSG_GMTICKET_SYSTEMSTATUS = 539,
        SMSG_QUEST_FORCE_REMOVE = 542,
        SMSG_SPIRIT_HEALER_CONFIRM = 546,
        SMSG_GOSSIP_POI = 548,
        SMSG_LOGIN_VERIFY_WORLD = 566,
        SMSG_SEND_MAIL_RESULT = 569,
        SMSG_MAIL_LIST_RESULT = 571,
        SMSG_BATTLEFIELD_LIST = 573,
        SMSG_ITEM_TEXT_QUERY_RESPONSE = 580,
        SMSG_SPELLLOGMISS = 587,
        SMSG_SPELLLOGEXECUTE = 588,
        SMSG_PERIODICAURALOG = 590,
        SMSG_SPELLDAMAGESHIELD = 591,
        SMSG_SPELLNONMELEEDAMAGELOG = 592,
        SMSG_RESURRECT_FAILED = 594,
        SMSG_ZONE_UNDER_ATTACK = 596,
        MSG_AUCTION_HELLO = 597,
        SMSG_AUCTION_COMMAND_RESULT = 603,
        SMSG_AUCTION_LIST_RESULT = 604,
        SMSG_AUCTION_OWNER_LIST_RESULT = 605,
        SMSG_AUCTION_BIDDER_NOTIFICATION = 606,
        SMSG_AUCTION_OWNER_NOTIFICATION = 607,
        SMSG_PROCRESIST = 608,
        SMSG_DISPEL_FAILED = 610,
        SMSG_SPELLORDAMAGE_IMMUNE = 611,
        SMSG_AUCTION_BIDDER_LIST_RESULT = 613,
        SMSG_SET_FLAT_SPELL_MODIFIER = 614,
        SMSG_SET_PCT_SPELL_MODIFIER = 615,
        SMSG_CORPSE_RECLAIM_DELAY = 617,
        MSG_LIST_STABLED_PETS = 623,
        SMSG_STABLE_RESULT = 627,
        MSG_QUEST_PUSH_RESULT = 630,
        SMSG_PLAY_MUSIC = 631,
        SMSG_PLAY_OBJECT_SOUND = 632,
        SMSG_SPELLDISPELLOG = 635,
        MSG_QUERY_NEXT_MAIL_TIME = 644,
        SMSG_RECEIVED_MAIL = 645,
        SMSG_RAID_GROUP_ONLY = 646,
        SMSG_PVP_CREDIT = 652,
        SMSG_AUCTION_REMOVED_NOTIFICATION = 653,
        SMSG_SERVER_MESSAGE = 657,
        SMSG_LFG_OFFER_CONTINUE = 659,
        SMSG_SHOW_MAILBOX = 663,
        SMSG_CANCEL_AUTO_REPEAT = 668,
        SMSG_STANDSTATE_UPDATE = 669,
        SMSG_LOOT_ALL_PASSED = 670,
        SMSG_LOOT_ROLL_WON = 671,
        SMSG_LOOT_START_ROLL = 673,
        SMSG_LOOT_ROLL = 674,
        SMSG_LOOT_MASTER_LIST = 676,
        SMSG_SET_FORCED_REACTIONS = 677,
        SMSG_SPELL_FAILED_OTHER = 678,
        SMSG_CHAT_PLAYER_NOT_FOUND = 681,
        MSG_TALENT_WIPE_CONFIRM = 682,
        SMSG_SUMMON_REQUEST = 683,
        SMSG_MONSTER_MOVE_TRANSPORT = 686,
        SMSG_PET_BROKEN = 687,
        MSG_MOVE_FEATHER_FALL = 688,
        MSG_MOVE_WATER_WALK = 689,
        SMSG_FEIGN_DEATH_RESISTED = 692,
        SMSG_DUEL_COUNTDOWN = 695,
        SMSG_AREA_TRIGGER_MESSAGE = 696,
        SMSG_LFG_ROLE_CHOSEN = 699,
        SMSG_PLAYER_SKINNED = 700,
        SMSG_DURABILITY_DAMAGE_DEATH = 701,
        MSG_PETITION_RENAME = 705,
        SMSG_INIT_WORLD_STATES = 706,
        SMSG_UPDATE_WORLD_STATE = 707,
        SMSG_ITEM_NAME_QUERY_RESPONSE = 709,
        SMSG_PET_ACTION_FEEDBACK = 710,
        SMSG_CHAR_RENAME = 712,
        SMSG_INSTANCE_SAVE_CREATED = 715,
        SMSG_RAID_INSTANCE_INFO = 716,
        SMSG_PLAY_SOUND = 722,
        SMSG_BATTLEFIELD_STATUS = 724,
        MSG_INSPECT_HONOR_STATS = 726,
        SMSG_FORCE_WALK_SPEED_CHANGE = 730,
        SMSG_FORCE_SWIM_BACK_SPEED_CHANGE = 732,
        SMSG_FORCE_TURN_RATE_CHANGE = 734,
        SMSG_AREA_SPIRIT_HEALER_TIME = 740,
        SMSG_WARDEN_DATA = 742,
        SMSG_GROUP_JOINED_BATTLEGROUND = 744,
        MSG_BATTLEGROUND_PLAYER_POSITIONS = 745,
        SMSG_BINDER_CONFIRM = 747,
        SMSG_BATTLEGROUND_PLAYER_JOINED = 748,
        SMSG_BATTLEGROUND_PLAYER_LEFT = 749,
        SMSG_ADDON_INFO = 751,
        SMSG_PET_UNLEARN_CONFIRM = 753,
        SMSG_PARTY_MEMBER_STATS_FULL = 754,
        SMSG_WEATHER = 756,
        SMSG_RAID_INSTANCE_MESSAGE = 762,
        SMSG_COMPRESSED_MOVES = 763,
        SMSG_CHAT_RESTRICTED = 765,
        SMSG_SPLINE_SET_RUN_SPEED = 766,
        SMSG_SPLINE_SET_RUN_BACK_SPEED = 767,
        SMSG_SPLINE_SET_SWIM_SPEED = 768,
        SMSG_SPLINE_SET_WALK_SPEED = 769,
        SMSG_SPLINE_SET_SWIM_BACK_SPEED = 770,
        SMSG_SPLINE_SET_TURN_RATE = 771,
        SMSG_SPLINE_MOVE_UNROOT = 772,
        SMSG_SPLINE_MOVE_FEATHER_FALL = 773,
        SMSG_SPLINE_MOVE_NORMAL_FALL = 774,
        SMSG_SPLINE_MOVE_SET_HOVER = 775,
        SMSG_SPLINE_MOVE_UNSET_HOVER = 776,
        SMSG_SPLINE_MOVE_WATER_WALK = 777,
        SMSG_SPLINE_MOVE_LAND_WALK = 778,
        SMSG_SPLINE_MOVE_START_SWIM = 779,
        SMSG_SPLINE_MOVE_STOP_SWIM = 780,
        SMSG_SPLINE_MOVE_SET_RUN_MODE = 781,
        SMSG_SPLINE_MOVE_SET_WALK_MODE = 782,
        MSG_MOVE_TIME_SKIPPED = 793,
        SMSG_SPLINE_MOVE_ROOT = 794,
        SMSG_INVALIDATE_PLAYER = 796,
        SMSG_INSTANCE_RESET = 798,
        SMSG_INSTANCE_RESET_FAILED = 799,
        SMSG_UPDATE_LAST_INSTANCE = 800,
        MSG_RAID_TARGET_UPDATE = 801,
        MSG_RAID_READY_CHECK = 802,
        SMSG_PET_ACTION_SOUND = 804,
        SMSG_PET_DISMISS_SOUND = 805,
        SMSG_GM_TICKET_STATUS_UPDATE = 808,
        MSG_SET_DUNGEON_DIFFICULTY = 809,
        SMSG_UPDATE_INSTANCE_OWNERSHIP = 811,
        SMSG_CHAT_PLAYER_AMBIGUOUS = 813,
        SMSG_SPELLINSTAKILLLOG = 815,
        SMSG_SPELL_UPDATE_CHAIN_TARGETS = 816,
        SMSG_SPELLSTEALLOG = 819,
        SMSG_DEFENSE_MESSAGE = 826,
        SMSG_INSTANCE_DIFFICULTY = 827,
        SMSG_MOTD = 829,
        SMSG_MOVE_SET_CAN_FLY = 835,
        SMSG_MOVE_UNSET_CAN_FLY = 836,
        SMSG_ARENA_TEAM_COMMAND_RESULT = 841,
        SMSG_ARENA_TEAM_QUERY_RESPONSE = 844,
        SMSG_ARENA_TEAM_ROSTER = 846,
        SMSG_ARENA_TEAM_INVITE = 848,
        SMSG_ARENA_TEAM_EVENT = 855,
        MSG_MOVE_START_ASCEND = 857,
        MSG_MOVE_STOP_ASCEND = 858,
        SMSG_ARENA_TEAM_STATS = 859,
        SMSG_UPDATE_LFG_LIST = 864,
        SMSG_LFG_PROPOSAL_UPDATE = 865,
        SMSG_LFG_ROLE_CHECK_UPDATE = 867,
        SMSG_LFG_JOIN_RESULT = 868,
        SMSG_LFG_QUEUE_STATUS = 869,
        SMSG_LFG_UPDATE_PLAYER = 871,
        SMSG_LFG_UPDATE_PARTY = 872,
        SMSG_LFG_UPDATE_SEARCH = 873,
        SMSG_LFG_BOOT_PROPOSAL_UPDATE = 877,
        SMSG_LFG_PLAYER_INFO = 879,
        SMSG_LFG_PARTY_INFO = 882,
        SMSG_TITLE_EARNED = 883,
        SMSG_ARENA_ERROR = 886,
        MSG_INSPECT_ARENA_TEAMS = 887,
        SMSG_DEATH_RELEASE_LOC = 888,
        SMSG_FORCED_DEATH_UPDATE = 890,
        MSG_MOVE_SET_FLIGHT_SPEED = 894,
        MSG_MOVE_SET_FLIGHT_BACK_SPEED = 896,
        SMSG_FORCE_FLIGHT_SPEED_CHANGE = 897,
        SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE = 899,
        SMSG_SPLINE_SET_FLIGHT_SPEED = 901,
        SMSG_SPLINE_SET_FLIGHT_BACK_SPEED = 902,
        SMSG_FLIGHT_SPLINE_SYNC = 904,
        SMSG_REALM_SPLIT = 907,
        SMSG_TIME_SYNC_REQ = 912,
        SMSG_RESET_FAILED_NOTIFY = 918,
        SMSG_LFG_DISABLED = 920,
        SMSG_UPDATE_COMBO_POINTS = 925,
        MSG_MOVE_START_DESCEND = 935,
        SMSG_DISMOUNT = 940,
        MSG_MOVE_UPDATE_CAN_FLY = 941,
        MSG_RAID_READY_CHECK_CONFIRM = 942,
        SMSG_GM_MESSAGECHAT = 947,
        SMSG_CLEAR_TARGET = 959,
        SMSG_CROSSED_INEBRIATION_THRESHOLD = 961,
        SMSG_KICK_REASON = 965,
        SMSG_COMPLAIN_RESULT = 968,
        SMSG_FEATURE_SYSTEM_STATUS = 969,
        SMSG_CHANNEL_MEMBER_COUNT = 981,
        SMSG_GUILD_BANK_LIST = 1000,
        MSG_GUILD_BANK_LOG_QUERY = 1006,
        SMSG_USERLIST_ADD = 1008,
        SMSG_USERLIST_REMOVE = 1009,
        SMSG_USERLIST_UPDATE = 1010,
        SMSG_INSPECT_TALENT = 1012,
        SMSG_LOOT_LIST = 1017,
        MSG_GUILD_PERMISSIONS = 1021,
        MSG_GUILD_BANK_MONEY_WITHDRAWN = 1022,
        MSG_GUILD_EVENT_LOG_QUERY = 1023,
        SMSG_MIRRORIMAGE_DATA = 1026,
        MSG_QUERY_GUILD_BANK_TEXT = 1034,
        SMSG_OVERRIDE_LIGHT = 1042,
        SMSG_TOTEM_CREATED = 1043,
        SMSG_QUESTGIVER_STATUS_MULTIPLE = 1048,
        SMSG_SET_PLAYER_DECLINED_NAMES_RESULT = 1050,
        SMSG_SEND_UNLEARN_SPELLS = 1054,
        SMSG_PROPOSE_LEVEL_GRANT = 1055,
        SMSG_REFER_A_FRIEND_FAILURE = 1057,
        SMSG_SPLINE_MOVE_SET_FLYING = 1058,
        SMSG_SPLINE_MOVE_UNSET_FLYING = 1059,
        SMSG_ENABLE_BARBER_SHOP = 1063,
        SMSG_BARBER_SHOP_RESULT = 1064,
        SMSG_CALENDAR_SEND_CALENDAR = 1078,
        SMSG_CALENDAR_SEND_EVENT = 1079,
        SMSG_CALENDAR_FILTER_GUILD = 1080,
        SMSG_CALENDAR_ARENA_TEAM = 1081,
        SMSG_CALENDAR_EVENT_INVITE = 1082,
        SMSG_CALENDAR_EVENT_INVITE_REMOVED = 1083,
        SMSG_CALENDAR_EVENT_STATUS = 1084,
        SMSG_CALENDAR_COMMAND_RESULT = 1085,
        SMSG_CALENDAR_RAID_LOCKOUT_ADDED = 1086,
        SMSG_CALENDAR_RAID_LOCKOUT_REMOVED = 1087,
        SMSG_CALENDAR_EVENT_INVITE_ALERT = 1088,
        SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT = 1089,
        SMSG_CALENDAR_EVENT_REMOVED_ALERT = 1091,
        SMSG_CALENDAR_EVENT_UPDATED_ALERT = 1092,
        SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT = 1093,
        CMSG_CALENDAR_GET_NUM_PENDING = 1095,
        SMSG_CALENDAR_SEND_NUM_PENDING = 1096,
        MSG_MOVE_SET_PITCH_RATE = 1115,
        SMSG_FORCE_PITCH_RATE_CHANGE = 1116,
        SMSG_CALENDAR_EVENT_INVITE_NOTES = 1120,
        SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT = 1121,
        SMSG_UPDATE_ACCOUNT_DATA_COMPLETE = 1123,
        SMSG_TRIGGER_MOVIE = 1124,
        SMSG_ACHIEVEMENT_EARNED = 1128,
        SMSG_CRITERIA_UPDATE = 1130,
        SMSG_RESPOND_INSPECT_ACHIEVEMENTS = 1132,
        SMSG_QUESTUPDATE_ADD_PVP_KILL = 1135,
        SMSG_CALENDAR_RAID_LOCKOUT_UPDATED = 1137,
        SMSG_CHAR_CUSTOMIZE = 1140,
        SMSG_SET_PHASE_SHIFT = 1148,
        SMSG_ALL_ACHIEVEMENT_DATA = 1149,
        SMSG_POWER_UPDATE = 1152,
        SMSG_HIGHEST_THREAT_UPDATE = 1154,
        SMSG_THREAT_UPDATE = 1155,
        SMSG_THREAT_REMOVE = 1156,
        SMSG_THREAT_CLEAR = 1157,
        SMSG_CONVERT_RUNE = 1158,
        SMSG_RESYNC_RUNES = 1159,
        SMSG_ADD_RUNE_POWER = 1160,
        SMSG_AUCTION_LIST_PENDING_SALES = 1168,
        SMSG_MODIFY_COOLDOWN = 1169,
        SMSG_PET_UPDATE_COMBO_POINTS = 1170,
        SMSG_PRE_RESURRECT = 1172,
        SMSG_AURA_UPDATE_ALL = 1173,
        SMSG_AURA_UPDATE = 1174,
        SMSG_SERVER_FIRST_ACHIEVEMENT = 1176,
        SMSG_PET_LEARNED_SPELL = 1177,
        SMSG_PET_UNLEARNED_SPELL = 1178,
        SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA = 1181,
        SMSG_CRITERIA_DELETED = 1182,
        SMSG_ACHIEVEMENT_DELETED = 1183,
        SMSG_BATTLEGROUND_INFO_THROTTLED = 1190,
        SMSG_PLAYER_VEHICLE_DATA = 1191,
        SMSG_PET_GUIDS = 1194,
        SMSG_CLIENTCACHE_VERSION = 1195,
        SMSG_ITEM_REFUND_INFO_RESPONSE = 1202,
        SMSG_ITEM_REFUND_RESULT = 1205,
        SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE = 1207,
        SMSG_CALENDAR_CLEAR_PENDING_ACTION = 1211,
        SMSG_EQUIPMENT_SET_LIST = 1212,
        SMSG_SET_PROJECTILE_POSITION = 1215,
        SMSG_TALENTS_INFO = 1216,
        SMSG_ARENA_UNIT_DESTROYED = 1223,
        SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED = 1224,
        SMSG_MOVE_GRAVITY_DISABLE = 1230,
        SMSG_MOVE_GRAVITY_ENABLE = 1232,
        MSG_MOVE_GRAVITY_CHNG = 1234,
        SMSG_SPLINE_MOVE_GRAVITY_DISABLE = 1235,
        SMSG_SPLINE_MOVE_GRAVITY_ENABLE = 1236,
        SMSG_EQUIPMENT_SET_USE_RESULT = 1238,
        SMSG_CHAR_FACTION_CHANGE = 1242,
        SMSG_BATTLEFIELD_MGR_ENTRY_INVITE = 1246,
        SMSG_BATTLEFIELD_MGR_ENTERED = 1248,
        SMSG_BATTLEFIELD_MGR_QUEUE_INVITE = 1249,
        SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE = 1252,
        SMSG_BATTLEFIELD_MGR_EJECT_PENDING = 1253,
        SMSG_BATTLEFIELD_MGR_EJECTED = 1254,
        SMSG_BATTLEFIELD_MGR_STATE_CHANGE = 1256,
        MSG_SET_RAID_DIFFICULTY = 1259,
        SMSG_TOGGLE_XP_GAIN = 1261,
        SMSG_GMRESPONSE_DB_ERROR = 1262,
        SMSG_GMRESPONSE_RECEIVED = 1263,
        SMSG_GMRESPONSE_STATUS_UPDATE = 1265,
        SMSG_WORLD_STATE_UI_TIMER_UPDATE = 1271,
        SMSG_TALENTS_INVOLUNTARILY_RESET = 1274,
        SMSG_QUERY_QUESTS_COMPLETED_RESPONSE = 1281,
        SMSG_CORPSE_NOT_IN_INSTANCE = 1286,
        SMSG_CAMERA_SHAKE = 1290,
        SMSG_SOCKET_GEMS_RESULT = 1291,
        SMSG_REDIRECT_CLIENT = 1293,
        SMSG_MOVE_SET_COLLISION_HGT = 1302,
        SMSG_MULTIPLE_MOVES = 1310,
    } opcode;

    union {
        wrath::SMSG_CHAR_CREATE SMSG_CHAR_CREATE;
        wrath::SMSG_CHAR_ENUM SMSG_CHAR_ENUM;
        wrath::SMSG_CHAR_DELETE SMSG_CHAR_DELETE;
        wrath::SMSG_NEW_WORLD SMSG_NEW_WORLD;
        wrath::SMSG_TRANSFER_PENDING SMSG_TRANSFER_PENDING;
        wrath::SMSG_TRANSFER_ABORTED SMSG_TRANSFER_ABORTED;
        wrath::SMSG_CHARACTER_LOGIN_FAILED SMSG_CHARACTER_LOGIN_FAILED;
        wrath::SMSG_LOGIN_SETTIMESPEED SMSG_LOGIN_SETTIMESPEED;
        wrath::SMSG_LOGOUT_RESPONSE SMSG_LOGOUT_RESPONSE;
        wrath::SMSG_LOGOUT_COMPLETE SMSG_LOGOUT_COMPLETE;
        wrath::SMSG_LOGOUT_CANCEL_ACK SMSG_LOGOUT_CANCEL_ACK;
        wrath::SMSG_NAME_QUERY_RESPONSE SMSG_NAME_QUERY_RESPONSE;
        wrath::SMSG_PET_NAME_QUERY_RESPONSE SMSG_PET_NAME_QUERY_RESPONSE;
        wrath::SMSG_GUILD_QUERY_RESPONSE SMSG_GUILD_QUERY_RESPONSE;
        wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE SMSG_ITEM_QUERY_SINGLE_RESPONSE;
        wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE SMSG_PAGE_TEXT_QUERY_RESPONSE;
        wrath::SMSG_QUEST_QUERY_RESPONSE SMSG_QUEST_QUERY_RESPONSE;
        wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE SMSG_GAMEOBJECT_QUERY_RESPONSE;
        wrath::SMSG_CREATURE_QUERY_RESPONSE SMSG_CREATURE_QUERY_RESPONSE;
        wrath::SMSG_WHO SMSG_WHO;
        wrath::SMSG_WHOIS SMSG_WHOIS;
        wrath::SMSG_CONTACT_LIST SMSG_CONTACT_LIST;
        wrath::SMSG_FRIEND_STATUS SMSG_FRIEND_STATUS;
        wrath::SMSG_GROUP_INVITE SMSG_GROUP_INVITE;
        wrath::SMSG_GROUP_DECLINE SMSG_GROUP_DECLINE;
        wrath::SMSG_GROUP_UNINVITE SMSG_GROUP_UNINVITE;
        wrath::SMSG_GROUP_SET_LEADER SMSG_GROUP_SET_LEADER;
        wrath::SMSG_GROUP_DESTROYED SMSG_GROUP_DESTROYED;
        wrath::SMSG_GROUP_LIST SMSG_GROUP_LIST;
        wrath::SMSG_PARTY_MEMBER_STATS SMSG_PARTY_MEMBER_STATS;
        wrath::SMSG_PARTY_COMMAND_RESULT SMSG_PARTY_COMMAND_RESULT;
        wrath::SMSG_GUILD_INVITE SMSG_GUILD_INVITE;
        wrath::SMSG_GUILD_DECLINE SMSG_GUILD_DECLINE;
        wrath::SMSG_GUILD_INFO SMSG_GUILD_INFO;
        wrath::SMSG_GUILD_ROSTER SMSG_GUILD_ROSTER;
        wrath::SMSG_GUILD_EVENT SMSG_GUILD_EVENT;
        wrath::SMSG_GUILD_COMMAND_RESULT SMSG_GUILD_COMMAND_RESULT;
        wrath::SMSG_MESSAGECHAT SMSG_MESSAGECHAT;
        wrath::SMSG_CHANNEL_NOTIFY SMSG_CHANNEL_NOTIFY;
        wrath::SMSG_CHANNEL_LIST SMSG_CHANNEL_LIST;
        wrath::SMSG_UPDATE_OBJECT SMSG_UPDATE_OBJECT;
        wrath::SMSG_DESTROY_OBJECT SMSG_DESTROY_OBJECT;
        wrath::SMSG_READ_ITEM_OK SMSG_READ_ITEM_OK;
        wrath::SMSG_READ_ITEM_FAILED SMSG_READ_ITEM_FAILED;
        wrath::SMSG_ITEM_COOLDOWN SMSG_ITEM_COOLDOWN;
        wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM SMSG_GAMEOBJECT_CUSTOM_ANIM;
        wrath::MSG_MOVE_START_FORWARD MSG_MOVE_START_FORWARD;
        wrath::MSG_MOVE_START_BACKWARD MSG_MOVE_START_BACKWARD;
        wrath::MSG_MOVE_STOP MSG_MOVE_STOP;
        wrath::MSG_MOVE_START_STRAFE_LEFT MSG_MOVE_START_STRAFE_LEFT;
        wrath::MSG_MOVE_START_STRAFE_RIGHT MSG_MOVE_START_STRAFE_RIGHT;
        wrath::MSG_MOVE_STOP_STRAFE MSG_MOVE_STOP_STRAFE;
        wrath::MSG_MOVE_JUMP MSG_MOVE_JUMP;
        wrath::MSG_MOVE_START_TURN_LEFT MSG_MOVE_START_TURN_LEFT;
        wrath::MSG_MOVE_START_TURN_RIGHT MSG_MOVE_START_TURN_RIGHT;
        wrath::MSG_MOVE_STOP_TURN MSG_MOVE_STOP_TURN;
        wrath::MSG_MOVE_START_PITCH_UP MSG_MOVE_START_PITCH_UP;
        wrath::MSG_MOVE_START_PITCH_DOWN MSG_MOVE_START_PITCH_DOWN;
        wrath::MSG_MOVE_STOP_PITCH MSG_MOVE_STOP_PITCH;
        wrath::MSG_MOVE_SET_RUN_MODE MSG_MOVE_SET_RUN_MODE;
        wrath::MSG_MOVE_SET_WALK_MODE MSG_MOVE_SET_WALK_MODE;
        wrath::MSG_MOVE_TELEPORT_CHEAT_Server MSG_MOVE_TELEPORT_CHEAT;
        wrath::MSG_MOVE_TELEPORT_ACK_Server MSG_MOVE_TELEPORT_ACK;
        wrath::MSG_MOVE_FALL_LAND MSG_MOVE_FALL_LAND;
        wrath::MSG_MOVE_START_SWIM MSG_MOVE_START_SWIM;
        wrath::MSG_MOVE_STOP_SWIM MSG_MOVE_STOP_SWIM;
        wrath::MSG_MOVE_SET_FACING MSG_MOVE_SET_FACING;
        wrath::MSG_MOVE_SET_PITCH MSG_MOVE_SET_PITCH;
        wrath::MSG_MOVE_WORLDPORT_ACK MSG_MOVE_WORLDPORT_ACK;
        wrath::SMSG_MONSTER_MOVE SMSG_MONSTER_MOVE;
        wrath::SMSG_MOVE_WATER_WALK SMSG_MOVE_WATER_WALK;
        wrath::SMSG_MOVE_LAND_WALK SMSG_MOVE_LAND_WALK;
        wrath::SMSG_FORCE_RUN_SPEED_CHANGE SMSG_FORCE_RUN_SPEED_CHANGE;
        wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE SMSG_FORCE_RUN_BACK_SPEED_CHANGE;
        wrath::SMSG_FORCE_SWIM_SPEED_CHANGE SMSG_FORCE_SWIM_SPEED_CHANGE;
        wrath::SMSG_FORCE_MOVE_ROOT SMSG_FORCE_MOVE_ROOT;
        wrath::SMSG_FORCE_MOVE_UNROOT SMSG_FORCE_MOVE_UNROOT;
        wrath::MSG_MOVE_ROOT_Server MSG_MOVE_ROOT;
        wrath::MSG_MOVE_UNROOT_Server MSG_MOVE_UNROOT;
        wrath::MSG_MOVE_HEARTBEAT MSG_MOVE_HEARTBEAT;
        wrath::SMSG_MOVE_KNOCK_BACK SMSG_MOVE_KNOCK_BACK;
        wrath::MSG_MOVE_KNOCK_BACK_Server MSG_MOVE_KNOCK_BACK;
        wrath::SMSG_MOVE_FEATHER_FALL SMSG_MOVE_FEATHER_FALL;
        wrath::SMSG_MOVE_NORMAL_FALL SMSG_MOVE_NORMAL_FALL;
        wrath::SMSG_MOVE_SET_HOVER SMSG_MOVE_SET_HOVER;
        wrath::SMSG_MOVE_UNSET_HOVER SMSG_MOVE_UNSET_HOVER;
        wrath::MSG_MOVE_HOVER MSG_MOVE_HOVER;
        wrath::SMSG_TRIGGER_CINEMATIC SMSG_TRIGGER_CINEMATIC;
        wrath::SMSG_TUTORIAL_FLAGS SMSG_TUTORIAL_FLAGS;
        wrath::SMSG_EMOTE SMSG_EMOTE;
        wrath::SMSG_TEXT_EMOTE SMSG_TEXT_EMOTE;
        wrath::SMSG_INVENTORY_CHANGE_FAILURE SMSG_INVENTORY_CHANGE_FAILURE;
        wrath::SMSG_TRADE_STATUS SMSG_TRADE_STATUS;
        wrath::SMSG_TRADE_STATUS_EXTENDED SMSG_TRADE_STATUS_EXTENDED;
        wrath::SMSG_INITIALIZE_FACTIONS SMSG_INITIALIZE_FACTIONS;
        wrath::SMSG_SET_FACTION_VISIBLE SMSG_SET_FACTION_VISIBLE;
        wrath::SMSG_SET_FACTION_STANDING SMSG_SET_FACTION_STANDING;
        wrath::SMSG_SET_PROFICIENCY SMSG_SET_PROFICIENCY;
        wrath::SMSG_ACTION_BUTTONS SMSG_ACTION_BUTTONS;
        wrath::SMSG_INITIAL_SPELLS SMSG_INITIAL_SPELLS;
        wrath::SMSG_LEARNED_SPELL SMSG_LEARNED_SPELL;
        wrath::SMSG_SUPERCEDED_SPELL SMSG_SUPERCEDED_SPELL;
        wrath::SMSG_CAST_FAILED SMSG_CAST_FAILED;
        wrath::SMSG_SPELL_START SMSG_SPELL_START;
        wrath::SMSG_SPELL_GO SMSG_SPELL_GO;
        wrath::SMSG_SPELL_FAILURE SMSG_SPELL_FAILURE;
        wrath::SMSG_SPELL_COOLDOWN SMSG_SPELL_COOLDOWN;
        wrath::SMSG_COOLDOWN_EVENT SMSG_COOLDOWN_EVENT;
        wrath::SMSG_PET_CAST_FAILED SMSG_PET_CAST_FAILED;
        wrath::MSG_CHANNEL_START_Server MSG_CHANNEL_START;
        wrath::MSG_CHANNEL_UPDATE_Server MSG_CHANNEL_UPDATE;
        wrath::SMSG_AI_REACTION SMSG_AI_REACTION;
        wrath::SMSG_ATTACKSTART SMSG_ATTACKSTART;
        wrath::SMSG_ATTACKSTOP SMSG_ATTACKSTOP;
        wrath::SMSG_ATTACKSWING_NOTINRANGE SMSG_ATTACKSWING_NOTINRANGE;
        wrath::SMSG_ATTACKSWING_BADFACING SMSG_ATTACKSWING_BADFACING;
        wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY SMSG_INSTANCE_LOCK_WARNING_QUERY;
        wrath::SMSG_ATTACKSWING_DEADTARGET SMSG_ATTACKSWING_DEADTARGET;
        wrath::SMSG_ATTACKSWING_CANT_ATTACK SMSG_ATTACKSWING_CANT_ATTACK;
        wrath::SMSG_ATTACKERSTATEUPDATE SMSG_ATTACKERSTATEUPDATE;
        wrath::SMSG_CANCEL_COMBAT SMSG_CANCEL_COMBAT;
        wrath::SMSG_SPELLHEALLOG SMSG_SPELLHEALLOG;
        wrath::SMSG_SPELLENERGIZELOG SMSG_SPELLENERGIZELOG;
        wrath::SMSG_BREAK_TARGET SMSG_BREAK_TARGET;
        wrath::SMSG_BINDPOINTUPDATE SMSG_BINDPOINTUPDATE;
        wrath::SMSG_PLAYERBOUND SMSG_PLAYERBOUND;
        wrath::SMSG_CLIENT_CONTROL_UPDATE SMSG_CLIENT_CONTROL_UPDATE;
        wrath::SMSG_RESURRECT_REQUEST SMSG_RESURRECT_REQUEST;
        wrath::SMSG_LOOT_RESPONSE SMSG_LOOT_RESPONSE;
        wrath::SMSG_LOOT_RELEASE_RESPONSE SMSG_LOOT_RELEASE_RESPONSE;
        wrath::SMSG_LOOT_REMOVED SMSG_LOOT_REMOVED;
        wrath::SMSG_LOOT_MONEY_NOTIFY SMSG_LOOT_MONEY_NOTIFY;
        wrath::SMSG_LOOT_CLEAR_MONEY SMSG_LOOT_CLEAR_MONEY;
        wrath::SMSG_ITEM_PUSH_RESULT SMSG_ITEM_PUSH_RESULT;
        wrath::SMSG_DUEL_REQUESTED SMSG_DUEL_REQUESTED;
        wrath::SMSG_DUEL_OUTOFBOUNDS SMSG_DUEL_OUTOFBOUNDS;
        wrath::SMSG_DUEL_INBOUNDS SMSG_DUEL_INBOUNDS;
        wrath::SMSG_DUEL_COMPLETE SMSG_DUEL_COMPLETE;
        wrath::SMSG_DUEL_WINNER SMSG_DUEL_WINNER;
        wrath::SMSG_MOUNTRESULT SMSG_MOUNTRESULT;
        wrath::SMSG_MOUNTSPECIAL_ANIM SMSG_MOUNTSPECIAL_ANIM;
        wrath::SMSG_PET_TAME_FAILURE SMSG_PET_TAME_FAILURE;
        wrath::SMSG_PET_NAME_INVALID SMSG_PET_NAME_INVALID;
        wrath::SMSG_PET_SPELLS SMSG_PET_SPELLS;
        wrath::SMSG_PET_MODE SMSG_PET_MODE;
        wrath::SMSG_GOSSIP_MESSAGE SMSG_GOSSIP_MESSAGE;
        wrath::SMSG_GOSSIP_COMPLETE SMSG_GOSSIP_COMPLETE;
        wrath::SMSG_NPC_TEXT_UPDATE SMSG_NPC_TEXT_UPDATE;
        wrath::SMSG_QUESTGIVER_STATUS SMSG_QUESTGIVER_STATUS;
        wrath::SMSG_QUESTGIVER_QUEST_LIST SMSG_QUESTGIVER_QUEST_LIST;
        wrath::SMSG_QUESTGIVER_QUEST_DETAILS SMSG_QUESTGIVER_QUEST_DETAILS;
        wrath::SMSG_QUESTGIVER_REQUEST_ITEMS SMSG_QUESTGIVER_REQUEST_ITEMS;
        wrath::SMSG_QUESTGIVER_OFFER_REWARD SMSG_QUESTGIVER_OFFER_REWARD;
        wrath::SMSG_QUESTGIVER_QUEST_INVALID SMSG_QUESTGIVER_QUEST_INVALID;
        wrath::SMSG_QUESTGIVER_QUEST_COMPLETE SMSG_QUESTGIVER_QUEST_COMPLETE;
        wrath::SMSG_QUESTGIVER_QUEST_FAILED SMSG_QUESTGIVER_QUEST_FAILED;
        wrath::SMSG_QUESTLOG_FULL SMSG_QUESTLOG_FULL;
        wrath::SMSG_QUESTUPDATE_FAILED SMSG_QUESTUPDATE_FAILED;
        wrath::SMSG_QUESTUPDATE_FAILEDTIMER SMSG_QUESTUPDATE_FAILEDTIMER;
        wrath::SMSG_QUESTUPDATE_COMPLETE SMSG_QUESTUPDATE_COMPLETE;
        wrath::SMSG_QUESTUPDATE_ADD_KILL SMSG_QUESTUPDATE_ADD_KILL;
        wrath::SMSG_QUESTUPDATE_ADD_ITEM SMSG_QUESTUPDATE_ADD_ITEM;
        wrath::SMSG_QUEST_CONFIRM_ACCEPT SMSG_QUEST_CONFIRM_ACCEPT;
        wrath::SMSG_LIST_INVENTORY SMSG_LIST_INVENTORY;
        wrath::SMSG_SELL_ITEM SMSG_SELL_ITEM;
        wrath::SMSG_BUY_ITEM SMSG_BUY_ITEM;
        wrath::SMSG_BUY_FAILED SMSG_BUY_FAILED;
        wrath::SMSG_SHOWTAXINODES SMSG_SHOWTAXINODES;
        wrath::SMSG_TAXINODE_STATUS SMSG_TAXINODE_STATUS;
        wrath::SMSG_ACTIVATETAXIREPLY SMSG_ACTIVATETAXIREPLY;
        wrath::SMSG_NEW_TAXI_PATH SMSG_NEW_TAXI_PATH;
        wrath::SMSG_TRAINER_LIST SMSG_TRAINER_LIST;
        wrath::SMSG_TRAINER_BUY_SUCCEEDED SMSG_TRAINER_BUY_SUCCEEDED;
        wrath::SMSG_TRAINER_BUY_FAILED SMSG_TRAINER_BUY_FAILED;
        wrath::SMSG_SHOW_BANK SMSG_SHOW_BANK;
        wrath::SMSG_BUY_BANK_SLOT_RESULT SMSG_BUY_BANK_SLOT_RESULT;
        wrath::SMSG_PETITION_SHOWLIST SMSG_PETITION_SHOWLIST;
        wrath::SMSG_PETITION_SHOW_SIGNATURES SMSG_PETITION_SHOW_SIGNATURES;
        wrath::SMSG_PETITION_SIGN_RESULTS SMSG_PETITION_SIGN_RESULTS;
        wrath::MSG_PETITION_DECLINE MSG_PETITION_DECLINE;
        wrath::SMSG_TURN_IN_PETITION_RESULTS SMSG_TURN_IN_PETITION_RESULTS;
        wrath::SMSG_PETITION_QUERY_RESPONSE SMSG_PETITION_QUERY_RESPONSE;
        wrath::SMSG_FISH_NOT_HOOKED SMSG_FISH_NOT_HOOKED;
        wrath::SMSG_FISH_ESCAPED SMSG_FISH_ESCAPED;
        wrath::SMSG_NOTIFICATION SMSG_NOTIFICATION;
        wrath::SMSG_PLAYED_TIME SMSG_PLAYED_TIME;
        wrath::SMSG_QUERY_TIME_RESPONSE SMSG_QUERY_TIME_RESPONSE;
        wrath::SMSG_LOG_XPGAIN SMSG_LOG_XPGAIN;
        wrath::SMSG_LEVELUP_INFO SMSG_LEVELUP_INFO;
        wrath::MSG_MINIMAP_PING_Server MSG_MINIMAP_PING;
        wrath::SMSG_ENCHANTMENTLOG SMSG_ENCHANTMENTLOG;
        wrath::SMSG_START_MIRROR_TIMER SMSG_START_MIRROR_TIMER;
        wrath::SMSG_PAUSE_MIRROR_TIMER SMSG_PAUSE_MIRROR_TIMER;
        wrath::SMSG_STOP_MIRROR_TIMER SMSG_STOP_MIRROR_TIMER;
        wrath::SMSG_PONG SMSG_PONG;
        wrath::SMSG_CLEAR_COOLDOWN SMSG_CLEAR_COOLDOWN;
        wrath::SMSG_GAMEOBJECT_PAGETEXT SMSG_GAMEOBJECT_PAGETEXT;
        wrath::SMSG_SPELL_DELAYED SMSG_SPELL_DELAYED;
        wrath::SMSG_QUEST_POI_QUERY_RESPONSE SMSG_QUEST_POI_QUERY_RESPONSE;
        wrath::SMSG_ITEM_TIME_UPDATE SMSG_ITEM_TIME_UPDATE;
        wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE SMSG_ITEM_ENCHANT_TIME_UPDATE;
        wrath::SMSG_AUTH_CHALLENGE SMSG_AUTH_CHALLENGE;
        wrath::SMSG_AUTH_RESPONSE SMSG_AUTH_RESPONSE;
        wrath::MSG_SAVE_GUILD_EMBLEM_Server MSG_SAVE_GUILD_EMBLEM;
        wrath::MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATE;
        wrath::SMSG_PLAY_SPELL_VISUAL SMSG_PLAY_SPELL_VISUAL;
        wrath::SMSG_PARTYKILLLOG SMSG_PARTYKILLLOG;
        wrath::SMSG_COMPRESSED_UPDATE_OBJECT SMSG_COMPRESSED_UPDATE_OBJECT;
        wrath::SMSG_PLAY_SPELL_IMPACT SMSG_PLAY_SPELL_IMPACT;
        wrath::SMSG_EXPLORATION_EXPERIENCE SMSG_EXPLORATION_EXPERIENCE;
        wrath::MSG_RANDOM_ROLL_Server MSG_RANDOM_ROLL;
        wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG SMSG_ENVIRONMENTAL_DAMAGE_LOG;
        wrath::SMSG_LFG_PLAYER_REWARD SMSG_LFG_PLAYER_REWARD;
        wrath::SMSG_LFG_TELEPORT_DENIED SMSG_LFG_TELEPORT_DENIED;
        wrath::SMSG_REMOVED_SPELL SMSG_REMOVED_SPELL;
        wrath::SMSG_GMTICKET_CREATE SMSG_GMTICKET_CREATE;
        wrath::SMSG_GMTICKET_UPDATETEXT SMSG_GMTICKET_UPDATETEXT;
        wrath::SMSG_ACCOUNT_DATA_TIMES SMSG_ACCOUNT_DATA_TIMES;
        wrath::SMSG_UPDATE_ACCOUNT_DATA SMSG_UPDATE_ACCOUNT_DATA;
        wrath::SMSG_GMTICKET_GETTICKET SMSG_GMTICKET_GETTICKET;
        wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT;
        wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM SMSG_GAMEOBJECT_DESPAWN_ANIM;
        wrath::MSG_CORPSE_QUERY_Server MSG_CORPSE_QUERY;
        wrath::SMSG_GMTICKET_DELETETICKET SMSG_GMTICKET_DELETETICKET;
        wrath::SMSG_CHAT_WRONG_FACTION SMSG_CHAT_WRONG_FACTION;
        wrath::SMSG_GMTICKET_SYSTEMSTATUS SMSG_GMTICKET_SYSTEMSTATUS;
        wrath::SMSG_QUEST_FORCE_REMOVE SMSG_QUEST_FORCE_REMOVE;
        wrath::SMSG_SPIRIT_HEALER_CONFIRM SMSG_SPIRIT_HEALER_CONFIRM;
        wrath::SMSG_GOSSIP_POI SMSG_GOSSIP_POI;
        wrath::SMSG_LOGIN_VERIFY_WORLD SMSG_LOGIN_VERIFY_WORLD;
        wrath::SMSG_SEND_MAIL_RESULT SMSG_SEND_MAIL_RESULT;
        wrath::SMSG_MAIL_LIST_RESULT SMSG_MAIL_LIST_RESULT;
        wrath::SMSG_BATTLEFIELD_LIST SMSG_BATTLEFIELD_LIST;
        wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE SMSG_ITEM_TEXT_QUERY_RESPONSE;
        wrath::SMSG_SPELLLOGMISS SMSG_SPELLLOGMISS;
        wrath::SMSG_SPELLLOGEXECUTE SMSG_SPELLLOGEXECUTE;
        wrath::SMSG_PERIODICAURALOG SMSG_PERIODICAURALOG;
        wrath::SMSG_SPELLDAMAGESHIELD SMSG_SPELLDAMAGESHIELD;
        wrath::SMSG_SPELLNONMELEEDAMAGELOG SMSG_SPELLNONMELEEDAMAGELOG;
        wrath::SMSG_RESURRECT_FAILED SMSG_RESURRECT_FAILED;
        wrath::SMSG_ZONE_UNDER_ATTACK SMSG_ZONE_UNDER_ATTACK;
        wrath::MSG_AUCTION_HELLO_Server MSG_AUCTION_HELLO;
        wrath::SMSG_AUCTION_COMMAND_RESULT SMSG_AUCTION_COMMAND_RESULT;
        wrath::SMSG_AUCTION_LIST_RESULT SMSG_AUCTION_LIST_RESULT;
        wrath::SMSG_AUCTION_OWNER_LIST_RESULT SMSG_AUCTION_OWNER_LIST_RESULT;
        wrath::SMSG_AUCTION_BIDDER_NOTIFICATION SMSG_AUCTION_BIDDER_NOTIFICATION;
        wrath::SMSG_AUCTION_OWNER_NOTIFICATION SMSG_AUCTION_OWNER_NOTIFICATION;
        wrath::SMSG_PROCRESIST SMSG_PROCRESIST;
        wrath::SMSG_DISPEL_FAILED SMSG_DISPEL_FAILED;
        wrath::SMSG_SPELLORDAMAGE_IMMUNE SMSG_SPELLORDAMAGE_IMMUNE;
        wrath::SMSG_AUCTION_BIDDER_LIST_RESULT SMSG_AUCTION_BIDDER_LIST_RESULT;
        wrath::SMSG_SET_FLAT_SPELL_MODIFIER SMSG_SET_FLAT_SPELL_MODIFIER;
        wrath::SMSG_SET_PCT_SPELL_MODIFIER SMSG_SET_PCT_SPELL_MODIFIER;
        wrath::SMSG_CORPSE_RECLAIM_DELAY SMSG_CORPSE_RECLAIM_DELAY;
        wrath::MSG_LIST_STABLED_PETS_Server MSG_LIST_STABLED_PETS;
        wrath::SMSG_STABLE_RESULT SMSG_STABLE_RESULT;
        wrath::MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULT;
        wrath::SMSG_PLAY_MUSIC SMSG_PLAY_MUSIC;
        wrath::SMSG_PLAY_OBJECT_SOUND SMSG_PLAY_OBJECT_SOUND;
        wrath::SMSG_SPELLDISPELLOG SMSG_SPELLDISPELLOG;
        wrath::MSG_QUERY_NEXT_MAIL_TIME_Server MSG_QUERY_NEXT_MAIL_TIME;
        wrath::SMSG_RECEIVED_MAIL SMSG_RECEIVED_MAIL;
        wrath::SMSG_RAID_GROUP_ONLY SMSG_RAID_GROUP_ONLY;
        wrath::SMSG_PVP_CREDIT SMSG_PVP_CREDIT;
        wrath::SMSG_AUCTION_REMOVED_NOTIFICATION SMSG_AUCTION_REMOVED_NOTIFICATION;
        wrath::SMSG_SERVER_MESSAGE SMSG_SERVER_MESSAGE;
        wrath::SMSG_LFG_OFFER_CONTINUE SMSG_LFG_OFFER_CONTINUE;
        wrath::SMSG_SHOW_MAILBOX SMSG_SHOW_MAILBOX;
        wrath::SMSG_CANCEL_AUTO_REPEAT SMSG_CANCEL_AUTO_REPEAT;
        wrath::SMSG_STANDSTATE_UPDATE SMSG_STANDSTATE_UPDATE;
        wrath::SMSG_LOOT_ALL_PASSED SMSG_LOOT_ALL_PASSED;
        wrath::SMSG_LOOT_ROLL_WON SMSG_LOOT_ROLL_WON;
        wrath::SMSG_LOOT_START_ROLL SMSG_LOOT_START_ROLL;
        wrath::SMSG_LOOT_ROLL SMSG_LOOT_ROLL;
        wrath::SMSG_LOOT_MASTER_LIST SMSG_LOOT_MASTER_LIST;
        wrath::SMSG_SET_FORCED_REACTIONS SMSG_SET_FORCED_REACTIONS;
        wrath::SMSG_SPELL_FAILED_OTHER SMSG_SPELL_FAILED_OTHER;
        wrath::SMSG_CHAT_PLAYER_NOT_FOUND SMSG_CHAT_PLAYER_NOT_FOUND;
        wrath::MSG_TALENT_WIPE_CONFIRM_Server MSG_TALENT_WIPE_CONFIRM;
        wrath::SMSG_SUMMON_REQUEST SMSG_SUMMON_REQUEST;
        wrath::SMSG_MONSTER_MOVE_TRANSPORT SMSG_MONSTER_MOVE_TRANSPORT;
        wrath::SMSG_PET_BROKEN SMSG_PET_BROKEN;
        wrath::MSG_MOVE_FEATHER_FALL_Server MSG_MOVE_FEATHER_FALL;
        wrath::MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALK;
        wrath::SMSG_FEIGN_DEATH_RESISTED SMSG_FEIGN_DEATH_RESISTED;
        wrath::SMSG_DUEL_COUNTDOWN SMSG_DUEL_COUNTDOWN;
        wrath::SMSG_AREA_TRIGGER_MESSAGE SMSG_AREA_TRIGGER_MESSAGE;
        wrath::SMSG_LFG_ROLE_CHOSEN SMSG_LFG_ROLE_CHOSEN;
        wrath::SMSG_PLAYER_SKINNED SMSG_PLAYER_SKINNED;
        wrath::SMSG_DURABILITY_DAMAGE_DEATH SMSG_DURABILITY_DAMAGE_DEATH;
        wrath::MSG_PETITION_RENAME MSG_PETITION_RENAME;
        wrath::SMSG_INIT_WORLD_STATES SMSG_INIT_WORLD_STATES;
        wrath::SMSG_UPDATE_WORLD_STATE SMSG_UPDATE_WORLD_STATE;
        wrath::SMSG_ITEM_NAME_QUERY_RESPONSE SMSG_ITEM_NAME_QUERY_RESPONSE;
        wrath::SMSG_PET_ACTION_FEEDBACK SMSG_PET_ACTION_FEEDBACK;
        wrath::SMSG_CHAR_RENAME SMSG_CHAR_RENAME;
        wrath::SMSG_INSTANCE_SAVE_CREATED SMSG_INSTANCE_SAVE_CREATED;
        wrath::SMSG_RAID_INSTANCE_INFO SMSG_RAID_INSTANCE_INFO;
        wrath::SMSG_PLAY_SOUND SMSG_PLAY_SOUND;
        wrath::SMSG_BATTLEFIELD_STATUS SMSG_BATTLEFIELD_STATUS;
        wrath::MSG_INSPECT_HONOR_STATS_Server MSG_INSPECT_HONOR_STATS;
        wrath::SMSG_FORCE_WALK_SPEED_CHANGE SMSG_FORCE_WALK_SPEED_CHANGE;
        wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE SMSG_FORCE_SWIM_BACK_SPEED_CHANGE;
        wrath::SMSG_FORCE_TURN_RATE_CHANGE SMSG_FORCE_TURN_RATE_CHANGE;
        wrath::SMSG_AREA_SPIRIT_HEALER_TIME SMSG_AREA_SPIRIT_HEALER_TIME;
        wrath::SMSG_WARDEN_DATA SMSG_WARDEN_DATA;
        wrath::SMSG_GROUP_JOINED_BATTLEGROUND SMSG_GROUP_JOINED_BATTLEGROUND;
        wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server MSG_BATTLEGROUND_PLAYER_POSITIONS;
        wrath::SMSG_BINDER_CONFIRM SMSG_BINDER_CONFIRM;
        wrath::SMSG_BATTLEGROUND_PLAYER_JOINED SMSG_BATTLEGROUND_PLAYER_JOINED;
        wrath::SMSG_BATTLEGROUND_PLAYER_LEFT SMSG_BATTLEGROUND_PLAYER_LEFT;
        wrath::SMSG_ADDON_INFO SMSG_ADDON_INFO;
        wrath::SMSG_PET_UNLEARN_CONFIRM SMSG_PET_UNLEARN_CONFIRM;
        wrath::SMSG_PARTY_MEMBER_STATS_FULL SMSG_PARTY_MEMBER_STATS_FULL;
        wrath::SMSG_WEATHER SMSG_WEATHER;
        wrath::SMSG_RAID_INSTANCE_MESSAGE SMSG_RAID_INSTANCE_MESSAGE;
        wrath::SMSG_COMPRESSED_MOVES SMSG_COMPRESSED_MOVES;
        wrath::SMSG_CHAT_RESTRICTED SMSG_CHAT_RESTRICTED;
        wrath::SMSG_SPLINE_SET_RUN_SPEED SMSG_SPLINE_SET_RUN_SPEED;
        wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED SMSG_SPLINE_SET_RUN_BACK_SPEED;
        wrath::SMSG_SPLINE_SET_SWIM_SPEED SMSG_SPLINE_SET_SWIM_SPEED;
        wrath::SMSG_SPLINE_SET_WALK_SPEED SMSG_SPLINE_SET_WALK_SPEED;
        wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED SMSG_SPLINE_SET_SWIM_BACK_SPEED;
        wrath::SMSG_SPLINE_SET_TURN_RATE SMSG_SPLINE_SET_TURN_RATE;
        wrath::SMSG_SPLINE_MOVE_UNROOT SMSG_SPLINE_MOVE_UNROOT;
        wrath::SMSG_SPLINE_MOVE_FEATHER_FALL SMSG_SPLINE_MOVE_FEATHER_FALL;
        wrath::SMSG_SPLINE_MOVE_NORMAL_FALL SMSG_SPLINE_MOVE_NORMAL_FALL;
        wrath::SMSG_SPLINE_MOVE_SET_HOVER SMSG_SPLINE_MOVE_SET_HOVER;
        wrath::SMSG_SPLINE_MOVE_UNSET_HOVER SMSG_SPLINE_MOVE_UNSET_HOVER;
        wrath::SMSG_SPLINE_MOVE_WATER_WALK SMSG_SPLINE_MOVE_WATER_WALK;
        wrath::SMSG_SPLINE_MOVE_LAND_WALK SMSG_SPLINE_MOVE_LAND_WALK;
        wrath::SMSG_SPLINE_MOVE_START_SWIM SMSG_SPLINE_MOVE_START_SWIM;
        wrath::SMSG_SPLINE_MOVE_STOP_SWIM SMSG_SPLINE_MOVE_STOP_SWIM;
        wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE SMSG_SPLINE_MOVE_SET_RUN_MODE;
        wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE SMSG_SPLINE_MOVE_SET_WALK_MODE;
        wrath::MSG_MOVE_TIME_SKIPPED_Server MSG_MOVE_TIME_SKIPPED;
        wrath::SMSG_SPLINE_MOVE_ROOT SMSG_SPLINE_MOVE_ROOT;
        wrath::SMSG_INVALIDATE_PLAYER SMSG_INVALIDATE_PLAYER;
        wrath::SMSG_INSTANCE_RESET SMSG_INSTANCE_RESET;
        wrath::SMSG_INSTANCE_RESET_FAILED SMSG_INSTANCE_RESET_FAILED;
        wrath::SMSG_UPDATE_LAST_INSTANCE SMSG_UPDATE_LAST_INSTANCE;
        wrath::MSG_RAID_TARGET_UPDATE_Server MSG_RAID_TARGET_UPDATE;
        wrath::MSG_RAID_READY_CHECK_Server MSG_RAID_READY_CHECK;
        wrath::SMSG_PET_ACTION_SOUND SMSG_PET_ACTION_SOUND;
        wrath::SMSG_PET_DISMISS_SOUND SMSG_PET_DISMISS_SOUND;
        wrath::SMSG_GM_TICKET_STATUS_UPDATE SMSG_GM_TICKET_STATUS_UPDATE;
        wrath::MSG_SET_DUNGEON_DIFFICULTY_Server MSG_SET_DUNGEON_DIFFICULTY;
        wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP SMSG_UPDATE_INSTANCE_OWNERSHIP;
        wrath::SMSG_CHAT_PLAYER_AMBIGUOUS SMSG_CHAT_PLAYER_AMBIGUOUS;
        wrath::SMSG_SPELLINSTAKILLLOG SMSG_SPELLINSTAKILLLOG;
        wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS SMSG_SPELL_UPDATE_CHAIN_TARGETS;
        wrath::SMSG_SPELLSTEALLOG SMSG_SPELLSTEALLOG;
        wrath::SMSG_DEFENSE_MESSAGE SMSG_DEFENSE_MESSAGE;
        wrath::SMSG_INSTANCE_DIFFICULTY SMSG_INSTANCE_DIFFICULTY;
        wrath::SMSG_MOTD SMSG_MOTD;
        wrath::SMSG_MOVE_SET_CAN_FLY SMSG_MOVE_SET_CAN_FLY;
        wrath::SMSG_MOVE_UNSET_CAN_FLY SMSG_MOVE_UNSET_CAN_FLY;
        wrath::SMSG_ARENA_TEAM_COMMAND_RESULT SMSG_ARENA_TEAM_COMMAND_RESULT;
        wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE SMSG_ARENA_TEAM_QUERY_RESPONSE;
        wrath::SMSG_ARENA_TEAM_ROSTER SMSG_ARENA_TEAM_ROSTER;
        wrath::SMSG_ARENA_TEAM_INVITE SMSG_ARENA_TEAM_INVITE;
        wrath::SMSG_ARENA_TEAM_EVENT SMSG_ARENA_TEAM_EVENT;
        wrath::MSG_MOVE_START_ASCEND MSG_MOVE_START_ASCEND;
        wrath::MSG_MOVE_STOP_ASCEND MSG_MOVE_STOP_ASCEND;
        wrath::SMSG_ARENA_TEAM_STATS SMSG_ARENA_TEAM_STATS;
        wrath::SMSG_UPDATE_LFG_LIST SMSG_UPDATE_LFG_LIST;
        wrath::SMSG_LFG_PROPOSAL_UPDATE SMSG_LFG_PROPOSAL_UPDATE;
        wrath::SMSG_LFG_ROLE_CHECK_UPDATE SMSG_LFG_ROLE_CHECK_UPDATE;
        wrath::SMSG_LFG_JOIN_RESULT SMSG_LFG_JOIN_RESULT;
        wrath::SMSG_LFG_QUEUE_STATUS SMSG_LFG_QUEUE_STATUS;
        wrath::SMSG_LFG_UPDATE_PLAYER SMSG_LFG_UPDATE_PLAYER;
        wrath::SMSG_LFG_UPDATE_PARTY SMSG_LFG_UPDATE_PARTY;
        wrath::SMSG_LFG_UPDATE_SEARCH SMSG_LFG_UPDATE_SEARCH;
        wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE SMSG_LFG_BOOT_PROPOSAL_UPDATE;
        wrath::SMSG_LFG_PLAYER_INFO SMSG_LFG_PLAYER_INFO;
        wrath::SMSG_LFG_PARTY_INFO SMSG_LFG_PARTY_INFO;
        wrath::SMSG_TITLE_EARNED SMSG_TITLE_EARNED;
        wrath::SMSG_ARENA_ERROR SMSG_ARENA_ERROR;
        wrath::MSG_INSPECT_ARENA_TEAMS_Server MSG_INSPECT_ARENA_TEAMS;
        wrath::SMSG_DEATH_RELEASE_LOC SMSG_DEATH_RELEASE_LOC;
        wrath::SMSG_FORCED_DEATH_UPDATE SMSG_FORCED_DEATH_UPDATE;
        wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server MSG_MOVE_SET_FLIGHT_SPEED;
        wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED MSG_MOVE_SET_FLIGHT_BACK_SPEED;
        wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE SMSG_FORCE_FLIGHT_SPEED_CHANGE;
        wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE;
        wrath::SMSG_SPLINE_SET_FLIGHT_SPEED SMSG_SPLINE_SET_FLIGHT_SPEED;
        wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED SMSG_SPLINE_SET_FLIGHT_BACK_SPEED;
        wrath::SMSG_FLIGHT_SPLINE_SYNC SMSG_FLIGHT_SPLINE_SYNC;
        wrath::SMSG_REALM_SPLIT SMSG_REALM_SPLIT;
        wrath::SMSG_TIME_SYNC_REQ SMSG_TIME_SYNC_REQ;
        wrath::SMSG_RESET_FAILED_NOTIFY SMSG_RESET_FAILED_NOTIFY;
        wrath::SMSG_LFG_DISABLED SMSG_LFG_DISABLED;
        wrath::SMSG_UPDATE_COMBO_POINTS SMSG_UPDATE_COMBO_POINTS;
        wrath::MSG_MOVE_START_DESCEND MSG_MOVE_START_DESCEND;
        wrath::SMSG_DISMOUNT SMSG_DISMOUNT;
        wrath::MSG_MOVE_UPDATE_CAN_FLY_Server MSG_MOVE_UPDATE_CAN_FLY;
        wrath::MSG_RAID_READY_CHECK_CONFIRM_Server MSG_RAID_READY_CHECK_CONFIRM;
        wrath::SMSG_GM_MESSAGECHAT SMSG_GM_MESSAGECHAT;
        wrath::SMSG_CLEAR_TARGET SMSG_CLEAR_TARGET;
        wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD SMSG_CROSSED_INEBRIATION_THRESHOLD;
        wrath::SMSG_KICK_REASON SMSG_KICK_REASON;
        wrath::SMSG_COMPLAIN_RESULT SMSG_COMPLAIN_RESULT;
        wrath::SMSG_FEATURE_SYSTEM_STATUS SMSG_FEATURE_SYSTEM_STATUS;
        wrath::SMSG_CHANNEL_MEMBER_COUNT SMSG_CHANNEL_MEMBER_COUNT;
        wrath::SMSG_GUILD_BANK_LIST SMSG_GUILD_BANK_LIST;
        wrath::MSG_GUILD_BANK_LOG_QUERY_Server MSG_GUILD_BANK_LOG_QUERY;
        wrath::SMSG_USERLIST_ADD SMSG_USERLIST_ADD;
        wrath::SMSG_USERLIST_REMOVE SMSG_USERLIST_REMOVE;
        wrath::SMSG_USERLIST_UPDATE SMSG_USERLIST_UPDATE;
        wrath::SMSG_INSPECT_TALENT SMSG_INSPECT_TALENT;
        wrath::SMSG_LOOT_LIST SMSG_LOOT_LIST;
        wrath::MSG_GUILD_PERMISSIONS_Server MSG_GUILD_PERMISSIONS;
        wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server MSG_GUILD_BANK_MONEY_WITHDRAWN;
        wrath::MSG_GUILD_EVENT_LOG_QUERY_Server MSG_GUILD_EVENT_LOG_QUERY;
        wrath::SMSG_MIRRORIMAGE_DATA SMSG_MIRRORIMAGE_DATA;
        wrath::MSG_QUERY_GUILD_BANK_TEXT_Server MSG_QUERY_GUILD_BANK_TEXT;
        wrath::SMSG_OVERRIDE_LIGHT SMSG_OVERRIDE_LIGHT;
        wrath::SMSG_TOTEM_CREATED SMSG_TOTEM_CREATED;
        wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE SMSG_QUESTGIVER_STATUS_MULTIPLE;
        wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT SMSG_SET_PLAYER_DECLINED_NAMES_RESULT;
        wrath::SMSG_SEND_UNLEARN_SPELLS SMSG_SEND_UNLEARN_SPELLS;
        wrath::SMSG_PROPOSE_LEVEL_GRANT SMSG_PROPOSE_LEVEL_GRANT;
        wrath::SMSG_REFER_A_FRIEND_FAILURE SMSG_REFER_A_FRIEND_FAILURE;
        wrath::SMSG_SPLINE_MOVE_SET_FLYING SMSG_SPLINE_MOVE_SET_FLYING;
        wrath::SMSG_SPLINE_MOVE_UNSET_FLYING SMSG_SPLINE_MOVE_UNSET_FLYING;
        wrath::SMSG_ENABLE_BARBER_SHOP SMSG_ENABLE_BARBER_SHOP;
        wrath::SMSG_BARBER_SHOP_RESULT SMSG_BARBER_SHOP_RESULT;
        wrath::SMSG_CALENDAR_SEND_CALENDAR SMSG_CALENDAR_SEND_CALENDAR;
        wrath::SMSG_CALENDAR_SEND_EVENT SMSG_CALENDAR_SEND_EVENT;
        wrath::SMSG_CALENDAR_FILTER_GUILD SMSG_CALENDAR_FILTER_GUILD;
        wrath::SMSG_CALENDAR_ARENA_TEAM SMSG_CALENDAR_ARENA_TEAM;
        wrath::SMSG_CALENDAR_EVENT_INVITE SMSG_CALENDAR_EVENT_INVITE;
        wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED SMSG_CALENDAR_EVENT_INVITE_REMOVED;
        wrath::SMSG_CALENDAR_EVENT_STATUS SMSG_CALENDAR_EVENT_STATUS;
        wrath::SMSG_CALENDAR_COMMAND_RESULT SMSG_CALENDAR_COMMAND_RESULT;
        wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED SMSG_CALENDAR_RAID_LOCKOUT_ADDED;
        wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED SMSG_CALENDAR_RAID_LOCKOUT_REMOVED;
        wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT SMSG_CALENDAR_EVENT_INVITE_ALERT;
        wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT;
        wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT SMSG_CALENDAR_EVENT_REMOVED_ALERT;
        wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT SMSG_CALENDAR_EVENT_UPDATED_ALERT;
        wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT;
        wrath::CMSG_CALENDAR_GET_NUM_PENDING CMSG_CALENDAR_GET_NUM_PENDING;
        wrath::SMSG_CALENDAR_SEND_NUM_PENDING SMSG_CALENDAR_SEND_NUM_PENDING;
        wrath::MSG_MOVE_SET_PITCH_RATE_Server MSG_MOVE_SET_PITCH_RATE;
        wrath::SMSG_FORCE_PITCH_RATE_CHANGE SMSG_FORCE_PITCH_RATE_CHANGE;
        wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES SMSG_CALENDAR_EVENT_INVITE_NOTES;
        wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT;
        wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE SMSG_UPDATE_ACCOUNT_DATA_COMPLETE;
        wrath::SMSG_TRIGGER_MOVIE SMSG_TRIGGER_MOVIE;
        wrath::SMSG_ACHIEVEMENT_EARNED SMSG_ACHIEVEMENT_EARNED;
        wrath::SMSG_CRITERIA_UPDATE SMSG_CRITERIA_UPDATE;
        wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS SMSG_RESPOND_INSPECT_ACHIEVEMENTS;
        wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL SMSG_QUESTUPDATE_ADD_PVP_KILL;
        wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED SMSG_CALENDAR_RAID_LOCKOUT_UPDATED;
        wrath::SMSG_CHAR_CUSTOMIZE SMSG_CHAR_CUSTOMIZE;
        wrath::SMSG_SET_PHASE_SHIFT SMSG_SET_PHASE_SHIFT;
        wrath::SMSG_ALL_ACHIEVEMENT_DATA SMSG_ALL_ACHIEVEMENT_DATA;
        wrath::SMSG_POWER_UPDATE SMSG_POWER_UPDATE;
        wrath::SMSG_HIGHEST_THREAT_UPDATE SMSG_HIGHEST_THREAT_UPDATE;
        wrath::SMSG_THREAT_UPDATE SMSG_THREAT_UPDATE;
        wrath::SMSG_THREAT_REMOVE SMSG_THREAT_REMOVE;
        wrath::SMSG_THREAT_CLEAR SMSG_THREAT_CLEAR;
        wrath::SMSG_CONVERT_RUNE SMSG_CONVERT_RUNE;
        wrath::SMSG_RESYNC_RUNES SMSG_RESYNC_RUNES;
        wrath::SMSG_ADD_RUNE_POWER SMSG_ADD_RUNE_POWER;
        wrath::SMSG_AUCTION_LIST_PENDING_SALES SMSG_AUCTION_LIST_PENDING_SALES;
        wrath::SMSG_MODIFY_COOLDOWN SMSG_MODIFY_COOLDOWN;
        wrath::SMSG_PET_UPDATE_COMBO_POINTS SMSG_PET_UPDATE_COMBO_POINTS;
        wrath::SMSG_PRE_RESURRECT SMSG_PRE_RESURRECT;
        wrath::SMSG_AURA_UPDATE_ALL SMSG_AURA_UPDATE_ALL;
        wrath::SMSG_AURA_UPDATE SMSG_AURA_UPDATE;
        wrath::SMSG_SERVER_FIRST_ACHIEVEMENT SMSG_SERVER_FIRST_ACHIEVEMENT;
        wrath::SMSG_PET_LEARNED_SPELL SMSG_PET_LEARNED_SPELL;
        wrath::SMSG_PET_UNLEARNED_SPELL SMSG_PET_UNLEARNED_SPELL;
        wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA;
        wrath::SMSG_CRITERIA_DELETED SMSG_CRITERIA_DELETED;
        wrath::SMSG_ACHIEVEMENT_DELETED SMSG_ACHIEVEMENT_DELETED;
        wrath::SMSG_BATTLEGROUND_INFO_THROTTLED SMSG_BATTLEGROUND_INFO_THROTTLED;
        wrath::SMSG_PLAYER_VEHICLE_DATA SMSG_PLAYER_VEHICLE_DATA;
        wrath::SMSG_PET_GUIDS SMSG_PET_GUIDS;
        wrath::SMSG_CLIENTCACHE_VERSION SMSG_CLIENTCACHE_VERSION;
        wrath::SMSG_ITEM_REFUND_INFO_RESPONSE SMSG_ITEM_REFUND_INFO_RESPONSE;
        wrath::SMSG_ITEM_REFUND_RESULT SMSG_ITEM_REFUND_RESULT;
        wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE;
        wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION SMSG_CALENDAR_CLEAR_PENDING_ACTION;
        wrath::SMSG_EQUIPMENT_SET_LIST SMSG_EQUIPMENT_SET_LIST;
        wrath::SMSG_SET_PROJECTILE_POSITION SMSG_SET_PROJECTILE_POSITION;
        wrath::SMSG_TALENTS_INFO SMSG_TALENTS_INFO;
        wrath::SMSG_ARENA_UNIT_DESTROYED SMSG_ARENA_UNIT_DESTROYED;
        wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED;
        wrath::SMSG_MOVE_GRAVITY_DISABLE SMSG_MOVE_GRAVITY_DISABLE;
        wrath::SMSG_MOVE_GRAVITY_ENABLE SMSG_MOVE_GRAVITY_ENABLE;
        wrath::MSG_MOVE_GRAVITY_CHNG_Server MSG_MOVE_GRAVITY_CHNG;
        wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE SMSG_SPLINE_MOVE_GRAVITY_DISABLE;
        wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE SMSG_SPLINE_MOVE_GRAVITY_ENABLE;
        wrath::SMSG_EQUIPMENT_SET_USE_RESULT SMSG_EQUIPMENT_SET_USE_RESULT;
        wrath::SMSG_CHAR_FACTION_CHANGE SMSG_CHAR_FACTION_CHANGE;
        wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE SMSG_BATTLEFIELD_MGR_ENTRY_INVITE;
        wrath::SMSG_BATTLEFIELD_MGR_ENTERED SMSG_BATTLEFIELD_MGR_ENTERED;
        wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE SMSG_BATTLEFIELD_MGR_QUEUE_INVITE;
        wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE;
        wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING SMSG_BATTLEFIELD_MGR_EJECT_PENDING;
        wrath::SMSG_BATTLEFIELD_MGR_EJECTED SMSG_BATTLEFIELD_MGR_EJECTED;
        wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE SMSG_BATTLEFIELD_MGR_STATE_CHANGE;
        wrath::MSG_SET_RAID_DIFFICULTY_Server MSG_SET_RAID_DIFFICULTY;
        wrath::SMSG_TOGGLE_XP_GAIN SMSG_TOGGLE_XP_GAIN;
        wrath::SMSG_GMRESPONSE_DB_ERROR SMSG_GMRESPONSE_DB_ERROR;
        wrath::SMSG_GMRESPONSE_RECEIVED SMSG_GMRESPONSE_RECEIVED;
        wrath::SMSG_GMRESPONSE_STATUS_UPDATE SMSG_GMRESPONSE_STATUS_UPDATE;
        wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE SMSG_WORLD_STATE_UI_TIMER_UPDATE;
        wrath::SMSG_TALENTS_INVOLUNTARILY_RESET SMSG_TALENTS_INVOLUNTARILY_RESET;
        wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE SMSG_QUERY_QUESTS_COMPLETED_RESPONSE;
        wrath::SMSG_CORPSE_NOT_IN_INSTANCE SMSG_CORPSE_NOT_IN_INSTANCE;
        wrath::SMSG_CAMERA_SHAKE SMSG_CAMERA_SHAKE;
        wrath::SMSG_SOCKET_GEMS_RESULT SMSG_SOCKET_GEMS_RESULT;
        wrath::SMSG_REDIRECT_CLIENT SMSG_REDIRECT_CLIENT;
        wrath::SMSG_MOVE_SET_COLLISION_HGT SMSG_MOVE_SET_COLLISION_HGT;
        wrath::SMSG_MULTIPLE_MOVES SMSG_MULTIPLE_MOVES;
    };

    bool is_none() const noexcept {
        return opcode == Opcode::NONE;
    }

    explicit ServerOpcode() : opcode(Opcode::NONE), SMSG_CHAR_CREATE() {}

    ServerOpcode(ServerOpcode&& other) noexcept {
        this->opcode = other.opcode;
        other.opcode = Opcode::NONE;
        if (opcode == Opcode::SMSG_CHAR_CREATE) {
            this->SMSG_CHAR_CREATE = std::move(other.SMSG_CHAR_CREATE);
        }
        if (opcode == Opcode::SMSG_CHAR_ENUM) {
            this->SMSG_CHAR_ENUM = std::move(other.SMSG_CHAR_ENUM);
        }
        if (opcode == Opcode::SMSG_CHAR_DELETE) {
            this->SMSG_CHAR_DELETE = std::move(other.SMSG_CHAR_DELETE);
        }
        if (opcode == Opcode::SMSG_NEW_WORLD) {
            this->SMSG_NEW_WORLD = std::move(other.SMSG_NEW_WORLD);
        }
        if (opcode == Opcode::SMSG_TRANSFER_PENDING) {
            this->SMSG_TRANSFER_PENDING = std::move(other.SMSG_TRANSFER_PENDING);
        }
        if (opcode == Opcode::SMSG_TRANSFER_ABORTED) {
            this->SMSG_TRANSFER_ABORTED = std::move(other.SMSG_TRANSFER_ABORTED);
        }
        if (opcode == Opcode::SMSG_CHARACTER_LOGIN_FAILED) {
            this->SMSG_CHARACTER_LOGIN_FAILED = std::move(other.SMSG_CHARACTER_LOGIN_FAILED);
        }
        if (opcode == Opcode::SMSG_LOGIN_SETTIMESPEED) {
            this->SMSG_LOGIN_SETTIMESPEED = std::move(other.SMSG_LOGIN_SETTIMESPEED);
        }
        if (opcode == Opcode::SMSG_LOGOUT_RESPONSE) {
            this->SMSG_LOGOUT_RESPONSE = std::move(other.SMSG_LOGOUT_RESPONSE);
        }
        if (opcode == Opcode::SMSG_LOGOUT_COMPLETE) {
            this->SMSG_LOGOUT_COMPLETE = std::move(other.SMSG_LOGOUT_COMPLETE);
        }
        if (opcode == Opcode::SMSG_LOGOUT_CANCEL_ACK) {
            this->SMSG_LOGOUT_CANCEL_ACK = std::move(other.SMSG_LOGOUT_CANCEL_ACK);
        }
        if (opcode == Opcode::SMSG_NAME_QUERY_RESPONSE) {
            this->SMSG_NAME_QUERY_RESPONSE = std::move(other.SMSG_NAME_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_PET_NAME_QUERY_RESPONSE) {
            this->SMSG_PET_NAME_QUERY_RESPONSE = std::move(other.SMSG_PET_NAME_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_GUILD_QUERY_RESPONSE) {
            this->SMSG_GUILD_QUERY_RESPONSE = std::move(other.SMSG_GUILD_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE) {
            this->SMSG_ITEM_QUERY_SINGLE_RESPONSE = std::move(other.SMSG_ITEM_QUERY_SINGLE_RESPONSE);
        }
        if (opcode == Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE) {
            this->SMSG_PAGE_TEXT_QUERY_RESPONSE = std::move(other.SMSG_PAGE_TEXT_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_QUEST_QUERY_RESPONSE) {
            this->SMSG_QUEST_QUERY_RESPONSE = std::move(other.SMSG_QUEST_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE) {
            this->SMSG_GAMEOBJECT_QUERY_RESPONSE = std::move(other.SMSG_GAMEOBJECT_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_CREATURE_QUERY_RESPONSE) {
            this->SMSG_CREATURE_QUERY_RESPONSE = std::move(other.SMSG_CREATURE_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_WHO) {
            this->SMSG_WHO = std::move(other.SMSG_WHO);
        }
        if (opcode == Opcode::SMSG_WHOIS) {
            this->SMSG_WHOIS = std::move(other.SMSG_WHOIS);
        }
        if (opcode == Opcode::SMSG_CONTACT_LIST) {
            this->SMSG_CONTACT_LIST = std::move(other.SMSG_CONTACT_LIST);
        }
        if (opcode == Opcode::SMSG_FRIEND_STATUS) {
            this->SMSG_FRIEND_STATUS = std::move(other.SMSG_FRIEND_STATUS);
        }
        if (opcode == Opcode::SMSG_GROUP_INVITE) {
            this->SMSG_GROUP_INVITE = std::move(other.SMSG_GROUP_INVITE);
        }
        if (opcode == Opcode::SMSG_GROUP_DECLINE) {
            this->SMSG_GROUP_DECLINE = std::move(other.SMSG_GROUP_DECLINE);
        }
        if (opcode == Opcode::SMSG_GROUP_UNINVITE) {
            this->SMSG_GROUP_UNINVITE = std::move(other.SMSG_GROUP_UNINVITE);
        }
        if (opcode == Opcode::SMSG_GROUP_SET_LEADER) {
            this->SMSG_GROUP_SET_LEADER = std::move(other.SMSG_GROUP_SET_LEADER);
        }
        if (opcode == Opcode::SMSG_GROUP_DESTROYED) {
            this->SMSG_GROUP_DESTROYED = std::move(other.SMSG_GROUP_DESTROYED);
        }
        if (opcode == Opcode::SMSG_GROUP_LIST) {
            this->SMSG_GROUP_LIST = std::move(other.SMSG_GROUP_LIST);
        }
        if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS) {
            this->SMSG_PARTY_MEMBER_STATS = std::move(other.SMSG_PARTY_MEMBER_STATS);
        }
        if (opcode == Opcode::SMSG_PARTY_COMMAND_RESULT) {
            this->SMSG_PARTY_COMMAND_RESULT = std::move(other.SMSG_PARTY_COMMAND_RESULT);
        }
        if (opcode == Opcode::SMSG_GUILD_INVITE) {
            this->SMSG_GUILD_INVITE = std::move(other.SMSG_GUILD_INVITE);
        }
        if (opcode == Opcode::SMSG_GUILD_DECLINE) {
            this->SMSG_GUILD_DECLINE = std::move(other.SMSG_GUILD_DECLINE);
        }
        if (opcode == Opcode::SMSG_GUILD_INFO) {
            this->SMSG_GUILD_INFO = std::move(other.SMSG_GUILD_INFO);
        }
        if (opcode == Opcode::SMSG_GUILD_ROSTER) {
            this->SMSG_GUILD_ROSTER = std::move(other.SMSG_GUILD_ROSTER);
        }
        if (opcode == Opcode::SMSG_GUILD_EVENT) {
            this->SMSG_GUILD_EVENT = std::move(other.SMSG_GUILD_EVENT);
        }
        if (opcode == Opcode::SMSG_GUILD_COMMAND_RESULT) {
            this->SMSG_GUILD_COMMAND_RESULT = std::move(other.SMSG_GUILD_COMMAND_RESULT);
        }
        if (opcode == Opcode::SMSG_MESSAGECHAT) {
            this->SMSG_MESSAGECHAT = std::move(other.SMSG_MESSAGECHAT);
        }
        if (opcode == Opcode::SMSG_CHANNEL_NOTIFY) {
            this->SMSG_CHANNEL_NOTIFY = std::move(other.SMSG_CHANNEL_NOTIFY);
        }
        if (opcode == Opcode::SMSG_CHANNEL_LIST) {
            this->SMSG_CHANNEL_LIST = std::move(other.SMSG_CHANNEL_LIST);
        }
        if (opcode == Opcode::SMSG_UPDATE_OBJECT) {
            this->SMSG_UPDATE_OBJECT = std::move(other.SMSG_UPDATE_OBJECT);
        }
        if (opcode == Opcode::SMSG_DESTROY_OBJECT) {
            this->SMSG_DESTROY_OBJECT = std::move(other.SMSG_DESTROY_OBJECT);
        }
        if (opcode == Opcode::SMSG_READ_ITEM_OK) {
            this->SMSG_READ_ITEM_OK = std::move(other.SMSG_READ_ITEM_OK);
        }
        if (opcode == Opcode::SMSG_READ_ITEM_FAILED) {
            this->SMSG_READ_ITEM_FAILED = std::move(other.SMSG_READ_ITEM_FAILED);
        }
        if (opcode == Opcode::SMSG_ITEM_COOLDOWN) {
            this->SMSG_ITEM_COOLDOWN = std::move(other.SMSG_ITEM_COOLDOWN);
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM) {
            this->SMSG_GAMEOBJECT_CUSTOM_ANIM = std::move(other.SMSG_GAMEOBJECT_CUSTOM_ANIM);
        }
        if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
            this->MSG_MOVE_START_FORWARD = std::move(other.MSG_MOVE_START_FORWARD);
        }
        if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
            this->MSG_MOVE_START_BACKWARD = std::move(other.MSG_MOVE_START_BACKWARD);
        }
        if (opcode == Opcode::MSG_MOVE_STOP) {
            this->MSG_MOVE_STOP = std::move(other.MSG_MOVE_STOP);
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
            this->MSG_MOVE_START_STRAFE_LEFT = std::move(other.MSG_MOVE_START_STRAFE_LEFT);
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
            this->MSG_MOVE_START_STRAFE_RIGHT = std::move(other.MSG_MOVE_START_STRAFE_RIGHT);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
            this->MSG_MOVE_STOP_STRAFE = std::move(other.MSG_MOVE_STOP_STRAFE);
        }
        if (opcode == Opcode::MSG_MOVE_JUMP) {
            this->MSG_MOVE_JUMP = std::move(other.MSG_MOVE_JUMP);
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
            this->MSG_MOVE_START_TURN_LEFT = std::move(other.MSG_MOVE_START_TURN_LEFT);
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
            this->MSG_MOVE_START_TURN_RIGHT = std::move(other.MSG_MOVE_START_TURN_RIGHT);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
            this->MSG_MOVE_STOP_TURN = std::move(other.MSG_MOVE_STOP_TURN);
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
            this->MSG_MOVE_START_PITCH_UP = std::move(other.MSG_MOVE_START_PITCH_UP);
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
            this->MSG_MOVE_START_PITCH_DOWN = std::move(other.MSG_MOVE_START_PITCH_DOWN);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
            this->MSG_MOVE_STOP_PITCH = std::move(other.MSG_MOVE_STOP_PITCH);
        }
        if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
            this->MSG_MOVE_SET_RUN_MODE = std::move(other.MSG_MOVE_SET_RUN_MODE);
        }
        if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
            this->MSG_MOVE_SET_WALK_MODE = std::move(other.MSG_MOVE_SET_WALK_MODE);
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT_CHEAT) {
            this->MSG_MOVE_TELEPORT_CHEAT = std::move(other.MSG_MOVE_TELEPORT_CHEAT);
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
            this->MSG_MOVE_TELEPORT_ACK = std::move(other.MSG_MOVE_TELEPORT_ACK);
        }
        if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
            this->MSG_MOVE_FALL_LAND = std::move(other.MSG_MOVE_FALL_LAND);
        }
        if (opcode == Opcode::MSG_MOVE_START_SWIM) {
            this->MSG_MOVE_START_SWIM = std::move(other.MSG_MOVE_START_SWIM);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
            this->MSG_MOVE_STOP_SWIM = std::move(other.MSG_MOVE_STOP_SWIM);
        }
        if (opcode == Opcode::MSG_MOVE_SET_FACING) {
            this->MSG_MOVE_SET_FACING = std::move(other.MSG_MOVE_SET_FACING);
        }
        if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
            this->MSG_MOVE_SET_PITCH = std::move(other.MSG_MOVE_SET_PITCH);
        }
        if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
            this->MSG_MOVE_WORLDPORT_ACK = std::move(other.MSG_MOVE_WORLDPORT_ACK);
        }
        if (opcode == Opcode::SMSG_MONSTER_MOVE) {
            this->SMSG_MONSTER_MOVE = std::move(other.SMSG_MONSTER_MOVE);
        }
        if (opcode == Opcode::SMSG_MOVE_WATER_WALK) {
            this->SMSG_MOVE_WATER_WALK = std::move(other.SMSG_MOVE_WATER_WALK);
        }
        if (opcode == Opcode::SMSG_MOVE_LAND_WALK) {
            this->SMSG_MOVE_LAND_WALK = std::move(other.SMSG_MOVE_LAND_WALK);
        }
        if (opcode == Opcode::SMSG_FORCE_RUN_SPEED_CHANGE) {
            this->SMSG_FORCE_RUN_SPEED_CHANGE = std::move(other.SMSG_FORCE_RUN_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE) {
            this->SMSG_FORCE_RUN_BACK_SPEED_CHANGE = std::move(other.SMSG_FORCE_RUN_BACK_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE) {
            this->SMSG_FORCE_SWIM_SPEED_CHANGE = std::move(other.SMSG_FORCE_SWIM_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_MOVE_ROOT) {
            this->SMSG_FORCE_MOVE_ROOT = std::move(other.SMSG_FORCE_MOVE_ROOT);
        }
        if (opcode == Opcode::SMSG_FORCE_MOVE_UNROOT) {
            this->SMSG_FORCE_MOVE_UNROOT = std::move(other.SMSG_FORCE_MOVE_UNROOT);
        }
        if (opcode == Opcode::MSG_MOVE_ROOT) {
            this->MSG_MOVE_ROOT = std::move(other.MSG_MOVE_ROOT);
        }
        if (opcode == Opcode::MSG_MOVE_UNROOT) {
            this->MSG_MOVE_UNROOT = std::move(other.MSG_MOVE_UNROOT);
        }
        if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
            this->MSG_MOVE_HEARTBEAT = std::move(other.MSG_MOVE_HEARTBEAT);
        }
        if (opcode == Opcode::SMSG_MOVE_KNOCK_BACK) {
            this->SMSG_MOVE_KNOCK_BACK = std::move(other.SMSG_MOVE_KNOCK_BACK);
        }
        if (opcode == Opcode::MSG_MOVE_KNOCK_BACK) {
            this->MSG_MOVE_KNOCK_BACK = std::move(other.MSG_MOVE_KNOCK_BACK);
        }
        if (opcode == Opcode::SMSG_MOVE_FEATHER_FALL) {
            this->SMSG_MOVE_FEATHER_FALL = std::move(other.SMSG_MOVE_FEATHER_FALL);
        }
        if (opcode == Opcode::SMSG_MOVE_NORMAL_FALL) {
            this->SMSG_MOVE_NORMAL_FALL = std::move(other.SMSG_MOVE_NORMAL_FALL);
        }
        if (opcode == Opcode::SMSG_MOVE_SET_HOVER) {
            this->SMSG_MOVE_SET_HOVER = std::move(other.SMSG_MOVE_SET_HOVER);
        }
        if (opcode == Opcode::SMSG_MOVE_UNSET_HOVER) {
            this->SMSG_MOVE_UNSET_HOVER = std::move(other.SMSG_MOVE_UNSET_HOVER);
        }
        if (opcode == Opcode::MSG_MOVE_HOVER) {
            this->MSG_MOVE_HOVER = std::move(other.MSG_MOVE_HOVER);
        }
        if (opcode == Opcode::SMSG_TRIGGER_CINEMATIC) {
            this->SMSG_TRIGGER_CINEMATIC = std::move(other.SMSG_TRIGGER_CINEMATIC);
        }
        if (opcode == Opcode::SMSG_TUTORIAL_FLAGS) {
            this->SMSG_TUTORIAL_FLAGS = std::move(other.SMSG_TUTORIAL_FLAGS);
        }
        if (opcode == Opcode::SMSG_EMOTE) {
            this->SMSG_EMOTE = std::move(other.SMSG_EMOTE);
        }
        if (opcode == Opcode::SMSG_TEXT_EMOTE) {
            this->SMSG_TEXT_EMOTE = std::move(other.SMSG_TEXT_EMOTE);
        }
        if (opcode == Opcode::SMSG_INVENTORY_CHANGE_FAILURE) {
            this->SMSG_INVENTORY_CHANGE_FAILURE = std::move(other.SMSG_INVENTORY_CHANGE_FAILURE);
        }
        if (opcode == Opcode::SMSG_TRADE_STATUS) {
            this->SMSG_TRADE_STATUS = std::move(other.SMSG_TRADE_STATUS);
        }
        if (opcode == Opcode::SMSG_TRADE_STATUS_EXTENDED) {
            this->SMSG_TRADE_STATUS_EXTENDED = std::move(other.SMSG_TRADE_STATUS_EXTENDED);
        }
        if (opcode == Opcode::SMSG_INITIALIZE_FACTIONS) {
            this->SMSG_INITIALIZE_FACTIONS = std::move(other.SMSG_INITIALIZE_FACTIONS);
        }
        if (opcode == Opcode::SMSG_SET_FACTION_VISIBLE) {
            this->SMSG_SET_FACTION_VISIBLE = std::move(other.SMSG_SET_FACTION_VISIBLE);
        }
        if (opcode == Opcode::SMSG_SET_FACTION_STANDING) {
            this->SMSG_SET_FACTION_STANDING = std::move(other.SMSG_SET_FACTION_STANDING);
        }
        if (opcode == Opcode::SMSG_SET_PROFICIENCY) {
            this->SMSG_SET_PROFICIENCY = std::move(other.SMSG_SET_PROFICIENCY);
        }
        if (opcode == Opcode::SMSG_ACTION_BUTTONS) {
            this->SMSG_ACTION_BUTTONS = std::move(other.SMSG_ACTION_BUTTONS);
        }
        if (opcode == Opcode::SMSG_INITIAL_SPELLS) {
            this->SMSG_INITIAL_SPELLS = std::move(other.SMSG_INITIAL_SPELLS);
        }
        if (opcode == Opcode::SMSG_LEARNED_SPELL) {
            this->SMSG_LEARNED_SPELL = std::move(other.SMSG_LEARNED_SPELL);
        }
        if (opcode == Opcode::SMSG_SUPERCEDED_SPELL) {
            this->SMSG_SUPERCEDED_SPELL = std::move(other.SMSG_SUPERCEDED_SPELL);
        }
        if (opcode == Opcode::SMSG_CAST_FAILED) {
            this->SMSG_CAST_FAILED = std::move(other.SMSG_CAST_FAILED);
        }
        if (opcode == Opcode::SMSG_SPELL_START) {
            this->SMSG_SPELL_START = std::move(other.SMSG_SPELL_START);
        }
        if (opcode == Opcode::SMSG_SPELL_GO) {
            this->SMSG_SPELL_GO = std::move(other.SMSG_SPELL_GO);
        }
        if (opcode == Opcode::SMSG_SPELL_FAILURE) {
            this->SMSG_SPELL_FAILURE = std::move(other.SMSG_SPELL_FAILURE);
        }
        if (opcode == Opcode::SMSG_SPELL_COOLDOWN) {
            this->SMSG_SPELL_COOLDOWN = std::move(other.SMSG_SPELL_COOLDOWN);
        }
        if (opcode == Opcode::SMSG_COOLDOWN_EVENT) {
            this->SMSG_COOLDOWN_EVENT = std::move(other.SMSG_COOLDOWN_EVENT);
        }
        if (opcode == Opcode::SMSG_PET_CAST_FAILED) {
            this->SMSG_PET_CAST_FAILED = std::move(other.SMSG_PET_CAST_FAILED);
        }
        if (opcode == Opcode::MSG_CHANNEL_START) {
            this->MSG_CHANNEL_START = std::move(other.MSG_CHANNEL_START);
        }
        if (opcode == Opcode::MSG_CHANNEL_UPDATE) {
            this->MSG_CHANNEL_UPDATE = std::move(other.MSG_CHANNEL_UPDATE);
        }
        if (opcode == Opcode::SMSG_AI_REACTION) {
            this->SMSG_AI_REACTION = std::move(other.SMSG_AI_REACTION);
        }
        if (opcode == Opcode::SMSG_ATTACKSTART) {
            this->SMSG_ATTACKSTART = std::move(other.SMSG_ATTACKSTART);
        }
        if (opcode == Opcode::SMSG_ATTACKSTOP) {
            this->SMSG_ATTACKSTOP = std::move(other.SMSG_ATTACKSTOP);
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_NOTINRANGE) {
            this->SMSG_ATTACKSWING_NOTINRANGE = std::move(other.SMSG_ATTACKSWING_NOTINRANGE);
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_BADFACING) {
            this->SMSG_ATTACKSWING_BADFACING = std::move(other.SMSG_ATTACKSWING_BADFACING);
        }
        if (opcode == Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY) {
            this->SMSG_INSTANCE_LOCK_WARNING_QUERY = std::move(other.SMSG_INSTANCE_LOCK_WARNING_QUERY);
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_DEADTARGET) {
            this->SMSG_ATTACKSWING_DEADTARGET = std::move(other.SMSG_ATTACKSWING_DEADTARGET);
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_CANT_ATTACK) {
            this->SMSG_ATTACKSWING_CANT_ATTACK = std::move(other.SMSG_ATTACKSWING_CANT_ATTACK);
        }
        if (opcode == Opcode::SMSG_ATTACKERSTATEUPDATE) {
            this->SMSG_ATTACKERSTATEUPDATE = std::move(other.SMSG_ATTACKERSTATEUPDATE);
        }
        if (opcode == Opcode::SMSG_CANCEL_COMBAT) {
            this->SMSG_CANCEL_COMBAT = std::move(other.SMSG_CANCEL_COMBAT);
        }
        if (opcode == Opcode::SMSG_SPELLHEALLOG) {
            this->SMSG_SPELLHEALLOG = std::move(other.SMSG_SPELLHEALLOG);
        }
        if (opcode == Opcode::SMSG_SPELLENERGIZELOG) {
            this->SMSG_SPELLENERGIZELOG = std::move(other.SMSG_SPELLENERGIZELOG);
        }
        if (opcode == Opcode::SMSG_BREAK_TARGET) {
            this->SMSG_BREAK_TARGET = std::move(other.SMSG_BREAK_TARGET);
        }
        if (opcode == Opcode::SMSG_BINDPOINTUPDATE) {
            this->SMSG_BINDPOINTUPDATE = std::move(other.SMSG_BINDPOINTUPDATE);
        }
        if (opcode == Opcode::SMSG_PLAYERBOUND) {
            this->SMSG_PLAYERBOUND = std::move(other.SMSG_PLAYERBOUND);
        }
        if (opcode == Opcode::SMSG_CLIENT_CONTROL_UPDATE) {
            this->SMSG_CLIENT_CONTROL_UPDATE = std::move(other.SMSG_CLIENT_CONTROL_UPDATE);
        }
        if (opcode == Opcode::SMSG_RESURRECT_REQUEST) {
            this->SMSG_RESURRECT_REQUEST = std::move(other.SMSG_RESURRECT_REQUEST);
        }
        if (opcode == Opcode::SMSG_LOOT_RESPONSE) {
            this->SMSG_LOOT_RESPONSE = std::move(other.SMSG_LOOT_RESPONSE);
        }
        if (opcode == Opcode::SMSG_LOOT_RELEASE_RESPONSE) {
            this->SMSG_LOOT_RELEASE_RESPONSE = std::move(other.SMSG_LOOT_RELEASE_RESPONSE);
        }
        if (opcode == Opcode::SMSG_LOOT_REMOVED) {
            this->SMSG_LOOT_REMOVED = std::move(other.SMSG_LOOT_REMOVED);
        }
        if (opcode == Opcode::SMSG_LOOT_MONEY_NOTIFY) {
            this->SMSG_LOOT_MONEY_NOTIFY = std::move(other.SMSG_LOOT_MONEY_NOTIFY);
        }
        if (opcode == Opcode::SMSG_LOOT_CLEAR_MONEY) {
            this->SMSG_LOOT_CLEAR_MONEY = std::move(other.SMSG_LOOT_CLEAR_MONEY);
        }
        if (opcode == Opcode::SMSG_ITEM_PUSH_RESULT) {
            this->SMSG_ITEM_PUSH_RESULT = std::move(other.SMSG_ITEM_PUSH_RESULT);
        }
        if (opcode == Opcode::SMSG_DUEL_REQUESTED) {
            this->SMSG_DUEL_REQUESTED = std::move(other.SMSG_DUEL_REQUESTED);
        }
        if (opcode == Opcode::SMSG_DUEL_OUTOFBOUNDS) {
            this->SMSG_DUEL_OUTOFBOUNDS = std::move(other.SMSG_DUEL_OUTOFBOUNDS);
        }
        if (opcode == Opcode::SMSG_DUEL_INBOUNDS) {
            this->SMSG_DUEL_INBOUNDS = std::move(other.SMSG_DUEL_INBOUNDS);
        }
        if (opcode == Opcode::SMSG_DUEL_COMPLETE) {
            this->SMSG_DUEL_COMPLETE = std::move(other.SMSG_DUEL_COMPLETE);
        }
        if (opcode == Opcode::SMSG_DUEL_WINNER) {
            this->SMSG_DUEL_WINNER = std::move(other.SMSG_DUEL_WINNER);
        }
        if (opcode == Opcode::SMSG_MOUNTRESULT) {
            this->SMSG_MOUNTRESULT = std::move(other.SMSG_MOUNTRESULT);
        }
        if (opcode == Opcode::SMSG_MOUNTSPECIAL_ANIM) {
            this->SMSG_MOUNTSPECIAL_ANIM = std::move(other.SMSG_MOUNTSPECIAL_ANIM);
        }
        if (opcode == Opcode::SMSG_PET_TAME_FAILURE) {
            this->SMSG_PET_TAME_FAILURE = std::move(other.SMSG_PET_TAME_FAILURE);
        }
        if (opcode == Opcode::SMSG_PET_NAME_INVALID) {
            this->SMSG_PET_NAME_INVALID = std::move(other.SMSG_PET_NAME_INVALID);
        }
        if (opcode == Opcode::SMSG_PET_SPELLS) {
            this->SMSG_PET_SPELLS = std::move(other.SMSG_PET_SPELLS);
        }
        if (opcode == Opcode::SMSG_PET_MODE) {
            this->SMSG_PET_MODE = std::move(other.SMSG_PET_MODE);
        }
        if (opcode == Opcode::SMSG_GOSSIP_MESSAGE) {
            this->SMSG_GOSSIP_MESSAGE = std::move(other.SMSG_GOSSIP_MESSAGE);
        }
        if (opcode == Opcode::SMSG_GOSSIP_COMPLETE) {
            this->SMSG_GOSSIP_COMPLETE = std::move(other.SMSG_GOSSIP_COMPLETE);
        }
        if (opcode == Opcode::SMSG_NPC_TEXT_UPDATE) {
            this->SMSG_NPC_TEXT_UPDATE = std::move(other.SMSG_NPC_TEXT_UPDATE);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_STATUS) {
            this->SMSG_QUESTGIVER_STATUS = std::move(other.SMSG_QUESTGIVER_STATUS);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_LIST) {
            this->SMSG_QUESTGIVER_QUEST_LIST = std::move(other.SMSG_QUESTGIVER_QUEST_LIST);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_DETAILS) {
            this->SMSG_QUESTGIVER_QUEST_DETAILS = std::move(other.SMSG_QUESTGIVER_QUEST_DETAILS);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS) {
            this->SMSG_QUESTGIVER_REQUEST_ITEMS = std::move(other.SMSG_QUESTGIVER_REQUEST_ITEMS);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_OFFER_REWARD) {
            this->SMSG_QUESTGIVER_OFFER_REWARD = std::move(other.SMSG_QUESTGIVER_OFFER_REWARD);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_INVALID) {
            this->SMSG_QUESTGIVER_QUEST_INVALID = std::move(other.SMSG_QUESTGIVER_QUEST_INVALID);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE) {
            this->SMSG_QUESTGIVER_QUEST_COMPLETE = std::move(other.SMSG_QUESTGIVER_QUEST_COMPLETE);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_FAILED) {
            this->SMSG_QUESTGIVER_QUEST_FAILED = std::move(other.SMSG_QUESTGIVER_QUEST_FAILED);
        }
        if (opcode == Opcode::SMSG_QUESTLOG_FULL) {
            this->SMSG_QUESTLOG_FULL = std::move(other.SMSG_QUESTLOG_FULL);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_FAILED) {
            this->SMSG_QUESTUPDATE_FAILED = std::move(other.SMSG_QUESTUPDATE_FAILED);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_FAILEDTIMER) {
            this->SMSG_QUESTUPDATE_FAILEDTIMER = std::move(other.SMSG_QUESTUPDATE_FAILEDTIMER);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_COMPLETE) {
            this->SMSG_QUESTUPDATE_COMPLETE = std::move(other.SMSG_QUESTUPDATE_COMPLETE);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_KILL) {
            this->SMSG_QUESTUPDATE_ADD_KILL = std::move(other.SMSG_QUESTUPDATE_ADD_KILL);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_ITEM) {
            this->SMSG_QUESTUPDATE_ADD_ITEM = std::move(other.SMSG_QUESTUPDATE_ADD_ITEM);
        }
        if (opcode == Opcode::SMSG_QUEST_CONFIRM_ACCEPT) {
            this->SMSG_QUEST_CONFIRM_ACCEPT = std::move(other.SMSG_QUEST_CONFIRM_ACCEPT);
        }
        if (opcode == Opcode::SMSG_LIST_INVENTORY) {
            this->SMSG_LIST_INVENTORY = std::move(other.SMSG_LIST_INVENTORY);
        }
        if (opcode == Opcode::SMSG_SELL_ITEM) {
            this->SMSG_SELL_ITEM = std::move(other.SMSG_SELL_ITEM);
        }
        if (opcode == Opcode::SMSG_BUY_ITEM) {
            this->SMSG_BUY_ITEM = std::move(other.SMSG_BUY_ITEM);
        }
        if (opcode == Opcode::SMSG_BUY_FAILED) {
            this->SMSG_BUY_FAILED = std::move(other.SMSG_BUY_FAILED);
        }
        if (opcode == Opcode::SMSG_SHOWTAXINODES) {
            this->SMSG_SHOWTAXINODES = std::move(other.SMSG_SHOWTAXINODES);
        }
        if (opcode == Opcode::SMSG_TAXINODE_STATUS) {
            this->SMSG_TAXINODE_STATUS = std::move(other.SMSG_TAXINODE_STATUS);
        }
        if (opcode == Opcode::SMSG_ACTIVATETAXIREPLY) {
            this->SMSG_ACTIVATETAXIREPLY = std::move(other.SMSG_ACTIVATETAXIREPLY);
        }
        if (opcode == Opcode::SMSG_NEW_TAXI_PATH) {
            this->SMSG_NEW_TAXI_PATH = std::move(other.SMSG_NEW_TAXI_PATH);
        }
        if (opcode == Opcode::SMSG_TRAINER_LIST) {
            this->SMSG_TRAINER_LIST = std::move(other.SMSG_TRAINER_LIST);
        }
        if (opcode == Opcode::SMSG_TRAINER_BUY_SUCCEEDED) {
            this->SMSG_TRAINER_BUY_SUCCEEDED = std::move(other.SMSG_TRAINER_BUY_SUCCEEDED);
        }
        if (opcode == Opcode::SMSG_TRAINER_BUY_FAILED) {
            this->SMSG_TRAINER_BUY_FAILED = std::move(other.SMSG_TRAINER_BUY_FAILED);
        }
        if (opcode == Opcode::SMSG_SHOW_BANK) {
            this->SMSG_SHOW_BANK = std::move(other.SMSG_SHOW_BANK);
        }
        if (opcode == Opcode::SMSG_BUY_BANK_SLOT_RESULT) {
            this->SMSG_BUY_BANK_SLOT_RESULT = std::move(other.SMSG_BUY_BANK_SLOT_RESULT);
        }
        if (opcode == Opcode::SMSG_PETITION_SHOWLIST) {
            this->SMSG_PETITION_SHOWLIST = std::move(other.SMSG_PETITION_SHOWLIST);
        }
        if (opcode == Opcode::SMSG_PETITION_SHOW_SIGNATURES) {
            this->SMSG_PETITION_SHOW_SIGNATURES = std::move(other.SMSG_PETITION_SHOW_SIGNATURES);
        }
        if (opcode == Opcode::SMSG_PETITION_SIGN_RESULTS) {
            this->SMSG_PETITION_SIGN_RESULTS = std::move(other.SMSG_PETITION_SIGN_RESULTS);
        }
        if (opcode == Opcode::MSG_PETITION_DECLINE) {
            this->MSG_PETITION_DECLINE = std::move(other.MSG_PETITION_DECLINE);
        }
        if (opcode == Opcode::SMSG_TURN_IN_PETITION_RESULTS) {
            this->SMSG_TURN_IN_PETITION_RESULTS = std::move(other.SMSG_TURN_IN_PETITION_RESULTS);
        }
        if (opcode == Opcode::SMSG_PETITION_QUERY_RESPONSE) {
            this->SMSG_PETITION_QUERY_RESPONSE = std::move(other.SMSG_PETITION_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_FISH_NOT_HOOKED) {
            this->SMSG_FISH_NOT_HOOKED = std::move(other.SMSG_FISH_NOT_HOOKED);
        }
        if (opcode == Opcode::SMSG_FISH_ESCAPED) {
            this->SMSG_FISH_ESCAPED = std::move(other.SMSG_FISH_ESCAPED);
        }
        if (opcode == Opcode::SMSG_NOTIFICATION) {
            this->SMSG_NOTIFICATION = std::move(other.SMSG_NOTIFICATION);
        }
        if (opcode == Opcode::SMSG_PLAYED_TIME) {
            this->SMSG_PLAYED_TIME = std::move(other.SMSG_PLAYED_TIME);
        }
        if (opcode == Opcode::SMSG_QUERY_TIME_RESPONSE) {
            this->SMSG_QUERY_TIME_RESPONSE = std::move(other.SMSG_QUERY_TIME_RESPONSE);
        }
        if (opcode == Opcode::SMSG_LOG_XPGAIN) {
            this->SMSG_LOG_XPGAIN = std::move(other.SMSG_LOG_XPGAIN);
        }
        if (opcode == Opcode::SMSG_LEVELUP_INFO) {
            this->SMSG_LEVELUP_INFO = std::move(other.SMSG_LEVELUP_INFO);
        }
        if (opcode == Opcode::MSG_MINIMAP_PING) {
            this->MSG_MINIMAP_PING = std::move(other.MSG_MINIMAP_PING);
        }
        if (opcode == Opcode::SMSG_ENCHANTMENTLOG) {
            this->SMSG_ENCHANTMENTLOG = std::move(other.SMSG_ENCHANTMENTLOG);
        }
        if (opcode == Opcode::SMSG_START_MIRROR_TIMER) {
            this->SMSG_START_MIRROR_TIMER = std::move(other.SMSG_START_MIRROR_TIMER);
        }
        if (opcode == Opcode::SMSG_PAUSE_MIRROR_TIMER) {
            this->SMSG_PAUSE_MIRROR_TIMER = std::move(other.SMSG_PAUSE_MIRROR_TIMER);
        }
        if (opcode == Opcode::SMSG_STOP_MIRROR_TIMER) {
            this->SMSG_STOP_MIRROR_TIMER = std::move(other.SMSG_STOP_MIRROR_TIMER);
        }
        if (opcode == Opcode::SMSG_PONG) {
            this->SMSG_PONG = std::move(other.SMSG_PONG);
        }
        if (opcode == Opcode::SMSG_CLEAR_COOLDOWN) {
            this->SMSG_CLEAR_COOLDOWN = std::move(other.SMSG_CLEAR_COOLDOWN);
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_PAGETEXT) {
            this->SMSG_GAMEOBJECT_PAGETEXT = std::move(other.SMSG_GAMEOBJECT_PAGETEXT);
        }
        if (opcode == Opcode::SMSG_SPELL_DELAYED) {
            this->SMSG_SPELL_DELAYED = std::move(other.SMSG_SPELL_DELAYED);
        }
        if (opcode == Opcode::SMSG_QUEST_POI_QUERY_RESPONSE) {
            this->SMSG_QUEST_POI_QUERY_RESPONSE = std::move(other.SMSG_QUEST_POI_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_ITEM_TIME_UPDATE) {
            this->SMSG_ITEM_TIME_UPDATE = std::move(other.SMSG_ITEM_TIME_UPDATE);
        }
        if (opcode == Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE) {
            this->SMSG_ITEM_ENCHANT_TIME_UPDATE = std::move(other.SMSG_ITEM_ENCHANT_TIME_UPDATE);
        }
        if (opcode == Opcode::SMSG_AUTH_CHALLENGE) {
            this->SMSG_AUTH_CHALLENGE = std::move(other.SMSG_AUTH_CHALLENGE);
        }
        if (opcode == Opcode::SMSG_AUTH_RESPONSE) {
            this->SMSG_AUTH_RESPONSE = std::move(other.SMSG_AUTH_RESPONSE);
        }
        if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
            this->MSG_SAVE_GUILD_EMBLEM = std::move(other.MSG_SAVE_GUILD_EMBLEM);
        }
        if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
            this->MSG_TABARDVENDOR_ACTIVATE = std::move(other.MSG_TABARDVENDOR_ACTIVATE);
        }
        if (opcode == Opcode::SMSG_PLAY_SPELL_VISUAL) {
            this->SMSG_PLAY_SPELL_VISUAL = std::move(other.SMSG_PLAY_SPELL_VISUAL);
        }
        if (opcode == Opcode::SMSG_PARTYKILLLOG) {
            this->SMSG_PARTYKILLLOG = std::move(other.SMSG_PARTYKILLLOG);
        }
        if (opcode == Opcode::SMSG_COMPRESSED_UPDATE_OBJECT) {
            this->SMSG_COMPRESSED_UPDATE_OBJECT = std::move(other.SMSG_COMPRESSED_UPDATE_OBJECT);
        }
        if (opcode == Opcode::SMSG_PLAY_SPELL_IMPACT) {
            this->SMSG_PLAY_SPELL_IMPACT = std::move(other.SMSG_PLAY_SPELL_IMPACT);
        }
        if (opcode == Opcode::SMSG_EXPLORATION_EXPERIENCE) {
            this->SMSG_EXPLORATION_EXPERIENCE = std::move(other.SMSG_EXPLORATION_EXPERIENCE);
        }
        if (opcode == Opcode::MSG_RANDOM_ROLL) {
            this->MSG_RANDOM_ROLL = std::move(other.MSG_RANDOM_ROLL);
        }
        if (opcode == Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG) {
            this->SMSG_ENVIRONMENTAL_DAMAGE_LOG = std::move(other.SMSG_ENVIRONMENTAL_DAMAGE_LOG);
        }
        if (opcode == Opcode::SMSG_LFG_PLAYER_REWARD) {
            this->SMSG_LFG_PLAYER_REWARD = std::move(other.SMSG_LFG_PLAYER_REWARD);
        }
        if (opcode == Opcode::SMSG_LFG_TELEPORT_DENIED) {
            this->SMSG_LFG_TELEPORT_DENIED = std::move(other.SMSG_LFG_TELEPORT_DENIED);
        }
        if (opcode == Opcode::SMSG_REMOVED_SPELL) {
            this->SMSG_REMOVED_SPELL = std::move(other.SMSG_REMOVED_SPELL);
        }
        if (opcode == Opcode::SMSG_GMTICKET_CREATE) {
            this->SMSG_GMTICKET_CREATE = std::move(other.SMSG_GMTICKET_CREATE);
        }
        if (opcode == Opcode::SMSG_GMTICKET_UPDATETEXT) {
            this->SMSG_GMTICKET_UPDATETEXT = std::move(other.SMSG_GMTICKET_UPDATETEXT);
        }
        if (opcode == Opcode::SMSG_ACCOUNT_DATA_TIMES) {
            this->SMSG_ACCOUNT_DATA_TIMES = std::move(other.SMSG_ACCOUNT_DATA_TIMES);
        }
        if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA) {
            this->SMSG_UPDATE_ACCOUNT_DATA = std::move(other.SMSG_UPDATE_ACCOUNT_DATA);
        }
        if (opcode == Opcode::SMSG_GMTICKET_GETTICKET) {
            this->SMSG_GMTICKET_GETTICKET = std::move(other.SMSG_GMTICKET_GETTICKET);
        }
        if (opcode == Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) {
            this->SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT = std::move(other.SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT);
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM) {
            this->SMSG_GAMEOBJECT_DESPAWN_ANIM = std::move(other.SMSG_GAMEOBJECT_DESPAWN_ANIM);
        }
        if (opcode == Opcode::MSG_CORPSE_QUERY) {
            this->MSG_CORPSE_QUERY = std::move(other.MSG_CORPSE_QUERY);
        }
        if (opcode == Opcode::SMSG_GMTICKET_DELETETICKET) {
            this->SMSG_GMTICKET_DELETETICKET = std::move(other.SMSG_GMTICKET_DELETETICKET);
        }
        if (opcode == Opcode::SMSG_CHAT_WRONG_FACTION) {
            this->SMSG_CHAT_WRONG_FACTION = std::move(other.SMSG_CHAT_WRONG_FACTION);
        }
        if (opcode == Opcode::SMSG_GMTICKET_SYSTEMSTATUS) {
            this->SMSG_GMTICKET_SYSTEMSTATUS = std::move(other.SMSG_GMTICKET_SYSTEMSTATUS);
        }
        if (opcode == Opcode::SMSG_QUEST_FORCE_REMOVE) {
            this->SMSG_QUEST_FORCE_REMOVE = std::move(other.SMSG_QUEST_FORCE_REMOVE);
        }
        if (opcode == Opcode::SMSG_SPIRIT_HEALER_CONFIRM) {
            this->SMSG_SPIRIT_HEALER_CONFIRM = std::move(other.SMSG_SPIRIT_HEALER_CONFIRM);
        }
        if (opcode == Opcode::SMSG_GOSSIP_POI) {
            this->SMSG_GOSSIP_POI = std::move(other.SMSG_GOSSIP_POI);
        }
        if (opcode == Opcode::SMSG_LOGIN_VERIFY_WORLD) {
            this->SMSG_LOGIN_VERIFY_WORLD = std::move(other.SMSG_LOGIN_VERIFY_WORLD);
        }
        if (opcode == Opcode::SMSG_SEND_MAIL_RESULT) {
            this->SMSG_SEND_MAIL_RESULT = std::move(other.SMSG_SEND_MAIL_RESULT);
        }
        if (opcode == Opcode::SMSG_MAIL_LIST_RESULT) {
            this->SMSG_MAIL_LIST_RESULT = std::move(other.SMSG_MAIL_LIST_RESULT);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_LIST) {
            this->SMSG_BATTLEFIELD_LIST = std::move(other.SMSG_BATTLEFIELD_LIST);
        }
        if (opcode == Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE) {
            this->SMSG_ITEM_TEXT_QUERY_RESPONSE = std::move(other.SMSG_ITEM_TEXT_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_SPELLLOGMISS) {
            this->SMSG_SPELLLOGMISS = std::move(other.SMSG_SPELLLOGMISS);
        }
        if (opcode == Opcode::SMSG_SPELLLOGEXECUTE) {
            this->SMSG_SPELLLOGEXECUTE = std::move(other.SMSG_SPELLLOGEXECUTE);
        }
        if (opcode == Opcode::SMSG_PERIODICAURALOG) {
            this->SMSG_PERIODICAURALOG = std::move(other.SMSG_PERIODICAURALOG);
        }
        if (opcode == Opcode::SMSG_SPELLDAMAGESHIELD) {
            this->SMSG_SPELLDAMAGESHIELD = std::move(other.SMSG_SPELLDAMAGESHIELD);
        }
        if (opcode == Opcode::SMSG_SPELLNONMELEEDAMAGELOG) {
            this->SMSG_SPELLNONMELEEDAMAGELOG = std::move(other.SMSG_SPELLNONMELEEDAMAGELOG);
        }
        if (opcode == Opcode::SMSG_RESURRECT_FAILED) {
            this->SMSG_RESURRECT_FAILED = std::move(other.SMSG_RESURRECT_FAILED);
        }
        if (opcode == Opcode::SMSG_ZONE_UNDER_ATTACK) {
            this->SMSG_ZONE_UNDER_ATTACK = std::move(other.SMSG_ZONE_UNDER_ATTACK);
        }
        if (opcode == Opcode::MSG_AUCTION_HELLO) {
            this->MSG_AUCTION_HELLO = std::move(other.MSG_AUCTION_HELLO);
        }
        if (opcode == Opcode::SMSG_AUCTION_COMMAND_RESULT) {
            this->SMSG_AUCTION_COMMAND_RESULT = std::move(other.SMSG_AUCTION_COMMAND_RESULT);
        }
        if (opcode == Opcode::SMSG_AUCTION_LIST_RESULT) {
            this->SMSG_AUCTION_LIST_RESULT = std::move(other.SMSG_AUCTION_LIST_RESULT);
        }
        if (opcode == Opcode::SMSG_AUCTION_OWNER_LIST_RESULT) {
            this->SMSG_AUCTION_OWNER_LIST_RESULT = std::move(other.SMSG_AUCTION_OWNER_LIST_RESULT);
        }
        if (opcode == Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION) {
            this->SMSG_AUCTION_BIDDER_NOTIFICATION = std::move(other.SMSG_AUCTION_BIDDER_NOTIFICATION);
        }
        if (opcode == Opcode::SMSG_AUCTION_OWNER_NOTIFICATION) {
            this->SMSG_AUCTION_OWNER_NOTIFICATION = std::move(other.SMSG_AUCTION_OWNER_NOTIFICATION);
        }
        if (opcode == Opcode::SMSG_PROCRESIST) {
            this->SMSG_PROCRESIST = std::move(other.SMSG_PROCRESIST);
        }
        if (opcode == Opcode::SMSG_DISPEL_FAILED) {
            this->SMSG_DISPEL_FAILED = std::move(other.SMSG_DISPEL_FAILED);
        }
        if (opcode == Opcode::SMSG_SPELLORDAMAGE_IMMUNE) {
            this->SMSG_SPELLORDAMAGE_IMMUNE = std::move(other.SMSG_SPELLORDAMAGE_IMMUNE);
        }
        if (opcode == Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT) {
            this->SMSG_AUCTION_BIDDER_LIST_RESULT = std::move(other.SMSG_AUCTION_BIDDER_LIST_RESULT);
        }
        if (opcode == Opcode::SMSG_SET_FLAT_SPELL_MODIFIER) {
            this->SMSG_SET_FLAT_SPELL_MODIFIER = std::move(other.SMSG_SET_FLAT_SPELL_MODIFIER);
        }
        if (opcode == Opcode::SMSG_SET_PCT_SPELL_MODIFIER) {
            this->SMSG_SET_PCT_SPELL_MODIFIER = std::move(other.SMSG_SET_PCT_SPELL_MODIFIER);
        }
        if (opcode == Opcode::SMSG_CORPSE_RECLAIM_DELAY) {
            this->SMSG_CORPSE_RECLAIM_DELAY = std::move(other.SMSG_CORPSE_RECLAIM_DELAY);
        }
        if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
            this->MSG_LIST_STABLED_PETS = std::move(other.MSG_LIST_STABLED_PETS);
        }
        if (opcode == Opcode::SMSG_STABLE_RESULT) {
            this->SMSG_STABLE_RESULT = std::move(other.SMSG_STABLE_RESULT);
        }
        if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
            this->MSG_QUEST_PUSH_RESULT = std::move(other.MSG_QUEST_PUSH_RESULT);
        }
        if (opcode == Opcode::SMSG_PLAY_MUSIC) {
            this->SMSG_PLAY_MUSIC = std::move(other.SMSG_PLAY_MUSIC);
        }
        if (opcode == Opcode::SMSG_PLAY_OBJECT_SOUND) {
            this->SMSG_PLAY_OBJECT_SOUND = std::move(other.SMSG_PLAY_OBJECT_SOUND);
        }
        if (opcode == Opcode::SMSG_SPELLDISPELLOG) {
            this->SMSG_SPELLDISPELLOG = std::move(other.SMSG_SPELLDISPELLOG);
        }
        if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
            this->MSG_QUERY_NEXT_MAIL_TIME = std::move(other.MSG_QUERY_NEXT_MAIL_TIME);
        }
        if (opcode == Opcode::SMSG_RECEIVED_MAIL) {
            this->SMSG_RECEIVED_MAIL = std::move(other.SMSG_RECEIVED_MAIL);
        }
        if (opcode == Opcode::SMSG_RAID_GROUP_ONLY) {
            this->SMSG_RAID_GROUP_ONLY = std::move(other.SMSG_RAID_GROUP_ONLY);
        }
        if (opcode == Opcode::SMSG_PVP_CREDIT) {
            this->SMSG_PVP_CREDIT = std::move(other.SMSG_PVP_CREDIT);
        }
        if (opcode == Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION) {
            this->SMSG_AUCTION_REMOVED_NOTIFICATION = std::move(other.SMSG_AUCTION_REMOVED_NOTIFICATION);
        }
        if (opcode == Opcode::SMSG_SERVER_MESSAGE) {
            this->SMSG_SERVER_MESSAGE = std::move(other.SMSG_SERVER_MESSAGE);
        }
        if (opcode == Opcode::SMSG_LFG_OFFER_CONTINUE) {
            this->SMSG_LFG_OFFER_CONTINUE = std::move(other.SMSG_LFG_OFFER_CONTINUE);
        }
        if (opcode == Opcode::SMSG_SHOW_MAILBOX) {
            this->SMSG_SHOW_MAILBOX = std::move(other.SMSG_SHOW_MAILBOX);
        }
        if (opcode == Opcode::SMSG_CANCEL_AUTO_REPEAT) {
            this->SMSG_CANCEL_AUTO_REPEAT = std::move(other.SMSG_CANCEL_AUTO_REPEAT);
        }
        if (opcode == Opcode::SMSG_STANDSTATE_UPDATE) {
            this->SMSG_STANDSTATE_UPDATE = std::move(other.SMSG_STANDSTATE_UPDATE);
        }
        if (opcode == Opcode::SMSG_LOOT_ALL_PASSED) {
            this->SMSG_LOOT_ALL_PASSED = std::move(other.SMSG_LOOT_ALL_PASSED);
        }
        if (opcode == Opcode::SMSG_LOOT_ROLL_WON) {
            this->SMSG_LOOT_ROLL_WON = std::move(other.SMSG_LOOT_ROLL_WON);
        }
        if (opcode == Opcode::SMSG_LOOT_START_ROLL) {
            this->SMSG_LOOT_START_ROLL = std::move(other.SMSG_LOOT_START_ROLL);
        }
        if (opcode == Opcode::SMSG_LOOT_ROLL) {
            this->SMSG_LOOT_ROLL = std::move(other.SMSG_LOOT_ROLL);
        }
        if (opcode == Opcode::SMSG_LOOT_MASTER_LIST) {
            this->SMSG_LOOT_MASTER_LIST = std::move(other.SMSG_LOOT_MASTER_LIST);
        }
        if (opcode == Opcode::SMSG_SET_FORCED_REACTIONS) {
            this->SMSG_SET_FORCED_REACTIONS = std::move(other.SMSG_SET_FORCED_REACTIONS);
        }
        if (opcode == Opcode::SMSG_SPELL_FAILED_OTHER) {
            this->SMSG_SPELL_FAILED_OTHER = std::move(other.SMSG_SPELL_FAILED_OTHER);
        }
        if (opcode == Opcode::SMSG_CHAT_PLAYER_NOT_FOUND) {
            this->SMSG_CHAT_PLAYER_NOT_FOUND = std::move(other.SMSG_CHAT_PLAYER_NOT_FOUND);
        }
        if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
            this->MSG_TALENT_WIPE_CONFIRM = std::move(other.MSG_TALENT_WIPE_CONFIRM);
        }
        if (opcode == Opcode::SMSG_SUMMON_REQUEST) {
            this->SMSG_SUMMON_REQUEST = std::move(other.SMSG_SUMMON_REQUEST);
        }
        if (opcode == Opcode::SMSG_MONSTER_MOVE_TRANSPORT) {
            this->SMSG_MONSTER_MOVE_TRANSPORT = std::move(other.SMSG_MONSTER_MOVE_TRANSPORT);
        }
        if (opcode == Opcode::SMSG_PET_BROKEN) {
            this->SMSG_PET_BROKEN = std::move(other.SMSG_PET_BROKEN);
        }
        if (opcode == Opcode::MSG_MOVE_FEATHER_FALL) {
            this->MSG_MOVE_FEATHER_FALL = std::move(other.MSG_MOVE_FEATHER_FALL);
        }
        if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
            this->MSG_MOVE_WATER_WALK = std::move(other.MSG_MOVE_WATER_WALK);
        }
        if (opcode == Opcode::SMSG_FEIGN_DEATH_RESISTED) {
            this->SMSG_FEIGN_DEATH_RESISTED = std::move(other.SMSG_FEIGN_DEATH_RESISTED);
        }
        if (opcode == Opcode::SMSG_DUEL_COUNTDOWN) {
            this->SMSG_DUEL_COUNTDOWN = std::move(other.SMSG_DUEL_COUNTDOWN);
        }
        if (opcode == Opcode::SMSG_AREA_TRIGGER_MESSAGE) {
            this->SMSG_AREA_TRIGGER_MESSAGE = std::move(other.SMSG_AREA_TRIGGER_MESSAGE);
        }
        if (opcode == Opcode::SMSG_LFG_ROLE_CHOSEN) {
            this->SMSG_LFG_ROLE_CHOSEN = std::move(other.SMSG_LFG_ROLE_CHOSEN);
        }
        if (opcode == Opcode::SMSG_PLAYER_SKINNED) {
            this->SMSG_PLAYER_SKINNED = std::move(other.SMSG_PLAYER_SKINNED);
        }
        if (opcode == Opcode::SMSG_DURABILITY_DAMAGE_DEATH) {
            this->SMSG_DURABILITY_DAMAGE_DEATH = std::move(other.SMSG_DURABILITY_DAMAGE_DEATH);
        }
        if (opcode == Opcode::MSG_PETITION_RENAME) {
            this->MSG_PETITION_RENAME = std::move(other.MSG_PETITION_RENAME);
        }
        if (opcode == Opcode::SMSG_INIT_WORLD_STATES) {
            this->SMSG_INIT_WORLD_STATES = std::move(other.SMSG_INIT_WORLD_STATES);
        }
        if (opcode == Opcode::SMSG_UPDATE_WORLD_STATE) {
            this->SMSG_UPDATE_WORLD_STATE = std::move(other.SMSG_UPDATE_WORLD_STATE);
        }
        if (opcode == Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE) {
            this->SMSG_ITEM_NAME_QUERY_RESPONSE = std::move(other.SMSG_ITEM_NAME_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_PET_ACTION_FEEDBACK) {
            this->SMSG_PET_ACTION_FEEDBACK = std::move(other.SMSG_PET_ACTION_FEEDBACK);
        }
        if (opcode == Opcode::SMSG_CHAR_RENAME) {
            this->SMSG_CHAR_RENAME = std::move(other.SMSG_CHAR_RENAME);
        }
        if (opcode == Opcode::SMSG_INSTANCE_SAVE_CREATED) {
            this->SMSG_INSTANCE_SAVE_CREATED = std::move(other.SMSG_INSTANCE_SAVE_CREATED);
        }
        if (opcode == Opcode::SMSG_RAID_INSTANCE_INFO) {
            this->SMSG_RAID_INSTANCE_INFO = std::move(other.SMSG_RAID_INSTANCE_INFO);
        }
        if (opcode == Opcode::SMSG_PLAY_SOUND) {
            this->SMSG_PLAY_SOUND = std::move(other.SMSG_PLAY_SOUND);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_STATUS) {
            this->SMSG_BATTLEFIELD_STATUS = std::move(other.SMSG_BATTLEFIELD_STATUS);
        }
        if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
            this->MSG_INSPECT_HONOR_STATS = std::move(other.MSG_INSPECT_HONOR_STATS);
        }
        if (opcode == Opcode::SMSG_FORCE_WALK_SPEED_CHANGE) {
            this->SMSG_FORCE_WALK_SPEED_CHANGE = std::move(other.SMSG_FORCE_WALK_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) {
            this->SMSG_FORCE_SWIM_BACK_SPEED_CHANGE = std::move(other.SMSG_FORCE_SWIM_BACK_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_TURN_RATE_CHANGE) {
            this->SMSG_FORCE_TURN_RATE_CHANGE = std::move(other.SMSG_FORCE_TURN_RATE_CHANGE);
        }
        if (opcode == Opcode::SMSG_AREA_SPIRIT_HEALER_TIME) {
            this->SMSG_AREA_SPIRIT_HEALER_TIME = std::move(other.SMSG_AREA_SPIRIT_HEALER_TIME);
        }
        if (opcode == Opcode::SMSG_WARDEN_DATA) {
            this->SMSG_WARDEN_DATA = std::move(other.SMSG_WARDEN_DATA);
        }
        if (opcode == Opcode::SMSG_GROUP_JOINED_BATTLEGROUND) {
            this->SMSG_GROUP_JOINED_BATTLEGROUND = std::move(other.SMSG_GROUP_JOINED_BATTLEGROUND);
        }
        if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
            this->MSG_BATTLEGROUND_PLAYER_POSITIONS = std::move(other.MSG_BATTLEGROUND_PLAYER_POSITIONS);
        }
        if (opcode == Opcode::SMSG_BINDER_CONFIRM) {
            this->SMSG_BINDER_CONFIRM = std::move(other.SMSG_BINDER_CONFIRM);
        }
        if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED) {
            this->SMSG_BATTLEGROUND_PLAYER_JOINED = std::move(other.SMSG_BATTLEGROUND_PLAYER_JOINED);
        }
        if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT) {
            this->SMSG_BATTLEGROUND_PLAYER_LEFT = std::move(other.SMSG_BATTLEGROUND_PLAYER_LEFT);
        }
        if (opcode == Opcode::SMSG_ADDON_INFO) {
            this->SMSG_ADDON_INFO = std::move(other.SMSG_ADDON_INFO);
        }
        if (opcode == Opcode::SMSG_PET_UNLEARN_CONFIRM) {
            this->SMSG_PET_UNLEARN_CONFIRM = std::move(other.SMSG_PET_UNLEARN_CONFIRM);
        }
        if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS_FULL) {
            this->SMSG_PARTY_MEMBER_STATS_FULL = std::move(other.SMSG_PARTY_MEMBER_STATS_FULL);
        }
        if (opcode == Opcode::SMSG_WEATHER) {
            this->SMSG_WEATHER = std::move(other.SMSG_WEATHER);
        }
        if (opcode == Opcode::SMSG_RAID_INSTANCE_MESSAGE) {
            this->SMSG_RAID_INSTANCE_MESSAGE = std::move(other.SMSG_RAID_INSTANCE_MESSAGE);
        }
        if (opcode == Opcode::SMSG_COMPRESSED_MOVES) {
            this->SMSG_COMPRESSED_MOVES = std::move(other.SMSG_COMPRESSED_MOVES);
        }
        if (opcode == Opcode::SMSG_CHAT_RESTRICTED) {
            this->SMSG_CHAT_RESTRICTED = std::move(other.SMSG_CHAT_RESTRICTED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_RUN_SPEED) {
            this->SMSG_SPLINE_SET_RUN_SPEED = std::move(other.SMSG_SPLINE_SET_RUN_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED) {
            this->SMSG_SPLINE_SET_RUN_BACK_SPEED = std::move(other.SMSG_SPLINE_SET_RUN_BACK_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_SPEED) {
            this->SMSG_SPLINE_SET_SWIM_SPEED = std::move(other.SMSG_SPLINE_SET_SWIM_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_WALK_SPEED) {
            this->SMSG_SPLINE_SET_WALK_SPEED = std::move(other.SMSG_SPLINE_SET_WALK_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED) {
            this->SMSG_SPLINE_SET_SWIM_BACK_SPEED = std::move(other.SMSG_SPLINE_SET_SWIM_BACK_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_TURN_RATE) {
            this->SMSG_SPLINE_SET_TURN_RATE = std::move(other.SMSG_SPLINE_SET_TURN_RATE);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_UNROOT) {
            this->SMSG_SPLINE_MOVE_UNROOT = std::move(other.SMSG_SPLINE_MOVE_UNROOT);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL) {
            this->SMSG_SPLINE_MOVE_FEATHER_FALL = std::move(other.SMSG_SPLINE_MOVE_FEATHER_FALL);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL) {
            this->SMSG_SPLINE_MOVE_NORMAL_FALL = std::move(other.SMSG_SPLINE_MOVE_NORMAL_FALL);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_HOVER) {
            this->SMSG_SPLINE_MOVE_SET_HOVER = std::move(other.SMSG_SPLINE_MOVE_SET_HOVER);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER) {
            this->SMSG_SPLINE_MOVE_UNSET_HOVER = std::move(other.SMSG_SPLINE_MOVE_UNSET_HOVER);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_WATER_WALK) {
            this->SMSG_SPLINE_MOVE_WATER_WALK = std::move(other.SMSG_SPLINE_MOVE_WATER_WALK);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_LAND_WALK) {
            this->SMSG_SPLINE_MOVE_LAND_WALK = std::move(other.SMSG_SPLINE_MOVE_LAND_WALK);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_START_SWIM) {
            this->SMSG_SPLINE_MOVE_START_SWIM = std::move(other.SMSG_SPLINE_MOVE_START_SWIM);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_STOP_SWIM) {
            this->SMSG_SPLINE_MOVE_STOP_SWIM = std::move(other.SMSG_SPLINE_MOVE_STOP_SWIM);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE) {
            this->SMSG_SPLINE_MOVE_SET_RUN_MODE = std::move(other.SMSG_SPLINE_MOVE_SET_RUN_MODE);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE) {
            this->SMSG_SPLINE_MOVE_SET_WALK_MODE = std::move(other.SMSG_SPLINE_MOVE_SET_WALK_MODE);
        }
        if (opcode == Opcode::MSG_MOVE_TIME_SKIPPED) {
            this->MSG_MOVE_TIME_SKIPPED = std::move(other.MSG_MOVE_TIME_SKIPPED);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_ROOT) {
            this->SMSG_SPLINE_MOVE_ROOT = std::move(other.SMSG_SPLINE_MOVE_ROOT);
        }
        if (opcode == Opcode::SMSG_INVALIDATE_PLAYER) {
            this->SMSG_INVALIDATE_PLAYER = std::move(other.SMSG_INVALIDATE_PLAYER);
        }
        if (opcode == Opcode::SMSG_INSTANCE_RESET) {
            this->SMSG_INSTANCE_RESET = std::move(other.SMSG_INSTANCE_RESET);
        }
        if (opcode == Opcode::SMSG_INSTANCE_RESET_FAILED) {
            this->SMSG_INSTANCE_RESET_FAILED = std::move(other.SMSG_INSTANCE_RESET_FAILED);
        }
        if (opcode == Opcode::SMSG_UPDATE_LAST_INSTANCE) {
            this->SMSG_UPDATE_LAST_INSTANCE = std::move(other.SMSG_UPDATE_LAST_INSTANCE);
        }
        if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
            this->MSG_RAID_TARGET_UPDATE = std::move(other.MSG_RAID_TARGET_UPDATE);
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK) {
            this->MSG_RAID_READY_CHECK = std::move(other.MSG_RAID_READY_CHECK);
        }
        if (opcode == Opcode::SMSG_PET_ACTION_SOUND) {
            this->SMSG_PET_ACTION_SOUND = std::move(other.SMSG_PET_ACTION_SOUND);
        }
        if (opcode == Opcode::SMSG_PET_DISMISS_SOUND) {
            this->SMSG_PET_DISMISS_SOUND = std::move(other.SMSG_PET_DISMISS_SOUND);
        }
        if (opcode == Opcode::SMSG_GM_TICKET_STATUS_UPDATE) {
            this->SMSG_GM_TICKET_STATUS_UPDATE = std::move(other.SMSG_GM_TICKET_STATUS_UPDATE);
        }
        if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
            this->MSG_SET_DUNGEON_DIFFICULTY = std::move(other.MSG_SET_DUNGEON_DIFFICULTY);
        }
        if (opcode == Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP) {
            this->SMSG_UPDATE_INSTANCE_OWNERSHIP = std::move(other.SMSG_UPDATE_INSTANCE_OWNERSHIP);
        }
        if (opcode == Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS) {
            this->SMSG_CHAT_PLAYER_AMBIGUOUS = std::move(other.SMSG_CHAT_PLAYER_AMBIGUOUS);
        }
        if (opcode == Opcode::SMSG_SPELLINSTAKILLLOG) {
            this->SMSG_SPELLINSTAKILLLOG = std::move(other.SMSG_SPELLINSTAKILLLOG);
        }
        if (opcode == Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS) {
            this->SMSG_SPELL_UPDATE_CHAIN_TARGETS = std::move(other.SMSG_SPELL_UPDATE_CHAIN_TARGETS);
        }
        if (opcode == Opcode::SMSG_SPELLSTEALLOG) {
            this->SMSG_SPELLSTEALLOG = std::move(other.SMSG_SPELLSTEALLOG);
        }
        if (opcode == Opcode::SMSG_DEFENSE_MESSAGE) {
            this->SMSG_DEFENSE_MESSAGE = std::move(other.SMSG_DEFENSE_MESSAGE);
        }
        if (opcode == Opcode::SMSG_INSTANCE_DIFFICULTY) {
            this->SMSG_INSTANCE_DIFFICULTY = std::move(other.SMSG_INSTANCE_DIFFICULTY);
        }
        if (opcode == Opcode::SMSG_MOTD) {
            this->SMSG_MOTD = std::move(other.SMSG_MOTD);
        }
        if (opcode == Opcode::SMSG_MOVE_SET_CAN_FLY) {
            this->SMSG_MOVE_SET_CAN_FLY = std::move(other.SMSG_MOVE_SET_CAN_FLY);
        }
        if (opcode == Opcode::SMSG_MOVE_UNSET_CAN_FLY) {
            this->SMSG_MOVE_UNSET_CAN_FLY = std::move(other.SMSG_MOVE_UNSET_CAN_FLY);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT) {
            this->SMSG_ARENA_TEAM_COMMAND_RESULT = std::move(other.SMSG_ARENA_TEAM_COMMAND_RESULT);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE) {
            this->SMSG_ARENA_TEAM_QUERY_RESPONSE = std::move(other.SMSG_ARENA_TEAM_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_ROSTER) {
            this->SMSG_ARENA_TEAM_ROSTER = std::move(other.SMSG_ARENA_TEAM_ROSTER);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_INVITE) {
            this->SMSG_ARENA_TEAM_INVITE = std::move(other.SMSG_ARENA_TEAM_INVITE);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_EVENT) {
            this->SMSG_ARENA_TEAM_EVENT = std::move(other.SMSG_ARENA_TEAM_EVENT);
        }
        if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
            this->MSG_MOVE_START_ASCEND = std::move(other.MSG_MOVE_START_ASCEND);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
            this->MSG_MOVE_STOP_ASCEND = std::move(other.MSG_MOVE_STOP_ASCEND);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_STATS) {
            this->SMSG_ARENA_TEAM_STATS = std::move(other.SMSG_ARENA_TEAM_STATS);
        }
        if (opcode == Opcode::SMSG_UPDATE_LFG_LIST) {
            this->SMSG_UPDATE_LFG_LIST = std::move(other.SMSG_UPDATE_LFG_LIST);
        }
        if (opcode == Opcode::SMSG_LFG_PROPOSAL_UPDATE) {
            this->SMSG_LFG_PROPOSAL_UPDATE = std::move(other.SMSG_LFG_PROPOSAL_UPDATE);
        }
        if (opcode == Opcode::SMSG_LFG_ROLE_CHECK_UPDATE) {
            this->SMSG_LFG_ROLE_CHECK_UPDATE = std::move(other.SMSG_LFG_ROLE_CHECK_UPDATE);
        }
        if (opcode == Opcode::SMSG_LFG_JOIN_RESULT) {
            this->SMSG_LFG_JOIN_RESULT = std::move(other.SMSG_LFG_JOIN_RESULT);
        }
        if (opcode == Opcode::SMSG_LFG_QUEUE_STATUS) {
            this->SMSG_LFG_QUEUE_STATUS = std::move(other.SMSG_LFG_QUEUE_STATUS);
        }
        if (opcode == Opcode::SMSG_LFG_UPDATE_PLAYER) {
            this->SMSG_LFG_UPDATE_PLAYER = std::move(other.SMSG_LFG_UPDATE_PLAYER);
        }
        if (opcode == Opcode::SMSG_LFG_UPDATE_PARTY) {
            this->SMSG_LFG_UPDATE_PARTY = std::move(other.SMSG_LFG_UPDATE_PARTY);
        }
        if (opcode == Opcode::SMSG_LFG_UPDATE_SEARCH) {
            this->SMSG_LFG_UPDATE_SEARCH = std::move(other.SMSG_LFG_UPDATE_SEARCH);
        }
        if (opcode == Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE) {
            this->SMSG_LFG_BOOT_PROPOSAL_UPDATE = std::move(other.SMSG_LFG_BOOT_PROPOSAL_UPDATE);
        }
        if (opcode == Opcode::SMSG_LFG_PLAYER_INFO) {
            this->SMSG_LFG_PLAYER_INFO = std::move(other.SMSG_LFG_PLAYER_INFO);
        }
        if (opcode == Opcode::SMSG_LFG_PARTY_INFO) {
            this->SMSG_LFG_PARTY_INFO = std::move(other.SMSG_LFG_PARTY_INFO);
        }
        if (opcode == Opcode::SMSG_TITLE_EARNED) {
            this->SMSG_TITLE_EARNED = std::move(other.SMSG_TITLE_EARNED);
        }
        if (opcode == Opcode::SMSG_ARENA_ERROR) {
            this->SMSG_ARENA_ERROR = std::move(other.SMSG_ARENA_ERROR);
        }
        if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
            this->MSG_INSPECT_ARENA_TEAMS = std::move(other.MSG_INSPECT_ARENA_TEAMS);
        }
        if (opcode == Opcode::SMSG_DEATH_RELEASE_LOC) {
            this->SMSG_DEATH_RELEASE_LOC = std::move(other.SMSG_DEATH_RELEASE_LOC);
        }
        if (opcode == Opcode::SMSG_FORCED_DEATH_UPDATE) {
            this->SMSG_FORCED_DEATH_UPDATE = std::move(other.SMSG_FORCED_DEATH_UPDATE);
        }
        if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_SPEED) {
            this->MSG_MOVE_SET_FLIGHT_SPEED = std::move(other.MSG_MOVE_SET_FLIGHT_SPEED);
        }
        if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
            this->MSG_MOVE_SET_FLIGHT_BACK_SPEED = std::move(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED);
        }
        if (opcode == Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE) {
            this->SMSG_FORCE_FLIGHT_SPEED_CHANGE = std::move(other.SMSG_FORCE_FLIGHT_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) {
            this->SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE = std::move(other.SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED) {
            this->SMSG_SPLINE_SET_FLIGHT_SPEED = std::move(other.SMSG_SPLINE_SET_FLIGHT_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) {
            this->SMSG_SPLINE_SET_FLIGHT_BACK_SPEED = std::move(other.SMSG_SPLINE_SET_FLIGHT_BACK_SPEED);
        }
        if (opcode == Opcode::SMSG_FLIGHT_SPLINE_SYNC) {
            this->SMSG_FLIGHT_SPLINE_SYNC = std::move(other.SMSG_FLIGHT_SPLINE_SYNC);
        }
        if (opcode == Opcode::SMSG_REALM_SPLIT) {
            this->SMSG_REALM_SPLIT = std::move(other.SMSG_REALM_SPLIT);
        }
        if (opcode == Opcode::SMSG_TIME_SYNC_REQ) {
            this->SMSG_TIME_SYNC_REQ = std::move(other.SMSG_TIME_SYNC_REQ);
        }
        if (opcode == Opcode::SMSG_RESET_FAILED_NOTIFY) {
            this->SMSG_RESET_FAILED_NOTIFY = std::move(other.SMSG_RESET_FAILED_NOTIFY);
        }
        if (opcode == Opcode::SMSG_LFG_DISABLED) {
            this->SMSG_LFG_DISABLED = std::move(other.SMSG_LFG_DISABLED);
        }
        if (opcode == Opcode::SMSG_UPDATE_COMBO_POINTS) {
            this->SMSG_UPDATE_COMBO_POINTS = std::move(other.SMSG_UPDATE_COMBO_POINTS);
        }
        if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
            this->MSG_MOVE_START_DESCEND = std::move(other.MSG_MOVE_START_DESCEND);
        }
        if (opcode == Opcode::SMSG_DISMOUNT) {
            this->SMSG_DISMOUNT = std::move(other.SMSG_DISMOUNT);
        }
        if (opcode == Opcode::MSG_MOVE_UPDATE_CAN_FLY) {
            this->MSG_MOVE_UPDATE_CAN_FLY = std::move(other.MSG_MOVE_UPDATE_CAN_FLY);
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
            this->MSG_RAID_READY_CHECK_CONFIRM = std::move(other.MSG_RAID_READY_CHECK_CONFIRM);
        }
        if (opcode == Opcode::SMSG_GM_MESSAGECHAT) {
            this->SMSG_GM_MESSAGECHAT = std::move(other.SMSG_GM_MESSAGECHAT);
        }
        if (opcode == Opcode::SMSG_CLEAR_TARGET) {
            this->SMSG_CLEAR_TARGET = std::move(other.SMSG_CLEAR_TARGET);
        }
        if (opcode == Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD) {
            this->SMSG_CROSSED_INEBRIATION_THRESHOLD = std::move(other.SMSG_CROSSED_INEBRIATION_THRESHOLD);
        }
        if (opcode == Opcode::SMSG_KICK_REASON) {
            this->SMSG_KICK_REASON = std::move(other.SMSG_KICK_REASON);
        }
        if (opcode == Opcode::SMSG_COMPLAIN_RESULT) {
            this->SMSG_COMPLAIN_RESULT = std::move(other.SMSG_COMPLAIN_RESULT);
        }
        if (opcode == Opcode::SMSG_FEATURE_SYSTEM_STATUS) {
            this->SMSG_FEATURE_SYSTEM_STATUS = std::move(other.SMSG_FEATURE_SYSTEM_STATUS);
        }
        if (opcode == Opcode::SMSG_CHANNEL_MEMBER_COUNT) {
            this->SMSG_CHANNEL_MEMBER_COUNT = std::move(other.SMSG_CHANNEL_MEMBER_COUNT);
        }
        if (opcode == Opcode::SMSG_GUILD_BANK_LIST) {
            this->SMSG_GUILD_BANK_LIST = std::move(other.SMSG_GUILD_BANK_LIST);
        }
        if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
            this->MSG_GUILD_BANK_LOG_QUERY = std::move(other.MSG_GUILD_BANK_LOG_QUERY);
        }
        if (opcode == Opcode::SMSG_USERLIST_ADD) {
            this->SMSG_USERLIST_ADD = std::move(other.SMSG_USERLIST_ADD);
        }
        if (opcode == Opcode::SMSG_USERLIST_REMOVE) {
            this->SMSG_USERLIST_REMOVE = std::move(other.SMSG_USERLIST_REMOVE);
        }
        if (opcode == Opcode::SMSG_USERLIST_UPDATE) {
            this->SMSG_USERLIST_UPDATE = std::move(other.SMSG_USERLIST_UPDATE);
        }
        if (opcode == Opcode::SMSG_INSPECT_TALENT) {
            this->SMSG_INSPECT_TALENT = std::move(other.SMSG_INSPECT_TALENT);
        }
        if (opcode == Opcode::SMSG_LOOT_LIST) {
            this->SMSG_LOOT_LIST = std::move(other.SMSG_LOOT_LIST);
        }
        if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
            this->MSG_GUILD_PERMISSIONS = std::move(other.MSG_GUILD_PERMISSIONS);
        }
        if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
            this->MSG_GUILD_BANK_MONEY_WITHDRAWN = std::move(other.MSG_GUILD_BANK_MONEY_WITHDRAWN);
        }
        if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
            this->MSG_GUILD_EVENT_LOG_QUERY = std::move(other.MSG_GUILD_EVENT_LOG_QUERY);
        }
        if (opcode == Opcode::SMSG_MIRRORIMAGE_DATA) {
            this->SMSG_MIRRORIMAGE_DATA = std::move(other.SMSG_MIRRORIMAGE_DATA);
        }
        if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
            this->MSG_QUERY_GUILD_BANK_TEXT = std::move(other.MSG_QUERY_GUILD_BANK_TEXT);
        }
        if (opcode == Opcode::SMSG_OVERRIDE_LIGHT) {
            this->SMSG_OVERRIDE_LIGHT = std::move(other.SMSG_OVERRIDE_LIGHT);
        }
        if (opcode == Opcode::SMSG_TOTEM_CREATED) {
            this->SMSG_TOTEM_CREATED = std::move(other.SMSG_TOTEM_CREATED);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE) {
            this->SMSG_QUESTGIVER_STATUS_MULTIPLE = std::move(other.SMSG_QUESTGIVER_STATUS_MULTIPLE);
        }
        if (opcode == Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) {
            this->SMSG_SET_PLAYER_DECLINED_NAMES_RESULT = std::move(other.SMSG_SET_PLAYER_DECLINED_NAMES_RESULT);
        }
        if (opcode == Opcode::SMSG_SEND_UNLEARN_SPELLS) {
            this->SMSG_SEND_UNLEARN_SPELLS = std::move(other.SMSG_SEND_UNLEARN_SPELLS);
        }
        if (opcode == Opcode::SMSG_PROPOSE_LEVEL_GRANT) {
            this->SMSG_PROPOSE_LEVEL_GRANT = std::move(other.SMSG_PROPOSE_LEVEL_GRANT);
        }
        if (opcode == Opcode::SMSG_REFER_A_FRIEND_FAILURE) {
            this->SMSG_REFER_A_FRIEND_FAILURE = std::move(other.SMSG_REFER_A_FRIEND_FAILURE);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_FLYING) {
            this->SMSG_SPLINE_MOVE_SET_FLYING = std::move(other.SMSG_SPLINE_MOVE_SET_FLYING);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING) {
            this->SMSG_SPLINE_MOVE_UNSET_FLYING = std::move(other.SMSG_SPLINE_MOVE_UNSET_FLYING);
        }
        if (opcode == Opcode::SMSG_ENABLE_BARBER_SHOP) {
            this->SMSG_ENABLE_BARBER_SHOP = std::move(other.SMSG_ENABLE_BARBER_SHOP);
        }
        if (opcode == Opcode::SMSG_BARBER_SHOP_RESULT) {
            this->SMSG_BARBER_SHOP_RESULT = std::move(other.SMSG_BARBER_SHOP_RESULT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_SEND_CALENDAR) {
            this->SMSG_CALENDAR_SEND_CALENDAR = std::move(other.SMSG_CALENDAR_SEND_CALENDAR);
        }
        if (opcode == Opcode::SMSG_CALENDAR_SEND_EVENT) {
            this->SMSG_CALENDAR_SEND_EVENT = std::move(other.SMSG_CALENDAR_SEND_EVENT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_FILTER_GUILD) {
            this->SMSG_CALENDAR_FILTER_GUILD = std::move(other.SMSG_CALENDAR_FILTER_GUILD);
        }
        if (opcode == Opcode::SMSG_CALENDAR_ARENA_TEAM) {
            this->SMSG_CALENDAR_ARENA_TEAM = std::move(other.SMSG_CALENDAR_ARENA_TEAM);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE) {
            this->SMSG_CALENDAR_EVENT_INVITE = std::move(other.SMSG_CALENDAR_EVENT_INVITE);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED) {
            this->SMSG_CALENDAR_EVENT_INVITE_REMOVED = std::move(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_STATUS) {
            this->SMSG_CALENDAR_EVENT_STATUS = std::move(other.SMSG_CALENDAR_EVENT_STATUS);
        }
        if (opcode == Opcode::SMSG_CALENDAR_COMMAND_RESULT) {
            this->SMSG_CALENDAR_COMMAND_RESULT = std::move(other.SMSG_CALENDAR_COMMAND_RESULT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED) {
            this->SMSG_CALENDAR_RAID_LOCKOUT_ADDED = std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_ADDED);
        }
        if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) {
            this->SMSG_CALENDAR_RAID_LOCKOUT_REMOVED = std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_REMOVED);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT) {
            this->SMSG_CALENDAR_EVENT_INVITE_ALERT = std::move(other.SMSG_CALENDAR_EVENT_INVITE_ALERT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) {
            this->SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT = std::move(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT) {
            this->SMSG_CALENDAR_EVENT_REMOVED_ALERT = std::move(other.SMSG_CALENDAR_EVENT_REMOVED_ALERT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT) {
            this->SMSG_CALENDAR_EVENT_UPDATED_ALERT = std::move(other.SMSG_CALENDAR_EVENT_UPDATED_ALERT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) {
            this->SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT = std::move(other.SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
            this->CMSG_CALENDAR_GET_NUM_PENDING = std::move(other.CMSG_CALENDAR_GET_NUM_PENDING);
        }
        if (opcode == Opcode::SMSG_CALENDAR_SEND_NUM_PENDING) {
            this->SMSG_CALENDAR_SEND_NUM_PENDING = std::move(other.SMSG_CALENDAR_SEND_NUM_PENDING);
        }
        if (opcode == Opcode::MSG_MOVE_SET_PITCH_RATE) {
            this->MSG_MOVE_SET_PITCH_RATE = std::move(other.MSG_MOVE_SET_PITCH_RATE);
        }
        if (opcode == Opcode::SMSG_FORCE_PITCH_RATE_CHANGE) {
            this->SMSG_FORCE_PITCH_RATE_CHANGE = std::move(other.SMSG_FORCE_PITCH_RATE_CHANGE);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES) {
            this->SMSG_CALENDAR_EVENT_INVITE_NOTES = std::move(other.SMSG_CALENDAR_EVENT_INVITE_NOTES);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) {
            this->SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT = std::move(other.SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT);
        }
        if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) {
            this->SMSG_UPDATE_ACCOUNT_DATA_COMPLETE = std::move(other.SMSG_UPDATE_ACCOUNT_DATA_COMPLETE);
        }
        if (opcode == Opcode::SMSG_TRIGGER_MOVIE) {
            this->SMSG_TRIGGER_MOVIE = std::move(other.SMSG_TRIGGER_MOVIE);
        }
        if (opcode == Opcode::SMSG_ACHIEVEMENT_EARNED) {
            this->SMSG_ACHIEVEMENT_EARNED = std::move(other.SMSG_ACHIEVEMENT_EARNED);
        }
        if (opcode == Opcode::SMSG_CRITERIA_UPDATE) {
            this->SMSG_CRITERIA_UPDATE = std::move(other.SMSG_CRITERIA_UPDATE);
        }
        if (opcode == Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS) {
            this->SMSG_RESPOND_INSPECT_ACHIEVEMENTS = std::move(other.SMSG_RESPOND_INSPECT_ACHIEVEMENTS);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL) {
            this->SMSG_QUESTUPDATE_ADD_PVP_KILL = std::move(other.SMSG_QUESTUPDATE_ADD_PVP_KILL);
        }
        if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) {
            this->SMSG_CALENDAR_RAID_LOCKOUT_UPDATED = std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_UPDATED);
        }
        if (opcode == Opcode::SMSG_CHAR_CUSTOMIZE) {
            this->SMSG_CHAR_CUSTOMIZE = std::move(other.SMSG_CHAR_CUSTOMIZE);
        }
        if (opcode == Opcode::SMSG_SET_PHASE_SHIFT) {
            this->SMSG_SET_PHASE_SHIFT = std::move(other.SMSG_SET_PHASE_SHIFT);
        }
        if (opcode == Opcode::SMSG_ALL_ACHIEVEMENT_DATA) {
            this->SMSG_ALL_ACHIEVEMENT_DATA = std::move(other.SMSG_ALL_ACHIEVEMENT_DATA);
        }
        if (opcode == Opcode::SMSG_POWER_UPDATE) {
            this->SMSG_POWER_UPDATE = std::move(other.SMSG_POWER_UPDATE);
        }
        if (opcode == Opcode::SMSG_HIGHEST_THREAT_UPDATE) {
            this->SMSG_HIGHEST_THREAT_UPDATE = std::move(other.SMSG_HIGHEST_THREAT_UPDATE);
        }
        if (opcode == Opcode::SMSG_THREAT_UPDATE) {
            this->SMSG_THREAT_UPDATE = std::move(other.SMSG_THREAT_UPDATE);
        }
        if (opcode == Opcode::SMSG_THREAT_REMOVE) {
            this->SMSG_THREAT_REMOVE = std::move(other.SMSG_THREAT_REMOVE);
        }
        if (opcode == Opcode::SMSG_THREAT_CLEAR) {
            this->SMSG_THREAT_CLEAR = std::move(other.SMSG_THREAT_CLEAR);
        }
        if (opcode == Opcode::SMSG_CONVERT_RUNE) {
            this->SMSG_CONVERT_RUNE = std::move(other.SMSG_CONVERT_RUNE);
        }
        if (opcode == Opcode::SMSG_RESYNC_RUNES) {
            this->SMSG_RESYNC_RUNES = std::move(other.SMSG_RESYNC_RUNES);
        }
        if (opcode == Opcode::SMSG_ADD_RUNE_POWER) {
            this->SMSG_ADD_RUNE_POWER = std::move(other.SMSG_ADD_RUNE_POWER);
        }
        if (opcode == Opcode::SMSG_AUCTION_LIST_PENDING_SALES) {
            this->SMSG_AUCTION_LIST_PENDING_SALES = std::move(other.SMSG_AUCTION_LIST_PENDING_SALES);
        }
        if (opcode == Opcode::SMSG_MODIFY_COOLDOWN) {
            this->SMSG_MODIFY_COOLDOWN = std::move(other.SMSG_MODIFY_COOLDOWN);
        }
        if (opcode == Opcode::SMSG_PET_UPDATE_COMBO_POINTS) {
            this->SMSG_PET_UPDATE_COMBO_POINTS = std::move(other.SMSG_PET_UPDATE_COMBO_POINTS);
        }
        if (opcode == Opcode::SMSG_PRE_RESURRECT) {
            this->SMSG_PRE_RESURRECT = std::move(other.SMSG_PRE_RESURRECT);
        }
        if (opcode == Opcode::SMSG_AURA_UPDATE_ALL) {
            this->SMSG_AURA_UPDATE_ALL = std::move(other.SMSG_AURA_UPDATE_ALL);
        }
        if (opcode == Opcode::SMSG_AURA_UPDATE) {
            this->SMSG_AURA_UPDATE = std::move(other.SMSG_AURA_UPDATE);
        }
        if (opcode == Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT) {
            this->SMSG_SERVER_FIRST_ACHIEVEMENT = std::move(other.SMSG_SERVER_FIRST_ACHIEVEMENT);
        }
        if (opcode == Opcode::SMSG_PET_LEARNED_SPELL) {
            this->SMSG_PET_LEARNED_SPELL = std::move(other.SMSG_PET_LEARNED_SPELL);
        }
        if (opcode == Opcode::SMSG_PET_UNLEARNED_SPELL) {
            this->SMSG_PET_UNLEARNED_SPELL = std::move(other.SMSG_PET_UNLEARNED_SPELL);
        }
        if (opcode == Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) {
            this->SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA = std::move(other.SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA);
        }
        if (opcode == Opcode::SMSG_CRITERIA_DELETED) {
            this->SMSG_CRITERIA_DELETED = std::move(other.SMSG_CRITERIA_DELETED);
        }
        if (opcode == Opcode::SMSG_ACHIEVEMENT_DELETED) {
            this->SMSG_ACHIEVEMENT_DELETED = std::move(other.SMSG_ACHIEVEMENT_DELETED);
        }
        if (opcode == Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED) {
            this->SMSG_BATTLEGROUND_INFO_THROTTLED = std::move(other.SMSG_BATTLEGROUND_INFO_THROTTLED);
        }
        if (opcode == Opcode::SMSG_PLAYER_VEHICLE_DATA) {
            this->SMSG_PLAYER_VEHICLE_DATA = std::move(other.SMSG_PLAYER_VEHICLE_DATA);
        }
        if (opcode == Opcode::SMSG_PET_GUIDS) {
            this->SMSG_PET_GUIDS = std::move(other.SMSG_PET_GUIDS);
        }
        if (opcode == Opcode::SMSG_CLIENTCACHE_VERSION) {
            this->SMSG_CLIENTCACHE_VERSION = std::move(other.SMSG_CLIENTCACHE_VERSION);
        }
        if (opcode == Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE) {
            this->SMSG_ITEM_REFUND_INFO_RESPONSE = std::move(other.SMSG_ITEM_REFUND_INFO_RESPONSE);
        }
        if (opcode == Opcode::SMSG_ITEM_REFUND_RESULT) {
            this->SMSG_ITEM_REFUND_RESULT = std::move(other.SMSG_ITEM_REFUND_RESULT);
        }
        if (opcode == Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) {
            this->SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE = std::move(other.SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION) {
            this->SMSG_CALENDAR_CLEAR_PENDING_ACTION = std::move(other.SMSG_CALENDAR_CLEAR_PENDING_ACTION);
        }
        if (opcode == Opcode::SMSG_EQUIPMENT_SET_LIST) {
            this->SMSG_EQUIPMENT_SET_LIST = std::move(other.SMSG_EQUIPMENT_SET_LIST);
        }
        if (opcode == Opcode::SMSG_SET_PROJECTILE_POSITION) {
            this->SMSG_SET_PROJECTILE_POSITION = std::move(other.SMSG_SET_PROJECTILE_POSITION);
        }
        if (opcode == Opcode::SMSG_TALENTS_INFO) {
            this->SMSG_TALENTS_INFO = std::move(other.SMSG_TALENTS_INFO);
        }
        if (opcode == Opcode::SMSG_ARENA_UNIT_DESTROYED) {
            this->SMSG_ARENA_UNIT_DESTROYED = std::move(other.SMSG_ARENA_UNIT_DESTROYED);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) {
            this->SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED = std::move(other.SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED);
        }
        if (opcode == Opcode::SMSG_MOVE_GRAVITY_DISABLE) {
            this->SMSG_MOVE_GRAVITY_DISABLE = std::move(other.SMSG_MOVE_GRAVITY_DISABLE);
        }
        if (opcode == Opcode::SMSG_MOVE_GRAVITY_ENABLE) {
            this->SMSG_MOVE_GRAVITY_ENABLE = std::move(other.SMSG_MOVE_GRAVITY_ENABLE);
        }
        if (opcode == Opcode::MSG_MOVE_GRAVITY_CHNG) {
            this->MSG_MOVE_GRAVITY_CHNG = std::move(other.MSG_MOVE_GRAVITY_CHNG);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE) {
            this->SMSG_SPLINE_MOVE_GRAVITY_DISABLE = std::move(other.SMSG_SPLINE_MOVE_GRAVITY_DISABLE);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE) {
            this->SMSG_SPLINE_MOVE_GRAVITY_ENABLE = std::move(other.SMSG_SPLINE_MOVE_GRAVITY_ENABLE);
        }
        if (opcode == Opcode::SMSG_EQUIPMENT_SET_USE_RESULT) {
            this->SMSG_EQUIPMENT_SET_USE_RESULT = std::move(other.SMSG_EQUIPMENT_SET_USE_RESULT);
        }
        if (opcode == Opcode::SMSG_CHAR_FACTION_CHANGE) {
            this->SMSG_CHAR_FACTION_CHANGE = std::move(other.SMSG_CHAR_FACTION_CHANGE);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) {
            this->SMSG_BATTLEFIELD_MGR_ENTRY_INVITE = std::move(other.SMSG_BATTLEFIELD_MGR_ENTRY_INVITE);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTERED) {
            this->SMSG_BATTLEFIELD_MGR_ENTERED = std::move(other.SMSG_BATTLEFIELD_MGR_ENTERED);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) {
            this->SMSG_BATTLEFIELD_MGR_QUEUE_INVITE = std::move(other.SMSG_BATTLEFIELD_MGR_QUEUE_INVITE);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) {
            this->SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE = std::move(other.SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING) {
            this->SMSG_BATTLEFIELD_MGR_EJECT_PENDING = std::move(other.SMSG_BATTLEFIELD_MGR_EJECT_PENDING);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECTED) {
            this->SMSG_BATTLEFIELD_MGR_EJECTED = std::move(other.SMSG_BATTLEFIELD_MGR_EJECTED);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE) {
            this->SMSG_BATTLEFIELD_MGR_STATE_CHANGE = std::move(other.SMSG_BATTLEFIELD_MGR_STATE_CHANGE);
        }
        if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
            this->MSG_SET_RAID_DIFFICULTY = std::move(other.MSG_SET_RAID_DIFFICULTY);
        }
        if (opcode == Opcode::SMSG_TOGGLE_XP_GAIN) {
            this->SMSG_TOGGLE_XP_GAIN = std::move(other.SMSG_TOGGLE_XP_GAIN);
        }
        if (opcode == Opcode::SMSG_GMRESPONSE_DB_ERROR) {
            this->SMSG_GMRESPONSE_DB_ERROR = std::move(other.SMSG_GMRESPONSE_DB_ERROR);
        }
        if (opcode == Opcode::SMSG_GMRESPONSE_RECEIVED) {
            this->SMSG_GMRESPONSE_RECEIVED = std::move(other.SMSG_GMRESPONSE_RECEIVED);
        }
        if (opcode == Opcode::SMSG_GMRESPONSE_STATUS_UPDATE) {
            this->SMSG_GMRESPONSE_STATUS_UPDATE = std::move(other.SMSG_GMRESPONSE_STATUS_UPDATE);
        }
        if (opcode == Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE) {
            this->SMSG_WORLD_STATE_UI_TIMER_UPDATE = std::move(other.SMSG_WORLD_STATE_UI_TIMER_UPDATE);
        }
        if (opcode == Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET) {
            this->SMSG_TALENTS_INVOLUNTARILY_RESET = std::move(other.SMSG_TALENTS_INVOLUNTARILY_RESET);
        }
        if (opcode == Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) {
            this->SMSG_QUERY_QUESTS_COMPLETED_RESPONSE = std::move(other.SMSG_QUERY_QUESTS_COMPLETED_RESPONSE);
        }
        if (opcode == Opcode::SMSG_CORPSE_NOT_IN_INSTANCE) {
            this->SMSG_CORPSE_NOT_IN_INSTANCE = std::move(other.SMSG_CORPSE_NOT_IN_INSTANCE);
        }
        if (opcode == Opcode::SMSG_CAMERA_SHAKE) {
            this->SMSG_CAMERA_SHAKE = std::move(other.SMSG_CAMERA_SHAKE);
        }
        if (opcode == Opcode::SMSG_SOCKET_GEMS_RESULT) {
            this->SMSG_SOCKET_GEMS_RESULT = std::move(other.SMSG_SOCKET_GEMS_RESULT);
        }
        if (opcode == Opcode::SMSG_REDIRECT_CLIENT) {
            this->SMSG_REDIRECT_CLIENT = std::move(other.SMSG_REDIRECT_CLIENT);
        }
        if (opcode == Opcode::SMSG_MOVE_SET_COLLISION_HGT) {
            this->SMSG_MOVE_SET_COLLISION_HGT = std::move(other.SMSG_MOVE_SET_COLLISION_HGT);
        }
        if (opcode == Opcode::SMSG_MULTIPLE_MOVES) {
            this->SMSG_MULTIPLE_MOVES = std::move(other.SMSG_MULTIPLE_MOVES);
        }
    }

    ServerOpcode operator=(ServerOpcode&& other) noexcept {
        this->opcode = other.opcode;
        other.opcode = Opcode::NONE;
        if (opcode == Opcode::SMSG_CHAR_CREATE) {
            this->SMSG_CHAR_CREATE = std::move(other.SMSG_CHAR_CREATE);
        }
        if (opcode == Opcode::SMSG_CHAR_ENUM) {
            this->SMSG_CHAR_ENUM = std::move(other.SMSG_CHAR_ENUM);
        }
        if (opcode == Opcode::SMSG_CHAR_DELETE) {
            this->SMSG_CHAR_DELETE = std::move(other.SMSG_CHAR_DELETE);
        }
        if (opcode == Opcode::SMSG_NEW_WORLD) {
            this->SMSG_NEW_WORLD = std::move(other.SMSG_NEW_WORLD);
        }
        if (opcode == Opcode::SMSG_TRANSFER_PENDING) {
            this->SMSG_TRANSFER_PENDING = std::move(other.SMSG_TRANSFER_PENDING);
        }
        if (opcode == Opcode::SMSG_TRANSFER_ABORTED) {
            this->SMSG_TRANSFER_ABORTED = std::move(other.SMSG_TRANSFER_ABORTED);
        }
        if (opcode == Opcode::SMSG_CHARACTER_LOGIN_FAILED) {
            this->SMSG_CHARACTER_LOGIN_FAILED = std::move(other.SMSG_CHARACTER_LOGIN_FAILED);
        }
        if (opcode == Opcode::SMSG_LOGIN_SETTIMESPEED) {
            this->SMSG_LOGIN_SETTIMESPEED = std::move(other.SMSG_LOGIN_SETTIMESPEED);
        }
        if (opcode == Opcode::SMSG_LOGOUT_RESPONSE) {
            this->SMSG_LOGOUT_RESPONSE = std::move(other.SMSG_LOGOUT_RESPONSE);
        }
        if (opcode == Opcode::SMSG_LOGOUT_COMPLETE) {
            this->SMSG_LOGOUT_COMPLETE = std::move(other.SMSG_LOGOUT_COMPLETE);
        }
        if (opcode == Opcode::SMSG_LOGOUT_CANCEL_ACK) {
            this->SMSG_LOGOUT_CANCEL_ACK = std::move(other.SMSG_LOGOUT_CANCEL_ACK);
        }
        if (opcode == Opcode::SMSG_NAME_QUERY_RESPONSE) {
            this->SMSG_NAME_QUERY_RESPONSE = std::move(other.SMSG_NAME_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_PET_NAME_QUERY_RESPONSE) {
            this->SMSG_PET_NAME_QUERY_RESPONSE = std::move(other.SMSG_PET_NAME_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_GUILD_QUERY_RESPONSE) {
            this->SMSG_GUILD_QUERY_RESPONSE = std::move(other.SMSG_GUILD_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE) {
            this->SMSG_ITEM_QUERY_SINGLE_RESPONSE = std::move(other.SMSG_ITEM_QUERY_SINGLE_RESPONSE);
        }
        if (opcode == Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE) {
            this->SMSG_PAGE_TEXT_QUERY_RESPONSE = std::move(other.SMSG_PAGE_TEXT_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_QUEST_QUERY_RESPONSE) {
            this->SMSG_QUEST_QUERY_RESPONSE = std::move(other.SMSG_QUEST_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE) {
            this->SMSG_GAMEOBJECT_QUERY_RESPONSE = std::move(other.SMSG_GAMEOBJECT_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_CREATURE_QUERY_RESPONSE) {
            this->SMSG_CREATURE_QUERY_RESPONSE = std::move(other.SMSG_CREATURE_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_WHO) {
            this->SMSG_WHO = std::move(other.SMSG_WHO);
        }
        if (opcode == Opcode::SMSG_WHOIS) {
            this->SMSG_WHOIS = std::move(other.SMSG_WHOIS);
        }
        if (opcode == Opcode::SMSG_CONTACT_LIST) {
            this->SMSG_CONTACT_LIST = std::move(other.SMSG_CONTACT_LIST);
        }
        if (opcode == Opcode::SMSG_FRIEND_STATUS) {
            this->SMSG_FRIEND_STATUS = std::move(other.SMSG_FRIEND_STATUS);
        }
        if (opcode == Opcode::SMSG_GROUP_INVITE) {
            this->SMSG_GROUP_INVITE = std::move(other.SMSG_GROUP_INVITE);
        }
        if (opcode == Opcode::SMSG_GROUP_DECLINE) {
            this->SMSG_GROUP_DECLINE = std::move(other.SMSG_GROUP_DECLINE);
        }
        if (opcode == Opcode::SMSG_GROUP_UNINVITE) {
            this->SMSG_GROUP_UNINVITE = std::move(other.SMSG_GROUP_UNINVITE);
        }
        if (opcode == Opcode::SMSG_GROUP_SET_LEADER) {
            this->SMSG_GROUP_SET_LEADER = std::move(other.SMSG_GROUP_SET_LEADER);
        }
        if (opcode == Opcode::SMSG_GROUP_DESTROYED) {
            this->SMSG_GROUP_DESTROYED = std::move(other.SMSG_GROUP_DESTROYED);
        }
        if (opcode == Opcode::SMSG_GROUP_LIST) {
            this->SMSG_GROUP_LIST = std::move(other.SMSG_GROUP_LIST);
        }
        if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS) {
            this->SMSG_PARTY_MEMBER_STATS = std::move(other.SMSG_PARTY_MEMBER_STATS);
        }
        if (opcode == Opcode::SMSG_PARTY_COMMAND_RESULT) {
            this->SMSG_PARTY_COMMAND_RESULT = std::move(other.SMSG_PARTY_COMMAND_RESULT);
        }
        if (opcode == Opcode::SMSG_GUILD_INVITE) {
            this->SMSG_GUILD_INVITE = std::move(other.SMSG_GUILD_INVITE);
        }
        if (opcode == Opcode::SMSG_GUILD_DECLINE) {
            this->SMSG_GUILD_DECLINE = std::move(other.SMSG_GUILD_DECLINE);
        }
        if (opcode == Opcode::SMSG_GUILD_INFO) {
            this->SMSG_GUILD_INFO = std::move(other.SMSG_GUILD_INFO);
        }
        if (opcode == Opcode::SMSG_GUILD_ROSTER) {
            this->SMSG_GUILD_ROSTER = std::move(other.SMSG_GUILD_ROSTER);
        }
        if (opcode == Opcode::SMSG_GUILD_EVENT) {
            this->SMSG_GUILD_EVENT = std::move(other.SMSG_GUILD_EVENT);
        }
        if (opcode == Opcode::SMSG_GUILD_COMMAND_RESULT) {
            this->SMSG_GUILD_COMMAND_RESULT = std::move(other.SMSG_GUILD_COMMAND_RESULT);
        }
        if (opcode == Opcode::SMSG_MESSAGECHAT) {
            this->SMSG_MESSAGECHAT = std::move(other.SMSG_MESSAGECHAT);
        }
        if (opcode == Opcode::SMSG_CHANNEL_NOTIFY) {
            this->SMSG_CHANNEL_NOTIFY = std::move(other.SMSG_CHANNEL_NOTIFY);
        }
        if (opcode == Opcode::SMSG_CHANNEL_LIST) {
            this->SMSG_CHANNEL_LIST = std::move(other.SMSG_CHANNEL_LIST);
        }
        if (opcode == Opcode::SMSG_UPDATE_OBJECT) {
            this->SMSG_UPDATE_OBJECT = std::move(other.SMSG_UPDATE_OBJECT);
        }
        if (opcode == Opcode::SMSG_DESTROY_OBJECT) {
            this->SMSG_DESTROY_OBJECT = std::move(other.SMSG_DESTROY_OBJECT);
        }
        if (opcode == Opcode::SMSG_READ_ITEM_OK) {
            this->SMSG_READ_ITEM_OK = std::move(other.SMSG_READ_ITEM_OK);
        }
        if (opcode == Opcode::SMSG_READ_ITEM_FAILED) {
            this->SMSG_READ_ITEM_FAILED = std::move(other.SMSG_READ_ITEM_FAILED);
        }
        if (opcode == Opcode::SMSG_ITEM_COOLDOWN) {
            this->SMSG_ITEM_COOLDOWN = std::move(other.SMSG_ITEM_COOLDOWN);
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM) {
            this->SMSG_GAMEOBJECT_CUSTOM_ANIM = std::move(other.SMSG_GAMEOBJECT_CUSTOM_ANIM);
        }
        if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
            this->MSG_MOVE_START_FORWARD = std::move(other.MSG_MOVE_START_FORWARD);
        }
        if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
            this->MSG_MOVE_START_BACKWARD = std::move(other.MSG_MOVE_START_BACKWARD);
        }
        if (opcode == Opcode::MSG_MOVE_STOP) {
            this->MSG_MOVE_STOP = std::move(other.MSG_MOVE_STOP);
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
            this->MSG_MOVE_START_STRAFE_LEFT = std::move(other.MSG_MOVE_START_STRAFE_LEFT);
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
            this->MSG_MOVE_START_STRAFE_RIGHT = std::move(other.MSG_MOVE_START_STRAFE_RIGHT);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
            this->MSG_MOVE_STOP_STRAFE = std::move(other.MSG_MOVE_STOP_STRAFE);
        }
        if (opcode == Opcode::MSG_MOVE_JUMP) {
            this->MSG_MOVE_JUMP = std::move(other.MSG_MOVE_JUMP);
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
            this->MSG_MOVE_START_TURN_LEFT = std::move(other.MSG_MOVE_START_TURN_LEFT);
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
            this->MSG_MOVE_START_TURN_RIGHT = std::move(other.MSG_MOVE_START_TURN_RIGHT);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
            this->MSG_MOVE_STOP_TURN = std::move(other.MSG_MOVE_STOP_TURN);
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
            this->MSG_MOVE_START_PITCH_UP = std::move(other.MSG_MOVE_START_PITCH_UP);
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
            this->MSG_MOVE_START_PITCH_DOWN = std::move(other.MSG_MOVE_START_PITCH_DOWN);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
            this->MSG_MOVE_STOP_PITCH = std::move(other.MSG_MOVE_STOP_PITCH);
        }
        if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
            this->MSG_MOVE_SET_RUN_MODE = std::move(other.MSG_MOVE_SET_RUN_MODE);
        }
        if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
            this->MSG_MOVE_SET_WALK_MODE = std::move(other.MSG_MOVE_SET_WALK_MODE);
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT_CHEAT) {
            this->MSG_MOVE_TELEPORT_CHEAT = std::move(other.MSG_MOVE_TELEPORT_CHEAT);
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
            this->MSG_MOVE_TELEPORT_ACK = std::move(other.MSG_MOVE_TELEPORT_ACK);
        }
        if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
            this->MSG_MOVE_FALL_LAND = std::move(other.MSG_MOVE_FALL_LAND);
        }
        if (opcode == Opcode::MSG_MOVE_START_SWIM) {
            this->MSG_MOVE_START_SWIM = std::move(other.MSG_MOVE_START_SWIM);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
            this->MSG_MOVE_STOP_SWIM = std::move(other.MSG_MOVE_STOP_SWIM);
        }
        if (opcode == Opcode::MSG_MOVE_SET_FACING) {
            this->MSG_MOVE_SET_FACING = std::move(other.MSG_MOVE_SET_FACING);
        }
        if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
            this->MSG_MOVE_SET_PITCH = std::move(other.MSG_MOVE_SET_PITCH);
        }
        if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
            this->MSG_MOVE_WORLDPORT_ACK = std::move(other.MSG_MOVE_WORLDPORT_ACK);
        }
        if (opcode == Opcode::SMSG_MONSTER_MOVE) {
            this->SMSG_MONSTER_MOVE = std::move(other.SMSG_MONSTER_MOVE);
        }
        if (opcode == Opcode::SMSG_MOVE_WATER_WALK) {
            this->SMSG_MOVE_WATER_WALK = std::move(other.SMSG_MOVE_WATER_WALK);
        }
        if (opcode == Opcode::SMSG_MOVE_LAND_WALK) {
            this->SMSG_MOVE_LAND_WALK = std::move(other.SMSG_MOVE_LAND_WALK);
        }
        if (opcode == Opcode::SMSG_FORCE_RUN_SPEED_CHANGE) {
            this->SMSG_FORCE_RUN_SPEED_CHANGE = std::move(other.SMSG_FORCE_RUN_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE) {
            this->SMSG_FORCE_RUN_BACK_SPEED_CHANGE = std::move(other.SMSG_FORCE_RUN_BACK_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE) {
            this->SMSG_FORCE_SWIM_SPEED_CHANGE = std::move(other.SMSG_FORCE_SWIM_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_MOVE_ROOT) {
            this->SMSG_FORCE_MOVE_ROOT = std::move(other.SMSG_FORCE_MOVE_ROOT);
        }
        if (opcode == Opcode::SMSG_FORCE_MOVE_UNROOT) {
            this->SMSG_FORCE_MOVE_UNROOT = std::move(other.SMSG_FORCE_MOVE_UNROOT);
        }
        if (opcode == Opcode::MSG_MOVE_ROOT) {
            this->MSG_MOVE_ROOT = std::move(other.MSG_MOVE_ROOT);
        }
        if (opcode == Opcode::MSG_MOVE_UNROOT) {
            this->MSG_MOVE_UNROOT = std::move(other.MSG_MOVE_UNROOT);
        }
        if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
            this->MSG_MOVE_HEARTBEAT = std::move(other.MSG_MOVE_HEARTBEAT);
        }
        if (opcode == Opcode::SMSG_MOVE_KNOCK_BACK) {
            this->SMSG_MOVE_KNOCK_BACK = std::move(other.SMSG_MOVE_KNOCK_BACK);
        }
        if (opcode == Opcode::MSG_MOVE_KNOCK_BACK) {
            this->MSG_MOVE_KNOCK_BACK = std::move(other.MSG_MOVE_KNOCK_BACK);
        }
        if (opcode == Opcode::SMSG_MOVE_FEATHER_FALL) {
            this->SMSG_MOVE_FEATHER_FALL = std::move(other.SMSG_MOVE_FEATHER_FALL);
        }
        if (opcode == Opcode::SMSG_MOVE_NORMAL_FALL) {
            this->SMSG_MOVE_NORMAL_FALL = std::move(other.SMSG_MOVE_NORMAL_FALL);
        }
        if (opcode == Opcode::SMSG_MOVE_SET_HOVER) {
            this->SMSG_MOVE_SET_HOVER = std::move(other.SMSG_MOVE_SET_HOVER);
        }
        if (opcode == Opcode::SMSG_MOVE_UNSET_HOVER) {
            this->SMSG_MOVE_UNSET_HOVER = std::move(other.SMSG_MOVE_UNSET_HOVER);
        }
        if (opcode == Opcode::MSG_MOVE_HOVER) {
            this->MSG_MOVE_HOVER = std::move(other.MSG_MOVE_HOVER);
        }
        if (opcode == Opcode::SMSG_TRIGGER_CINEMATIC) {
            this->SMSG_TRIGGER_CINEMATIC = std::move(other.SMSG_TRIGGER_CINEMATIC);
        }
        if (opcode == Opcode::SMSG_TUTORIAL_FLAGS) {
            this->SMSG_TUTORIAL_FLAGS = std::move(other.SMSG_TUTORIAL_FLAGS);
        }
        if (opcode == Opcode::SMSG_EMOTE) {
            this->SMSG_EMOTE = std::move(other.SMSG_EMOTE);
        }
        if (opcode == Opcode::SMSG_TEXT_EMOTE) {
            this->SMSG_TEXT_EMOTE = std::move(other.SMSG_TEXT_EMOTE);
        }
        if (opcode == Opcode::SMSG_INVENTORY_CHANGE_FAILURE) {
            this->SMSG_INVENTORY_CHANGE_FAILURE = std::move(other.SMSG_INVENTORY_CHANGE_FAILURE);
        }
        if (opcode == Opcode::SMSG_TRADE_STATUS) {
            this->SMSG_TRADE_STATUS = std::move(other.SMSG_TRADE_STATUS);
        }
        if (opcode == Opcode::SMSG_TRADE_STATUS_EXTENDED) {
            this->SMSG_TRADE_STATUS_EXTENDED = std::move(other.SMSG_TRADE_STATUS_EXTENDED);
        }
        if (opcode == Opcode::SMSG_INITIALIZE_FACTIONS) {
            this->SMSG_INITIALIZE_FACTIONS = std::move(other.SMSG_INITIALIZE_FACTIONS);
        }
        if (opcode == Opcode::SMSG_SET_FACTION_VISIBLE) {
            this->SMSG_SET_FACTION_VISIBLE = std::move(other.SMSG_SET_FACTION_VISIBLE);
        }
        if (opcode == Opcode::SMSG_SET_FACTION_STANDING) {
            this->SMSG_SET_FACTION_STANDING = std::move(other.SMSG_SET_FACTION_STANDING);
        }
        if (opcode == Opcode::SMSG_SET_PROFICIENCY) {
            this->SMSG_SET_PROFICIENCY = std::move(other.SMSG_SET_PROFICIENCY);
        }
        if (opcode == Opcode::SMSG_ACTION_BUTTONS) {
            this->SMSG_ACTION_BUTTONS = std::move(other.SMSG_ACTION_BUTTONS);
        }
        if (opcode == Opcode::SMSG_INITIAL_SPELLS) {
            this->SMSG_INITIAL_SPELLS = std::move(other.SMSG_INITIAL_SPELLS);
        }
        if (opcode == Opcode::SMSG_LEARNED_SPELL) {
            this->SMSG_LEARNED_SPELL = std::move(other.SMSG_LEARNED_SPELL);
        }
        if (opcode == Opcode::SMSG_SUPERCEDED_SPELL) {
            this->SMSG_SUPERCEDED_SPELL = std::move(other.SMSG_SUPERCEDED_SPELL);
        }
        if (opcode == Opcode::SMSG_CAST_FAILED) {
            this->SMSG_CAST_FAILED = std::move(other.SMSG_CAST_FAILED);
        }
        if (opcode == Opcode::SMSG_SPELL_START) {
            this->SMSG_SPELL_START = std::move(other.SMSG_SPELL_START);
        }
        if (opcode == Opcode::SMSG_SPELL_GO) {
            this->SMSG_SPELL_GO = std::move(other.SMSG_SPELL_GO);
        }
        if (opcode == Opcode::SMSG_SPELL_FAILURE) {
            this->SMSG_SPELL_FAILURE = std::move(other.SMSG_SPELL_FAILURE);
        }
        if (opcode == Opcode::SMSG_SPELL_COOLDOWN) {
            this->SMSG_SPELL_COOLDOWN = std::move(other.SMSG_SPELL_COOLDOWN);
        }
        if (opcode == Opcode::SMSG_COOLDOWN_EVENT) {
            this->SMSG_COOLDOWN_EVENT = std::move(other.SMSG_COOLDOWN_EVENT);
        }
        if (opcode == Opcode::SMSG_PET_CAST_FAILED) {
            this->SMSG_PET_CAST_FAILED = std::move(other.SMSG_PET_CAST_FAILED);
        }
        if (opcode == Opcode::MSG_CHANNEL_START) {
            this->MSG_CHANNEL_START = std::move(other.MSG_CHANNEL_START);
        }
        if (opcode == Opcode::MSG_CHANNEL_UPDATE) {
            this->MSG_CHANNEL_UPDATE = std::move(other.MSG_CHANNEL_UPDATE);
        }
        if (opcode == Opcode::SMSG_AI_REACTION) {
            this->SMSG_AI_REACTION = std::move(other.SMSG_AI_REACTION);
        }
        if (opcode == Opcode::SMSG_ATTACKSTART) {
            this->SMSG_ATTACKSTART = std::move(other.SMSG_ATTACKSTART);
        }
        if (opcode == Opcode::SMSG_ATTACKSTOP) {
            this->SMSG_ATTACKSTOP = std::move(other.SMSG_ATTACKSTOP);
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_NOTINRANGE) {
            this->SMSG_ATTACKSWING_NOTINRANGE = std::move(other.SMSG_ATTACKSWING_NOTINRANGE);
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_BADFACING) {
            this->SMSG_ATTACKSWING_BADFACING = std::move(other.SMSG_ATTACKSWING_BADFACING);
        }
        if (opcode == Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY) {
            this->SMSG_INSTANCE_LOCK_WARNING_QUERY = std::move(other.SMSG_INSTANCE_LOCK_WARNING_QUERY);
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_DEADTARGET) {
            this->SMSG_ATTACKSWING_DEADTARGET = std::move(other.SMSG_ATTACKSWING_DEADTARGET);
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_CANT_ATTACK) {
            this->SMSG_ATTACKSWING_CANT_ATTACK = std::move(other.SMSG_ATTACKSWING_CANT_ATTACK);
        }
        if (opcode == Opcode::SMSG_ATTACKERSTATEUPDATE) {
            this->SMSG_ATTACKERSTATEUPDATE = std::move(other.SMSG_ATTACKERSTATEUPDATE);
        }
        if (opcode == Opcode::SMSG_CANCEL_COMBAT) {
            this->SMSG_CANCEL_COMBAT = std::move(other.SMSG_CANCEL_COMBAT);
        }
        if (opcode == Opcode::SMSG_SPELLHEALLOG) {
            this->SMSG_SPELLHEALLOG = std::move(other.SMSG_SPELLHEALLOG);
        }
        if (opcode == Opcode::SMSG_SPELLENERGIZELOG) {
            this->SMSG_SPELLENERGIZELOG = std::move(other.SMSG_SPELLENERGIZELOG);
        }
        if (opcode == Opcode::SMSG_BREAK_TARGET) {
            this->SMSG_BREAK_TARGET = std::move(other.SMSG_BREAK_TARGET);
        }
        if (opcode == Opcode::SMSG_BINDPOINTUPDATE) {
            this->SMSG_BINDPOINTUPDATE = std::move(other.SMSG_BINDPOINTUPDATE);
        }
        if (opcode == Opcode::SMSG_PLAYERBOUND) {
            this->SMSG_PLAYERBOUND = std::move(other.SMSG_PLAYERBOUND);
        }
        if (opcode == Opcode::SMSG_CLIENT_CONTROL_UPDATE) {
            this->SMSG_CLIENT_CONTROL_UPDATE = std::move(other.SMSG_CLIENT_CONTROL_UPDATE);
        }
        if (opcode == Opcode::SMSG_RESURRECT_REQUEST) {
            this->SMSG_RESURRECT_REQUEST = std::move(other.SMSG_RESURRECT_REQUEST);
        }
        if (opcode == Opcode::SMSG_LOOT_RESPONSE) {
            this->SMSG_LOOT_RESPONSE = std::move(other.SMSG_LOOT_RESPONSE);
        }
        if (opcode == Opcode::SMSG_LOOT_RELEASE_RESPONSE) {
            this->SMSG_LOOT_RELEASE_RESPONSE = std::move(other.SMSG_LOOT_RELEASE_RESPONSE);
        }
        if (opcode == Opcode::SMSG_LOOT_REMOVED) {
            this->SMSG_LOOT_REMOVED = std::move(other.SMSG_LOOT_REMOVED);
        }
        if (opcode == Opcode::SMSG_LOOT_MONEY_NOTIFY) {
            this->SMSG_LOOT_MONEY_NOTIFY = std::move(other.SMSG_LOOT_MONEY_NOTIFY);
        }
        if (opcode == Opcode::SMSG_LOOT_CLEAR_MONEY) {
            this->SMSG_LOOT_CLEAR_MONEY = std::move(other.SMSG_LOOT_CLEAR_MONEY);
        }
        if (opcode == Opcode::SMSG_ITEM_PUSH_RESULT) {
            this->SMSG_ITEM_PUSH_RESULT = std::move(other.SMSG_ITEM_PUSH_RESULT);
        }
        if (opcode == Opcode::SMSG_DUEL_REQUESTED) {
            this->SMSG_DUEL_REQUESTED = std::move(other.SMSG_DUEL_REQUESTED);
        }
        if (opcode == Opcode::SMSG_DUEL_OUTOFBOUNDS) {
            this->SMSG_DUEL_OUTOFBOUNDS = std::move(other.SMSG_DUEL_OUTOFBOUNDS);
        }
        if (opcode == Opcode::SMSG_DUEL_INBOUNDS) {
            this->SMSG_DUEL_INBOUNDS = std::move(other.SMSG_DUEL_INBOUNDS);
        }
        if (opcode == Opcode::SMSG_DUEL_COMPLETE) {
            this->SMSG_DUEL_COMPLETE = std::move(other.SMSG_DUEL_COMPLETE);
        }
        if (opcode == Opcode::SMSG_DUEL_WINNER) {
            this->SMSG_DUEL_WINNER = std::move(other.SMSG_DUEL_WINNER);
        }
        if (opcode == Opcode::SMSG_MOUNTRESULT) {
            this->SMSG_MOUNTRESULT = std::move(other.SMSG_MOUNTRESULT);
        }
        if (opcode == Opcode::SMSG_MOUNTSPECIAL_ANIM) {
            this->SMSG_MOUNTSPECIAL_ANIM = std::move(other.SMSG_MOUNTSPECIAL_ANIM);
        }
        if (opcode == Opcode::SMSG_PET_TAME_FAILURE) {
            this->SMSG_PET_TAME_FAILURE = std::move(other.SMSG_PET_TAME_FAILURE);
        }
        if (opcode == Opcode::SMSG_PET_NAME_INVALID) {
            this->SMSG_PET_NAME_INVALID = std::move(other.SMSG_PET_NAME_INVALID);
        }
        if (opcode == Opcode::SMSG_PET_SPELLS) {
            this->SMSG_PET_SPELLS = std::move(other.SMSG_PET_SPELLS);
        }
        if (opcode == Opcode::SMSG_PET_MODE) {
            this->SMSG_PET_MODE = std::move(other.SMSG_PET_MODE);
        }
        if (opcode == Opcode::SMSG_GOSSIP_MESSAGE) {
            this->SMSG_GOSSIP_MESSAGE = std::move(other.SMSG_GOSSIP_MESSAGE);
        }
        if (opcode == Opcode::SMSG_GOSSIP_COMPLETE) {
            this->SMSG_GOSSIP_COMPLETE = std::move(other.SMSG_GOSSIP_COMPLETE);
        }
        if (opcode == Opcode::SMSG_NPC_TEXT_UPDATE) {
            this->SMSG_NPC_TEXT_UPDATE = std::move(other.SMSG_NPC_TEXT_UPDATE);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_STATUS) {
            this->SMSG_QUESTGIVER_STATUS = std::move(other.SMSG_QUESTGIVER_STATUS);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_LIST) {
            this->SMSG_QUESTGIVER_QUEST_LIST = std::move(other.SMSG_QUESTGIVER_QUEST_LIST);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_DETAILS) {
            this->SMSG_QUESTGIVER_QUEST_DETAILS = std::move(other.SMSG_QUESTGIVER_QUEST_DETAILS);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS) {
            this->SMSG_QUESTGIVER_REQUEST_ITEMS = std::move(other.SMSG_QUESTGIVER_REQUEST_ITEMS);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_OFFER_REWARD) {
            this->SMSG_QUESTGIVER_OFFER_REWARD = std::move(other.SMSG_QUESTGIVER_OFFER_REWARD);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_INVALID) {
            this->SMSG_QUESTGIVER_QUEST_INVALID = std::move(other.SMSG_QUESTGIVER_QUEST_INVALID);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE) {
            this->SMSG_QUESTGIVER_QUEST_COMPLETE = std::move(other.SMSG_QUESTGIVER_QUEST_COMPLETE);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_FAILED) {
            this->SMSG_QUESTGIVER_QUEST_FAILED = std::move(other.SMSG_QUESTGIVER_QUEST_FAILED);
        }
        if (opcode == Opcode::SMSG_QUESTLOG_FULL) {
            this->SMSG_QUESTLOG_FULL = std::move(other.SMSG_QUESTLOG_FULL);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_FAILED) {
            this->SMSG_QUESTUPDATE_FAILED = std::move(other.SMSG_QUESTUPDATE_FAILED);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_FAILEDTIMER) {
            this->SMSG_QUESTUPDATE_FAILEDTIMER = std::move(other.SMSG_QUESTUPDATE_FAILEDTIMER);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_COMPLETE) {
            this->SMSG_QUESTUPDATE_COMPLETE = std::move(other.SMSG_QUESTUPDATE_COMPLETE);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_KILL) {
            this->SMSG_QUESTUPDATE_ADD_KILL = std::move(other.SMSG_QUESTUPDATE_ADD_KILL);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_ITEM) {
            this->SMSG_QUESTUPDATE_ADD_ITEM = std::move(other.SMSG_QUESTUPDATE_ADD_ITEM);
        }
        if (opcode == Opcode::SMSG_QUEST_CONFIRM_ACCEPT) {
            this->SMSG_QUEST_CONFIRM_ACCEPT = std::move(other.SMSG_QUEST_CONFIRM_ACCEPT);
        }
        if (opcode == Opcode::SMSG_LIST_INVENTORY) {
            this->SMSG_LIST_INVENTORY = std::move(other.SMSG_LIST_INVENTORY);
        }
        if (opcode == Opcode::SMSG_SELL_ITEM) {
            this->SMSG_SELL_ITEM = std::move(other.SMSG_SELL_ITEM);
        }
        if (opcode == Opcode::SMSG_BUY_ITEM) {
            this->SMSG_BUY_ITEM = std::move(other.SMSG_BUY_ITEM);
        }
        if (opcode == Opcode::SMSG_BUY_FAILED) {
            this->SMSG_BUY_FAILED = std::move(other.SMSG_BUY_FAILED);
        }
        if (opcode == Opcode::SMSG_SHOWTAXINODES) {
            this->SMSG_SHOWTAXINODES = std::move(other.SMSG_SHOWTAXINODES);
        }
        if (opcode == Opcode::SMSG_TAXINODE_STATUS) {
            this->SMSG_TAXINODE_STATUS = std::move(other.SMSG_TAXINODE_STATUS);
        }
        if (opcode == Opcode::SMSG_ACTIVATETAXIREPLY) {
            this->SMSG_ACTIVATETAXIREPLY = std::move(other.SMSG_ACTIVATETAXIREPLY);
        }
        if (opcode == Opcode::SMSG_NEW_TAXI_PATH) {
            this->SMSG_NEW_TAXI_PATH = std::move(other.SMSG_NEW_TAXI_PATH);
        }
        if (opcode == Opcode::SMSG_TRAINER_LIST) {
            this->SMSG_TRAINER_LIST = std::move(other.SMSG_TRAINER_LIST);
        }
        if (opcode == Opcode::SMSG_TRAINER_BUY_SUCCEEDED) {
            this->SMSG_TRAINER_BUY_SUCCEEDED = std::move(other.SMSG_TRAINER_BUY_SUCCEEDED);
        }
        if (opcode == Opcode::SMSG_TRAINER_BUY_FAILED) {
            this->SMSG_TRAINER_BUY_FAILED = std::move(other.SMSG_TRAINER_BUY_FAILED);
        }
        if (opcode == Opcode::SMSG_SHOW_BANK) {
            this->SMSG_SHOW_BANK = std::move(other.SMSG_SHOW_BANK);
        }
        if (opcode == Opcode::SMSG_BUY_BANK_SLOT_RESULT) {
            this->SMSG_BUY_BANK_SLOT_RESULT = std::move(other.SMSG_BUY_BANK_SLOT_RESULT);
        }
        if (opcode == Opcode::SMSG_PETITION_SHOWLIST) {
            this->SMSG_PETITION_SHOWLIST = std::move(other.SMSG_PETITION_SHOWLIST);
        }
        if (opcode == Opcode::SMSG_PETITION_SHOW_SIGNATURES) {
            this->SMSG_PETITION_SHOW_SIGNATURES = std::move(other.SMSG_PETITION_SHOW_SIGNATURES);
        }
        if (opcode == Opcode::SMSG_PETITION_SIGN_RESULTS) {
            this->SMSG_PETITION_SIGN_RESULTS = std::move(other.SMSG_PETITION_SIGN_RESULTS);
        }
        if (opcode == Opcode::MSG_PETITION_DECLINE) {
            this->MSG_PETITION_DECLINE = std::move(other.MSG_PETITION_DECLINE);
        }
        if (opcode == Opcode::SMSG_TURN_IN_PETITION_RESULTS) {
            this->SMSG_TURN_IN_PETITION_RESULTS = std::move(other.SMSG_TURN_IN_PETITION_RESULTS);
        }
        if (opcode == Opcode::SMSG_PETITION_QUERY_RESPONSE) {
            this->SMSG_PETITION_QUERY_RESPONSE = std::move(other.SMSG_PETITION_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_FISH_NOT_HOOKED) {
            this->SMSG_FISH_NOT_HOOKED = std::move(other.SMSG_FISH_NOT_HOOKED);
        }
        if (opcode == Opcode::SMSG_FISH_ESCAPED) {
            this->SMSG_FISH_ESCAPED = std::move(other.SMSG_FISH_ESCAPED);
        }
        if (opcode == Opcode::SMSG_NOTIFICATION) {
            this->SMSG_NOTIFICATION = std::move(other.SMSG_NOTIFICATION);
        }
        if (opcode == Opcode::SMSG_PLAYED_TIME) {
            this->SMSG_PLAYED_TIME = std::move(other.SMSG_PLAYED_TIME);
        }
        if (opcode == Opcode::SMSG_QUERY_TIME_RESPONSE) {
            this->SMSG_QUERY_TIME_RESPONSE = std::move(other.SMSG_QUERY_TIME_RESPONSE);
        }
        if (opcode == Opcode::SMSG_LOG_XPGAIN) {
            this->SMSG_LOG_XPGAIN = std::move(other.SMSG_LOG_XPGAIN);
        }
        if (opcode == Opcode::SMSG_LEVELUP_INFO) {
            this->SMSG_LEVELUP_INFO = std::move(other.SMSG_LEVELUP_INFO);
        }
        if (opcode == Opcode::MSG_MINIMAP_PING) {
            this->MSG_MINIMAP_PING = std::move(other.MSG_MINIMAP_PING);
        }
        if (opcode == Opcode::SMSG_ENCHANTMENTLOG) {
            this->SMSG_ENCHANTMENTLOG = std::move(other.SMSG_ENCHANTMENTLOG);
        }
        if (opcode == Opcode::SMSG_START_MIRROR_TIMER) {
            this->SMSG_START_MIRROR_TIMER = std::move(other.SMSG_START_MIRROR_TIMER);
        }
        if (opcode == Opcode::SMSG_PAUSE_MIRROR_TIMER) {
            this->SMSG_PAUSE_MIRROR_TIMER = std::move(other.SMSG_PAUSE_MIRROR_TIMER);
        }
        if (opcode == Opcode::SMSG_STOP_MIRROR_TIMER) {
            this->SMSG_STOP_MIRROR_TIMER = std::move(other.SMSG_STOP_MIRROR_TIMER);
        }
        if (opcode == Opcode::SMSG_PONG) {
            this->SMSG_PONG = std::move(other.SMSG_PONG);
        }
        if (opcode == Opcode::SMSG_CLEAR_COOLDOWN) {
            this->SMSG_CLEAR_COOLDOWN = std::move(other.SMSG_CLEAR_COOLDOWN);
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_PAGETEXT) {
            this->SMSG_GAMEOBJECT_PAGETEXT = std::move(other.SMSG_GAMEOBJECT_PAGETEXT);
        }
        if (opcode == Opcode::SMSG_SPELL_DELAYED) {
            this->SMSG_SPELL_DELAYED = std::move(other.SMSG_SPELL_DELAYED);
        }
        if (opcode == Opcode::SMSG_QUEST_POI_QUERY_RESPONSE) {
            this->SMSG_QUEST_POI_QUERY_RESPONSE = std::move(other.SMSG_QUEST_POI_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_ITEM_TIME_UPDATE) {
            this->SMSG_ITEM_TIME_UPDATE = std::move(other.SMSG_ITEM_TIME_UPDATE);
        }
        if (opcode == Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE) {
            this->SMSG_ITEM_ENCHANT_TIME_UPDATE = std::move(other.SMSG_ITEM_ENCHANT_TIME_UPDATE);
        }
        if (opcode == Opcode::SMSG_AUTH_CHALLENGE) {
            this->SMSG_AUTH_CHALLENGE = std::move(other.SMSG_AUTH_CHALLENGE);
        }
        if (opcode == Opcode::SMSG_AUTH_RESPONSE) {
            this->SMSG_AUTH_RESPONSE = std::move(other.SMSG_AUTH_RESPONSE);
        }
        if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
            this->MSG_SAVE_GUILD_EMBLEM = std::move(other.MSG_SAVE_GUILD_EMBLEM);
        }
        if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
            this->MSG_TABARDVENDOR_ACTIVATE = std::move(other.MSG_TABARDVENDOR_ACTIVATE);
        }
        if (opcode == Opcode::SMSG_PLAY_SPELL_VISUAL) {
            this->SMSG_PLAY_SPELL_VISUAL = std::move(other.SMSG_PLAY_SPELL_VISUAL);
        }
        if (opcode == Opcode::SMSG_PARTYKILLLOG) {
            this->SMSG_PARTYKILLLOG = std::move(other.SMSG_PARTYKILLLOG);
        }
        if (opcode == Opcode::SMSG_COMPRESSED_UPDATE_OBJECT) {
            this->SMSG_COMPRESSED_UPDATE_OBJECT = std::move(other.SMSG_COMPRESSED_UPDATE_OBJECT);
        }
        if (opcode == Opcode::SMSG_PLAY_SPELL_IMPACT) {
            this->SMSG_PLAY_SPELL_IMPACT = std::move(other.SMSG_PLAY_SPELL_IMPACT);
        }
        if (opcode == Opcode::SMSG_EXPLORATION_EXPERIENCE) {
            this->SMSG_EXPLORATION_EXPERIENCE = std::move(other.SMSG_EXPLORATION_EXPERIENCE);
        }
        if (opcode == Opcode::MSG_RANDOM_ROLL) {
            this->MSG_RANDOM_ROLL = std::move(other.MSG_RANDOM_ROLL);
        }
        if (opcode == Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG) {
            this->SMSG_ENVIRONMENTAL_DAMAGE_LOG = std::move(other.SMSG_ENVIRONMENTAL_DAMAGE_LOG);
        }
        if (opcode == Opcode::SMSG_LFG_PLAYER_REWARD) {
            this->SMSG_LFG_PLAYER_REWARD = std::move(other.SMSG_LFG_PLAYER_REWARD);
        }
        if (opcode == Opcode::SMSG_LFG_TELEPORT_DENIED) {
            this->SMSG_LFG_TELEPORT_DENIED = std::move(other.SMSG_LFG_TELEPORT_DENIED);
        }
        if (opcode == Opcode::SMSG_REMOVED_SPELL) {
            this->SMSG_REMOVED_SPELL = std::move(other.SMSG_REMOVED_SPELL);
        }
        if (opcode == Opcode::SMSG_GMTICKET_CREATE) {
            this->SMSG_GMTICKET_CREATE = std::move(other.SMSG_GMTICKET_CREATE);
        }
        if (opcode == Opcode::SMSG_GMTICKET_UPDATETEXT) {
            this->SMSG_GMTICKET_UPDATETEXT = std::move(other.SMSG_GMTICKET_UPDATETEXT);
        }
        if (opcode == Opcode::SMSG_ACCOUNT_DATA_TIMES) {
            this->SMSG_ACCOUNT_DATA_TIMES = std::move(other.SMSG_ACCOUNT_DATA_TIMES);
        }
        if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA) {
            this->SMSG_UPDATE_ACCOUNT_DATA = std::move(other.SMSG_UPDATE_ACCOUNT_DATA);
        }
        if (opcode == Opcode::SMSG_GMTICKET_GETTICKET) {
            this->SMSG_GMTICKET_GETTICKET = std::move(other.SMSG_GMTICKET_GETTICKET);
        }
        if (opcode == Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) {
            this->SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT = std::move(other.SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT);
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM) {
            this->SMSG_GAMEOBJECT_DESPAWN_ANIM = std::move(other.SMSG_GAMEOBJECT_DESPAWN_ANIM);
        }
        if (opcode == Opcode::MSG_CORPSE_QUERY) {
            this->MSG_CORPSE_QUERY = std::move(other.MSG_CORPSE_QUERY);
        }
        if (opcode == Opcode::SMSG_GMTICKET_DELETETICKET) {
            this->SMSG_GMTICKET_DELETETICKET = std::move(other.SMSG_GMTICKET_DELETETICKET);
        }
        if (opcode == Opcode::SMSG_CHAT_WRONG_FACTION) {
            this->SMSG_CHAT_WRONG_FACTION = std::move(other.SMSG_CHAT_WRONG_FACTION);
        }
        if (opcode == Opcode::SMSG_GMTICKET_SYSTEMSTATUS) {
            this->SMSG_GMTICKET_SYSTEMSTATUS = std::move(other.SMSG_GMTICKET_SYSTEMSTATUS);
        }
        if (opcode == Opcode::SMSG_QUEST_FORCE_REMOVE) {
            this->SMSG_QUEST_FORCE_REMOVE = std::move(other.SMSG_QUEST_FORCE_REMOVE);
        }
        if (opcode == Opcode::SMSG_SPIRIT_HEALER_CONFIRM) {
            this->SMSG_SPIRIT_HEALER_CONFIRM = std::move(other.SMSG_SPIRIT_HEALER_CONFIRM);
        }
        if (opcode == Opcode::SMSG_GOSSIP_POI) {
            this->SMSG_GOSSIP_POI = std::move(other.SMSG_GOSSIP_POI);
        }
        if (opcode == Opcode::SMSG_LOGIN_VERIFY_WORLD) {
            this->SMSG_LOGIN_VERIFY_WORLD = std::move(other.SMSG_LOGIN_VERIFY_WORLD);
        }
        if (opcode == Opcode::SMSG_SEND_MAIL_RESULT) {
            this->SMSG_SEND_MAIL_RESULT = std::move(other.SMSG_SEND_MAIL_RESULT);
        }
        if (opcode == Opcode::SMSG_MAIL_LIST_RESULT) {
            this->SMSG_MAIL_LIST_RESULT = std::move(other.SMSG_MAIL_LIST_RESULT);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_LIST) {
            this->SMSG_BATTLEFIELD_LIST = std::move(other.SMSG_BATTLEFIELD_LIST);
        }
        if (opcode == Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE) {
            this->SMSG_ITEM_TEXT_QUERY_RESPONSE = std::move(other.SMSG_ITEM_TEXT_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_SPELLLOGMISS) {
            this->SMSG_SPELLLOGMISS = std::move(other.SMSG_SPELLLOGMISS);
        }
        if (opcode == Opcode::SMSG_SPELLLOGEXECUTE) {
            this->SMSG_SPELLLOGEXECUTE = std::move(other.SMSG_SPELLLOGEXECUTE);
        }
        if (opcode == Opcode::SMSG_PERIODICAURALOG) {
            this->SMSG_PERIODICAURALOG = std::move(other.SMSG_PERIODICAURALOG);
        }
        if (opcode == Opcode::SMSG_SPELLDAMAGESHIELD) {
            this->SMSG_SPELLDAMAGESHIELD = std::move(other.SMSG_SPELLDAMAGESHIELD);
        }
        if (opcode == Opcode::SMSG_SPELLNONMELEEDAMAGELOG) {
            this->SMSG_SPELLNONMELEEDAMAGELOG = std::move(other.SMSG_SPELLNONMELEEDAMAGELOG);
        }
        if (opcode == Opcode::SMSG_RESURRECT_FAILED) {
            this->SMSG_RESURRECT_FAILED = std::move(other.SMSG_RESURRECT_FAILED);
        }
        if (opcode == Opcode::SMSG_ZONE_UNDER_ATTACK) {
            this->SMSG_ZONE_UNDER_ATTACK = std::move(other.SMSG_ZONE_UNDER_ATTACK);
        }
        if (opcode == Opcode::MSG_AUCTION_HELLO) {
            this->MSG_AUCTION_HELLO = std::move(other.MSG_AUCTION_HELLO);
        }
        if (opcode == Opcode::SMSG_AUCTION_COMMAND_RESULT) {
            this->SMSG_AUCTION_COMMAND_RESULT = std::move(other.SMSG_AUCTION_COMMAND_RESULT);
        }
        if (opcode == Opcode::SMSG_AUCTION_LIST_RESULT) {
            this->SMSG_AUCTION_LIST_RESULT = std::move(other.SMSG_AUCTION_LIST_RESULT);
        }
        if (opcode == Opcode::SMSG_AUCTION_OWNER_LIST_RESULT) {
            this->SMSG_AUCTION_OWNER_LIST_RESULT = std::move(other.SMSG_AUCTION_OWNER_LIST_RESULT);
        }
        if (opcode == Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION) {
            this->SMSG_AUCTION_BIDDER_NOTIFICATION = std::move(other.SMSG_AUCTION_BIDDER_NOTIFICATION);
        }
        if (opcode == Opcode::SMSG_AUCTION_OWNER_NOTIFICATION) {
            this->SMSG_AUCTION_OWNER_NOTIFICATION = std::move(other.SMSG_AUCTION_OWNER_NOTIFICATION);
        }
        if (opcode == Opcode::SMSG_PROCRESIST) {
            this->SMSG_PROCRESIST = std::move(other.SMSG_PROCRESIST);
        }
        if (opcode == Opcode::SMSG_DISPEL_FAILED) {
            this->SMSG_DISPEL_FAILED = std::move(other.SMSG_DISPEL_FAILED);
        }
        if (opcode == Opcode::SMSG_SPELLORDAMAGE_IMMUNE) {
            this->SMSG_SPELLORDAMAGE_IMMUNE = std::move(other.SMSG_SPELLORDAMAGE_IMMUNE);
        }
        if (opcode == Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT) {
            this->SMSG_AUCTION_BIDDER_LIST_RESULT = std::move(other.SMSG_AUCTION_BIDDER_LIST_RESULT);
        }
        if (opcode == Opcode::SMSG_SET_FLAT_SPELL_MODIFIER) {
            this->SMSG_SET_FLAT_SPELL_MODIFIER = std::move(other.SMSG_SET_FLAT_SPELL_MODIFIER);
        }
        if (opcode == Opcode::SMSG_SET_PCT_SPELL_MODIFIER) {
            this->SMSG_SET_PCT_SPELL_MODIFIER = std::move(other.SMSG_SET_PCT_SPELL_MODIFIER);
        }
        if (opcode == Opcode::SMSG_CORPSE_RECLAIM_DELAY) {
            this->SMSG_CORPSE_RECLAIM_DELAY = std::move(other.SMSG_CORPSE_RECLAIM_DELAY);
        }
        if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
            this->MSG_LIST_STABLED_PETS = std::move(other.MSG_LIST_STABLED_PETS);
        }
        if (opcode == Opcode::SMSG_STABLE_RESULT) {
            this->SMSG_STABLE_RESULT = std::move(other.SMSG_STABLE_RESULT);
        }
        if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
            this->MSG_QUEST_PUSH_RESULT = std::move(other.MSG_QUEST_PUSH_RESULT);
        }
        if (opcode == Opcode::SMSG_PLAY_MUSIC) {
            this->SMSG_PLAY_MUSIC = std::move(other.SMSG_PLAY_MUSIC);
        }
        if (opcode == Opcode::SMSG_PLAY_OBJECT_SOUND) {
            this->SMSG_PLAY_OBJECT_SOUND = std::move(other.SMSG_PLAY_OBJECT_SOUND);
        }
        if (opcode == Opcode::SMSG_SPELLDISPELLOG) {
            this->SMSG_SPELLDISPELLOG = std::move(other.SMSG_SPELLDISPELLOG);
        }
        if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
            this->MSG_QUERY_NEXT_MAIL_TIME = std::move(other.MSG_QUERY_NEXT_MAIL_TIME);
        }
        if (opcode == Opcode::SMSG_RECEIVED_MAIL) {
            this->SMSG_RECEIVED_MAIL = std::move(other.SMSG_RECEIVED_MAIL);
        }
        if (opcode == Opcode::SMSG_RAID_GROUP_ONLY) {
            this->SMSG_RAID_GROUP_ONLY = std::move(other.SMSG_RAID_GROUP_ONLY);
        }
        if (opcode == Opcode::SMSG_PVP_CREDIT) {
            this->SMSG_PVP_CREDIT = std::move(other.SMSG_PVP_CREDIT);
        }
        if (opcode == Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION) {
            this->SMSG_AUCTION_REMOVED_NOTIFICATION = std::move(other.SMSG_AUCTION_REMOVED_NOTIFICATION);
        }
        if (opcode == Opcode::SMSG_SERVER_MESSAGE) {
            this->SMSG_SERVER_MESSAGE = std::move(other.SMSG_SERVER_MESSAGE);
        }
        if (opcode == Opcode::SMSG_LFG_OFFER_CONTINUE) {
            this->SMSG_LFG_OFFER_CONTINUE = std::move(other.SMSG_LFG_OFFER_CONTINUE);
        }
        if (opcode == Opcode::SMSG_SHOW_MAILBOX) {
            this->SMSG_SHOW_MAILBOX = std::move(other.SMSG_SHOW_MAILBOX);
        }
        if (opcode == Opcode::SMSG_CANCEL_AUTO_REPEAT) {
            this->SMSG_CANCEL_AUTO_REPEAT = std::move(other.SMSG_CANCEL_AUTO_REPEAT);
        }
        if (opcode == Opcode::SMSG_STANDSTATE_UPDATE) {
            this->SMSG_STANDSTATE_UPDATE = std::move(other.SMSG_STANDSTATE_UPDATE);
        }
        if (opcode == Opcode::SMSG_LOOT_ALL_PASSED) {
            this->SMSG_LOOT_ALL_PASSED = std::move(other.SMSG_LOOT_ALL_PASSED);
        }
        if (opcode == Opcode::SMSG_LOOT_ROLL_WON) {
            this->SMSG_LOOT_ROLL_WON = std::move(other.SMSG_LOOT_ROLL_WON);
        }
        if (opcode == Opcode::SMSG_LOOT_START_ROLL) {
            this->SMSG_LOOT_START_ROLL = std::move(other.SMSG_LOOT_START_ROLL);
        }
        if (opcode == Opcode::SMSG_LOOT_ROLL) {
            this->SMSG_LOOT_ROLL = std::move(other.SMSG_LOOT_ROLL);
        }
        if (opcode == Opcode::SMSG_LOOT_MASTER_LIST) {
            this->SMSG_LOOT_MASTER_LIST = std::move(other.SMSG_LOOT_MASTER_LIST);
        }
        if (opcode == Opcode::SMSG_SET_FORCED_REACTIONS) {
            this->SMSG_SET_FORCED_REACTIONS = std::move(other.SMSG_SET_FORCED_REACTIONS);
        }
        if (opcode == Opcode::SMSG_SPELL_FAILED_OTHER) {
            this->SMSG_SPELL_FAILED_OTHER = std::move(other.SMSG_SPELL_FAILED_OTHER);
        }
        if (opcode == Opcode::SMSG_CHAT_PLAYER_NOT_FOUND) {
            this->SMSG_CHAT_PLAYER_NOT_FOUND = std::move(other.SMSG_CHAT_PLAYER_NOT_FOUND);
        }
        if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
            this->MSG_TALENT_WIPE_CONFIRM = std::move(other.MSG_TALENT_WIPE_CONFIRM);
        }
        if (opcode == Opcode::SMSG_SUMMON_REQUEST) {
            this->SMSG_SUMMON_REQUEST = std::move(other.SMSG_SUMMON_REQUEST);
        }
        if (opcode == Opcode::SMSG_MONSTER_MOVE_TRANSPORT) {
            this->SMSG_MONSTER_MOVE_TRANSPORT = std::move(other.SMSG_MONSTER_MOVE_TRANSPORT);
        }
        if (opcode == Opcode::SMSG_PET_BROKEN) {
            this->SMSG_PET_BROKEN = std::move(other.SMSG_PET_BROKEN);
        }
        if (opcode == Opcode::MSG_MOVE_FEATHER_FALL) {
            this->MSG_MOVE_FEATHER_FALL = std::move(other.MSG_MOVE_FEATHER_FALL);
        }
        if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
            this->MSG_MOVE_WATER_WALK = std::move(other.MSG_MOVE_WATER_WALK);
        }
        if (opcode == Opcode::SMSG_FEIGN_DEATH_RESISTED) {
            this->SMSG_FEIGN_DEATH_RESISTED = std::move(other.SMSG_FEIGN_DEATH_RESISTED);
        }
        if (opcode == Opcode::SMSG_DUEL_COUNTDOWN) {
            this->SMSG_DUEL_COUNTDOWN = std::move(other.SMSG_DUEL_COUNTDOWN);
        }
        if (opcode == Opcode::SMSG_AREA_TRIGGER_MESSAGE) {
            this->SMSG_AREA_TRIGGER_MESSAGE = std::move(other.SMSG_AREA_TRIGGER_MESSAGE);
        }
        if (opcode == Opcode::SMSG_LFG_ROLE_CHOSEN) {
            this->SMSG_LFG_ROLE_CHOSEN = std::move(other.SMSG_LFG_ROLE_CHOSEN);
        }
        if (opcode == Opcode::SMSG_PLAYER_SKINNED) {
            this->SMSG_PLAYER_SKINNED = std::move(other.SMSG_PLAYER_SKINNED);
        }
        if (opcode == Opcode::SMSG_DURABILITY_DAMAGE_DEATH) {
            this->SMSG_DURABILITY_DAMAGE_DEATH = std::move(other.SMSG_DURABILITY_DAMAGE_DEATH);
        }
        if (opcode == Opcode::MSG_PETITION_RENAME) {
            this->MSG_PETITION_RENAME = std::move(other.MSG_PETITION_RENAME);
        }
        if (opcode == Opcode::SMSG_INIT_WORLD_STATES) {
            this->SMSG_INIT_WORLD_STATES = std::move(other.SMSG_INIT_WORLD_STATES);
        }
        if (opcode == Opcode::SMSG_UPDATE_WORLD_STATE) {
            this->SMSG_UPDATE_WORLD_STATE = std::move(other.SMSG_UPDATE_WORLD_STATE);
        }
        if (opcode == Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE) {
            this->SMSG_ITEM_NAME_QUERY_RESPONSE = std::move(other.SMSG_ITEM_NAME_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_PET_ACTION_FEEDBACK) {
            this->SMSG_PET_ACTION_FEEDBACK = std::move(other.SMSG_PET_ACTION_FEEDBACK);
        }
        if (opcode == Opcode::SMSG_CHAR_RENAME) {
            this->SMSG_CHAR_RENAME = std::move(other.SMSG_CHAR_RENAME);
        }
        if (opcode == Opcode::SMSG_INSTANCE_SAVE_CREATED) {
            this->SMSG_INSTANCE_SAVE_CREATED = std::move(other.SMSG_INSTANCE_SAVE_CREATED);
        }
        if (opcode == Opcode::SMSG_RAID_INSTANCE_INFO) {
            this->SMSG_RAID_INSTANCE_INFO = std::move(other.SMSG_RAID_INSTANCE_INFO);
        }
        if (opcode == Opcode::SMSG_PLAY_SOUND) {
            this->SMSG_PLAY_SOUND = std::move(other.SMSG_PLAY_SOUND);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_STATUS) {
            this->SMSG_BATTLEFIELD_STATUS = std::move(other.SMSG_BATTLEFIELD_STATUS);
        }
        if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
            this->MSG_INSPECT_HONOR_STATS = std::move(other.MSG_INSPECT_HONOR_STATS);
        }
        if (opcode == Opcode::SMSG_FORCE_WALK_SPEED_CHANGE) {
            this->SMSG_FORCE_WALK_SPEED_CHANGE = std::move(other.SMSG_FORCE_WALK_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) {
            this->SMSG_FORCE_SWIM_BACK_SPEED_CHANGE = std::move(other.SMSG_FORCE_SWIM_BACK_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_TURN_RATE_CHANGE) {
            this->SMSG_FORCE_TURN_RATE_CHANGE = std::move(other.SMSG_FORCE_TURN_RATE_CHANGE);
        }
        if (opcode == Opcode::SMSG_AREA_SPIRIT_HEALER_TIME) {
            this->SMSG_AREA_SPIRIT_HEALER_TIME = std::move(other.SMSG_AREA_SPIRIT_HEALER_TIME);
        }
        if (opcode == Opcode::SMSG_WARDEN_DATA) {
            this->SMSG_WARDEN_DATA = std::move(other.SMSG_WARDEN_DATA);
        }
        if (opcode == Opcode::SMSG_GROUP_JOINED_BATTLEGROUND) {
            this->SMSG_GROUP_JOINED_BATTLEGROUND = std::move(other.SMSG_GROUP_JOINED_BATTLEGROUND);
        }
        if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
            this->MSG_BATTLEGROUND_PLAYER_POSITIONS = std::move(other.MSG_BATTLEGROUND_PLAYER_POSITIONS);
        }
        if (opcode == Opcode::SMSG_BINDER_CONFIRM) {
            this->SMSG_BINDER_CONFIRM = std::move(other.SMSG_BINDER_CONFIRM);
        }
        if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED) {
            this->SMSG_BATTLEGROUND_PLAYER_JOINED = std::move(other.SMSG_BATTLEGROUND_PLAYER_JOINED);
        }
        if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT) {
            this->SMSG_BATTLEGROUND_PLAYER_LEFT = std::move(other.SMSG_BATTLEGROUND_PLAYER_LEFT);
        }
        if (opcode == Opcode::SMSG_ADDON_INFO) {
            this->SMSG_ADDON_INFO = std::move(other.SMSG_ADDON_INFO);
        }
        if (opcode == Opcode::SMSG_PET_UNLEARN_CONFIRM) {
            this->SMSG_PET_UNLEARN_CONFIRM = std::move(other.SMSG_PET_UNLEARN_CONFIRM);
        }
        if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS_FULL) {
            this->SMSG_PARTY_MEMBER_STATS_FULL = std::move(other.SMSG_PARTY_MEMBER_STATS_FULL);
        }
        if (opcode == Opcode::SMSG_WEATHER) {
            this->SMSG_WEATHER = std::move(other.SMSG_WEATHER);
        }
        if (opcode == Opcode::SMSG_RAID_INSTANCE_MESSAGE) {
            this->SMSG_RAID_INSTANCE_MESSAGE = std::move(other.SMSG_RAID_INSTANCE_MESSAGE);
        }
        if (opcode == Opcode::SMSG_COMPRESSED_MOVES) {
            this->SMSG_COMPRESSED_MOVES = std::move(other.SMSG_COMPRESSED_MOVES);
        }
        if (opcode == Opcode::SMSG_CHAT_RESTRICTED) {
            this->SMSG_CHAT_RESTRICTED = std::move(other.SMSG_CHAT_RESTRICTED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_RUN_SPEED) {
            this->SMSG_SPLINE_SET_RUN_SPEED = std::move(other.SMSG_SPLINE_SET_RUN_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED) {
            this->SMSG_SPLINE_SET_RUN_BACK_SPEED = std::move(other.SMSG_SPLINE_SET_RUN_BACK_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_SPEED) {
            this->SMSG_SPLINE_SET_SWIM_SPEED = std::move(other.SMSG_SPLINE_SET_SWIM_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_WALK_SPEED) {
            this->SMSG_SPLINE_SET_WALK_SPEED = std::move(other.SMSG_SPLINE_SET_WALK_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED) {
            this->SMSG_SPLINE_SET_SWIM_BACK_SPEED = std::move(other.SMSG_SPLINE_SET_SWIM_BACK_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_TURN_RATE) {
            this->SMSG_SPLINE_SET_TURN_RATE = std::move(other.SMSG_SPLINE_SET_TURN_RATE);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_UNROOT) {
            this->SMSG_SPLINE_MOVE_UNROOT = std::move(other.SMSG_SPLINE_MOVE_UNROOT);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL) {
            this->SMSG_SPLINE_MOVE_FEATHER_FALL = std::move(other.SMSG_SPLINE_MOVE_FEATHER_FALL);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL) {
            this->SMSG_SPLINE_MOVE_NORMAL_FALL = std::move(other.SMSG_SPLINE_MOVE_NORMAL_FALL);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_HOVER) {
            this->SMSG_SPLINE_MOVE_SET_HOVER = std::move(other.SMSG_SPLINE_MOVE_SET_HOVER);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER) {
            this->SMSG_SPLINE_MOVE_UNSET_HOVER = std::move(other.SMSG_SPLINE_MOVE_UNSET_HOVER);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_WATER_WALK) {
            this->SMSG_SPLINE_MOVE_WATER_WALK = std::move(other.SMSG_SPLINE_MOVE_WATER_WALK);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_LAND_WALK) {
            this->SMSG_SPLINE_MOVE_LAND_WALK = std::move(other.SMSG_SPLINE_MOVE_LAND_WALK);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_START_SWIM) {
            this->SMSG_SPLINE_MOVE_START_SWIM = std::move(other.SMSG_SPLINE_MOVE_START_SWIM);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_STOP_SWIM) {
            this->SMSG_SPLINE_MOVE_STOP_SWIM = std::move(other.SMSG_SPLINE_MOVE_STOP_SWIM);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE) {
            this->SMSG_SPLINE_MOVE_SET_RUN_MODE = std::move(other.SMSG_SPLINE_MOVE_SET_RUN_MODE);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE) {
            this->SMSG_SPLINE_MOVE_SET_WALK_MODE = std::move(other.SMSG_SPLINE_MOVE_SET_WALK_MODE);
        }
        if (opcode == Opcode::MSG_MOVE_TIME_SKIPPED) {
            this->MSG_MOVE_TIME_SKIPPED = std::move(other.MSG_MOVE_TIME_SKIPPED);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_ROOT) {
            this->SMSG_SPLINE_MOVE_ROOT = std::move(other.SMSG_SPLINE_MOVE_ROOT);
        }
        if (opcode == Opcode::SMSG_INVALIDATE_PLAYER) {
            this->SMSG_INVALIDATE_PLAYER = std::move(other.SMSG_INVALIDATE_PLAYER);
        }
        if (opcode == Opcode::SMSG_INSTANCE_RESET) {
            this->SMSG_INSTANCE_RESET = std::move(other.SMSG_INSTANCE_RESET);
        }
        if (opcode == Opcode::SMSG_INSTANCE_RESET_FAILED) {
            this->SMSG_INSTANCE_RESET_FAILED = std::move(other.SMSG_INSTANCE_RESET_FAILED);
        }
        if (opcode == Opcode::SMSG_UPDATE_LAST_INSTANCE) {
            this->SMSG_UPDATE_LAST_INSTANCE = std::move(other.SMSG_UPDATE_LAST_INSTANCE);
        }
        if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
            this->MSG_RAID_TARGET_UPDATE = std::move(other.MSG_RAID_TARGET_UPDATE);
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK) {
            this->MSG_RAID_READY_CHECK = std::move(other.MSG_RAID_READY_CHECK);
        }
        if (opcode == Opcode::SMSG_PET_ACTION_SOUND) {
            this->SMSG_PET_ACTION_SOUND = std::move(other.SMSG_PET_ACTION_SOUND);
        }
        if (opcode == Opcode::SMSG_PET_DISMISS_SOUND) {
            this->SMSG_PET_DISMISS_SOUND = std::move(other.SMSG_PET_DISMISS_SOUND);
        }
        if (opcode == Opcode::SMSG_GM_TICKET_STATUS_UPDATE) {
            this->SMSG_GM_TICKET_STATUS_UPDATE = std::move(other.SMSG_GM_TICKET_STATUS_UPDATE);
        }
        if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
            this->MSG_SET_DUNGEON_DIFFICULTY = std::move(other.MSG_SET_DUNGEON_DIFFICULTY);
        }
        if (opcode == Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP) {
            this->SMSG_UPDATE_INSTANCE_OWNERSHIP = std::move(other.SMSG_UPDATE_INSTANCE_OWNERSHIP);
        }
        if (opcode == Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS) {
            this->SMSG_CHAT_PLAYER_AMBIGUOUS = std::move(other.SMSG_CHAT_PLAYER_AMBIGUOUS);
        }
        if (opcode == Opcode::SMSG_SPELLINSTAKILLLOG) {
            this->SMSG_SPELLINSTAKILLLOG = std::move(other.SMSG_SPELLINSTAKILLLOG);
        }
        if (opcode == Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS) {
            this->SMSG_SPELL_UPDATE_CHAIN_TARGETS = std::move(other.SMSG_SPELL_UPDATE_CHAIN_TARGETS);
        }
        if (opcode == Opcode::SMSG_SPELLSTEALLOG) {
            this->SMSG_SPELLSTEALLOG = std::move(other.SMSG_SPELLSTEALLOG);
        }
        if (opcode == Opcode::SMSG_DEFENSE_MESSAGE) {
            this->SMSG_DEFENSE_MESSAGE = std::move(other.SMSG_DEFENSE_MESSAGE);
        }
        if (opcode == Opcode::SMSG_INSTANCE_DIFFICULTY) {
            this->SMSG_INSTANCE_DIFFICULTY = std::move(other.SMSG_INSTANCE_DIFFICULTY);
        }
        if (opcode == Opcode::SMSG_MOTD) {
            this->SMSG_MOTD = std::move(other.SMSG_MOTD);
        }
        if (opcode == Opcode::SMSG_MOVE_SET_CAN_FLY) {
            this->SMSG_MOVE_SET_CAN_FLY = std::move(other.SMSG_MOVE_SET_CAN_FLY);
        }
        if (opcode == Opcode::SMSG_MOVE_UNSET_CAN_FLY) {
            this->SMSG_MOVE_UNSET_CAN_FLY = std::move(other.SMSG_MOVE_UNSET_CAN_FLY);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT) {
            this->SMSG_ARENA_TEAM_COMMAND_RESULT = std::move(other.SMSG_ARENA_TEAM_COMMAND_RESULT);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE) {
            this->SMSG_ARENA_TEAM_QUERY_RESPONSE = std::move(other.SMSG_ARENA_TEAM_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_ROSTER) {
            this->SMSG_ARENA_TEAM_ROSTER = std::move(other.SMSG_ARENA_TEAM_ROSTER);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_INVITE) {
            this->SMSG_ARENA_TEAM_INVITE = std::move(other.SMSG_ARENA_TEAM_INVITE);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_EVENT) {
            this->SMSG_ARENA_TEAM_EVENT = std::move(other.SMSG_ARENA_TEAM_EVENT);
        }
        if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
            this->MSG_MOVE_START_ASCEND = std::move(other.MSG_MOVE_START_ASCEND);
        }
        if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
            this->MSG_MOVE_STOP_ASCEND = std::move(other.MSG_MOVE_STOP_ASCEND);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_STATS) {
            this->SMSG_ARENA_TEAM_STATS = std::move(other.SMSG_ARENA_TEAM_STATS);
        }
        if (opcode == Opcode::SMSG_UPDATE_LFG_LIST) {
            this->SMSG_UPDATE_LFG_LIST = std::move(other.SMSG_UPDATE_LFG_LIST);
        }
        if (opcode == Opcode::SMSG_LFG_PROPOSAL_UPDATE) {
            this->SMSG_LFG_PROPOSAL_UPDATE = std::move(other.SMSG_LFG_PROPOSAL_UPDATE);
        }
        if (opcode == Opcode::SMSG_LFG_ROLE_CHECK_UPDATE) {
            this->SMSG_LFG_ROLE_CHECK_UPDATE = std::move(other.SMSG_LFG_ROLE_CHECK_UPDATE);
        }
        if (opcode == Opcode::SMSG_LFG_JOIN_RESULT) {
            this->SMSG_LFG_JOIN_RESULT = std::move(other.SMSG_LFG_JOIN_RESULT);
        }
        if (opcode == Opcode::SMSG_LFG_QUEUE_STATUS) {
            this->SMSG_LFG_QUEUE_STATUS = std::move(other.SMSG_LFG_QUEUE_STATUS);
        }
        if (opcode == Opcode::SMSG_LFG_UPDATE_PLAYER) {
            this->SMSG_LFG_UPDATE_PLAYER = std::move(other.SMSG_LFG_UPDATE_PLAYER);
        }
        if (opcode == Opcode::SMSG_LFG_UPDATE_PARTY) {
            this->SMSG_LFG_UPDATE_PARTY = std::move(other.SMSG_LFG_UPDATE_PARTY);
        }
        if (opcode == Opcode::SMSG_LFG_UPDATE_SEARCH) {
            this->SMSG_LFG_UPDATE_SEARCH = std::move(other.SMSG_LFG_UPDATE_SEARCH);
        }
        if (opcode == Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE) {
            this->SMSG_LFG_BOOT_PROPOSAL_UPDATE = std::move(other.SMSG_LFG_BOOT_PROPOSAL_UPDATE);
        }
        if (opcode == Opcode::SMSG_LFG_PLAYER_INFO) {
            this->SMSG_LFG_PLAYER_INFO = std::move(other.SMSG_LFG_PLAYER_INFO);
        }
        if (opcode == Opcode::SMSG_LFG_PARTY_INFO) {
            this->SMSG_LFG_PARTY_INFO = std::move(other.SMSG_LFG_PARTY_INFO);
        }
        if (opcode == Opcode::SMSG_TITLE_EARNED) {
            this->SMSG_TITLE_EARNED = std::move(other.SMSG_TITLE_EARNED);
        }
        if (opcode == Opcode::SMSG_ARENA_ERROR) {
            this->SMSG_ARENA_ERROR = std::move(other.SMSG_ARENA_ERROR);
        }
        if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
            this->MSG_INSPECT_ARENA_TEAMS = std::move(other.MSG_INSPECT_ARENA_TEAMS);
        }
        if (opcode == Opcode::SMSG_DEATH_RELEASE_LOC) {
            this->SMSG_DEATH_RELEASE_LOC = std::move(other.SMSG_DEATH_RELEASE_LOC);
        }
        if (opcode == Opcode::SMSG_FORCED_DEATH_UPDATE) {
            this->SMSG_FORCED_DEATH_UPDATE = std::move(other.SMSG_FORCED_DEATH_UPDATE);
        }
        if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_SPEED) {
            this->MSG_MOVE_SET_FLIGHT_SPEED = std::move(other.MSG_MOVE_SET_FLIGHT_SPEED);
        }
        if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
            this->MSG_MOVE_SET_FLIGHT_BACK_SPEED = std::move(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED);
        }
        if (opcode == Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE) {
            this->SMSG_FORCE_FLIGHT_SPEED_CHANGE = std::move(other.SMSG_FORCE_FLIGHT_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) {
            this->SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE = std::move(other.SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED) {
            this->SMSG_SPLINE_SET_FLIGHT_SPEED = std::move(other.SMSG_SPLINE_SET_FLIGHT_SPEED);
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) {
            this->SMSG_SPLINE_SET_FLIGHT_BACK_SPEED = std::move(other.SMSG_SPLINE_SET_FLIGHT_BACK_SPEED);
        }
        if (opcode == Opcode::SMSG_FLIGHT_SPLINE_SYNC) {
            this->SMSG_FLIGHT_SPLINE_SYNC = std::move(other.SMSG_FLIGHT_SPLINE_SYNC);
        }
        if (opcode == Opcode::SMSG_REALM_SPLIT) {
            this->SMSG_REALM_SPLIT = std::move(other.SMSG_REALM_SPLIT);
        }
        if (opcode == Opcode::SMSG_TIME_SYNC_REQ) {
            this->SMSG_TIME_SYNC_REQ = std::move(other.SMSG_TIME_SYNC_REQ);
        }
        if (opcode == Opcode::SMSG_RESET_FAILED_NOTIFY) {
            this->SMSG_RESET_FAILED_NOTIFY = std::move(other.SMSG_RESET_FAILED_NOTIFY);
        }
        if (opcode == Opcode::SMSG_LFG_DISABLED) {
            this->SMSG_LFG_DISABLED = std::move(other.SMSG_LFG_DISABLED);
        }
        if (opcode == Opcode::SMSG_UPDATE_COMBO_POINTS) {
            this->SMSG_UPDATE_COMBO_POINTS = std::move(other.SMSG_UPDATE_COMBO_POINTS);
        }
        if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
            this->MSG_MOVE_START_DESCEND = std::move(other.MSG_MOVE_START_DESCEND);
        }
        if (opcode == Opcode::SMSG_DISMOUNT) {
            this->SMSG_DISMOUNT = std::move(other.SMSG_DISMOUNT);
        }
        if (opcode == Opcode::MSG_MOVE_UPDATE_CAN_FLY) {
            this->MSG_MOVE_UPDATE_CAN_FLY = std::move(other.MSG_MOVE_UPDATE_CAN_FLY);
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
            this->MSG_RAID_READY_CHECK_CONFIRM = std::move(other.MSG_RAID_READY_CHECK_CONFIRM);
        }
        if (opcode == Opcode::SMSG_GM_MESSAGECHAT) {
            this->SMSG_GM_MESSAGECHAT = std::move(other.SMSG_GM_MESSAGECHAT);
        }
        if (opcode == Opcode::SMSG_CLEAR_TARGET) {
            this->SMSG_CLEAR_TARGET = std::move(other.SMSG_CLEAR_TARGET);
        }
        if (opcode == Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD) {
            this->SMSG_CROSSED_INEBRIATION_THRESHOLD = std::move(other.SMSG_CROSSED_INEBRIATION_THRESHOLD);
        }
        if (opcode == Opcode::SMSG_KICK_REASON) {
            this->SMSG_KICK_REASON = std::move(other.SMSG_KICK_REASON);
        }
        if (opcode == Opcode::SMSG_COMPLAIN_RESULT) {
            this->SMSG_COMPLAIN_RESULT = std::move(other.SMSG_COMPLAIN_RESULT);
        }
        if (opcode == Opcode::SMSG_FEATURE_SYSTEM_STATUS) {
            this->SMSG_FEATURE_SYSTEM_STATUS = std::move(other.SMSG_FEATURE_SYSTEM_STATUS);
        }
        if (opcode == Opcode::SMSG_CHANNEL_MEMBER_COUNT) {
            this->SMSG_CHANNEL_MEMBER_COUNT = std::move(other.SMSG_CHANNEL_MEMBER_COUNT);
        }
        if (opcode == Opcode::SMSG_GUILD_BANK_LIST) {
            this->SMSG_GUILD_BANK_LIST = std::move(other.SMSG_GUILD_BANK_LIST);
        }
        if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
            this->MSG_GUILD_BANK_LOG_QUERY = std::move(other.MSG_GUILD_BANK_LOG_QUERY);
        }
        if (opcode == Opcode::SMSG_USERLIST_ADD) {
            this->SMSG_USERLIST_ADD = std::move(other.SMSG_USERLIST_ADD);
        }
        if (opcode == Opcode::SMSG_USERLIST_REMOVE) {
            this->SMSG_USERLIST_REMOVE = std::move(other.SMSG_USERLIST_REMOVE);
        }
        if (opcode == Opcode::SMSG_USERLIST_UPDATE) {
            this->SMSG_USERLIST_UPDATE = std::move(other.SMSG_USERLIST_UPDATE);
        }
        if (opcode == Opcode::SMSG_INSPECT_TALENT) {
            this->SMSG_INSPECT_TALENT = std::move(other.SMSG_INSPECT_TALENT);
        }
        if (opcode == Opcode::SMSG_LOOT_LIST) {
            this->SMSG_LOOT_LIST = std::move(other.SMSG_LOOT_LIST);
        }
        if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
            this->MSG_GUILD_PERMISSIONS = std::move(other.MSG_GUILD_PERMISSIONS);
        }
        if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
            this->MSG_GUILD_BANK_MONEY_WITHDRAWN = std::move(other.MSG_GUILD_BANK_MONEY_WITHDRAWN);
        }
        if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
            this->MSG_GUILD_EVENT_LOG_QUERY = std::move(other.MSG_GUILD_EVENT_LOG_QUERY);
        }
        if (opcode == Opcode::SMSG_MIRRORIMAGE_DATA) {
            this->SMSG_MIRRORIMAGE_DATA = std::move(other.SMSG_MIRRORIMAGE_DATA);
        }
        if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
            this->MSG_QUERY_GUILD_BANK_TEXT = std::move(other.MSG_QUERY_GUILD_BANK_TEXT);
        }
        if (opcode == Opcode::SMSG_OVERRIDE_LIGHT) {
            this->SMSG_OVERRIDE_LIGHT = std::move(other.SMSG_OVERRIDE_LIGHT);
        }
        if (opcode == Opcode::SMSG_TOTEM_CREATED) {
            this->SMSG_TOTEM_CREATED = std::move(other.SMSG_TOTEM_CREATED);
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE) {
            this->SMSG_QUESTGIVER_STATUS_MULTIPLE = std::move(other.SMSG_QUESTGIVER_STATUS_MULTIPLE);
        }
        if (opcode == Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) {
            this->SMSG_SET_PLAYER_DECLINED_NAMES_RESULT = std::move(other.SMSG_SET_PLAYER_DECLINED_NAMES_RESULT);
        }
        if (opcode == Opcode::SMSG_SEND_UNLEARN_SPELLS) {
            this->SMSG_SEND_UNLEARN_SPELLS = std::move(other.SMSG_SEND_UNLEARN_SPELLS);
        }
        if (opcode == Opcode::SMSG_PROPOSE_LEVEL_GRANT) {
            this->SMSG_PROPOSE_LEVEL_GRANT = std::move(other.SMSG_PROPOSE_LEVEL_GRANT);
        }
        if (opcode == Opcode::SMSG_REFER_A_FRIEND_FAILURE) {
            this->SMSG_REFER_A_FRIEND_FAILURE = std::move(other.SMSG_REFER_A_FRIEND_FAILURE);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_FLYING) {
            this->SMSG_SPLINE_MOVE_SET_FLYING = std::move(other.SMSG_SPLINE_MOVE_SET_FLYING);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING) {
            this->SMSG_SPLINE_MOVE_UNSET_FLYING = std::move(other.SMSG_SPLINE_MOVE_UNSET_FLYING);
        }
        if (opcode == Opcode::SMSG_ENABLE_BARBER_SHOP) {
            this->SMSG_ENABLE_BARBER_SHOP = std::move(other.SMSG_ENABLE_BARBER_SHOP);
        }
        if (opcode == Opcode::SMSG_BARBER_SHOP_RESULT) {
            this->SMSG_BARBER_SHOP_RESULT = std::move(other.SMSG_BARBER_SHOP_RESULT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_SEND_CALENDAR) {
            this->SMSG_CALENDAR_SEND_CALENDAR = std::move(other.SMSG_CALENDAR_SEND_CALENDAR);
        }
        if (opcode == Opcode::SMSG_CALENDAR_SEND_EVENT) {
            this->SMSG_CALENDAR_SEND_EVENT = std::move(other.SMSG_CALENDAR_SEND_EVENT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_FILTER_GUILD) {
            this->SMSG_CALENDAR_FILTER_GUILD = std::move(other.SMSG_CALENDAR_FILTER_GUILD);
        }
        if (opcode == Opcode::SMSG_CALENDAR_ARENA_TEAM) {
            this->SMSG_CALENDAR_ARENA_TEAM = std::move(other.SMSG_CALENDAR_ARENA_TEAM);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE) {
            this->SMSG_CALENDAR_EVENT_INVITE = std::move(other.SMSG_CALENDAR_EVENT_INVITE);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED) {
            this->SMSG_CALENDAR_EVENT_INVITE_REMOVED = std::move(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_STATUS) {
            this->SMSG_CALENDAR_EVENT_STATUS = std::move(other.SMSG_CALENDAR_EVENT_STATUS);
        }
        if (opcode == Opcode::SMSG_CALENDAR_COMMAND_RESULT) {
            this->SMSG_CALENDAR_COMMAND_RESULT = std::move(other.SMSG_CALENDAR_COMMAND_RESULT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED) {
            this->SMSG_CALENDAR_RAID_LOCKOUT_ADDED = std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_ADDED);
        }
        if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) {
            this->SMSG_CALENDAR_RAID_LOCKOUT_REMOVED = std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_REMOVED);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT) {
            this->SMSG_CALENDAR_EVENT_INVITE_ALERT = std::move(other.SMSG_CALENDAR_EVENT_INVITE_ALERT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) {
            this->SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT = std::move(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT) {
            this->SMSG_CALENDAR_EVENT_REMOVED_ALERT = std::move(other.SMSG_CALENDAR_EVENT_REMOVED_ALERT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT) {
            this->SMSG_CALENDAR_EVENT_UPDATED_ALERT = std::move(other.SMSG_CALENDAR_EVENT_UPDATED_ALERT);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) {
            this->SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT = std::move(other.SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT);
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
            this->CMSG_CALENDAR_GET_NUM_PENDING = std::move(other.CMSG_CALENDAR_GET_NUM_PENDING);
        }
        if (opcode == Opcode::SMSG_CALENDAR_SEND_NUM_PENDING) {
            this->SMSG_CALENDAR_SEND_NUM_PENDING = std::move(other.SMSG_CALENDAR_SEND_NUM_PENDING);
        }
        if (opcode == Opcode::MSG_MOVE_SET_PITCH_RATE) {
            this->MSG_MOVE_SET_PITCH_RATE = std::move(other.MSG_MOVE_SET_PITCH_RATE);
        }
        if (opcode == Opcode::SMSG_FORCE_PITCH_RATE_CHANGE) {
            this->SMSG_FORCE_PITCH_RATE_CHANGE = std::move(other.SMSG_FORCE_PITCH_RATE_CHANGE);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES) {
            this->SMSG_CALENDAR_EVENT_INVITE_NOTES = std::move(other.SMSG_CALENDAR_EVENT_INVITE_NOTES);
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) {
            this->SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT = std::move(other.SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT);
        }
        if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) {
            this->SMSG_UPDATE_ACCOUNT_DATA_COMPLETE = std::move(other.SMSG_UPDATE_ACCOUNT_DATA_COMPLETE);
        }
        if (opcode == Opcode::SMSG_TRIGGER_MOVIE) {
            this->SMSG_TRIGGER_MOVIE = std::move(other.SMSG_TRIGGER_MOVIE);
        }
        if (opcode == Opcode::SMSG_ACHIEVEMENT_EARNED) {
            this->SMSG_ACHIEVEMENT_EARNED = std::move(other.SMSG_ACHIEVEMENT_EARNED);
        }
        if (opcode == Opcode::SMSG_CRITERIA_UPDATE) {
            this->SMSG_CRITERIA_UPDATE = std::move(other.SMSG_CRITERIA_UPDATE);
        }
        if (opcode == Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS) {
            this->SMSG_RESPOND_INSPECT_ACHIEVEMENTS = std::move(other.SMSG_RESPOND_INSPECT_ACHIEVEMENTS);
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL) {
            this->SMSG_QUESTUPDATE_ADD_PVP_KILL = std::move(other.SMSG_QUESTUPDATE_ADD_PVP_KILL);
        }
        if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) {
            this->SMSG_CALENDAR_RAID_LOCKOUT_UPDATED = std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_UPDATED);
        }
        if (opcode == Opcode::SMSG_CHAR_CUSTOMIZE) {
            this->SMSG_CHAR_CUSTOMIZE = std::move(other.SMSG_CHAR_CUSTOMIZE);
        }
        if (opcode == Opcode::SMSG_SET_PHASE_SHIFT) {
            this->SMSG_SET_PHASE_SHIFT = std::move(other.SMSG_SET_PHASE_SHIFT);
        }
        if (opcode == Opcode::SMSG_ALL_ACHIEVEMENT_DATA) {
            this->SMSG_ALL_ACHIEVEMENT_DATA = std::move(other.SMSG_ALL_ACHIEVEMENT_DATA);
        }
        if (opcode == Opcode::SMSG_POWER_UPDATE) {
            this->SMSG_POWER_UPDATE = std::move(other.SMSG_POWER_UPDATE);
        }
        if (opcode == Opcode::SMSG_HIGHEST_THREAT_UPDATE) {
            this->SMSG_HIGHEST_THREAT_UPDATE = std::move(other.SMSG_HIGHEST_THREAT_UPDATE);
        }
        if (opcode == Opcode::SMSG_THREAT_UPDATE) {
            this->SMSG_THREAT_UPDATE = std::move(other.SMSG_THREAT_UPDATE);
        }
        if (opcode == Opcode::SMSG_THREAT_REMOVE) {
            this->SMSG_THREAT_REMOVE = std::move(other.SMSG_THREAT_REMOVE);
        }
        if (opcode == Opcode::SMSG_THREAT_CLEAR) {
            this->SMSG_THREAT_CLEAR = std::move(other.SMSG_THREAT_CLEAR);
        }
        if (opcode == Opcode::SMSG_CONVERT_RUNE) {
            this->SMSG_CONVERT_RUNE = std::move(other.SMSG_CONVERT_RUNE);
        }
        if (opcode == Opcode::SMSG_RESYNC_RUNES) {
            this->SMSG_RESYNC_RUNES = std::move(other.SMSG_RESYNC_RUNES);
        }
        if (opcode == Opcode::SMSG_ADD_RUNE_POWER) {
            this->SMSG_ADD_RUNE_POWER = std::move(other.SMSG_ADD_RUNE_POWER);
        }
        if (opcode == Opcode::SMSG_AUCTION_LIST_PENDING_SALES) {
            this->SMSG_AUCTION_LIST_PENDING_SALES = std::move(other.SMSG_AUCTION_LIST_PENDING_SALES);
        }
        if (opcode == Opcode::SMSG_MODIFY_COOLDOWN) {
            this->SMSG_MODIFY_COOLDOWN = std::move(other.SMSG_MODIFY_COOLDOWN);
        }
        if (opcode == Opcode::SMSG_PET_UPDATE_COMBO_POINTS) {
            this->SMSG_PET_UPDATE_COMBO_POINTS = std::move(other.SMSG_PET_UPDATE_COMBO_POINTS);
        }
        if (opcode == Opcode::SMSG_PRE_RESURRECT) {
            this->SMSG_PRE_RESURRECT = std::move(other.SMSG_PRE_RESURRECT);
        }
        if (opcode == Opcode::SMSG_AURA_UPDATE_ALL) {
            this->SMSG_AURA_UPDATE_ALL = std::move(other.SMSG_AURA_UPDATE_ALL);
        }
        if (opcode == Opcode::SMSG_AURA_UPDATE) {
            this->SMSG_AURA_UPDATE = std::move(other.SMSG_AURA_UPDATE);
        }
        if (opcode == Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT) {
            this->SMSG_SERVER_FIRST_ACHIEVEMENT = std::move(other.SMSG_SERVER_FIRST_ACHIEVEMENT);
        }
        if (opcode == Opcode::SMSG_PET_LEARNED_SPELL) {
            this->SMSG_PET_LEARNED_SPELL = std::move(other.SMSG_PET_LEARNED_SPELL);
        }
        if (opcode == Opcode::SMSG_PET_UNLEARNED_SPELL) {
            this->SMSG_PET_UNLEARNED_SPELL = std::move(other.SMSG_PET_UNLEARNED_SPELL);
        }
        if (opcode == Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) {
            this->SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA = std::move(other.SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA);
        }
        if (opcode == Opcode::SMSG_CRITERIA_DELETED) {
            this->SMSG_CRITERIA_DELETED = std::move(other.SMSG_CRITERIA_DELETED);
        }
        if (opcode == Opcode::SMSG_ACHIEVEMENT_DELETED) {
            this->SMSG_ACHIEVEMENT_DELETED = std::move(other.SMSG_ACHIEVEMENT_DELETED);
        }
        if (opcode == Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED) {
            this->SMSG_BATTLEGROUND_INFO_THROTTLED = std::move(other.SMSG_BATTLEGROUND_INFO_THROTTLED);
        }
        if (opcode == Opcode::SMSG_PLAYER_VEHICLE_DATA) {
            this->SMSG_PLAYER_VEHICLE_DATA = std::move(other.SMSG_PLAYER_VEHICLE_DATA);
        }
        if (opcode == Opcode::SMSG_PET_GUIDS) {
            this->SMSG_PET_GUIDS = std::move(other.SMSG_PET_GUIDS);
        }
        if (opcode == Opcode::SMSG_CLIENTCACHE_VERSION) {
            this->SMSG_CLIENTCACHE_VERSION = std::move(other.SMSG_CLIENTCACHE_VERSION);
        }
        if (opcode == Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE) {
            this->SMSG_ITEM_REFUND_INFO_RESPONSE = std::move(other.SMSG_ITEM_REFUND_INFO_RESPONSE);
        }
        if (opcode == Opcode::SMSG_ITEM_REFUND_RESULT) {
            this->SMSG_ITEM_REFUND_RESULT = std::move(other.SMSG_ITEM_REFUND_RESULT);
        }
        if (opcode == Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) {
            this->SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE = std::move(other.SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE);
        }
        if (opcode == Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION) {
            this->SMSG_CALENDAR_CLEAR_PENDING_ACTION = std::move(other.SMSG_CALENDAR_CLEAR_PENDING_ACTION);
        }
        if (opcode == Opcode::SMSG_EQUIPMENT_SET_LIST) {
            this->SMSG_EQUIPMENT_SET_LIST = std::move(other.SMSG_EQUIPMENT_SET_LIST);
        }
        if (opcode == Opcode::SMSG_SET_PROJECTILE_POSITION) {
            this->SMSG_SET_PROJECTILE_POSITION = std::move(other.SMSG_SET_PROJECTILE_POSITION);
        }
        if (opcode == Opcode::SMSG_TALENTS_INFO) {
            this->SMSG_TALENTS_INFO = std::move(other.SMSG_TALENTS_INFO);
        }
        if (opcode == Opcode::SMSG_ARENA_UNIT_DESTROYED) {
            this->SMSG_ARENA_UNIT_DESTROYED = std::move(other.SMSG_ARENA_UNIT_DESTROYED);
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) {
            this->SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED = std::move(other.SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED);
        }
        if (opcode == Opcode::SMSG_MOVE_GRAVITY_DISABLE) {
            this->SMSG_MOVE_GRAVITY_DISABLE = std::move(other.SMSG_MOVE_GRAVITY_DISABLE);
        }
        if (opcode == Opcode::SMSG_MOVE_GRAVITY_ENABLE) {
            this->SMSG_MOVE_GRAVITY_ENABLE = std::move(other.SMSG_MOVE_GRAVITY_ENABLE);
        }
        if (opcode == Opcode::MSG_MOVE_GRAVITY_CHNG) {
            this->MSG_MOVE_GRAVITY_CHNG = std::move(other.MSG_MOVE_GRAVITY_CHNG);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE) {
            this->SMSG_SPLINE_MOVE_GRAVITY_DISABLE = std::move(other.SMSG_SPLINE_MOVE_GRAVITY_DISABLE);
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE) {
            this->SMSG_SPLINE_MOVE_GRAVITY_ENABLE = std::move(other.SMSG_SPLINE_MOVE_GRAVITY_ENABLE);
        }
        if (opcode == Opcode::SMSG_EQUIPMENT_SET_USE_RESULT) {
            this->SMSG_EQUIPMENT_SET_USE_RESULT = std::move(other.SMSG_EQUIPMENT_SET_USE_RESULT);
        }
        if (opcode == Opcode::SMSG_CHAR_FACTION_CHANGE) {
            this->SMSG_CHAR_FACTION_CHANGE = std::move(other.SMSG_CHAR_FACTION_CHANGE);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) {
            this->SMSG_BATTLEFIELD_MGR_ENTRY_INVITE = std::move(other.SMSG_BATTLEFIELD_MGR_ENTRY_INVITE);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTERED) {
            this->SMSG_BATTLEFIELD_MGR_ENTERED = std::move(other.SMSG_BATTLEFIELD_MGR_ENTERED);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) {
            this->SMSG_BATTLEFIELD_MGR_QUEUE_INVITE = std::move(other.SMSG_BATTLEFIELD_MGR_QUEUE_INVITE);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) {
            this->SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE = std::move(other.SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING) {
            this->SMSG_BATTLEFIELD_MGR_EJECT_PENDING = std::move(other.SMSG_BATTLEFIELD_MGR_EJECT_PENDING);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECTED) {
            this->SMSG_BATTLEFIELD_MGR_EJECTED = std::move(other.SMSG_BATTLEFIELD_MGR_EJECTED);
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE) {
            this->SMSG_BATTLEFIELD_MGR_STATE_CHANGE = std::move(other.SMSG_BATTLEFIELD_MGR_STATE_CHANGE);
        }
        if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
            this->MSG_SET_RAID_DIFFICULTY = std::move(other.MSG_SET_RAID_DIFFICULTY);
        }
        if (opcode == Opcode::SMSG_TOGGLE_XP_GAIN) {
            this->SMSG_TOGGLE_XP_GAIN = std::move(other.SMSG_TOGGLE_XP_GAIN);
        }
        if (opcode == Opcode::SMSG_GMRESPONSE_DB_ERROR) {
            this->SMSG_GMRESPONSE_DB_ERROR = std::move(other.SMSG_GMRESPONSE_DB_ERROR);
        }
        if (opcode == Opcode::SMSG_GMRESPONSE_RECEIVED) {
            this->SMSG_GMRESPONSE_RECEIVED = std::move(other.SMSG_GMRESPONSE_RECEIVED);
        }
        if (opcode == Opcode::SMSG_GMRESPONSE_STATUS_UPDATE) {
            this->SMSG_GMRESPONSE_STATUS_UPDATE = std::move(other.SMSG_GMRESPONSE_STATUS_UPDATE);
        }
        if (opcode == Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE) {
            this->SMSG_WORLD_STATE_UI_TIMER_UPDATE = std::move(other.SMSG_WORLD_STATE_UI_TIMER_UPDATE);
        }
        if (opcode == Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET) {
            this->SMSG_TALENTS_INVOLUNTARILY_RESET = std::move(other.SMSG_TALENTS_INVOLUNTARILY_RESET);
        }
        if (opcode == Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) {
            this->SMSG_QUERY_QUESTS_COMPLETED_RESPONSE = std::move(other.SMSG_QUERY_QUESTS_COMPLETED_RESPONSE);
        }
        if (opcode == Opcode::SMSG_CORPSE_NOT_IN_INSTANCE) {
            this->SMSG_CORPSE_NOT_IN_INSTANCE = std::move(other.SMSG_CORPSE_NOT_IN_INSTANCE);
        }
        if (opcode == Opcode::SMSG_CAMERA_SHAKE) {
            this->SMSG_CAMERA_SHAKE = std::move(other.SMSG_CAMERA_SHAKE);
        }
        if (opcode == Opcode::SMSG_SOCKET_GEMS_RESULT) {
            this->SMSG_SOCKET_GEMS_RESULT = std::move(other.SMSG_SOCKET_GEMS_RESULT);
        }
        if (opcode == Opcode::SMSG_REDIRECT_CLIENT) {
            this->SMSG_REDIRECT_CLIENT = std::move(other.SMSG_REDIRECT_CLIENT);
        }
        if (opcode == Opcode::SMSG_MOVE_SET_COLLISION_HGT) {
            this->SMSG_MOVE_SET_COLLISION_HGT = std::move(other.SMSG_MOVE_SET_COLLISION_HGT);
        }
        if (opcode == Opcode::SMSG_MULTIPLE_MOVES) {
            this->SMSG_MULTIPLE_MOVES = std::move(other.SMSG_MULTIPLE_MOVES);
        }
        return std::move(*this);
    }

    ~ServerOpcode() {
        if (opcode == Opcode::SMSG_CHAR_CREATE) {
            this->SMSG_CHAR_CREATE.~SMSG_CHAR_CREATE();
        }
        if (opcode == Opcode::SMSG_CHAR_ENUM) {
            this->SMSG_CHAR_ENUM.~SMSG_CHAR_ENUM();
        }
        if (opcode == Opcode::SMSG_CHAR_DELETE) {
            this->SMSG_CHAR_DELETE.~SMSG_CHAR_DELETE();
        }
        if (opcode == Opcode::SMSG_NEW_WORLD) {
            this->SMSG_NEW_WORLD.~SMSG_NEW_WORLD();
        }
        if (opcode == Opcode::SMSG_TRANSFER_PENDING) {
            this->SMSG_TRANSFER_PENDING.~SMSG_TRANSFER_PENDING();
        }
        if (opcode == Opcode::SMSG_TRANSFER_ABORTED) {
            this->SMSG_TRANSFER_ABORTED.~SMSG_TRANSFER_ABORTED();
        }
        if (opcode == Opcode::SMSG_CHARACTER_LOGIN_FAILED) {
            this->SMSG_CHARACTER_LOGIN_FAILED.~SMSG_CHARACTER_LOGIN_FAILED();
        }
        if (opcode == Opcode::SMSG_LOGIN_SETTIMESPEED) {
            this->SMSG_LOGIN_SETTIMESPEED.~SMSG_LOGIN_SETTIMESPEED();
        }
        if (opcode == Opcode::SMSG_LOGOUT_RESPONSE) {
            this->SMSG_LOGOUT_RESPONSE.~SMSG_LOGOUT_RESPONSE();
        }
        if (opcode == Opcode::SMSG_LOGOUT_COMPLETE) {
            this->SMSG_LOGOUT_COMPLETE.~SMSG_LOGOUT_COMPLETE();
        }
        if (opcode == Opcode::SMSG_LOGOUT_CANCEL_ACK) {
            this->SMSG_LOGOUT_CANCEL_ACK.~SMSG_LOGOUT_CANCEL_ACK();
        }
        if (opcode == Opcode::SMSG_NAME_QUERY_RESPONSE) {
            this->SMSG_NAME_QUERY_RESPONSE.~SMSG_NAME_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_PET_NAME_QUERY_RESPONSE) {
            this->SMSG_PET_NAME_QUERY_RESPONSE.~SMSG_PET_NAME_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_GUILD_QUERY_RESPONSE) {
            this->SMSG_GUILD_QUERY_RESPONSE.~SMSG_GUILD_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE) {
            this->SMSG_ITEM_QUERY_SINGLE_RESPONSE.~SMSG_ITEM_QUERY_SINGLE_RESPONSE();
        }
        if (opcode == Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE) {
            this->SMSG_PAGE_TEXT_QUERY_RESPONSE.~SMSG_PAGE_TEXT_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_QUEST_QUERY_RESPONSE) {
            this->SMSG_QUEST_QUERY_RESPONSE.~SMSG_QUEST_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE) {
            this->SMSG_GAMEOBJECT_QUERY_RESPONSE.~SMSG_GAMEOBJECT_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_CREATURE_QUERY_RESPONSE) {
            this->SMSG_CREATURE_QUERY_RESPONSE.~SMSG_CREATURE_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_WHO) {
            this->SMSG_WHO.~SMSG_WHO();
        }
        if (opcode == Opcode::SMSG_WHOIS) {
            this->SMSG_WHOIS.~SMSG_WHOIS();
        }
        if (opcode == Opcode::SMSG_CONTACT_LIST) {
            this->SMSG_CONTACT_LIST.~SMSG_CONTACT_LIST();
        }
        if (opcode == Opcode::SMSG_FRIEND_STATUS) {
            this->SMSG_FRIEND_STATUS.~SMSG_FRIEND_STATUS();
        }
        if (opcode == Opcode::SMSG_GROUP_INVITE) {
            this->SMSG_GROUP_INVITE.~SMSG_GROUP_INVITE();
        }
        if (opcode == Opcode::SMSG_GROUP_DECLINE) {
            this->SMSG_GROUP_DECLINE.~SMSG_GROUP_DECLINE();
        }
        if (opcode == Opcode::SMSG_GROUP_UNINVITE) {
            this->SMSG_GROUP_UNINVITE.~SMSG_GROUP_UNINVITE();
        }
        if (opcode == Opcode::SMSG_GROUP_SET_LEADER) {
            this->SMSG_GROUP_SET_LEADER.~SMSG_GROUP_SET_LEADER();
        }
        if (opcode == Opcode::SMSG_GROUP_DESTROYED) {
            this->SMSG_GROUP_DESTROYED.~SMSG_GROUP_DESTROYED();
        }
        if (opcode == Opcode::SMSG_GROUP_LIST) {
            this->SMSG_GROUP_LIST.~SMSG_GROUP_LIST();
        }
        if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS) {
            this->SMSG_PARTY_MEMBER_STATS.~SMSG_PARTY_MEMBER_STATS();
        }
        if (opcode == Opcode::SMSG_PARTY_COMMAND_RESULT) {
            this->SMSG_PARTY_COMMAND_RESULT.~SMSG_PARTY_COMMAND_RESULT();
        }
        if (opcode == Opcode::SMSG_GUILD_INVITE) {
            this->SMSG_GUILD_INVITE.~SMSG_GUILD_INVITE();
        }
        if (opcode == Opcode::SMSG_GUILD_DECLINE) {
            this->SMSG_GUILD_DECLINE.~SMSG_GUILD_DECLINE();
        }
        if (opcode == Opcode::SMSG_GUILD_INFO) {
            this->SMSG_GUILD_INFO.~SMSG_GUILD_INFO();
        }
        if (opcode == Opcode::SMSG_GUILD_ROSTER) {
            this->SMSG_GUILD_ROSTER.~SMSG_GUILD_ROSTER();
        }
        if (opcode == Opcode::SMSG_GUILD_EVENT) {
            this->SMSG_GUILD_EVENT.~SMSG_GUILD_EVENT();
        }
        if (opcode == Opcode::SMSG_GUILD_COMMAND_RESULT) {
            this->SMSG_GUILD_COMMAND_RESULT.~SMSG_GUILD_COMMAND_RESULT();
        }
        if (opcode == Opcode::SMSG_MESSAGECHAT) {
            this->SMSG_MESSAGECHAT.~SMSG_MESSAGECHAT();
        }
        if (opcode == Opcode::SMSG_CHANNEL_NOTIFY) {
            this->SMSG_CHANNEL_NOTIFY.~SMSG_CHANNEL_NOTIFY();
        }
        if (opcode == Opcode::SMSG_CHANNEL_LIST) {
            this->SMSG_CHANNEL_LIST.~SMSG_CHANNEL_LIST();
        }
        if (opcode == Opcode::SMSG_UPDATE_OBJECT) {
            this->SMSG_UPDATE_OBJECT.~SMSG_UPDATE_OBJECT();
        }
        if (opcode == Opcode::SMSG_DESTROY_OBJECT) {
            this->SMSG_DESTROY_OBJECT.~SMSG_DESTROY_OBJECT();
        }
        if (opcode == Opcode::SMSG_READ_ITEM_OK) {
            this->SMSG_READ_ITEM_OK.~SMSG_READ_ITEM_OK();
        }
        if (opcode == Opcode::SMSG_READ_ITEM_FAILED) {
            this->SMSG_READ_ITEM_FAILED.~SMSG_READ_ITEM_FAILED();
        }
        if (opcode == Opcode::SMSG_ITEM_COOLDOWN) {
            this->SMSG_ITEM_COOLDOWN.~SMSG_ITEM_COOLDOWN();
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM) {
            this->SMSG_GAMEOBJECT_CUSTOM_ANIM.~SMSG_GAMEOBJECT_CUSTOM_ANIM();
        }
        if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
            this->MSG_MOVE_START_FORWARD.~MSG_MOVE_START_FORWARD();
        }
        if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
            this->MSG_MOVE_START_BACKWARD.~MSG_MOVE_START_BACKWARD();
        }
        if (opcode == Opcode::MSG_MOVE_STOP) {
            this->MSG_MOVE_STOP.~MSG_MOVE_STOP();
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
            this->MSG_MOVE_START_STRAFE_LEFT.~MSG_MOVE_START_STRAFE_LEFT();
        }
        if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
            this->MSG_MOVE_START_STRAFE_RIGHT.~MSG_MOVE_START_STRAFE_RIGHT();
        }
        if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
            this->MSG_MOVE_STOP_STRAFE.~MSG_MOVE_STOP_STRAFE();
        }
        if (opcode == Opcode::MSG_MOVE_JUMP) {
            this->MSG_MOVE_JUMP.~MSG_MOVE_JUMP();
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
            this->MSG_MOVE_START_TURN_LEFT.~MSG_MOVE_START_TURN_LEFT();
        }
        if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
            this->MSG_MOVE_START_TURN_RIGHT.~MSG_MOVE_START_TURN_RIGHT();
        }
        if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
            this->MSG_MOVE_STOP_TURN.~MSG_MOVE_STOP_TURN();
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
            this->MSG_MOVE_START_PITCH_UP.~MSG_MOVE_START_PITCH_UP();
        }
        if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
            this->MSG_MOVE_START_PITCH_DOWN.~MSG_MOVE_START_PITCH_DOWN();
        }
        if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
            this->MSG_MOVE_STOP_PITCH.~MSG_MOVE_STOP_PITCH();
        }
        if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
            this->MSG_MOVE_SET_RUN_MODE.~MSG_MOVE_SET_RUN_MODE();
        }
        if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
            this->MSG_MOVE_SET_WALK_MODE.~MSG_MOVE_SET_WALK_MODE();
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT_CHEAT) {
            this->MSG_MOVE_TELEPORT_CHEAT.~MSG_MOVE_TELEPORT_CHEAT_Server();
        }
        if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
            this->MSG_MOVE_TELEPORT_ACK.~MSG_MOVE_TELEPORT_ACK_Server();
        }
        if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
            this->MSG_MOVE_FALL_LAND.~MSG_MOVE_FALL_LAND();
        }
        if (opcode == Opcode::MSG_MOVE_START_SWIM) {
            this->MSG_MOVE_START_SWIM.~MSG_MOVE_START_SWIM();
        }
        if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
            this->MSG_MOVE_STOP_SWIM.~MSG_MOVE_STOP_SWIM();
        }
        if (opcode == Opcode::MSG_MOVE_SET_FACING) {
            this->MSG_MOVE_SET_FACING.~MSG_MOVE_SET_FACING();
        }
        if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
            this->MSG_MOVE_SET_PITCH.~MSG_MOVE_SET_PITCH();
        }
        if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
            this->MSG_MOVE_WORLDPORT_ACK.~MSG_MOVE_WORLDPORT_ACK();
        }
        if (opcode == Opcode::SMSG_MONSTER_MOVE) {
            this->SMSG_MONSTER_MOVE.~SMSG_MONSTER_MOVE();
        }
        if (opcode == Opcode::SMSG_MOVE_WATER_WALK) {
            this->SMSG_MOVE_WATER_WALK.~SMSG_MOVE_WATER_WALK();
        }
        if (opcode == Opcode::SMSG_MOVE_LAND_WALK) {
            this->SMSG_MOVE_LAND_WALK.~SMSG_MOVE_LAND_WALK();
        }
        if (opcode == Opcode::SMSG_FORCE_RUN_SPEED_CHANGE) {
            this->SMSG_FORCE_RUN_SPEED_CHANGE.~SMSG_FORCE_RUN_SPEED_CHANGE();
        }
        if (opcode == Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE) {
            this->SMSG_FORCE_RUN_BACK_SPEED_CHANGE.~SMSG_FORCE_RUN_BACK_SPEED_CHANGE();
        }
        if (opcode == Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE) {
            this->SMSG_FORCE_SWIM_SPEED_CHANGE.~SMSG_FORCE_SWIM_SPEED_CHANGE();
        }
        if (opcode == Opcode::SMSG_FORCE_MOVE_ROOT) {
            this->SMSG_FORCE_MOVE_ROOT.~SMSG_FORCE_MOVE_ROOT();
        }
        if (opcode == Opcode::SMSG_FORCE_MOVE_UNROOT) {
            this->SMSG_FORCE_MOVE_UNROOT.~SMSG_FORCE_MOVE_UNROOT();
        }
        if (opcode == Opcode::MSG_MOVE_ROOT) {
            this->MSG_MOVE_ROOT.~MSG_MOVE_ROOT_Server();
        }
        if (opcode == Opcode::MSG_MOVE_UNROOT) {
            this->MSG_MOVE_UNROOT.~MSG_MOVE_UNROOT_Server();
        }
        if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
            this->MSG_MOVE_HEARTBEAT.~MSG_MOVE_HEARTBEAT();
        }
        if (opcode == Opcode::SMSG_MOVE_KNOCK_BACK) {
            this->SMSG_MOVE_KNOCK_BACK.~SMSG_MOVE_KNOCK_BACK();
        }
        if (opcode == Opcode::MSG_MOVE_KNOCK_BACK) {
            this->MSG_MOVE_KNOCK_BACK.~MSG_MOVE_KNOCK_BACK_Server();
        }
        if (opcode == Opcode::SMSG_MOVE_FEATHER_FALL) {
            this->SMSG_MOVE_FEATHER_FALL.~SMSG_MOVE_FEATHER_FALL();
        }
        if (opcode == Opcode::SMSG_MOVE_NORMAL_FALL) {
            this->SMSG_MOVE_NORMAL_FALL.~SMSG_MOVE_NORMAL_FALL();
        }
        if (opcode == Opcode::SMSG_MOVE_SET_HOVER) {
            this->SMSG_MOVE_SET_HOVER.~SMSG_MOVE_SET_HOVER();
        }
        if (opcode == Opcode::SMSG_MOVE_UNSET_HOVER) {
            this->SMSG_MOVE_UNSET_HOVER.~SMSG_MOVE_UNSET_HOVER();
        }
        if (opcode == Opcode::MSG_MOVE_HOVER) {
            this->MSG_MOVE_HOVER.~MSG_MOVE_HOVER();
        }
        if (opcode == Opcode::SMSG_TRIGGER_CINEMATIC) {
            this->SMSG_TRIGGER_CINEMATIC.~SMSG_TRIGGER_CINEMATIC();
        }
        if (opcode == Opcode::SMSG_TUTORIAL_FLAGS) {
            this->SMSG_TUTORIAL_FLAGS.~SMSG_TUTORIAL_FLAGS();
        }
        if (opcode == Opcode::SMSG_EMOTE) {
            this->SMSG_EMOTE.~SMSG_EMOTE();
        }
        if (opcode == Opcode::SMSG_TEXT_EMOTE) {
            this->SMSG_TEXT_EMOTE.~SMSG_TEXT_EMOTE();
        }
        if (opcode == Opcode::SMSG_INVENTORY_CHANGE_FAILURE) {
            this->SMSG_INVENTORY_CHANGE_FAILURE.~SMSG_INVENTORY_CHANGE_FAILURE();
        }
        if (opcode == Opcode::SMSG_TRADE_STATUS) {
            this->SMSG_TRADE_STATUS.~SMSG_TRADE_STATUS();
        }
        if (opcode == Opcode::SMSG_TRADE_STATUS_EXTENDED) {
            this->SMSG_TRADE_STATUS_EXTENDED.~SMSG_TRADE_STATUS_EXTENDED();
        }
        if (opcode == Opcode::SMSG_INITIALIZE_FACTIONS) {
            this->SMSG_INITIALIZE_FACTIONS.~SMSG_INITIALIZE_FACTIONS();
        }
        if (opcode == Opcode::SMSG_SET_FACTION_VISIBLE) {
            this->SMSG_SET_FACTION_VISIBLE.~SMSG_SET_FACTION_VISIBLE();
        }
        if (opcode == Opcode::SMSG_SET_FACTION_STANDING) {
            this->SMSG_SET_FACTION_STANDING.~SMSG_SET_FACTION_STANDING();
        }
        if (opcode == Opcode::SMSG_SET_PROFICIENCY) {
            this->SMSG_SET_PROFICIENCY.~SMSG_SET_PROFICIENCY();
        }
        if (opcode == Opcode::SMSG_ACTION_BUTTONS) {
            this->SMSG_ACTION_BUTTONS.~SMSG_ACTION_BUTTONS();
        }
        if (opcode == Opcode::SMSG_INITIAL_SPELLS) {
            this->SMSG_INITIAL_SPELLS.~SMSG_INITIAL_SPELLS();
        }
        if (opcode == Opcode::SMSG_LEARNED_SPELL) {
            this->SMSG_LEARNED_SPELL.~SMSG_LEARNED_SPELL();
        }
        if (opcode == Opcode::SMSG_SUPERCEDED_SPELL) {
            this->SMSG_SUPERCEDED_SPELL.~SMSG_SUPERCEDED_SPELL();
        }
        if (opcode == Opcode::SMSG_CAST_FAILED) {
            this->SMSG_CAST_FAILED.~SMSG_CAST_FAILED();
        }
        if (opcode == Opcode::SMSG_SPELL_START) {
            this->SMSG_SPELL_START.~SMSG_SPELL_START();
        }
        if (opcode == Opcode::SMSG_SPELL_GO) {
            this->SMSG_SPELL_GO.~SMSG_SPELL_GO();
        }
        if (opcode == Opcode::SMSG_SPELL_FAILURE) {
            this->SMSG_SPELL_FAILURE.~SMSG_SPELL_FAILURE();
        }
        if (opcode == Opcode::SMSG_SPELL_COOLDOWN) {
            this->SMSG_SPELL_COOLDOWN.~SMSG_SPELL_COOLDOWN();
        }
        if (opcode == Opcode::SMSG_COOLDOWN_EVENT) {
            this->SMSG_COOLDOWN_EVENT.~SMSG_COOLDOWN_EVENT();
        }
        if (opcode == Opcode::SMSG_PET_CAST_FAILED) {
            this->SMSG_PET_CAST_FAILED.~SMSG_PET_CAST_FAILED();
        }
        if (opcode == Opcode::MSG_CHANNEL_START) {
            this->MSG_CHANNEL_START.~MSG_CHANNEL_START_Server();
        }
        if (opcode == Opcode::MSG_CHANNEL_UPDATE) {
            this->MSG_CHANNEL_UPDATE.~MSG_CHANNEL_UPDATE_Server();
        }
        if (opcode == Opcode::SMSG_AI_REACTION) {
            this->SMSG_AI_REACTION.~SMSG_AI_REACTION();
        }
        if (opcode == Opcode::SMSG_ATTACKSTART) {
            this->SMSG_ATTACKSTART.~SMSG_ATTACKSTART();
        }
        if (opcode == Opcode::SMSG_ATTACKSTOP) {
            this->SMSG_ATTACKSTOP.~SMSG_ATTACKSTOP();
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_NOTINRANGE) {
            this->SMSG_ATTACKSWING_NOTINRANGE.~SMSG_ATTACKSWING_NOTINRANGE();
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_BADFACING) {
            this->SMSG_ATTACKSWING_BADFACING.~SMSG_ATTACKSWING_BADFACING();
        }
        if (opcode == Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY) {
            this->SMSG_INSTANCE_LOCK_WARNING_QUERY.~SMSG_INSTANCE_LOCK_WARNING_QUERY();
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_DEADTARGET) {
            this->SMSG_ATTACKSWING_DEADTARGET.~SMSG_ATTACKSWING_DEADTARGET();
        }
        if (opcode == Opcode::SMSG_ATTACKSWING_CANT_ATTACK) {
            this->SMSG_ATTACKSWING_CANT_ATTACK.~SMSG_ATTACKSWING_CANT_ATTACK();
        }
        if (opcode == Opcode::SMSG_ATTACKERSTATEUPDATE) {
            this->SMSG_ATTACKERSTATEUPDATE.~SMSG_ATTACKERSTATEUPDATE();
        }
        if (opcode == Opcode::SMSG_CANCEL_COMBAT) {
            this->SMSG_CANCEL_COMBAT.~SMSG_CANCEL_COMBAT();
        }
        if (opcode == Opcode::SMSG_SPELLHEALLOG) {
            this->SMSG_SPELLHEALLOG.~SMSG_SPELLHEALLOG();
        }
        if (opcode == Opcode::SMSG_SPELLENERGIZELOG) {
            this->SMSG_SPELLENERGIZELOG.~SMSG_SPELLENERGIZELOG();
        }
        if (opcode == Opcode::SMSG_BREAK_TARGET) {
            this->SMSG_BREAK_TARGET.~SMSG_BREAK_TARGET();
        }
        if (opcode == Opcode::SMSG_BINDPOINTUPDATE) {
            this->SMSG_BINDPOINTUPDATE.~SMSG_BINDPOINTUPDATE();
        }
        if (opcode == Opcode::SMSG_PLAYERBOUND) {
            this->SMSG_PLAYERBOUND.~SMSG_PLAYERBOUND();
        }
        if (opcode == Opcode::SMSG_CLIENT_CONTROL_UPDATE) {
            this->SMSG_CLIENT_CONTROL_UPDATE.~SMSG_CLIENT_CONTROL_UPDATE();
        }
        if (opcode == Opcode::SMSG_RESURRECT_REQUEST) {
            this->SMSG_RESURRECT_REQUEST.~SMSG_RESURRECT_REQUEST();
        }
        if (opcode == Opcode::SMSG_LOOT_RESPONSE) {
            this->SMSG_LOOT_RESPONSE.~SMSG_LOOT_RESPONSE();
        }
        if (opcode == Opcode::SMSG_LOOT_RELEASE_RESPONSE) {
            this->SMSG_LOOT_RELEASE_RESPONSE.~SMSG_LOOT_RELEASE_RESPONSE();
        }
        if (opcode == Opcode::SMSG_LOOT_REMOVED) {
            this->SMSG_LOOT_REMOVED.~SMSG_LOOT_REMOVED();
        }
        if (opcode == Opcode::SMSG_LOOT_MONEY_NOTIFY) {
            this->SMSG_LOOT_MONEY_NOTIFY.~SMSG_LOOT_MONEY_NOTIFY();
        }
        if (opcode == Opcode::SMSG_LOOT_CLEAR_MONEY) {
            this->SMSG_LOOT_CLEAR_MONEY.~SMSG_LOOT_CLEAR_MONEY();
        }
        if (opcode == Opcode::SMSG_ITEM_PUSH_RESULT) {
            this->SMSG_ITEM_PUSH_RESULT.~SMSG_ITEM_PUSH_RESULT();
        }
        if (opcode == Opcode::SMSG_DUEL_REQUESTED) {
            this->SMSG_DUEL_REQUESTED.~SMSG_DUEL_REQUESTED();
        }
        if (opcode == Opcode::SMSG_DUEL_OUTOFBOUNDS) {
            this->SMSG_DUEL_OUTOFBOUNDS.~SMSG_DUEL_OUTOFBOUNDS();
        }
        if (opcode == Opcode::SMSG_DUEL_INBOUNDS) {
            this->SMSG_DUEL_INBOUNDS.~SMSG_DUEL_INBOUNDS();
        }
        if (opcode == Opcode::SMSG_DUEL_COMPLETE) {
            this->SMSG_DUEL_COMPLETE.~SMSG_DUEL_COMPLETE();
        }
        if (opcode == Opcode::SMSG_DUEL_WINNER) {
            this->SMSG_DUEL_WINNER.~SMSG_DUEL_WINNER();
        }
        if (opcode == Opcode::SMSG_MOUNTRESULT) {
            this->SMSG_MOUNTRESULT.~SMSG_MOUNTRESULT();
        }
        if (opcode == Opcode::SMSG_MOUNTSPECIAL_ANIM) {
            this->SMSG_MOUNTSPECIAL_ANIM.~SMSG_MOUNTSPECIAL_ANIM();
        }
        if (opcode == Opcode::SMSG_PET_TAME_FAILURE) {
            this->SMSG_PET_TAME_FAILURE.~SMSG_PET_TAME_FAILURE();
        }
        if (opcode == Opcode::SMSG_PET_NAME_INVALID) {
            this->SMSG_PET_NAME_INVALID.~SMSG_PET_NAME_INVALID();
        }
        if (opcode == Opcode::SMSG_PET_SPELLS) {
            this->SMSG_PET_SPELLS.~SMSG_PET_SPELLS();
        }
        if (opcode == Opcode::SMSG_PET_MODE) {
            this->SMSG_PET_MODE.~SMSG_PET_MODE();
        }
        if (opcode == Opcode::SMSG_GOSSIP_MESSAGE) {
            this->SMSG_GOSSIP_MESSAGE.~SMSG_GOSSIP_MESSAGE();
        }
        if (opcode == Opcode::SMSG_GOSSIP_COMPLETE) {
            this->SMSG_GOSSIP_COMPLETE.~SMSG_GOSSIP_COMPLETE();
        }
        if (opcode == Opcode::SMSG_NPC_TEXT_UPDATE) {
            this->SMSG_NPC_TEXT_UPDATE.~SMSG_NPC_TEXT_UPDATE();
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_STATUS) {
            this->SMSG_QUESTGIVER_STATUS.~SMSG_QUESTGIVER_STATUS();
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_LIST) {
            this->SMSG_QUESTGIVER_QUEST_LIST.~SMSG_QUESTGIVER_QUEST_LIST();
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_DETAILS) {
            this->SMSG_QUESTGIVER_QUEST_DETAILS.~SMSG_QUESTGIVER_QUEST_DETAILS();
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS) {
            this->SMSG_QUESTGIVER_REQUEST_ITEMS.~SMSG_QUESTGIVER_REQUEST_ITEMS();
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_OFFER_REWARD) {
            this->SMSG_QUESTGIVER_OFFER_REWARD.~SMSG_QUESTGIVER_OFFER_REWARD();
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_INVALID) {
            this->SMSG_QUESTGIVER_QUEST_INVALID.~SMSG_QUESTGIVER_QUEST_INVALID();
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE) {
            this->SMSG_QUESTGIVER_QUEST_COMPLETE.~SMSG_QUESTGIVER_QUEST_COMPLETE();
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_FAILED) {
            this->SMSG_QUESTGIVER_QUEST_FAILED.~SMSG_QUESTGIVER_QUEST_FAILED();
        }
        if (opcode == Opcode::SMSG_QUESTLOG_FULL) {
            this->SMSG_QUESTLOG_FULL.~SMSG_QUESTLOG_FULL();
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_FAILED) {
            this->SMSG_QUESTUPDATE_FAILED.~SMSG_QUESTUPDATE_FAILED();
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_FAILEDTIMER) {
            this->SMSG_QUESTUPDATE_FAILEDTIMER.~SMSG_QUESTUPDATE_FAILEDTIMER();
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_COMPLETE) {
            this->SMSG_QUESTUPDATE_COMPLETE.~SMSG_QUESTUPDATE_COMPLETE();
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_KILL) {
            this->SMSG_QUESTUPDATE_ADD_KILL.~SMSG_QUESTUPDATE_ADD_KILL();
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_ITEM) {
            this->SMSG_QUESTUPDATE_ADD_ITEM.~SMSG_QUESTUPDATE_ADD_ITEM();
        }
        if (opcode == Opcode::SMSG_QUEST_CONFIRM_ACCEPT) {
            this->SMSG_QUEST_CONFIRM_ACCEPT.~SMSG_QUEST_CONFIRM_ACCEPT();
        }
        if (opcode == Opcode::SMSG_LIST_INVENTORY) {
            this->SMSG_LIST_INVENTORY.~SMSG_LIST_INVENTORY();
        }
        if (opcode == Opcode::SMSG_SELL_ITEM) {
            this->SMSG_SELL_ITEM.~SMSG_SELL_ITEM();
        }
        if (opcode == Opcode::SMSG_BUY_ITEM) {
            this->SMSG_BUY_ITEM.~SMSG_BUY_ITEM();
        }
        if (opcode == Opcode::SMSG_BUY_FAILED) {
            this->SMSG_BUY_FAILED.~SMSG_BUY_FAILED();
        }
        if (opcode == Opcode::SMSG_SHOWTAXINODES) {
            this->SMSG_SHOWTAXINODES.~SMSG_SHOWTAXINODES();
        }
        if (opcode == Opcode::SMSG_TAXINODE_STATUS) {
            this->SMSG_TAXINODE_STATUS.~SMSG_TAXINODE_STATUS();
        }
        if (opcode == Opcode::SMSG_ACTIVATETAXIREPLY) {
            this->SMSG_ACTIVATETAXIREPLY.~SMSG_ACTIVATETAXIREPLY();
        }
        if (opcode == Opcode::SMSG_NEW_TAXI_PATH) {
            this->SMSG_NEW_TAXI_PATH.~SMSG_NEW_TAXI_PATH();
        }
        if (opcode == Opcode::SMSG_TRAINER_LIST) {
            this->SMSG_TRAINER_LIST.~SMSG_TRAINER_LIST();
        }
        if (opcode == Opcode::SMSG_TRAINER_BUY_SUCCEEDED) {
            this->SMSG_TRAINER_BUY_SUCCEEDED.~SMSG_TRAINER_BUY_SUCCEEDED();
        }
        if (opcode == Opcode::SMSG_TRAINER_BUY_FAILED) {
            this->SMSG_TRAINER_BUY_FAILED.~SMSG_TRAINER_BUY_FAILED();
        }
        if (opcode == Opcode::SMSG_SHOW_BANK) {
            this->SMSG_SHOW_BANK.~SMSG_SHOW_BANK();
        }
        if (opcode == Opcode::SMSG_BUY_BANK_SLOT_RESULT) {
            this->SMSG_BUY_BANK_SLOT_RESULT.~SMSG_BUY_BANK_SLOT_RESULT();
        }
        if (opcode == Opcode::SMSG_PETITION_SHOWLIST) {
            this->SMSG_PETITION_SHOWLIST.~SMSG_PETITION_SHOWLIST();
        }
        if (opcode == Opcode::SMSG_PETITION_SHOW_SIGNATURES) {
            this->SMSG_PETITION_SHOW_SIGNATURES.~SMSG_PETITION_SHOW_SIGNATURES();
        }
        if (opcode == Opcode::SMSG_PETITION_SIGN_RESULTS) {
            this->SMSG_PETITION_SIGN_RESULTS.~SMSG_PETITION_SIGN_RESULTS();
        }
        if (opcode == Opcode::MSG_PETITION_DECLINE) {
            this->MSG_PETITION_DECLINE.~MSG_PETITION_DECLINE();
        }
        if (opcode == Opcode::SMSG_TURN_IN_PETITION_RESULTS) {
            this->SMSG_TURN_IN_PETITION_RESULTS.~SMSG_TURN_IN_PETITION_RESULTS();
        }
        if (opcode == Opcode::SMSG_PETITION_QUERY_RESPONSE) {
            this->SMSG_PETITION_QUERY_RESPONSE.~SMSG_PETITION_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_FISH_NOT_HOOKED) {
            this->SMSG_FISH_NOT_HOOKED.~SMSG_FISH_NOT_HOOKED();
        }
        if (opcode == Opcode::SMSG_FISH_ESCAPED) {
            this->SMSG_FISH_ESCAPED.~SMSG_FISH_ESCAPED();
        }
        if (opcode == Opcode::SMSG_NOTIFICATION) {
            this->SMSG_NOTIFICATION.~SMSG_NOTIFICATION();
        }
        if (opcode == Opcode::SMSG_PLAYED_TIME) {
            this->SMSG_PLAYED_TIME.~SMSG_PLAYED_TIME();
        }
        if (opcode == Opcode::SMSG_QUERY_TIME_RESPONSE) {
            this->SMSG_QUERY_TIME_RESPONSE.~SMSG_QUERY_TIME_RESPONSE();
        }
        if (opcode == Opcode::SMSG_LOG_XPGAIN) {
            this->SMSG_LOG_XPGAIN.~SMSG_LOG_XPGAIN();
        }
        if (opcode == Opcode::SMSG_LEVELUP_INFO) {
            this->SMSG_LEVELUP_INFO.~SMSG_LEVELUP_INFO();
        }
        if (opcode == Opcode::MSG_MINIMAP_PING) {
            this->MSG_MINIMAP_PING.~MSG_MINIMAP_PING_Server();
        }
        if (opcode == Opcode::SMSG_ENCHANTMENTLOG) {
            this->SMSG_ENCHANTMENTLOG.~SMSG_ENCHANTMENTLOG();
        }
        if (opcode == Opcode::SMSG_START_MIRROR_TIMER) {
            this->SMSG_START_MIRROR_TIMER.~SMSG_START_MIRROR_TIMER();
        }
        if (opcode == Opcode::SMSG_PAUSE_MIRROR_TIMER) {
            this->SMSG_PAUSE_MIRROR_TIMER.~SMSG_PAUSE_MIRROR_TIMER();
        }
        if (opcode == Opcode::SMSG_STOP_MIRROR_TIMER) {
            this->SMSG_STOP_MIRROR_TIMER.~SMSG_STOP_MIRROR_TIMER();
        }
        if (opcode == Opcode::SMSG_PONG) {
            this->SMSG_PONG.~SMSG_PONG();
        }
        if (opcode == Opcode::SMSG_CLEAR_COOLDOWN) {
            this->SMSG_CLEAR_COOLDOWN.~SMSG_CLEAR_COOLDOWN();
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_PAGETEXT) {
            this->SMSG_GAMEOBJECT_PAGETEXT.~SMSG_GAMEOBJECT_PAGETEXT();
        }
        if (opcode == Opcode::SMSG_SPELL_DELAYED) {
            this->SMSG_SPELL_DELAYED.~SMSG_SPELL_DELAYED();
        }
        if (opcode == Opcode::SMSG_QUEST_POI_QUERY_RESPONSE) {
            this->SMSG_QUEST_POI_QUERY_RESPONSE.~SMSG_QUEST_POI_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_ITEM_TIME_UPDATE) {
            this->SMSG_ITEM_TIME_UPDATE.~SMSG_ITEM_TIME_UPDATE();
        }
        if (opcode == Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE) {
            this->SMSG_ITEM_ENCHANT_TIME_UPDATE.~SMSG_ITEM_ENCHANT_TIME_UPDATE();
        }
        if (opcode == Opcode::SMSG_AUTH_CHALLENGE) {
            this->SMSG_AUTH_CHALLENGE.~SMSG_AUTH_CHALLENGE();
        }
        if (opcode == Opcode::SMSG_AUTH_RESPONSE) {
            this->SMSG_AUTH_RESPONSE.~SMSG_AUTH_RESPONSE();
        }
        if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
            this->MSG_SAVE_GUILD_EMBLEM.~MSG_SAVE_GUILD_EMBLEM_Server();
        }
        if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
            this->MSG_TABARDVENDOR_ACTIVATE.~MSG_TABARDVENDOR_ACTIVATE();
        }
        if (opcode == Opcode::SMSG_PLAY_SPELL_VISUAL) {
            this->SMSG_PLAY_SPELL_VISUAL.~SMSG_PLAY_SPELL_VISUAL();
        }
        if (opcode == Opcode::SMSG_PARTYKILLLOG) {
            this->SMSG_PARTYKILLLOG.~SMSG_PARTYKILLLOG();
        }
        if (opcode == Opcode::SMSG_COMPRESSED_UPDATE_OBJECT) {
            this->SMSG_COMPRESSED_UPDATE_OBJECT.~SMSG_COMPRESSED_UPDATE_OBJECT();
        }
        if (opcode == Opcode::SMSG_PLAY_SPELL_IMPACT) {
            this->SMSG_PLAY_SPELL_IMPACT.~SMSG_PLAY_SPELL_IMPACT();
        }
        if (opcode == Opcode::SMSG_EXPLORATION_EXPERIENCE) {
            this->SMSG_EXPLORATION_EXPERIENCE.~SMSG_EXPLORATION_EXPERIENCE();
        }
        if (opcode == Opcode::MSG_RANDOM_ROLL) {
            this->MSG_RANDOM_ROLL.~MSG_RANDOM_ROLL_Server();
        }
        if (opcode == Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG) {
            this->SMSG_ENVIRONMENTAL_DAMAGE_LOG.~SMSG_ENVIRONMENTAL_DAMAGE_LOG();
        }
        if (opcode == Opcode::SMSG_LFG_PLAYER_REWARD) {
            this->SMSG_LFG_PLAYER_REWARD.~SMSG_LFG_PLAYER_REWARD();
        }
        if (opcode == Opcode::SMSG_LFG_TELEPORT_DENIED) {
            this->SMSG_LFG_TELEPORT_DENIED.~SMSG_LFG_TELEPORT_DENIED();
        }
        if (opcode == Opcode::SMSG_REMOVED_SPELL) {
            this->SMSG_REMOVED_SPELL.~SMSG_REMOVED_SPELL();
        }
        if (opcode == Opcode::SMSG_GMTICKET_CREATE) {
            this->SMSG_GMTICKET_CREATE.~SMSG_GMTICKET_CREATE();
        }
        if (opcode == Opcode::SMSG_GMTICKET_UPDATETEXT) {
            this->SMSG_GMTICKET_UPDATETEXT.~SMSG_GMTICKET_UPDATETEXT();
        }
        if (opcode == Opcode::SMSG_ACCOUNT_DATA_TIMES) {
            this->SMSG_ACCOUNT_DATA_TIMES.~SMSG_ACCOUNT_DATA_TIMES();
        }
        if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA) {
            this->SMSG_UPDATE_ACCOUNT_DATA.~SMSG_UPDATE_ACCOUNT_DATA();
        }
        if (opcode == Opcode::SMSG_GMTICKET_GETTICKET) {
            this->SMSG_GMTICKET_GETTICKET.~SMSG_GMTICKET_GETTICKET();
        }
        if (opcode == Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) {
            this->SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT.~SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT();
        }
        if (opcode == Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM) {
            this->SMSG_GAMEOBJECT_DESPAWN_ANIM.~SMSG_GAMEOBJECT_DESPAWN_ANIM();
        }
        if (opcode == Opcode::MSG_CORPSE_QUERY) {
            this->MSG_CORPSE_QUERY.~MSG_CORPSE_QUERY_Server();
        }
        if (opcode == Opcode::SMSG_GMTICKET_DELETETICKET) {
            this->SMSG_GMTICKET_DELETETICKET.~SMSG_GMTICKET_DELETETICKET();
        }
        if (opcode == Opcode::SMSG_CHAT_WRONG_FACTION) {
            this->SMSG_CHAT_WRONG_FACTION.~SMSG_CHAT_WRONG_FACTION();
        }
        if (opcode == Opcode::SMSG_GMTICKET_SYSTEMSTATUS) {
            this->SMSG_GMTICKET_SYSTEMSTATUS.~SMSG_GMTICKET_SYSTEMSTATUS();
        }
        if (opcode == Opcode::SMSG_QUEST_FORCE_REMOVE) {
            this->SMSG_QUEST_FORCE_REMOVE.~SMSG_QUEST_FORCE_REMOVE();
        }
        if (opcode == Opcode::SMSG_SPIRIT_HEALER_CONFIRM) {
            this->SMSG_SPIRIT_HEALER_CONFIRM.~SMSG_SPIRIT_HEALER_CONFIRM();
        }
        if (opcode == Opcode::SMSG_GOSSIP_POI) {
            this->SMSG_GOSSIP_POI.~SMSG_GOSSIP_POI();
        }
        if (opcode == Opcode::SMSG_LOGIN_VERIFY_WORLD) {
            this->SMSG_LOGIN_VERIFY_WORLD.~SMSG_LOGIN_VERIFY_WORLD();
        }
        if (opcode == Opcode::SMSG_SEND_MAIL_RESULT) {
            this->SMSG_SEND_MAIL_RESULT.~SMSG_SEND_MAIL_RESULT();
        }
        if (opcode == Opcode::SMSG_MAIL_LIST_RESULT) {
            this->SMSG_MAIL_LIST_RESULT.~SMSG_MAIL_LIST_RESULT();
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_LIST) {
            this->SMSG_BATTLEFIELD_LIST.~SMSG_BATTLEFIELD_LIST();
        }
        if (opcode == Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE) {
            this->SMSG_ITEM_TEXT_QUERY_RESPONSE.~SMSG_ITEM_TEXT_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_SPELLLOGMISS) {
            this->SMSG_SPELLLOGMISS.~SMSG_SPELLLOGMISS();
        }
        if (opcode == Opcode::SMSG_SPELLLOGEXECUTE) {
            this->SMSG_SPELLLOGEXECUTE.~SMSG_SPELLLOGEXECUTE();
        }
        if (opcode == Opcode::SMSG_PERIODICAURALOG) {
            this->SMSG_PERIODICAURALOG.~SMSG_PERIODICAURALOG();
        }
        if (opcode == Opcode::SMSG_SPELLDAMAGESHIELD) {
            this->SMSG_SPELLDAMAGESHIELD.~SMSG_SPELLDAMAGESHIELD();
        }
        if (opcode == Opcode::SMSG_SPELLNONMELEEDAMAGELOG) {
            this->SMSG_SPELLNONMELEEDAMAGELOG.~SMSG_SPELLNONMELEEDAMAGELOG();
        }
        if (opcode == Opcode::SMSG_RESURRECT_FAILED) {
            this->SMSG_RESURRECT_FAILED.~SMSG_RESURRECT_FAILED();
        }
        if (opcode == Opcode::SMSG_ZONE_UNDER_ATTACK) {
            this->SMSG_ZONE_UNDER_ATTACK.~SMSG_ZONE_UNDER_ATTACK();
        }
        if (opcode == Opcode::MSG_AUCTION_HELLO) {
            this->MSG_AUCTION_HELLO.~MSG_AUCTION_HELLO_Server();
        }
        if (opcode == Opcode::SMSG_AUCTION_COMMAND_RESULT) {
            this->SMSG_AUCTION_COMMAND_RESULT.~SMSG_AUCTION_COMMAND_RESULT();
        }
        if (opcode == Opcode::SMSG_AUCTION_LIST_RESULT) {
            this->SMSG_AUCTION_LIST_RESULT.~SMSG_AUCTION_LIST_RESULT();
        }
        if (opcode == Opcode::SMSG_AUCTION_OWNER_LIST_RESULT) {
            this->SMSG_AUCTION_OWNER_LIST_RESULT.~SMSG_AUCTION_OWNER_LIST_RESULT();
        }
        if (opcode == Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION) {
            this->SMSG_AUCTION_BIDDER_NOTIFICATION.~SMSG_AUCTION_BIDDER_NOTIFICATION();
        }
        if (opcode == Opcode::SMSG_AUCTION_OWNER_NOTIFICATION) {
            this->SMSG_AUCTION_OWNER_NOTIFICATION.~SMSG_AUCTION_OWNER_NOTIFICATION();
        }
        if (opcode == Opcode::SMSG_PROCRESIST) {
            this->SMSG_PROCRESIST.~SMSG_PROCRESIST();
        }
        if (opcode == Opcode::SMSG_DISPEL_FAILED) {
            this->SMSG_DISPEL_FAILED.~SMSG_DISPEL_FAILED();
        }
        if (opcode == Opcode::SMSG_SPELLORDAMAGE_IMMUNE) {
            this->SMSG_SPELLORDAMAGE_IMMUNE.~SMSG_SPELLORDAMAGE_IMMUNE();
        }
        if (opcode == Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT) {
            this->SMSG_AUCTION_BIDDER_LIST_RESULT.~SMSG_AUCTION_BIDDER_LIST_RESULT();
        }
        if (opcode == Opcode::SMSG_SET_FLAT_SPELL_MODIFIER) {
            this->SMSG_SET_FLAT_SPELL_MODIFIER.~SMSG_SET_FLAT_SPELL_MODIFIER();
        }
        if (opcode == Opcode::SMSG_SET_PCT_SPELL_MODIFIER) {
            this->SMSG_SET_PCT_SPELL_MODIFIER.~SMSG_SET_PCT_SPELL_MODIFIER();
        }
        if (opcode == Opcode::SMSG_CORPSE_RECLAIM_DELAY) {
            this->SMSG_CORPSE_RECLAIM_DELAY.~SMSG_CORPSE_RECLAIM_DELAY();
        }
        if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
            this->MSG_LIST_STABLED_PETS.~MSG_LIST_STABLED_PETS_Server();
        }
        if (opcode == Opcode::SMSG_STABLE_RESULT) {
            this->SMSG_STABLE_RESULT.~SMSG_STABLE_RESULT();
        }
        if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
            this->MSG_QUEST_PUSH_RESULT.~MSG_QUEST_PUSH_RESULT();
        }
        if (opcode == Opcode::SMSG_PLAY_MUSIC) {
            this->SMSG_PLAY_MUSIC.~SMSG_PLAY_MUSIC();
        }
        if (opcode == Opcode::SMSG_PLAY_OBJECT_SOUND) {
            this->SMSG_PLAY_OBJECT_SOUND.~SMSG_PLAY_OBJECT_SOUND();
        }
        if (opcode == Opcode::SMSG_SPELLDISPELLOG) {
            this->SMSG_SPELLDISPELLOG.~SMSG_SPELLDISPELLOG();
        }
        if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
            this->MSG_QUERY_NEXT_MAIL_TIME.~MSG_QUERY_NEXT_MAIL_TIME_Server();
        }
        if (opcode == Opcode::SMSG_RECEIVED_MAIL) {
            this->SMSG_RECEIVED_MAIL.~SMSG_RECEIVED_MAIL();
        }
        if (opcode == Opcode::SMSG_RAID_GROUP_ONLY) {
            this->SMSG_RAID_GROUP_ONLY.~SMSG_RAID_GROUP_ONLY();
        }
        if (opcode == Opcode::SMSG_PVP_CREDIT) {
            this->SMSG_PVP_CREDIT.~SMSG_PVP_CREDIT();
        }
        if (opcode == Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION) {
            this->SMSG_AUCTION_REMOVED_NOTIFICATION.~SMSG_AUCTION_REMOVED_NOTIFICATION();
        }
        if (opcode == Opcode::SMSG_SERVER_MESSAGE) {
            this->SMSG_SERVER_MESSAGE.~SMSG_SERVER_MESSAGE();
        }
        if (opcode == Opcode::SMSG_LFG_OFFER_CONTINUE) {
            this->SMSG_LFG_OFFER_CONTINUE.~SMSG_LFG_OFFER_CONTINUE();
        }
        if (opcode == Opcode::SMSG_SHOW_MAILBOX) {
            this->SMSG_SHOW_MAILBOX.~SMSG_SHOW_MAILBOX();
        }
        if (opcode == Opcode::SMSG_CANCEL_AUTO_REPEAT) {
            this->SMSG_CANCEL_AUTO_REPEAT.~SMSG_CANCEL_AUTO_REPEAT();
        }
        if (opcode == Opcode::SMSG_STANDSTATE_UPDATE) {
            this->SMSG_STANDSTATE_UPDATE.~SMSG_STANDSTATE_UPDATE();
        }
        if (opcode == Opcode::SMSG_LOOT_ALL_PASSED) {
            this->SMSG_LOOT_ALL_PASSED.~SMSG_LOOT_ALL_PASSED();
        }
        if (opcode == Opcode::SMSG_LOOT_ROLL_WON) {
            this->SMSG_LOOT_ROLL_WON.~SMSG_LOOT_ROLL_WON();
        }
        if (opcode == Opcode::SMSG_LOOT_START_ROLL) {
            this->SMSG_LOOT_START_ROLL.~SMSG_LOOT_START_ROLL();
        }
        if (opcode == Opcode::SMSG_LOOT_ROLL) {
            this->SMSG_LOOT_ROLL.~SMSG_LOOT_ROLL();
        }
        if (opcode == Opcode::SMSG_LOOT_MASTER_LIST) {
            this->SMSG_LOOT_MASTER_LIST.~SMSG_LOOT_MASTER_LIST();
        }
        if (opcode == Opcode::SMSG_SET_FORCED_REACTIONS) {
            this->SMSG_SET_FORCED_REACTIONS.~SMSG_SET_FORCED_REACTIONS();
        }
        if (opcode == Opcode::SMSG_SPELL_FAILED_OTHER) {
            this->SMSG_SPELL_FAILED_OTHER.~SMSG_SPELL_FAILED_OTHER();
        }
        if (opcode == Opcode::SMSG_CHAT_PLAYER_NOT_FOUND) {
            this->SMSG_CHAT_PLAYER_NOT_FOUND.~SMSG_CHAT_PLAYER_NOT_FOUND();
        }
        if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
            this->MSG_TALENT_WIPE_CONFIRM.~MSG_TALENT_WIPE_CONFIRM_Server();
        }
        if (opcode == Opcode::SMSG_SUMMON_REQUEST) {
            this->SMSG_SUMMON_REQUEST.~SMSG_SUMMON_REQUEST();
        }
        if (opcode == Opcode::SMSG_MONSTER_MOVE_TRANSPORT) {
            this->SMSG_MONSTER_MOVE_TRANSPORT.~SMSG_MONSTER_MOVE_TRANSPORT();
        }
        if (opcode == Opcode::SMSG_PET_BROKEN) {
            this->SMSG_PET_BROKEN.~SMSG_PET_BROKEN();
        }
        if (opcode == Opcode::MSG_MOVE_FEATHER_FALL) {
            this->MSG_MOVE_FEATHER_FALL.~MSG_MOVE_FEATHER_FALL_Server();
        }
        if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
            this->MSG_MOVE_WATER_WALK.~MSG_MOVE_WATER_WALK();
        }
        if (opcode == Opcode::SMSG_FEIGN_DEATH_RESISTED) {
            this->SMSG_FEIGN_DEATH_RESISTED.~SMSG_FEIGN_DEATH_RESISTED();
        }
        if (opcode == Opcode::SMSG_DUEL_COUNTDOWN) {
            this->SMSG_DUEL_COUNTDOWN.~SMSG_DUEL_COUNTDOWN();
        }
        if (opcode == Opcode::SMSG_AREA_TRIGGER_MESSAGE) {
            this->SMSG_AREA_TRIGGER_MESSAGE.~SMSG_AREA_TRIGGER_MESSAGE();
        }
        if (opcode == Opcode::SMSG_LFG_ROLE_CHOSEN) {
            this->SMSG_LFG_ROLE_CHOSEN.~SMSG_LFG_ROLE_CHOSEN();
        }
        if (opcode == Opcode::SMSG_PLAYER_SKINNED) {
            this->SMSG_PLAYER_SKINNED.~SMSG_PLAYER_SKINNED();
        }
        if (opcode == Opcode::SMSG_DURABILITY_DAMAGE_DEATH) {
            this->SMSG_DURABILITY_DAMAGE_DEATH.~SMSG_DURABILITY_DAMAGE_DEATH();
        }
        if (opcode == Opcode::MSG_PETITION_RENAME) {
            this->MSG_PETITION_RENAME.~MSG_PETITION_RENAME();
        }
        if (opcode == Opcode::SMSG_INIT_WORLD_STATES) {
            this->SMSG_INIT_WORLD_STATES.~SMSG_INIT_WORLD_STATES();
        }
        if (opcode == Opcode::SMSG_UPDATE_WORLD_STATE) {
            this->SMSG_UPDATE_WORLD_STATE.~SMSG_UPDATE_WORLD_STATE();
        }
        if (opcode == Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE) {
            this->SMSG_ITEM_NAME_QUERY_RESPONSE.~SMSG_ITEM_NAME_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_PET_ACTION_FEEDBACK) {
            this->SMSG_PET_ACTION_FEEDBACK.~SMSG_PET_ACTION_FEEDBACK();
        }
        if (opcode == Opcode::SMSG_CHAR_RENAME) {
            this->SMSG_CHAR_RENAME.~SMSG_CHAR_RENAME();
        }
        if (opcode == Opcode::SMSG_INSTANCE_SAVE_CREATED) {
            this->SMSG_INSTANCE_SAVE_CREATED.~SMSG_INSTANCE_SAVE_CREATED();
        }
        if (opcode == Opcode::SMSG_RAID_INSTANCE_INFO) {
            this->SMSG_RAID_INSTANCE_INFO.~SMSG_RAID_INSTANCE_INFO();
        }
        if (opcode == Opcode::SMSG_PLAY_SOUND) {
            this->SMSG_PLAY_SOUND.~SMSG_PLAY_SOUND();
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_STATUS) {
            this->SMSG_BATTLEFIELD_STATUS.~SMSG_BATTLEFIELD_STATUS();
        }
        if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
            this->MSG_INSPECT_HONOR_STATS.~MSG_INSPECT_HONOR_STATS_Server();
        }
        if (opcode == Opcode::SMSG_FORCE_WALK_SPEED_CHANGE) {
            this->SMSG_FORCE_WALK_SPEED_CHANGE.~SMSG_FORCE_WALK_SPEED_CHANGE();
        }
        if (opcode == Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) {
            this->SMSG_FORCE_SWIM_BACK_SPEED_CHANGE.~SMSG_FORCE_SWIM_BACK_SPEED_CHANGE();
        }
        if (opcode == Opcode::SMSG_FORCE_TURN_RATE_CHANGE) {
            this->SMSG_FORCE_TURN_RATE_CHANGE.~SMSG_FORCE_TURN_RATE_CHANGE();
        }
        if (opcode == Opcode::SMSG_AREA_SPIRIT_HEALER_TIME) {
            this->SMSG_AREA_SPIRIT_HEALER_TIME.~SMSG_AREA_SPIRIT_HEALER_TIME();
        }
        if (opcode == Opcode::SMSG_WARDEN_DATA) {
            this->SMSG_WARDEN_DATA.~SMSG_WARDEN_DATA();
        }
        if (opcode == Opcode::SMSG_GROUP_JOINED_BATTLEGROUND) {
            this->SMSG_GROUP_JOINED_BATTLEGROUND.~SMSG_GROUP_JOINED_BATTLEGROUND();
        }
        if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
            this->MSG_BATTLEGROUND_PLAYER_POSITIONS.~MSG_BATTLEGROUND_PLAYER_POSITIONS_Server();
        }
        if (opcode == Opcode::SMSG_BINDER_CONFIRM) {
            this->SMSG_BINDER_CONFIRM.~SMSG_BINDER_CONFIRM();
        }
        if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED) {
            this->SMSG_BATTLEGROUND_PLAYER_JOINED.~SMSG_BATTLEGROUND_PLAYER_JOINED();
        }
        if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT) {
            this->SMSG_BATTLEGROUND_PLAYER_LEFT.~SMSG_BATTLEGROUND_PLAYER_LEFT();
        }
        if (opcode == Opcode::SMSG_ADDON_INFO) {
            this->SMSG_ADDON_INFO.~SMSG_ADDON_INFO();
        }
        if (opcode == Opcode::SMSG_PET_UNLEARN_CONFIRM) {
            this->SMSG_PET_UNLEARN_CONFIRM.~SMSG_PET_UNLEARN_CONFIRM();
        }
        if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS_FULL) {
            this->SMSG_PARTY_MEMBER_STATS_FULL.~SMSG_PARTY_MEMBER_STATS_FULL();
        }
        if (opcode == Opcode::SMSG_WEATHER) {
            this->SMSG_WEATHER.~SMSG_WEATHER();
        }
        if (opcode == Opcode::SMSG_RAID_INSTANCE_MESSAGE) {
            this->SMSG_RAID_INSTANCE_MESSAGE.~SMSG_RAID_INSTANCE_MESSAGE();
        }
        if (opcode == Opcode::SMSG_COMPRESSED_MOVES) {
            this->SMSG_COMPRESSED_MOVES.~SMSG_COMPRESSED_MOVES();
        }
        if (opcode == Opcode::SMSG_CHAT_RESTRICTED) {
            this->SMSG_CHAT_RESTRICTED.~SMSG_CHAT_RESTRICTED();
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_RUN_SPEED) {
            this->SMSG_SPLINE_SET_RUN_SPEED.~SMSG_SPLINE_SET_RUN_SPEED();
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED) {
            this->SMSG_SPLINE_SET_RUN_BACK_SPEED.~SMSG_SPLINE_SET_RUN_BACK_SPEED();
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_SPEED) {
            this->SMSG_SPLINE_SET_SWIM_SPEED.~SMSG_SPLINE_SET_SWIM_SPEED();
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_WALK_SPEED) {
            this->SMSG_SPLINE_SET_WALK_SPEED.~SMSG_SPLINE_SET_WALK_SPEED();
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED) {
            this->SMSG_SPLINE_SET_SWIM_BACK_SPEED.~SMSG_SPLINE_SET_SWIM_BACK_SPEED();
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_TURN_RATE) {
            this->SMSG_SPLINE_SET_TURN_RATE.~SMSG_SPLINE_SET_TURN_RATE();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_UNROOT) {
            this->SMSG_SPLINE_MOVE_UNROOT.~SMSG_SPLINE_MOVE_UNROOT();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL) {
            this->SMSG_SPLINE_MOVE_FEATHER_FALL.~SMSG_SPLINE_MOVE_FEATHER_FALL();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL) {
            this->SMSG_SPLINE_MOVE_NORMAL_FALL.~SMSG_SPLINE_MOVE_NORMAL_FALL();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_HOVER) {
            this->SMSG_SPLINE_MOVE_SET_HOVER.~SMSG_SPLINE_MOVE_SET_HOVER();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER) {
            this->SMSG_SPLINE_MOVE_UNSET_HOVER.~SMSG_SPLINE_MOVE_UNSET_HOVER();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_WATER_WALK) {
            this->SMSG_SPLINE_MOVE_WATER_WALK.~SMSG_SPLINE_MOVE_WATER_WALK();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_LAND_WALK) {
            this->SMSG_SPLINE_MOVE_LAND_WALK.~SMSG_SPLINE_MOVE_LAND_WALK();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_START_SWIM) {
            this->SMSG_SPLINE_MOVE_START_SWIM.~SMSG_SPLINE_MOVE_START_SWIM();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_STOP_SWIM) {
            this->SMSG_SPLINE_MOVE_STOP_SWIM.~SMSG_SPLINE_MOVE_STOP_SWIM();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE) {
            this->SMSG_SPLINE_MOVE_SET_RUN_MODE.~SMSG_SPLINE_MOVE_SET_RUN_MODE();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE) {
            this->SMSG_SPLINE_MOVE_SET_WALK_MODE.~SMSG_SPLINE_MOVE_SET_WALK_MODE();
        }
        if (opcode == Opcode::MSG_MOVE_TIME_SKIPPED) {
            this->MSG_MOVE_TIME_SKIPPED.~MSG_MOVE_TIME_SKIPPED_Server();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_ROOT) {
            this->SMSG_SPLINE_MOVE_ROOT.~SMSG_SPLINE_MOVE_ROOT();
        }
        if (opcode == Opcode::SMSG_INVALIDATE_PLAYER) {
            this->SMSG_INVALIDATE_PLAYER.~SMSG_INVALIDATE_PLAYER();
        }
        if (opcode == Opcode::SMSG_INSTANCE_RESET) {
            this->SMSG_INSTANCE_RESET.~SMSG_INSTANCE_RESET();
        }
        if (opcode == Opcode::SMSG_INSTANCE_RESET_FAILED) {
            this->SMSG_INSTANCE_RESET_FAILED.~SMSG_INSTANCE_RESET_FAILED();
        }
        if (opcode == Opcode::SMSG_UPDATE_LAST_INSTANCE) {
            this->SMSG_UPDATE_LAST_INSTANCE.~SMSG_UPDATE_LAST_INSTANCE();
        }
        if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
            this->MSG_RAID_TARGET_UPDATE.~MSG_RAID_TARGET_UPDATE_Server();
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK) {
            this->MSG_RAID_READY_CHECK.~MSG_RAID_READY_CHECK_Server();
        }
        if (opcode == Opcode::SMSG_PET_ACTION_SOUND) {
            this->SMSG_PET_ACTION_SOUND.~SMSG_PET_ACTION_SOUND();
        }
        if (opcode == Opcode::SMSG_PET_DISMISS_SOUND) {
            this->SMSG_PET_DISMISS_SOUND.~SMSG_PET_DISMISS_SOUND();
        }
        if (opcode == Opcode::SMSG_GM_TICKET_STATUS_UPDATE) {
            this->SMSG_GM_TICKET_STATUS_UPDATE.~SMSG_GM_TICKET_STATUS_UPDATE();
        }
        if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
            this->MSG_SET_DUNGEON_DIFFICULTY.~MSG_SET_DUNGEON_DIFFICULTY_Server();
        }
        if (opcode == Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP) {
            this->SMSG_UPDATE_INSTANCE_OWNERSHIP.~SMSG_UPDATE_INSTANCE_OWNERSHIP();
        }
        if (opcode == Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS) {
            this->SMSG_CHAT_PLAYER_AMBIGUOUS.~SMSG_CHAT_PLAYER_AMBIGUOUS();
        }
        if (opcode == Opcode::SMSG_SPELLINSTAKILLLOG) {
            this->SMSG_SPELLINSTAKILLLOG.~SMSG_SPELLINSTAKILLLOG();
        }
        if (opcode == Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS) {
            this->SMSG_SPELL_UPDATE_CHAIN_TARGETS.~SMSG_SPELL_UPDATE_CHAIN_TARGETS();
        }
        if (opcode == Opcode::SMSG_SPELLSTEALLOG) {
            this->SMSG_SPELLSTEALLOG.~SMSG_SPELLSTEALLOG();
        }
        if (opcode == Opcode::SMSG_DEFENSE_MESSAGE) {
            this->SMSG_DEFENSE_MESSAGE.~SMSG_DEFENSE_MESSAGE();
        }
        if (opcode == Opcode::SMSG_INSTANCE_DIFFICULTY) {
            this->SMSG_INSTANCE_DIFFICULTY.~SMSG_INSTANCE_DIFFICULTY();
        }
        if (opcode == Opcode::SMSG_MOTD) {
            this->SMSG_MOTD.~SMSG_MOTD();
        }
        if (opcode == Opcode::SMSG_MOVE_SET_CAN_FLY) {
            this->SMSG_MOVE_SET_CAN_FLY.~SMSG_MOVE_SET_CAN_FLY();
        }
        if (opcode == Opcode::SMSG_MOVE_UNSET_CAN_FLY) {
            this->SMSG_MOVE_UNSET_CAN_FLY.~SMSG_MOVE_UNSET_CAN_FLY();
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT) {
            this->SMSG_ARENA_TEAM_COMMAND_RESULT.~SMSG_ARENA_TEAM_COMMAND_RESULT();
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE) {
            this->SMSG_ARENA_TEAM_QUERY_RESPONSE.~SMSG_ARENA_TEAM_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_ROSTER) {
            this->SMSG_ARENA_TEAM_ROSTER.~SMSG_ARENA_TEAM_ROSTER();
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_INVITE) {
            this->SMSG_ARENA_TEAM_INVITE.~SMSG_ARENA_TEAM_INVITE();
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_EVENT) {
            this->SMSG_ARENA_TEAM_EVENT.~SMSG_ARENA_TEAM_EVENT();
        }
        if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
            this->MSG_MOVE_START_ASCEND.~MSG_MOVE_START_ASCEND();
        }
        if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
            this->MSG_MOVE_STOP_ASCEND.~MSG_MOVE_STOP_ASCEND();
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_STATS) {
            this->SMSG_ARENA_TEAM_STATS.~SMSG_ARENA_TEAM_STATS();
        }
        if (opcode == Opcode::SMSG_UPDATE_LFG_LIST) {
            this->SMSG_UPDATE_LFG_LIST.~SMSG_UPDATE_LFG_LIST();
        }
        if (opcode == Opcode::SMSG_LFG_PROPOSAL_UPDATE) {
            this->SMSG_LFG_PROPOSAL_UPDATE.~SMSG_LFG_PROPOSAL_UPDATE();
        }
        if (opcode == Opcode::SMSG_LFG_ROLE_CHECK_UPDATE) {
            this->SMSG_LFG_ROLE_CHECK_UPDATE.~SMSG_LFG_ROLE_CHECK_UPDATE();
        }
        if (opcode == Opcode::SMSG_LFG_JOIN_RESULT) {
            this->SMSG_LFG_JOIN_RESULT.~SMSG_LFG_JOIN_RESULT();
        }
        if (opcode == Opcode::SMSG_LFG_QUEUE_STATUS) {
            this->SMSG_LFG_QUEUE_STATUS.~SMSG_LFG_QUEUE_STATUS();
        }
        if (opcode == Opcode::SMSG_LFG_UPDATE_PLAYER) {
            this->SMSG_LFG_UPDATE_PLAYER.~SMSG_LFG_UPDATE_PLAYER();
        }
        if (opcode == Opcode::SMSG_LFG_UPDATE_PARTY) {
            this->SMSG_LFG_UPDATE_PARTY.~SMSG_LFG_UPDATE_PARTY();
        }
        if (opcode == Opcode::SMSG_LFG_UPDATE_SEARCH) {
            this->SMSG_LFG_UPDATE_SEARCH.~SMSG_LFG_UPDATE_SEARCH();
        }
        if (opcode == Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE) {
            this->SMSG_LFG_BOOT_PROPOSAL_UPDATE.~SMSG_LFG_BOOT_PROPOSAL_UPDATE();
        }
        if (opcode == Opcode::SMSG_LFG_PLAYER_INFO) {
            this->SMSG_LFG_PLAYER_INFO.~SMSG_LFG_PLAYER_INFO();
        }
        if (opcode == Opcode::SMSG_LFG_PARTY_INFO) {
            this->SMSG_LFG_PARTY_INFO.~SMSG_LFG_PARTY_INFO();
        }
        if (opcode == Opcode::SMSG_TITLE_EARNED) {
            this->SMSG_TITLE_EARNED.~SMSG_TITLE_EARNED();
        }
        if (opcode == Opcode::SMSG_ARENA_ERROR) {
            this->SMSG_ARENA_ERROR.~SMSG_ARENA_ERROR();
        }
        if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
            this->MSG_INSPECT_ARENA_TEAMS.~MSG_INSPECT_ARENA_TEAMS_Server();
        }
        if (opcode == Opcode::SMSG_DEATH_RELEASE_LOC) {
            this->SMSG_DEATH_RELEASE_LOC.~SMSG_DEATH_RELEASE_LOC();
        }
        if (opcode == Opcode::SMSG_FORCED_DEATH_UPDATE) {
            this->SMSG_FORCED_DEATH_UPDATE.~SMSG_FORCED_DEATH_UPDATE();
        }
        if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_SPEED) {
            this->MSG_MOVE_SET_FLIGHT_SPEED.~MSG_MOVE_SET_FLIGHT_SPEED_Server();
        }
        if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
            this->MSG_MOVE_SET_FLIGHT_BACK_SPEED.~MSG_MOVE_SET_FLIGHT_BACK_SPEED();
        }
        if (opcode == Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE) {
            this->SMSG_FORCE_FLIGHT_SPEED_CHANGE.~SMSG_FORCE_FLIGHT_SPEED_CHANGE();
        }
        if (opcode == Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) {
            this->SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE.~SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE();
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED) {
            this->SMSG_SPLINE_SET_FLIGHT_SPEED.~SMSG_SPLINE_SET_FLIGHT_SPEED();
        }
        if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) {
            this->SMSG_SPLINE_SET_FLIGHT_BACK_SPEED.~SMSG_SPLINE_SET_FLIGHT_BACK_SPEED();
        }
        if (opcode == Opcode::SMSG_FLIGHT_SPLINE_SYNC) {
            this->SMSG_FLIGHT_SPLINE_SYNC.~SMSG_FLIGHT_SPLINE_SYNC();
        }
        if (opcode == Opcode::SMSG_REALM_SPLIT) {
            this->SMSG_REALM_SPLIT.~SMSG_REALM_SPLIT();
        }
        if (opcode == Opcode::SMSG_TIME_SYNC_REQ) {
            this->SMSG_TIME_SYNC_REQ.~SMSG_TIME_SYNC_REQ();
        }
        if (opcode == Opcode::SMSG_RESET_FAILED_NOTIFY) {
            this->SMSG_RESET_FAILED_NOTIFY.~SMSG_RESET_FAILED_NOTIFY();
        }
        if (opcode == Opcode::SMSG_LFG_DISABLED) {
            this->SMSG_LFG_DISABLED.~SMSG_LFG_DISABLED();
        }
        if (opcode == Opcode::SMSG_UPDATE_COMBO_POINTS) {
            this->SMSG_UPDATE_COMBO_POINTS.~SMSG_UPDATE_COMBO_POINTS();
        }
        if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
            this->MSG_MOVE_START_DESCEND.~MSG_MOVE_START_DESCEND();
        }
        if (opcode == Opcode::SMSG_DISMOUNT) {
            this->SMSG_DISMOUNT.~SMSG_DISMOUNT();
        }
        if (opcode == Opcode::MSG_MOVE_UPDATE_CAN_FLY) {
            this->MSG_MOVE_UPDATE_CAN_FLY.~MSG_MOVE_UPDATE_CAN_FLY_Server();
        }
        if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
            this->MSG_RAID_READY_CHECK_CONFIRM.~MSG_RAID_READY_CHECK_CONFIRM_Server();
        }
        if (opcode == Opcode::SMSG_GM_MESSAGECHAT) {
            this->SMSG_GM_MESSAGECHAT.~SMSG_GM_MESSAGECHAT();
        }
        if (opcode == Opcode::SMSG_CLEAR_TARGET) {
            this->SMSG_CLEAR_TARGET.~SMSG_CLEAR_TARGET();
        }
        if (opcode == Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD) {
            this->SMSG_CROSSED_INEBRIATION_THRESHOLD.~SMSG_CROSSED_INEBRIATION_THRESHOLD();
        }
        if (opcode == Opcode::SMSG_KICK_REASON) {
            this->SMSG_KICK_REASON.~SMSG_KICK_REASON();
        }
        if (opcode == Opcode::SMSG_COMPLAIN_RESULT) {
            this->SMSG_COMPLAIN_RESULT.~SMSG_COMPLAIN_RESULT();
        }
        if (opcode == Opcode::SMSG_FEATURE_SYSTEM_STATUS) {
            this->SMSG_FEATURE_SYSTEM_STATUS.~SMSG_FEATURE_SYSTEM_STATUS();
        }
        if (opcode == Opcode::SMSG_CHANNEL_MEMBER_COUNT) {
            this->SMSG_CHANNEL_MEMBER_COUNT.~SMSG_CHANNEL_MEMBER_COUNT();
        }
        if (opcode == Opcode::SMSG_GUILD_BANK_LIST) {
            this->SMSG_GUILD_BANK_LIST.~SMSG_GUILD_BANK_LIST();
        }
        if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
            this->MSG_GUILD_BANK_LOG_QUERY.~MSG_GUILD_BANK_LOG_QUERY_Server();
        }
        if (opcode == Opcode::SMSG_USERLIST_ADD) {
            this->SMSG_USERLIST_ADD.~SMSG_USERLIST_ADD();
        }
        if (opcode == Opcode::SMSG_USERLIST_REMOVE) {
            this->SMSG_USERLIST_REMOVE.~SMSG_USERLIST_REMOVE();
        }
        if (opcode == Opcode::SMSG_USERLIST_UPDATE) {
            this->SMSG_USERLIST_UPDATE.~SMSG_USERLIST_UPDATE();
        }
        if (opcode == Opcode::SMSG_INSPECT_TALENT) {
            this->SMSG_INSPECT_TALENT.~SMSG_INSPECT_TALENT();
        }
        if (opcode == Opcode::SMSG_LOOT_LIST) {
            this->SMSG_LOOT_LIST.~SMSG_LOOT_LIST();
        }
        if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
            this->MSG_GUILD_PERMISSIONS.~MSG_GUILD_PERMISSIONS_Server();
        }
        if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
            this->MSG_GUILD_BANK_MONEY_WITHDRAWN.~MSG_GUILD_BANK_MONEY_WITHDRAWN_Server();
        }
        if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
            this->MSG_GUILD_EVENT_LOG_QUERY.~MSG_GUILD_EVENT_LOG_QUERY_Server();
        }
        if (opcode == Opcode::SMSG_MIRRORIMAGE_DATA) {
            this->SMSG_MIRRORIMAGE_DATA.~SMSG_MIRRORIMAGE_DATA();
        }
        if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
            this->MSG_QUERY_GUILD_BANK_TEXT.~MSG_QUERY_GUILD_BANK_TEXT_Server();
        }
        if (opcode == Opcode::SMSG_OVERRIDE_LIGHT) {
            this->SMSG_OVERRIDE_LIGHT.~SMSG_OVERRIDE_LIGHT();
        }
        if (opcode == Opcode::SMSG_TOTEM_CREATED) {
            this->SMSG_TOTEM_CREATED.~SMSG_TOTEM_CREATED();
        }
        if (opcode == Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE) {
            this->SMSG_QUESTGIVER_STATUS_MULTIPLE.~SMSG_QUESTGIVER_STATUS_MULTIPLE();
        }
        if (opcode == Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) {
            this->SMSG_SET_PLAYER_DECLINED_NAMES_RESULT.~SMSG_SET_PLAYER_DECLINED_NAMES_RESULT();
        }
        if (opcode == Opcode::SMSG_SEND_UNLEARN_SPELLS) {
            this->SMSG_SEND_UNLEARN_SPELLS.~SMSG_SEND_UNLEARN_SPELLS();
        }
        if (opcode == Opcode::SMSG_PROPOSE_LEVEL_GRANT) {
            this->SMSG_PROPOSE_LEVEL_GRANT.~SMSG_PROPOSE_LEVEL_GRANT();
        }
        if (opcode == Opcode::SMSG_REFER_A_FRIEND_FAILURE) {
            this->SMSG_REFER_A_FRIEND_FAILURE.~SMSG_REFER_A_FRIEND_FAILURE();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_FLYING) {
            this->SMSG_SPLINE_MOVE_SET_FLYING.~SMSG_SPLINE_MOVE_SET_FLYING();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING) {
            this->SMSG_SPLINE_MOVE_UNSET_FLYING.~SMSG_SPLINE_MOVE_UNSET_FLYING();
        }
        if (opcode == Opcode::SMSG_ENABLE_BARBER_SHOP) {
            this->SMSG_ENABLE_BARBER_SHOP.~SMSG_ENABLE_BARBER_SHOP();
        }
        if (opcode == Opcode::SMSG_BARBER_SHOP_RESULT) {
            this->SMSG_BARBER_SHOP_RESULT.~SMSG_BARBER_SHOP_RESULT();
        }
        if (opcode == Opcode::SMSG_CALENDAR_SEND_CALENDAR) {
            this->SMSG_CALENDAR_SEND_CALENDAR.~SMSG_CALENDAR_SEND_CALENDAR();
        }
        if (opcode == Opcode::SMSG_CALENDAR_SEND_EVENT) {
            this->SMSG_CALENDAR_SEND_EVENT.~SMSG_CALENDAR_SEND_EVENT();
        }
        if (opcode == Opcode::SMSG_CALENDAR_FILTER_GUILD) {
            this->SMSG_CALENDAR_FILTER_GUILD.~SMSG_CALENDAR_FILTER_GUILD();
        }
        if (opcode == Opcode::SMSG_CALENDAR_ARENA_TEAM) {
            this->SMSG_CALENDAR_ARENA_TEAM.~SMSG_CALENDAR_ARENA_TEAM();
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE) {
            this->SMSG_CALENDAR_EVENT_INVITE.~SMSG_CALENDAR_EVENT_INVITE();
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED) {
            this->SMSG_CALENDAR_EVENT_INVITE_REMOVED.~SMSG_CALENDAR_EVENT_INVITE_REMOVED();
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_STATUS) {
            this->SMSG_CALENDAR_EVENT_STATUS.~SMSG_CALENDAR_EVENT_STATUS();
        }
        if (opcode == Opcode::SMSG_CALENDAR_COMMAND_RESULT) {
            this->SMSG_CALENDAR_COMMAND_RESULT.~SMSG_CALENDAR_COMMAND_RESULT();
        }
        if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED) {
            this->SMSG_CALENDAR_RAID_LOCKOUT_ADDED.~SMSG_CALENDAR_RAID_LOCKOUT_ADDED();
        }
        if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) {
            this->SMSG_CALENDAR_RAID_LOCKOUT_REMOVED.~SMSG_CALENDAR_RAID_LOCKOUT_REMOVED();
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT) {
            this->SMSG_CALENDAR_EVENT_INVITE_ALERT.~SMSG_CALENDAR_EVENT_INVITE_ALERT();
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) {
            this->SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT.~SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT();
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT) {
            this->SMSG_CALENDAR_EVENT_REMOVED_ALERT.~SMSG_CALENDAR_EVENT_REMOVED_ALERT();
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT) {
            this->SMSG_CALENDAR_EVENT_UPDATED_ALERT.~SMSG_CALENDAR_EVENT_UPDATED_ALERT();
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) {
            this->SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT.~SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT();
        }
        if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
            this->CMSG_CALENDAR_GET_NUM_PENDING.~CMSG_CALENDAR_GET_NUM_PENDING();
        }
        if (opcode == Opcode::SMSG_CALENDAR_SEND_NUM_PENDING) {
            this->SMSG_CALENDAR_SEND_NUM_PENDING.~SMSG_CALENDAR_SEND_NUM_PENDING();
        }
        if (opcode == Opcode::MSG_MOVE_SET_PITCH_RATE) {
            this->MSG_MOVE_SET_PITCH_RATE.~MSG_MOVE_SET_PITCH_RATE_Server();
        }
        if (opcode == Opcode::SMSG_FORCE_PITCH_RATE_CHANGE) {
            this->SMSG_FORCE_PITCH_RATE_CHANGE.~SMSG_FORCE_PITCH_RATE_CHANGE();
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES) {
            this->SMSG_CALENDAR_EVENT_INVITE_NOTES.~SMSG_CALENDAR_EVENT_INVITE_NOTES();
        }
        if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) {
            this->SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT.~SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT();
        }
        if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) {
            this->SMSG_UPDATE_ACCOUNT_DATA_COMPLETE.~SMSG_UPDATE_ACCOUNT_DATA_COMPLETE();
        }
        if (opcode == Opcode::SMSG_TRIGGER_MOVIE) {
            this->SMSG_TRIGGER_MOVIE.~SMSG_TRIGGER_MOVIE();
        }
        if (opcode == Opcode::SMSG_ACHIEVEMENT_EARNED) {
            this->SMSG_ACHIEVEMENT_EARNED.~SMSG_ACHIEVEMENT_EARNED();
        }
        if (opcode == Opcode::SMSG_CRITERIA_UPDATE) {
            this->SMSG_CRITERIA_UPDATE.~SMSG_CRITERIA_UPDATE();
        }
        if (opcode == Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS) {
            this->SMSG_RESPOND_INSPECT_ACHIEVEMENTS.~SMSG_RESPOND_INSPECT_ACHIEVEMENTS();
        }
        if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL) {
            this->SMSG_QUESTUPDATE_ADD_PVP_KILL.~SMSG_QUESTUPDATE_ADD_PVP_KILL();
        }
        if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) {
            this->SMSG_CALENDAR_RAID_LOCKOUT_UPDATED.~SMSG_CALENDAR_RAID_LOCKOUT_UPDATED();
        }
        if (opcode == Opcode::SMSG_CHAR_CUSTOMIZE) {
            this->SMSG_CHAR_CUSTOMIZE.~SMSG_CHAR_CUSTOMIZE();
        }
        if (opcode == Opcode::SMSG_SET_PHASE_SHIFT) {
            this->SMSG_SET_PHASE_SHIFT.~SMSG_SET_PHASE_SHIFT();
        }
        if (opcode == Opcode::SMSG_ALL_ACHIEVEMENT_DATA) {
            this->SMSG_ALL_ACHIEVEMENT_DATA.~SMSG_ALL_ACHIEVEMENT_DATA();
        }
        if (opcode == Opcode::SMSG_POWER_UPDATE) {
            this->SMSG_POWER_UPDATE.~SMSG_POWER_UPDATE();
        }
        if (opcode == Opcode::SMSG_HIGHEST_THREAT_UPDATE) {
            this->SMSG_HIGHEST_THREAT_UPDATE.~SMSG_HIGHEST_THREAT_UPDATE();
        }
        if (opcode == Opcode::SMSG_THREAT_UPDATE) {
            this->SMSG_THREAT_UPDATE.~SMSG_THREAT_UPDATE();
        }
        if (opcode == Opcode::SMSG_THREAT_REMOVE) {
            this->SMSG_THREAT_REMOVE.~SMSG_THREAT_REMOVE();
        }
        if (opcode == Opcode::SMSG_THREAT_CLEAR) {
            this->SMSG_THREAT_CLEAR.~SMSG_THREAT_CLEAR();
        }
        if (opcode == Opcode::SMSG_CONVERT_RUNE) {
            this->SMSG_CONVERT_RUNE.~SMSG_CONVERT_RUNE();
        }
        if (opcode == Opcode::SMSG_RESYNC_RUNES) {
            this->SMSG_RESYNC_RUNES.~SMSG_RESYNC_RUNES();
        }
        if (opcode == Opcode::SMSG_ADD_RUNE_POWER) {
            this->SMSG_ADD_RUNE_POWER.~SMSG_ADD_RUNE_POWER();
        }
        if (opcode == Opcode::SMSG_AUCTION_LIST_PENDING_SALES) {
            this->SMSG_AUCTION_LIST_PENDING_SALES.~SMSG_AUCTION_LIST_PENDING_SALES();
        }
        if (opcode == Opcode::SMSG_MODIFY_COOLDOWN) {
            this->SMSG_MODIFY_COOLDOWN.~SMSG_MODIFY_COOLDOWN();
        }
        if (opcode == Opcode::SMSG_PET_UPDATE_COMBO_POINTS) {
            this->SMSG_PET_UPDATE_COMBO_POINTS.~SMSG_PET_UPDATE_COMBO_POINTS();
        }
        if (opcode == Opcode::SMSG_PRE_RESURRECT) {
            this->SMSG_PRE_RESURRECT.~SMSG_PRE_RESURRECT();
        }
        if (opcode == Opcode::SMSG_AURA_UPDATE_ALL) {
            this->SMSG_AURA_UPDATE_ALL.~SMSG_AURA_UPDATE_ALL();
        }
        if (opcode == Opcode::SMSG_AURA_UPDATE) {
            this->SMSG_AURA_UPDATE.~SMSG_AURA_UPDATE();
        }
        if (opcode == Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT) {
            this->SMSG_SERVER_FIRST_ACHIEVEMENT.~SMSG_SERVER_FIRST_ACHIEVEMENT();
        }
        if (opcode == Opcode::SMSG_PET_LEARNED_SPELL) {
            this->SMSG_PET_LEARNED_SPELL.~SMSG_PET_LEARNED_SPELL();
        }
        if (opcode == Opcode::SMSG_PET_UNLEARNED_SPELL) {
            this->SMSG_PET_UNLEARNED_SPELL.~SMSG_PET_UNLEARNED_SPELL();
        }
        if (opcode == Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) {
            this->SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA.~SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA();
        }
        if (opcode == Opcode::SMSG_CRITERIA_DELETED) {
            this->SMSG_CRITERIA_DELETED.~SMSG_CRITERIA_DELETED();
        }
        if (opcode == Opcode::SMSG_ACHIEVEMENT_DELETED) {
            this->SMSG_ACHIEVEMENT_DELETED.~SMSG_ACHIEVEMENT_DELETED();
        }
        if (opcode == Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED) {
            this->SMSG_BATTLEGROUND_INFO_THROTTLED.~SMSG_BATTLEGROUND_INFO_THROTTLED();
        }
        if (opcode == Opcode::SMSG_PLAYER_VEHICLE_DATA) {
            this->SMSG_PLAYER_VEHICLE_DATA.~SMSG_PLAYER_VEHICLE_DATA();
        }
        if (opcode == Opcode::SMSG_PET_GUIDS) {
            this->SMSG_PET_GUIDS.~SMSG_PET_GUIDS();
        }
        if (opcode == Opcode::SMSG_CLIENTCACHE_VERSION) {
            this->SMSG_CLIENTCACHE_VERSION.~SMSG_CLIENTCACHE_VERSION();
        }
        if (opcode == Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE) {
            this->SMSG_ITEM_REFUND_INFO_RESPONSE.~SMSG_ITEM_REFUND_INFO_RESPONSE();
        }
        if (opcode == Opcode::SMSG_ITEM_REFUND_RESULT) {
            this->SMSG_ITEM_REFUND_RESULT.~SMSG_ITEM_REFUND_RESULT();
        }
        if (opcode == Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) {
            this->SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE.~SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE();
        }
        if (opcode == Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION) {
            this->SMSG_CALENDAR_CLEAR_PENDING_ACTION.~SMSG_CALENDAR_CLEAR_PENDING_ACTION();
        }
        if (opcode == Opcode::SMSG_EQUIPMENT_SET_LIST) {
            this->SMSG_EQUIPMENT_SET_LIST.~SMSG_EQUIPMENT_SET_LIST();
        }
        if (opcode == Opcode::SMSG_SET_PROJECTILE_POSITION) {
            this->SMSG_SET_PROJECTILE_POSITION.~SMSG_SET_PROJECTILE_POSITION();
        }
        if (opcode == Opcode::SMSG_TALENTS_INFO) {
            this->SMSG_TALENTS_INFO.~SMSG_TALENTS_INFO();
        }
        if (opcode == Opcode::SMSG_ARENA_UNIT_DESTROYED) {
            this->SMSG_ARENA_UNIT_DESTROYED.~SMSG_ARENA_UNIT_DESTROYED();
        }
        if (opcode == Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) {
            this->SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED.~SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED();
        }
        if (opcode == Opcode::SMSG_MOVE_GRAVITY_DISABLE) {
            this->SMSG_MOVE_GRAVITY_DISABLE.~SMSG_MOVE_GRAVITY_DISABLE();
        }
        if (opcode == Opcode::SMSG_MOVE_GRAVITY_ENABLE) {
            this->SMSG_MOVE_GRAVITY_ENABLE.~SMSG_MOVE_GRAVITY_ENABLE();
        }
        if (opcode == Opcode::MSG_MOVE_GRAVITY_CHNG) {
            this->MSG_MOVE_GRAVITY_CHNG.~MSG_MOVE_GRAVITY_CHNG_Server();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE) {
            this->SMSG_SPLINE_MOVE_GRAVITY_DISABLE.~SMSG_SPLINE_MOVE_GRAVITY_DISABLE();
        }
        if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE) {
            this->SMSG_SPLINE_MOVE_GRAVITY_ENABLE.~SMSG_SPLINE_MOVE_GRAVITY_ENABLE();
        }
        if (opcode == Opcode::SMSG_EQUIPMENT_SET_USE_RESULT) {
            this->SMSG_EQUIPMENT_SET_USE_RESULT.~SMSG_EQUIPMENT_SET_USE_RESULT();
        }
        if (opcode == Opcode::SMSG_CHAR_FACTION_CHANGE) {
            this->SMSG_CHAR_FACTION_CHANGE.~SMSG_CHAR_FACTION_CHANGE();
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) {
            this->SMSG_BATTLEFIELD_MGR_ENTRY_INVITE.~SMSG_BATTLEFIELD_MGR_ENTRY_INVITE();
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTERED) {
            this->SMSG_BATTLEFIELD_MGR_ENTERED.~SMSG_BATTLEFIELD_MGR_ENTERED();
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) {
            this->SMSG_BATTLEFIELD_MGR_QUEUE_INVITE.~SMSG_BATTLEFIELD_MGR_QUEUE_INVITE();
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) {
            this->SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE.~SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE();
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING) {
            this->SMSG_BATTLEFIELD_MGR_EJECT_PENDING.~SMSG_BATTLEFIELD_MGR_EJECT_PENDING();
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECTED) {
            this->SMSG_BATTLEFIELD_MGR_EJECTED.~SMSG_BATTLEFIELD_MGR_EJECTED();
        }
        if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE) {
            this->SMSG_BATTLEFIELD_MGR_STATE_CHANGE.~SMSG_BATTLEFIELD_MGR_STATE_CHANGE();
        }
        if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
            this->MSG_SET_RAID_DIFFICULTY.~MSG_SET_RAID_DIFFICULTY_Server();
        }
        if (opcode == Opcode::SMSG_TOGGLE_XP_GAIN) {
            this->SMSG_TOGGLE_XP_GAIN.~SMSG_TOGGLE_XP_GAIN();
        }
        if (opcode == Opcode::SMSG_GMRESPONSE_DB_ERROR) {
            this->SMSG_GMRESPONSE_DB_ERROR.~SMSG_GMRESPONSE_DB_ERROR();
        }
        if (opcode == Opcode::SMSG_GMRESPONSE_RECEIVED) {
            this->SMSG_GMRESPONSE_RECEIVED.~SMSG_GMRESPONSE_RECEIVED();
        }
        if (opcode == Opcode::SMSG_GMRESPONSE_STATUS_UPDATE) {
            this->SMSG_GMRESPONSE_STATUS_UPDATE.~SMSG_GMRESPONSE_STATUS_UPDATE();
        }
        if (opcode == Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE) {
            this->SMSG_WORLD_STATE_UI_TIMER_UPDATE.~SMSG_WORLD_STATE_UI_TIMER_UPDATE();
        }
        if (opcode == Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET) {
            this->SMSG_TALENTS_INVOLUNTARILY_RESET.~SMSG_TALENTS_INVOLUNTARILY_RESET();
        }
        if (opcode == Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) {
            this->SMSG_QUERY_QUESTS_COMPLETED_RESPONSE.~SMSG_QUERY_QUESTS_COMPLETED_RESPONSE();
        }
        if (opcode == Opcode::SMSG_CORPSE_NOT_IN_INSTANCE) {
            this->SMSG_CORPSE_NOT_IN_INSTANCE.~SMSG_CORPSE_NOT_IN_INSTANCE();
        }
        if (opcode == Opcode::SMSG_CAMERA_SHAKE) {
            this->SMSG_CAMERA_SHAKE.~SMSG_CAMERA_SHAKE();
        }
        if (opcode == Opcode::SMSG_SOCKET_GEMS_RESULT) {
            this->SMSG_SOCKET_GEMS_RESULT.~SMSG_SOCKET_GEMS_RESULT();
        }
        if (opcode == Opcode::SMSG_REDIRECT_CLIENT) {
            this->SMSG_REDIRECT_CLIENT.~SMSG_REDIRECT_CLIENT();
        }
        if (opcode == Opcode::SMSG_MOVE_SET_COLLISION_HGT) {
            this->SMSG_MOVE_SET_COLLISION_HGT.~SMSG_MOVE_SET_COLLISION_HGT();
        }
        if (opcode == Opcode::SMSG_MULTIPLE_MOVES) {
            this->SMSG_MULTIPLE_MOVES.~SMSG_MULTIPLE_MOVES();
        }
    }

    explicit ServerOpcode(wrath::SMSG_CHAR_CREATE&& obj) {
        opcode = Opcode::SMSG_CHAR_CREATE;
        new (&this->SMSG_CHAR_CREATE) wrath::SMSG_CHAR_CREATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHAR_ENUM&& obj) {
        opcode = Opcode::SMSG_CHAR_ENUM;
        new (&this->SMSG_CHAR_ENUM) wrath::SMSG_CHAR_ENUM (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHAR_DELETE&& obj) {
        opcode = Opcode::SMSG_CHAR_DELETE;
        new (&this->SMSG_CHAR_DELETE) wrath::SMSG_CHAR_DELETE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_NEW_WORLD&& obj) {
        opcode = Opcode::SMSG_NEW_WORLD;
        new (&this->SMSG_NEW_WORLD) wrath::SMSG_NEW_WORLD (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TRANSFER_PENDING&& obj) {
        opcode = Opcode::SMSG_TRANSFER_PENDING;
        new (&this->SMSG_TRANSFER_PENDING) wrath::SMSG_TRANSFER_PENDING (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TRANSFER_ABORTED&& obj) {
        opcode = Opcode::SMSG_TRANSFER_ABORTED;
        new (&this->SMSG_TRANSFER_ABORTED) wrath::SMSG_TRANSFER_ABORTED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHARACTER_LOGIN_FAILED&& obj) {
        opcode = Opcode::SMSG_CHARACTER_LOGIN_FAILED;
        new (&this->SMSG_CHARACTER_LOGIN_FAILED) wrath::SMSG_CHARACTER_LOGIN_FAILED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOGIN_SETTIMESPEED&& obj) {
        opcode = Opcode::SMSG_LOGIN_SETTIMESPEED;
        new (&this->SMSG_LOGIN_SETTIMESPEED) wrath::SMSG_LOGIN_SETTIMESPEED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOGOUT_RESPONSE&& obj) {
        opcode = Opcode::SMSG_LOGOUT_RESPONSE;
        new (&this->SMSG_LOGOUT_RESPONSE) wrath::SMSG_LOGOUT_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOGOUT_COMPLETE&& obj) {
        opcode = Opcode::SMSG_LOGOUT_COMPLETE;
        new (&this->SMSG_LOGOUT_COMPLETE) wrath::SMSG_LOGOUT_COMPLETE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOGOUT_CANCEL_ACK&& obj) {
        opcode = Opcode::SMSG_LOGOUT_CANCEL_ACK;
        new (&this->SMSG_LOGOUT_CANCEL_ACK) wrath::SMSG_LOGOUT_CANCEL_ACK (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_NAME_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_NAME_QUERY_RESPONSE;
        new (&this->SMSG_NAME_QUERY_RESPONSE) wrath::SMSG_NAME_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_NAME_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_PET_NAME_QUERY_RESPONSE;
        new (&this->SMSG_PET_NAME_QUERY_RESPONSE) wrath::SMSG_PET_NAME_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GUILD_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_GUILD_QUERY_RESPONSE;
        new (&this->SMSG_GUILD_QUERY_RESPONSE) wrath::SMSG_GUILD_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE&& obj) {
        opcode = Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE;
        new (&this->SMSG_ITEM_QUERY_SINGLE_RESPONSE) wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE;
        new (&this->SMSG_PAGE_TEXT_QUERY_RESPONSE) wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUEST_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_QUEST_QUERY_RESPONSE;
        new (&this->SMSG_QUEST_QUERY_RESPONSE) wrath::SMSG_QUEST_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE;
        new (&this->SMSG_GAMEOBJECT_QUERY_RESPONSE) wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CREATURE_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_CREATURE_QUERY_RESPONSE;
        new (&this->SMSG_CREATURE_QUERY_RESPONSE) wrath::SMSG_CREATURE_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_WHO&& obj) {
        opcode = Opcode::SMSG_WHO;
        new (&this->SMSG_WHO) wrath::SMSG_WHO (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_WHOIS&& obj) {
        opcode = Opcode::SMSG_WHOIS;
        new (&this->SMSG_WHOIS) wrath::SMSG_WHOIS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CONTACT_LIST&& obj) {
        opcode = Opcode::SMSG_CONTACT_LIST;
        new (&this->SMSG_CONTACT_LIST) wrath::SMSG_CONTACT_LIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FRIEND_STATUS&& obj) {
        opcode = Opcode::SMSG_FRIEND_STATUS;
        new (&this->SMSG_FRIEND_STATUS) wrath::SMSG_FRIEND_STATUS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GROUP_INVITE&& obj) {
        opcode = Opcode::SMSG_GROUP_INVITE;
        new (&this->SMSG_GROUP_INVITE) wrath::SMSG_GROUP_INVITE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GROUP_DECLINE&& obj) {
        opcode = Opcode::SMSG_GROUP_DECLINE;
        new (&this->SMSG_GROUP_DECLINE) wrath::SMSG_GROUP_DECLINE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GROUP_UNINVITE&& obj) {
        opcode = Opcode::SMSG_GROUP_UNINVITE;
        new (&this->SMSG_GROUP_UNINVITE) wrath::SMSG_GROUP_UNINVITE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GROUP_SET_LEADER&& obj) {
        opcode = Opcode::SMSG_GROUP_SET_LEADER;
        new (&this->SMSG_GROUP_SET_LEADER) wrath::SMSG_GROUP_SET_LEADER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GROUP_DESTROYED&& obj) {
        opcode = Opcode::SMSG_GROUP_DESTROYED;
        new (&this->SMSG_GROUP_DESTROYED) wrath::SMSG_GROUP_DESTROYED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GROUP_LIST&& obj) {
        opcode = Opcode::SMSG_GROUP_LIST;
        new (&this->SMSG_GROUP_LIST) wrath::SMSG_GROUP_LIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PARTY_MEMBER_STATS&& obj) {
        opcode = Opcode::SMSG_PARTY_MEMBER_STATS;
        new (&this->SMSG_PARTY_MEMBER_STATS) wrath::SMSG_PARTY_MEMBER_STATS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PARTY_COMMAND_RESULT&& obj) {
        opcode = Opcode::SMSG_PARTY_COMMAND_RESULT;
        new (&this->SMSG_PARTY_COMMAND_RESULT) wrath::SMSG_PARTY_COMMAND_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GUILD_INVITE&& obj) {
        opcode = Opcode::SMSG_GUILD_INVITE;
        new (&this->SMSG_GUILD_INVITE) wrath::SMSG_GUILD_INVITE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GUILD_DECLINE&& obj) {
        opcode = Opcode::SMSG_GUILD_DECLINE;
        new (&this->SMSG_GUILD_DECLINE) wrath::SMSG_GUILD_DECLINE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GUILD_INFO&& obj) {
        opcode = Opcode::SMSG_GUILD_INFO;
        new (&this->SMSG_GUILD_INFO) wrath::SMSG_GUILD_INFO (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GUILD_ROSTER&& obj) {
        opcode = Opcode::SMSG_GUILD_ROSTER;
        new (&this->SMSG_GUILD_ROSTER) wrath::SMSG_GUILD_ROSTER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GUILD_EVENT&& obj) {
        opcode = Opcode::SMSG_GUILD_EVENT;
        new (&this->SMSG_GUILD_EVENT) wrath::SMSG_GUILD_EVENT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GUILD_COMMAND_RESULT&& obj) {
        opcode = Opcode::SMSG_GUILD_COMMAND_RESULT;
        new (&this->SMSG_GUILD_COMMAND_RESULT) wrath::SMSG_GUILD_COMMAND_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MESSAGECHAT&& obj) {
        opcode = Opcode::SMSG_MESSAGECHAT;
        new (&this->SMSG_MESSAGECHAT) wrath::SMSG_MESSAGECHAT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHANNEL_NOTIFY&& obj) {
        opcode = Opcode::SMSG_CHANNEL_NOTIFY;
        new (&this->SMSG_CHANNEL_NOTIFY) wrath::SMSG_CHANNEL_NOTIFY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHANNEL_LIST&& obj) {
        opcode = Opcode::SMSG_CHANNEL_LIST;
        new (&this->SMSG_CHANNEL_LIST) wrath::SMSG_CHANNEL_LIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_UPDATE_OBJECT&& obj) {
        opcode = Opcode::SMSG_UPDATE_OBJECT;
        new (&this->SMSG_UPDATE_OBJECT) wrath::SMSG_UPDATE_OBJECT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DESTROY_OBJECT&& obj) {
        opcode = Opcode::SMSG_DESTROY_OBJECT;
        new (&this->SMSG_DESTROY_OBJECT) wrath::SMSG_DESTROY_OBJECT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_READ_ITEM_OK&& obj) {
        opcode = Opcode::SMSG_READ_ITEM_OK;
        new (&this->SMSG_READ_ITEM_OK) wrath::SMSG_READ_ITEM_OK (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_READ_ITEM_FAILED&& obj) {
        opcode = Opcode::SMSG_READ_ITEM_FAILED;
        new (&this->SMSG_READ_ITEM_FAILED) wrath::SMSG_READ_ITEM_FAILED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ITEM_COOLDOWN&& obj) {
        opcode = Opcode::SMSG_ITEM_COOLDOWN;
        new (&this->SMSG_ITEM_COOLDOWN) wrath::SMSG_ITEM_COOLDOWN (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM&& obj) {
        opcode = Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM;
        new (&this->SMSG_GAMEOBJECT_CUSTOM_ANIM) wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_START_FORWARD&& obj) {
        opcode = Opcode::MSG_MOVE_START_FORWARD;
        new (&this->MSG_MOVE_START_FORWARD) wrath::MSG_MOVE_START_FORWARD (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_START_BACKWARD&& obj) {
        opcode = Opcode::MSG_MOVE_START_BACKWARD;
        new (&this->MSG_MOVE_START_BACKWARD) wrath::MSG_MOVE_START_BACKWARD (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_STOP&& obj) {
        opcode = Opcode::MSG_MOVE_STOP;
        new (&this->MSG_MOVE_STOP) wrath::MSG_MOVE_STOP (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_START_STRAFE_LEFT&& obj) {
        opcode = Opcode::MSG_MOVE_START_STRAFE_LEFT;
        new (&this->MSG_MOVE_START_STRAFE_LEFT) wrath::MSG_MOVE_START_STRAFE_LEFT (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_START_STRAFE_RIGHT&& obj) {
        opcode = Opcode::MSG_MOVE_START_STRAFE_RIGHT;
        new (&this->MSG_MOVE_START_STRAFE_RIGHT) wrath::MSG_MOVE_START_STRAFE_RIGHT (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_STOP_STRAFE&& obj) {
        opcode = Opcode::MSG_MOVE_STOP_STRAFE;
        new (&this->MSG_MOVE_STOP_STRAFE) wrath::MSG_MOVE_STOP_STRAFE (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_JUMP&& obj) {
        opcode = Opcode::MSG_MOVE_JUMP;
        new (&this->MSG_MOVE_JUMP) wrath::MSG_MOVE_JUMP (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_START_TURN_LEFT&& obj) {
        opcode = Opcode::MSG_MOVE_START_TURN_LEFT;
        new (&this->MSG_MOVE_START_TURN_LEFT) wrath::MSG_MOVE_START_TURN_LEFT (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_START_TURN_RIGHT&& obj) {
        opcode = Opcode::MSG_MOVE_START_TURN_RIGHT;
        new (&this->MSG_MOVE_START_TURN_RIGHT) wrath::MSG_MOVE_START_TURN_RIGHT (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_STOP_TURN&& obj) {
        opcode = Opcode::MSG_MOVE_STOP_TURN;
        new (&this->MSG_MOVE_STOP_TURN) wrath::MSG_MOVE_STOP_TURN (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_START_PITCH_UP&& obj) {
        opcode = Opcode::MSG_MOVE_START_PITCH_UP;
        new (&this->MSG_MOVE_START_PITCH_UP) wrath::MSG_MOVE_START_PITCH_UP (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_START_PITCH_DOWN&& obj) {
        opcode = Opcode::MSG_MOVE_START_PITCH_DOWN;
        new (&this->MSG_MOVE_START_PITCH_DOWN) wrath::MSG_MOVE_START_PITCH_DOWN (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_STOP_PITCH&& obj) {
        opcode = Opcode::MSG_MOVE_STOP_PITCH;
        new (&this->MSG_MOVE_STOP_PITCH) wrath::MSG_MOVE_STOP_PITCH (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_SET_RUN_MODE&& obj) {
        opcode = Opcode::MSG_MOVE_SET_RUN_MODE;
        new (&this->MSG_MOVE_SET_RUN_MODE) wrath::MSG_MOVE_SET_RUN_MODE (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_SET_WALK_MODE&& obj) {
        opcode = Opcode::MSG_MOVE_SET_WALK_MODE;
        new (&this->MSG_MOVE_SET_WALK_MODE) wrath::MSG_MOVE_SET_WALK_MODE (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_TELEPORT_CHEAT_Server&& obj) {
        opcode = Opcode::MSG_MOVE_TELEPORT_CHEAT;
        new (&this->MSG_MOVE_TELEPORT_CHEAT) wrath::MSG_MOVE_TELEPORT_CHEAT_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_TELEPORT_ACK_Server&& obj) {
        opcode = Opcode::MSG_MOVE_TELEPORT_ACK;
        new (&this->MSG_MOVE_TELEPORT_ACK) wrath::MSG_MOVE_TELEPORT_ACK_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_FALL_LAND&& obj) {
        opcode = Opcode::MSG_MOVE_FALL_LAND;
        new (&this->MSG_MOVE_FALL_LAND) wrath::MSG_MOVE_FALL_LAND (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_START_SWIM&& obj) {
        opcode = Opcode::MSG_MOVE_START_SWIM;
        new (&this->MSG_MOVE_START_SWIM) wrath::MSG_MOVE_START_SWIM (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_STOP_SWIM&& obj) {
        opcode = Opcode::MSG_MOVE_STOP_SWIM;
        new (&this->MSG_MOVE_STOP_SWIM) wrath::MSG_MOVE_STOP_SWIM (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_SET_FACING&& obj) {
        opcode = Opcode::MSG_MOVE_SET_FACING;
        new (&this->MSG_MOVE_SET_FACING) wrath::MSG_MOVE_SET_FACING (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_SET_PITCH&& obj) {
        opcode = Opcode::MSG_MOVE_SET_PITCH;
        new (&this->MSG_MOVE_SET_PITCH) wrath::MSG_MOVE_SET_PITCH (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_WORLDPORT_ACK&& obj) {
        opcode = Opcode::MSG_MOVE_WORLDPORT_ACK;
        new (&this->MSG_MOVE_WORLDPORT_ACK) wrath::MSG_MOVE_WORLDPORT_ACK (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MONSTER_MOVE&& obj) {
        opcode = Opcode::SMSG_MONSTER_MOVE;
        new (&this->SMSG_MONSTER_MOVE) wrath::SMSG_MONSTER_MOVE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_WATER_WALK&& obj) {
        opcode = Opcode::SMSG_MOVE_WATER_WALK;
        new (&this->SMSG_MOVE_WATER_WALK) wrath::SMSG_MOVE_WATER_WALK (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_LAND_WALK&& obj) {
        opcode = Opcode::SMSG_MOVE_LAND_WALK;
        new (&this->SMSG_MOVE_LAND_WALK) wrath::SMSG_MOVE_LAND_WALK (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCE_RUN_SPEED_CHANGE&& obj) {
        opcode = Opcode::SMSG_FORCE_RUN_SPEED_CHANGE;
        new (&this->SMSG_FORCE_RUN_SPEED_CHANGE) wrath::SMSG_FORCE_RUN_SPEED_CHANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE&& obj) {
        opcode = Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE;
        new (&this->SMSG_FORCE_RUN_BACK_SPEED_CHANGE) wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCE_SWIM_SPEED_CHANGE&& obj) {
        opcode = Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE;
        new (&this->SMSG_FORCE_SWIM_SPEED_CHANGE) wrath::SMSG_FORCE_SWIM_SPEED_CHANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCE_MOVE_ROOT&& obj) {
        opcode = Opcode::SMSG_FORCE_MOVE_ROOT;
        new (&this->SMSG_FORCE_MOVE_ROOT) wrath::SMSG_FORCE_MOVE_ROOT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCE_MOVE_UNROOT&& obj) {
        opcode = Opcode::SMSG_FORCE_MOVE_UNROOT;
        new (&this->SMSG_FORCE_MOVE_UNROOT) wrath::SMSG_FORCE_MOVE_UNROOT (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_ROOT_Server&& obj) {
        opcode = Opcode::MSG_MOVE_ROOT;
        new (&this->MSG_MOVE_ROOT) wrath::MSG_MOVE_ROOT_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_UNROOT_Server&& obj) {
        opcode = Opcode::MSG_MOVE_UNROOT;
        new (&this->MSG_MOVE_UNROOT) wrath::MSG_MOVE_UNROOT_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_HEARTBEAT&& obj) {
        opcode = Opcode::MSG_MOVE_HEARTBEAT;
        new (&this->MSG_MOVE_HEARTBEAT) wrath::MSG_MOVE_HEARTBEAT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_KNOCK_BACK&& obj) {
        opcode = Opcode::SMSG_MOVE_KNOCK_BACK;
        new (&this->SMSG_MOVE_KNOCK_BACK) wrath::SMSG_MOVE_KNOCK_BACK (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_KNOCK_BACK_Server&& obj) {
        opcode = Opcode::MSG_MOVE_KNOCK_BACK;
        new (&this->MSG_MOVE_KNOCK_BACK) wrath::MSG_MOVE_KNOCK_BACK_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_FEATHER_FALL&& obj) {
        opcode = Opcode::SMSG_MOVE_FEATHER_FALL;
        new (&this->SMSG_MOVE_FEATHER_FALL) wrath::SMSG_MOVE_FEATHER_FALL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_NORMAL_FALL&& obj) {
        opcode = Opcode::SMSG_MOVE_NORMAL_FALL;
        new (&this->SMSG_MOVE_NORMAL_FALL) wrath::SMSG_MOVE_NORMAL_FALL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_SET_HOVER&& obj) {
        opcode = Opcode::SMSG_MOVE_SET_HOVER;
        new (&this->SMSG_MOVE_SET_HOVER) wrath::SMSG_MOVE_SET_HOVER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_UNSET_HOVER&& obj) {
        opcode = Opcode::SMSG_MOVE_UNSET_HOVER;
        new (&this->SMSG_MOVE_UNSET_HOVER) wrath::SMSG_MOVE_UNSET_HOVER (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_HOVER&& obj) {
        opcode = Opcode::MSG_MOVE_HOVER;
        new (&this->MSG_MOVE_HOVER) wrath::MSG_MOVE_HOVER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TRIGGER_CINEMATIC&& obj) {
        opcode = Opcode::SMSG_TRIGGER_CINEMATIC;
        new (&this->SMSG_TRIGGER_CINEMATIC) wrath::SMSG_TRIGGER_CINEMATIC (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TUTORIAL_FLAGS&& obj) {
        opcode = Opcode::SMSG_TUTORIAL_FLAGS;
        new (&this->SMSG_TUTORIAL_FLAGS) wrath::SMSG_TUTORIAL_FLAGS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_EMOTE&& obj) {
        opcode = Opcode::SMSG_EMOTE;
        new (&this->SMSG_EMOTE) wrath::SMSG_EMOTE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TEXT_EMOTE&& obj) {
        opcode = Opcode::SMSG_TEXT_EMOTE;
        new (&this->SMSG_TEXT_EMOTE) wrath::SMSG_TEXT_EMOTE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_INVENTORY_CHANGE_FAILURE&& obj) {
        opcode = Opcode::SMSG_INVENTORY_CHANGE_FAILURE;
        new (&this->SMSG_INVENTORY_CHANGE_FAILURE) wrath::SMSG_INVENTORY_CHANGE_FAILURE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TRADE_STATUS&& obj) {
        opcode = Opcode::SMSG_TRADE_STATUS;
        new (&this->SMSG_TRADE_STATUS) wrath::SMSG_TRADE_STATUS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TRADE_STATUS_EXTENDED&& obj) {
        opcode = Opcode::SMSG_TRADE_STATUS_EXTENDED;
        new (&this->SMSG_TRADE_STATUS_EXTENDED) wrath::SMSG_TRADE_STATUS_EXTENDED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_INITIALIZE_FACTIONS&& obj) {
        opcode = Opcode::SMSG_INITIALIZE_FACTIONS;
        new (&this->SMSG_INITIALIZE_FACTIONS) wrath::SMSG_INITIALIZE_FACTIONS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SET_FACTION_VISIBLE&& obj) {
        opcode = Opcode::SMSG_SET_FACTION_VISIBLE;
        new (&this->SMSG_SET_FACTION_VISIBLE) wrath::SMSG_SET_FACTION_VISIBLE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SET_FACTION_STANDING&& obj) {
        opcode = Opcode::SMSG_SET_FACTION_STANDING;
        new (&this->SMSG_SET_FACTION_STANDING) wrath::SMSG_SET_FACTION_STANDING (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SET_PROFICIENCY&& obj) {
        opcode = Opcode::SMSG_SET_PROFICIENCY;
        new (&this->SMSG_SET_PROFICIENCY) wrath::SMSG_SET_PROFICIENCY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ACTION_BUTTONS&& obj) {
        opcode = Opcode::SMSG_ACTION_BUTTONS;
        new (&this->SMSG_ACTION_BUTTONS) wrath::SMSG_ACTION_BUTTONS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_INITIAL_SPELLS&& obj) {
        opcode = Opcode::SMSG_INITIAL_SPELLS;
        new (&this->SMSG_INITIAL_SPELLS) wrath::SMSG_INITIAL_SPELLS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LEARNED_SPELL&& obj) {
        opcode = Opcode::SMSG_LEARNED_SPELL;
        new (&this->SMSG_LEARNED_SPELL) wrath::SMSG_LEARNED_SPELL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SUPERCEDED_SPELL&& obj) {
        opcode = Opcode::SMSG_SUPERCEDED_SPELL;
        new (&this->SMSG_SUPERCEDED_SPELL) wrath::SMSG_SUPERCEDED_SPELL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CAST_FAILED&& obj) {
        opcode = Opcode::SMSG_CAST_FAILED;
        new (&this->SMSG_CAST_FAILED) wrath::SMSG_CAST_FAILED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELL_START&& obj) {
        opcode = Opcode::SMSG_SPELL_START;
        new (&this->SMSG_SPELL_START) wrath::SMSG_SPELL_START (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELL_GO&& obj) {
        opcode = Opcode::SMSG_SPELL_GO;
        new (&this->SMSG_SPELL_GO) wrath::SMSG_SPELL_GO (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELL_FAILURE&& obj) {
        opcode = Opcode::SMSG_SPELL_FAILURE;
        new (&this->SMSG_SPELL_FAILURE) wrath::SMSG_SPELL_FAILURE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELL_COOLDOWN&& obj) {
        opcode = Opcode::SMSG_SPELL_COOLDOWN;
        new (&this->SMSG_SPELL_COOLDOWN) wrath::SMSG_SPELL_COOLDOWN (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_COOLDOWN_EVENT&& obj) {
        opcode = Opcode::SMSG_COOLDOWN_EVENT;
        new (&this->SMSG_COOLDOWN_EVENT) wrath::SMSG_COOLDOWN_EVENT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_CAST_FAILED&& obj) {
        opcode = Opcode::SMSG_PET_CAST_FAILED;
        new (&this->SMSG_PET_CAST_FAILED) wrath::SMSG_PET_CAST_FAILED (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_CHANNEL_START_Server&& obj) {
        opcode = Opcode::MSG_CHANNEL_START;
        new (&this->MSG_CHANNEL_START) wrath::MSG_CHANNEL_START_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_CHANNEL_UPDATE_Server&& obj) {
        opcode = Opcode::MSG_CHANNEL_UPDATE;
        new (&this->MSG_CHANNEL_UPDATE) wrath::MSG_CHANNEL_UPDATE_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AI_REACTION&& obj) {
        opcode = Opcode::SMSG_AI_REACTION;
        new (&this->SMSG_AI_REACTION) wrath::SMSG_AI_REACTION (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ATTACKSTART&& obj) {
        opcode = Opcode::SMSG_ATTACKSTART;
        new (&this->SMSG_ATTACKSTART) wrath::SMSG_ATTACKSTART (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ATTACKSTOP&& obj) {
        opcode = Opcode::SMSG_ATTACKSTOP;
        new (&this->SMSG_ATTACKSTOP) wrath::SMSG_ATTACKSTOP (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ATTACKSWING_NOTINRANGE&& obj) {
        opcode = Opcode::SMSG_ATTACKSWING_NOTINRANGE;
        new (&this->SMSG_ATTACKSWING_NOTINRANGE) wrath::SMSG_ATTACKSWING_NOTINRANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ATTACKSWING_BADFACING&& obj) {
        opcode = Opcode::SMSG_ATTACKSWING_BADFACING;
        new (&this->SMSG_ATTACKSWING_BADFACING) wrath::SMSG_ATTACKSWING_BADFACING (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY&& obj) {
        opcode = Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY;
        new (&this->SMSG_INSTANCE_LOCK_WARNING_QUERY) wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ATTACKSWING_DEADTARGET&& obj) {
        opcode = Opcode::SMSG_ATTACKSWING_DEADTARGET;
        new (&this->SMSG_ATTACKSWING_DEADTARGET) wrath::SMSG_ATTACKSWING_DEADTARGET (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ATTACKSWING_CANT_ATTACK&& obj) {
        opcode = Opcode::SMSG_ATTACKSWING_CANT_ATTACK;
        new (&this->SMSG_ATTACKSWING_CANT_ATTACK) wrath::SMSG_ATTACKSWING_CANT_ATTACK (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ATTACKERSTATEUPDATE&& obj) {
        opcode = Opcode::SMSG_ATTACKERSTATEUPDATE;
        new (&this->SMSG_ATTACKERSTATEUPDATE) wrath::SMSG_ATTACKERSTATEUPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CANCEL_COMBAT&& obj) {
        opcode = Opcode::SMSG_CANCEL_COMBAT;
        new (&this->SMSG_CANCEL_COMBAT) wrath::SMSG_CANCEL_COMBAT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELLHEALLOG&& obj) {
        opcode = Opcode::SMSG_SPELLHEALLOG;
        new (&this->SMSG_SPELLHEALLOG) wrath::SMSG_SPELLHEALLOG (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELLENERGIZELOG&& obj) {
        opcode = Opcode::SMSG_SPELLENERGIZELOG;
        new (&this->SMSG_SPELLENERGIZELOG) wrath::SMSG_SPELLENERGIZELOG (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BREAK_TARGET&& obj) {
        opcode = Opcode::SMSG_BREAK_TARGET;
        new (&this->SMSG_BREAK_TARGET) wrath::SMSG_BREAK_TARGET (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BINDPOINTUPDATE&& obj) {
        opcode = Opcode::SMSG_BINDPOINTUPDATE;
        new (&this->SMSG_BINDPOINTUPDATE) wrath::SMSG_BINDPOINTUPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PLAYERBOUND&& obj) {
        opcode = Opcode::SMSG_PLAYERBOUND;
        new (&this->SMSG_PLAYERBOUND) wrath::SMSG_PLAYERBOUND (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CLIENT_CONTROL_UPDATE&& obj) {
        opcode = Opcode::SMSG_CLIENT_CONTROL_UPDATE;
        new (&this->SMSG_CLIENT_CONTROL_UPDATE) wrath::SMSG_CLIENT_CONTROL_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_RESURRECT_REQUEST&& obj) {
        opcode = Opcode::SMSG_RESURRECT_REQUEST;
        new (&this->SMSG_RESURRECT_REQUEST) wrath::SMSG_RESURRECT_REQUEST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOOT_RESPONSE&& obj) {
        opcode = Opcode::SMSG_LOOT_RESPONSE;
        new (&this->SMSG_LOOT_RESPONSE) wrath::SMSG_LOOT_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOOT_RELEASE_RESPONSE&& obj) {
        opcode = Opcode::SMSG_LOOT_RELEASE_RESPONSE;
        new (&this->SMSG_LOOT_RELEASE_RESPONSE) wrath::SMSG_LOOT_RELEASE_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOOT_REMOVED&& obj) {
        opcode = Opcode::SMSG_LOOT_REMOVED;
        new (&this->SMSG_LOOT_REMOVED) wrath::SMSG_LOOT_REMOVED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOOT_MONEY_NOTIFY&& obj) {
        opcode = Opcode::SMSG_LOOT_MONEY_NOTIFY;
        new (&this->SMSG_LOOT_MONEY_NOTIFY) wrath::SMSG_LOOT_MONEY_NOTIFY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOOT_CLEAR_MONEY&& obj) {
        opcode = Opcode::SMSG_LOOT_CLEAR_MONEY;
        new (&this->SMSG_LOOT_CLEAR_MONEY) wrath::SMSG_LOOT_CLEAR_MONEY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ITEM_PUSH_RESULT&& obj) {
        opcode = Opcode::SMSG_ITEM_PUSH_RESULT;
        new (&this->SMSG_ITEM_PUSH_RESULT) wrath::SMSG_ITEM_PUSH_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DUEL_REQUESTED&& obj) {
        opcode = Opcode::SMSG_DUEL_REQUESTED;
        new (&this->SMSG_DUEL_REQUESTED) wrath::SMSG_DUEL_REQUESTED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DUEL_OUTOFBOUNDS&& obj) {
        opcode = Opcode::SMSG_DUEL_OUTOFBOUNDS;
        new (&this->SMSG_DUEL_OUTOFBOUNDS) wrath::SMSG_DUEL_OUTOFBOUNDS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DUEL_INBOUNDS&& obj) {
        opcode = Opcode::SMSG_DUEL_INBOUNDS;
        new (&this->SMSG_DUEL_INBOUNDS) wrath::SMSG_DUEL_INBOUNDS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DUEL_COMPLETE&& obj) {
        opcode = Opcode::SMSG_DUEL_COMPLETE;
        new (&this->SMSG_DUEL_COMPLETE) wrath::SMSG_DUEL_COMPLETE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DUEL_WINNER&& obj) {
        opcode = Opcode::SMSG_DUEL_WINNER;
        new (&this->SMSG_DUEL_WINNER) wrath::SMSG_DUEL_WINNER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOUNTRESULT&& obj) {
        opcode = Opcode::SMSG_MOUNTRESULT;
        new (&this->SMSG_MOUNTRESULT) wrath::SMSG_MOUNTRESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOUNTSPECIAL_ANIM&& obj) {
        opcode = Opcode::SMSG_MOUNTSPECIAL_ANIM;
        new (&this->SMSG_MOUNTSPECIAL_ANIM) wrath::SMSG_MOUNTSPECIAL_ANIM (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_TAME_FAILURE&& obj) {
        opcode = Opcode::SMSG_PET_TAME_FAILURE;
        new (&this->SMSG_PET_TAME_FAILURE) wrath::SMSG_PET_TAME_FAILURE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_NAME_INVALID&& obj) {
        opcode = Opcode::SMSG_PET_NAME_INVALID;
        new (&this->SMSG_PET_NAME_INVALID) wrath::SMSG_PET_NAME_INVALID (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_SPELLS&& obj) {
        opcode = Opcode::SMSG_PET_SPELLS;
        new (&this->SMSG_PET_SPELLS) wrath::SMSG_PET_SPELLS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_MODE&& obj) {
        opcode = Opcode::SMSG_PET_MODE;
        new (&this->SMSG_PET_MODE) wrath::SMSG_PET_MODE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GOSSIP_MESSAGE&& obj) {
        opcode = Opcode::SMSG_GOSSIP_MESSAGE;
        new (&this->SMSG_GOSSIP_MESSAGE) wrath::SMSG_GOSSIP_MESSAGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GOSSIP_COMPLETE&& obj) {
        opcode = Opcode::SMSG_GOSSIP_COMPLETE;
        new (&this->SMSG_GOSSIP_COMPLETE) wrath::SMSG_GOSSIP_COMPLETE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_NPC_TEXT_UPDATE&& obj) {
        opcode = Opcode::SMSG_NPC_TEXT_UPDATE;
        new (&this->SMSG_NPC_TEXT_UPDATE) wrath::SMSG_NPC_TEXT_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTGIVER_STATUS&& obj) {
        opcode = Opcode::SMSG_QUESTGIVER_STATUS;
        new (&this->SMSG_QUESTGIVER_STATUS) wrath::SMSG_QUESTGIVER_STATUS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTGIVER_QUEST_LIST&& obj) {
        opcode = Opcode::SMSG_QUESTGIVER_QUEST_LIST;
        new (&this->SMSG_QUESTGIVER_QUEST_LIST) wrath::SMSG_QUESTGIVER_QUEST_LIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTGIVER_QUEST_DETAILS&& obj) {
        opcode = Opcode::SMSG_QUESTGIVER_QUEST_DETAILS;
        new (&this->SMSG_QUESTGIVER_QUEST_DETAILS) wrath::SMSG_QUESTGIVER_QUEST_DETAILS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTGIVER_REQUEST_ITEMS&& obj) {
        opcode = Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS;
        new (&this->SMSG_QUESTGIVER_REQUEST_ITEMS) wrath::SMSG_QUESTGIVER_REQUEST_ITEMS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTGIVER_OFFER_REWARD&& obj) {
        opcode = Opcode::SMSG_QUESTGIVER_OFFER_REWARD;
        new (&this->SMSG_QUESTGIVER_OFFER_REWARD) wrath::SMSG_QUESTGIVER_OFFER_REWARD (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTGIVER_QUEST_INVALID&& obj) {
        opcode = Opcode::SMSG_QUESTGIVER_QUEST_INVALID;
        new (&this->SMSG_QUESTGIVER_QUEST_INVALID) wrath::SMSG_QUESTGIVER_QUEST_INVALID (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTGIVER_QUEST_COMPLETE&& obj) {
        opcode = Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE;
        new (&this->SMSG_QUESTGIVER_QUEST_COMPLETE) wrath::SMSG_QUESTGIVER_QUEST_COMPLETE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTGIVER_QUEST_FAILED&& obj) {
        opcode = Opcode::SMSG_QUESTGIVER_QUEST_FAILED;
        new (&this->SMSG_QUESTGIVER_QUEST_FAILED) wrath::SMSG_QUESTGIVER_QUEST_FAILED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTLOG_FULL&& obj) {
        opcode = Opcode::SMSG_QUESTLOG_FULL;
        new (&this->SMSG_QUESTLOG_FULL) wrath::SMSG_QUESTLOG_FULL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTUPDATE_FAILED&& obj) {
        opcode = Opcode::SMSG_QUESTUPDATE_FAILED;
        new (&this->SMSG_QUESTUPDATE_FAILED) wrath::SMSG_QUESTUPDATE_FAILED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTUPDATE_FAILEDTIMER&& obj) {
        opcode = Opcode::SMSG_QUESTUPDATE_FAILEDTIMER;
        new (&this->SMSG_QUESTUPDATE_FAILEDTIMER) wrath::SMSG_QUESTUPDATE_FAILEDTIMER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTUPDATE_COMPLETE&& obj) {
        opcode = Opcode::SMSG_QUESTUPDATE_COMPLETE;
        new (&this->SMSG_QUESTUPDATE_COMPLETE) wrath::SMSG_QUESTUPDATE_COMPLETE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTUPDATE_ADD_KILL&& obj) {
        opcode = Opcode::SMSG_QUESTUPDATE_ADD_KILL;
        new (&this->SMSG_QUESTUPDATE_ADD_KILL) wrath::SMSG_QUESTUPDATE_ADD_KILL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTUPDATE_ADD_ITEM&& obj) {
        opcode = Opcode::SMSG_QUESTUPDATE_ADD_ITEM;
        new (&this->SMSG_QUESTUPDATE_ADD_ITEM) wrath::SMSG_QUESTUPDATE_ADD_ITEM (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUEST_CONFIRM_ACCEPT&& obj) {
        opcode = Opcode::SMSG_QUEST_CONFIRM_ACCEPT;
        new (&this->SMSG_QUEST_CONFIRM_ACCEPT) wrath::SMSG_QUEST_CONFIRM_ACCEPT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LIST_INVENTORY&& obj) {
        opcode = Opcode::SMSG_LIST_INVENTORY;
        new (&this->SMSG_LIST_INVENTORY) wrath::SMSG_LIST_INVENTORY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SELL_ITEM&& obj) {
        opcode = Opcode::SMSG_SELL_ITEM;
        new (&this->SMSG_SELL_ITEM) wrath::SMSG_SELL_ITEM (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BUY_ITEM&& obj) {
        opcode = Opcode::SMSG_BUY_ITEM;
        new (&this->SMSG_BUY_ITEM) wrath::SMSG_BUY_ITEM (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BUY_FAILED&& obj) {
        opcode = Opcode::SMSG_BUY_FAILED;
        new (&this->SMSG_BUY_FAILED) wrath::SMSG_BUY_FAILED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SHOWTAXINODES&& obj) {
        opcode = Opcode::SMSG_SHOWTAXINODES;
        new (&this->SMSG_SHOWTAXINODES) wrath::SMSG_SHOWTAXINODES (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TAXINODE_STATUS&& obj) {
        opcode = Opcode::SMSG_TAXINODE_STATUS;
        new (&this->SMSG_TAXINODE_STATUS) wrath::SMSG_TAXINODE_STATUS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ACTIVATETAXIREPLY&& obj) {
        opcode = Opcode::SMSG_ACTIVATETAXIREPLY;
        new (&this->SMSG_ACTIVATETAXIREPLY) wrath::SMSG_ACTIVATETAXIREPLY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_NEW_TAXI_PATH&& obj) {
        opcode = Opcode::SMSG_NEW_TAXI_PATH;
        new (&this->SMSG_NEW_TAXI_PATH) wrath::SMSG_NEW_TAXI_PATH (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TRAINER_LIST&& obj) {
        opcode = Opcode::SMSG_TRAINER_LIST;
        new (&this->SMSG_TRAINER_LIST) wrath::SMSG_TRAINER_LIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TRAINER_BUY_SUCCEEDED&& obj) {
        opcode = Opcode::SMSG_TRAINER_BUY_SUCCEEDED;
        new (&this->SMSG_TRAINER_BUY_SUCCEEDED) wrath::SMSG_TRAINER_BUY_SUCCEEDED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TRAINER_BUY_FAILED&& obj) {
        opcode = Opcode::SMSG_TRAINER_BUY_FAILED;
        new (&this->SMSG_TRAINER_BUY_FAILED) wrath::SMSG_TRAINER_BUY_FAILED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SHOW_BANK&& obj) {
        opcode = Opcode::SMSG_SHOW_BANK;
        new (&this->SMSG_SHOW_BANK) wrath::SMSG_SHOW_BANK (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BUY_BANK_SLOT_RESULT&& obj) {
        opcode = Opcode::SMSG_BUY_BANK_SLOT_RESULT;
        new (&this->SMSG_BUY_BANK_SLOT_RESULT) wrath::SMSG_BUY_BANK_SLOT_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PETITION_SHOWLIST&& obj) {
        opcode = Opcode::SMSG_PETITION_SHOWLIST;
        new (&this->SMSG_PETITION_SHOWLIST) wrath::SMSG_PETITION_SHOWLIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PETITION_SHOW_SIGNATURES&& obj) {
        opcode = Opcode::SMSG_PETITION_SHOW_SIGNATURES;
        new (&this->SMSG_PETITION_SHOW_SIGNATURES) wrath::SMSG_PETITION_SHOW_SIGNATURES (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PETITION_SIGN_RESULTS&& obj) {
        opcode = Opcode::SMSG_PETITION_SIGN_RESULTS;
        new (&this->SMSG_PETITION_SIGN_RESULTS) wrath::SMSG_PETITION_SIGN_RESULTS (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_PETITION_DECLINE&& obj) {
        opcode = Opcode::MSG_PETITION_DECLINE;
        new (&this->MSG_PETITION_DECLINE) wrath::MSG_PETITION_DECLINE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TURN_IN_PETITION_RESULTS&& obj) {
        opcode = Opcode::SMSG_TURN_IN_PETITION_RESULTS;
        new (&this->SMSG_TURN_IN_PETITION_RESULTS) wrath::SMSG_TURN_IN_PETITION_RESULTS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PETITION_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_PETITION_QUERY_RESPONSE;
        new (&this->SMSG_PETITION_QUERY_RESPONSE) wrath::SMSG_PETITION_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FISH_NOT_HOOKED&& obj) {
        opcode = Opcode::SMSG_FISH_NOT_HOOKED;
        new (&this->SMSG_FISH_NOT_HOOKED) wrath::SMSG_FISH_NOT_HOOKED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FISH_ESCAPED&& obj) {
        opcode = Opcode::SMSG_FISH_ESCAPED;
        new (&this->SMSG_FISH_ESCAPED) wrath::SMSG_FISH_ESCAPED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_NOTIFICATION&& obj) {
        opcode = Opcode::SMSG_NOTIFICATION;
        new (&this->SMSG_NOTIFICATION) wrath::SMSG_NOTIFICATION (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PLAYED_TIME&& obj) {
        opcode = Opcode::SMSG_PLAYED_TIME;
        new (&this->SMSG_PLAYED_TIME) wrath::SMSG_PLAYED_TIME (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUERY_TIME_RESPONSE&& obj) {
        opcode = Opcode::SMSG_QUERY_TIME_RESPONSE;
        new (&this->SMSG_QUERY_TIME_RESPONSE) wrath::SMSG_QUERY_TIME_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOG_XPGAIN&& obj) {
        opcode = Opcode::SMSG_LOG_XPGAIN;
        new (&this->SMSG_LOG_XPGAIN) wrath::SMSG_LOG_XPGAIN (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LEVELUP_INFO&& obj) {
        opcode = Opcode::SMSG_LEVELUP_INFO;
        new (&this->SMSG_LEVELUP_INFO) wrath::SMSG_LEVELUP_INFO (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MINIMAP_PING_Server&& obj) {
        opcode = Opcode::MSG_MINIMAP_PING;
        new (&this->MSG_MINIMAP_PING) wrath::MSG_MINIMAP_PING_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ENCHANTMENTLOG&& obj) {
        opcode = Opcode::SMSG_ENCHANTMENTLOG;
        new (&this->SMSG_ENCHANTMENTLOG) wrath::SMSG_ENCHANTMENTLOG (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_START_MIRROR_TIMER&& obj) {
        opcode = Opcode::SMSG_START_MIRROR_TIMER;
        new (&this->SMSG_START_MIRROR_TIMER) wrath::SMSG_START_MIRROR_TIMER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PAUSE_MIRROR_TIMER&& obj) {
        opcode = Opcode::SMSG_PAUSE_MIRROR_TIMER;
        new (&this->SMSG_PAUSE_MIRROR_TIMER) wrath::SMSG_PAUSE_MIRROR_TIMER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_STOP_MIRROR_TIMER&& obj) {
        opcode = Opcode::SMSG_STOP_MIRROR_TIMER;
        new (&this->SMSG_STOP_MIRROR_TIMER) wrath::SMSG_STOP_MIRROR_TIMER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PONG&& obj) {
        opcode = Opcode::SMSG_PONG;
        new (&this->SMSG_PONG) wrath::SMSG_PONG (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CLEAR_COOLDOWN&& obj) {
        opcode = Opcode::SMSG_CLEAR_COOLDOWN;
        new (&this->SMSG_CLEAR_COOLDOWN) wrath::SMSG_CLEAR_COOLDOWN (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GAMEOBJECT_PAGETEXT&& obj) {
        opcode = Opcode::SMSG_GAMEOBJECT_PAGETEXT;
        new (&this->SMSG_GAMEOBJECT_PAGETEXT) wrath::SMSG_GAMEOBJECT_PAGETEXT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELL_DELAYED&& obj) {
        opcode = Opcode::SMSG_SPELL_DELAYED;
        new (&this->SMSG_SPELL_DELAYED) wrath::SMSG_SPELL_DELAYED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUEST_POI_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_QUEST_POI_QUERY_RESPONSE;
        new (&this->SMSG_QUEST_POI_QUERY_RESPONSE) wrath::SMSG_QUEST_POI_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ITEM_TIME_UPDATE&& obj) {
        opcode = Opcode::SMSG_ITEM_TIME_UPDATE;
        new (&this->SMSG_ITEM_TIME_UPDATE) wrath::SMSG_ITEM_TIME_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE&& obj) {
        opcode = Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE;
        new (&this->SMSG_ITEM_ENCHANT_TIME_UPDATE) wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AUTH_CHALLENGE&& obj) {
        opcode = Opcode::SMSG_AUTH_CHALLENGE;
        new (&this->SMSG_AUTH_CHALLENGE) wrath::SMSG_AUTH_CHALLENGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AUTH_RESPONSE&& obj) {
        opcode = Opcode::SMSG_AUTH_RESPONSE;
        new (&this->SMSG_AUTH_RESPONSE) wrath::SMSG_AUTH_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_SAVE_GUILD_EMBLEM_Server&& obj) {
        opcode = Opcode::MSG_SAVE_GUILD_EMBLEM;
        new (&this->MSG_SAVE_GUILD_EMBLEM) wrath::MSG_SAVE_GUILD_EMBLEM_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_TABARDVENDOR_ACTIVATE&& obj) {
        opcode = Opcode::MSG_TABARDVENDOR_ACTIVATE;
        new (&this->MSG_TABARDVENDOR_ACTIVATE) wrath::MSG_TABARDVENDOR_ACTIVATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PLAY_SPELL_VISUAL&& obj) {
        opcode = Opcode::SMSG_PLAY_SPELL_VISUAL;
        new (&this->SMSG_PLAY_SPELL_VISUAL) wrath::SMSG_PLAY_SPELL_VISUAL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PARTYKILLLOG&& obj) {
        opcode = Opcode::SMSG_PARTYKILLLOG;
        new (&this->SMSG_PARTYKILLLOG) wrath::SMSG_PARTYKILLLOG (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_COMPRESSED_UPDATE_OBJECT&& obj) {
        opcode = Opcode::SMSG_COMPRESSED_UPDATE_OBJECT;
        new (&this->SMSG_COMPRESSED_UPDATE_OBJECT) wrath::SMSG_COMPRESSED_UPDATE_OBJECT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PLAY_SPELL_IMPACT&& obj) {
        opcode = Opcode::SMSG_PLAY_SPELL_IMPACT;
        new (&this->SMSG_PLAY_SPELL_IMPACT) wrath::SMSG_PLAY_SPELL_IMPACT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_EXPLORATION_EXPERIENCE&& obj) {
        opcode = Opcode::SMSG_EXPLORATION_EXPERIENCE;
        new (&this->SMSG_EXPLORATION_EXPERIENCE) wrath::SMSG_EXPLORATION_EXPERIENCE (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_RANDOM_ROLL_Server&& obj) {
        opcode = Opcode::MSG_RANDOM_ROLL;
        new (&this->MSG_RANDOM_ROLL) wrath::MSG_RANDOM_ROLL_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG&& obj) {
        opcode = Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG;
        new (&this->SMSG_ENVIRONMENTAL_DAMAGE_LOG) wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_PLAYER_REWARD&& obj) {
        opcode = Opcode::SMSG_LFG_PLAYER_REWARD;
        new (&this->SMSG_LFG_PLAYER_REWARD) wrath::SMSG_LFG_PLAYER_REWARD (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_TELEPORT_DENIED&& obj) {
        opcode = Opcode::SMSG_LFG_TELEPORT_DENIED;
        new (&this->SMSG_LFG_TELEPORT_DENIED) wrath::SMSG_LFG_TELEPORT_DENIED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_REMOVED_SPELL&& obj) {
        opcode = Opcode::SMSG_REMOVED_SPELL;
        new (&this->SMSG_REMOVED_SPELL) wrath::SMSG_REMOVED_SPELL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GMTICKET_CREATE&& obj) {
        opcode = Opcode::SMSG_GMTICKET_CREATE;
        new (&this->SMSG_GMTICKET_CREATE) wrath::SMSG_GMTICKET_CREATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GMTICKET_UPDATETEXT&& obj) {
        opcode = Opcode::SMSG_GMTICKET_UPDATETEXT;
        new (&this->SMSG_GMTICKET_UPDATETEXT) wrath::SMSG_GMTICKET_UPDATETEXT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ACCOUNT_DATA_TIMES&& obj) {
        opcode = Opcode::SMSG_ACCOUNT_DATA_TIMES;
        new (&this->SMSG_ACCOUNT_DATA_TIMES) wrath::SMSG_ACCOUNT_DATA_TIMES (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_UPDATE_ACCOUNT_DATA&& obj) {
        opcode = Opcode::SMSG_UPDATE_ACCOUNT_DATA;
        new (&this->SMSG_UPDATE_ACCOUNT_DATA) wrath::SMSG_UPDATE_ACCOUNT_DATA (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GMTICKET_GETTICKET&& obj) {
        opcode = Opcode::SMSG_GMTICKET_GETTICKET;
        new (&this->SMSG_GMTICKET_GETTICKET) wrath::SMSG_GMTICKET_GETTICKET (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT&& obj) {
        opcode = Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT;
        new (&this->SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM&& obj) {
        opcode = Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM;
        new (&this->SMSG_GAMEOBJECT_DESPAWN_ANIM) wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_CORPSE_QUERY_Server&& obj) {
        opcode = Opcode::MSG_CORPSE_QUERY;
        new (&this->MSG_CORPSE_QUERY) wrath::MSG_CORPSE_QUERY_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GMTICKET_DELETETICKET&& obj) {
        opcode = Opcode::SMSG_GMTICKET_DELETETICKET;
        new (&this->SMSG_GMTICKET_DELETETICKET) wrath::SMSG_GMTICKET_DELETETICKET (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHAT_WRONG_FACTION&& obj) {
        opcode = Opcode::SMSG_CHAT_WRONG_FACTION;
        new (&this->SMSG_CHAT_WRONG_FACTION) wrath::SMSG_CHAT_WRONG_FACTION (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GMTICKET_SYSTEMSTATUS&& obj) {
        opcode = Opcode::SMSG_GMTICKET_SYSTEMSTATUS;
        new (&this->SMSG_GMTICKET_SYSTEMSTATUS) wrath::SMSG_GMTICKET_SYSTEMSTATUS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUEST_FORCE_REMOVE&& obj) {
        opcode = Opcode::SMSG_QUEST_FORCE_REMOVE;
        new (&this->SMSG_QUEST_FORCE_REMOVE) wrath::SMSG_QUEST_FORCE_REMOVE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPIRIT_HEALER_CONFIRM&& obj) {
        opcode = Opcode::SMSG_SPIRIT_HEALER_CONFIRM;
        new (&this->SMSG_SPIRIT_HEALER_CONFIRM) wrath::SMSG_SPIRIT_HEALER_CONFIRM (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GOSSIP_POI&& obj) {
        opcode = Opcode::SMSG_GOSSIP_POI;
        new (&this->SMSG_GOSSIP_POI) wrath::SMSG_GOSSIP_POI (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOGIN_VERIFY_WORLD&& obj) {
        opcode = Opcode::SMSG_LOGIN_VERIFY_WORLD;
        new (&this->SMSG_LOGIN_VERIFY_WORLD) wrath::SMSG_LOGIN_VERIFY_WORLD (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SEND_MAIL_RESULT&& obj) {
        opcode = Opcode::SMSG_SEND_MAIL_RESULT;
        new (&this->SMSG_SEND_MAIL_RESULT) wrath::SMSG_SEND_MAIL_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MAIL_LIST_RESULT&& obj) {
        opcode = Opcode::SMSG_MAIL_LIST_RESULT;
        new (&this->SMSG_MAIL_LIST_RESULT) wrath::SMSG_MAIL_LIST_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEFIELD_LIST&& obj) {
        opcode = Opcode::SMSG_BATTLEFIELD_LIST;
        new (&this->SMSG_BATTLEFIELD_LIST) wrath::SMSG_BATTLEFIELD_LIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE;
        new (&this->SMSG_ITEM_TEXT_QUERY_RESPONSE) wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELLLOGMISS&& obj) {
        opcode = Opcode::SMSG_SPELLLOGMISS;
        new (&this->SMSG_SPELLLOGMISS) wrath::SMSG_SPELLLOGMISS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELLLOGEXECUTE&& obj) {
        opcode = Opcode::SMSG_SPELLLOGEXECUTE;
        new (&this->SMSG_SPELLLOGEXECUTE) wrath::SMSG_SPELLLOGEXECUTE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PERIODICAURALOG&& obj) {
        opcode = Opcode::SMSG_PERIODICAURALOG;
        new (&this->SMSG_PERIODICAURALOG) wrath::SMSG_PERIODICAURALOG (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELLDAMAGESHIELD&& obj) {
        opcode = Opcode::SMSG_SPELLDAMAGESHIELD;
        new (&this->SMSG_SPELLDAMAGESHIELD) wrath::SMSG_SPELLDAMAGESHIELD (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELLNONMELEEDAMAGELOG&& obj) {
        opcode = Opcode::SMSG_SPELLNONMELEEDAMAGELOG;
        new (&this->SMSG_SPELLNONMELEEDAMAGELOG) wrath::SMSG_SPELLNONMELEEDAMAGELOG (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_RESURRECT_FAILED&& obj) {
        opcode = Opcode::SMSG_RESURRECT_FAILED;
        new (&this->SMSG_RESURRECT_FAILED) wrath::SMSG_RESURRECT_FAILED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ZONE_UNDER_ATTACK&& obj) {
        opcode = Opcode::SMSG_ZONE_UNDER_ATTACK;
        new (&this->SMSG_ZONE_UNDER_ATTACK) wrath::SMSG_ZONE_UNDER_ATTACK (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_AUCTION_HELLO_Server&& obj) {
        opcode = Opcode::MSG_AUCTION_HELLO;
        new (&this->MSG_AUCTION_HELLO) wrath::MSG_AUCTION_HELLO_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AUCTION_COMMAND_RESULT&& obj) {
        opcode = Opcode::SMSG_AUCTION_COMMAND_RESULT;
        new (&this->SMSG_AUCTION_COMMAND_RESULT) wrath::SMSG_AUCTION_COMMAND_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AUCTION_LIST_RESULT&& obj) {
        opcode = Opcode::SMSG_AUCTION_LIST_RESULT;
        new (&this->SMSG_AUCTION_LIST_RESULT) wrath::SMSG_AUCTION_LIST_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AUCTION_OWNER_LIST_RESULT&& obj) {
        opcode = Opcode::SMSG_AUCTION_OWNER_LIST_RESULT;
        new (&this->SMSG_AUCTION_OWNER_LIST_RESULT) wrath::SMSG_AUCTION_OWNER_LIST_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AUCTION_BIDDER_NOTIFICATION&& obj) {
        opcode = Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION;
        new (&this->SMSG_AUCTION_BIDDER_NOTIFICATION) wrath::SMSG_AUCTION_BIDDER_NOTIFICATION (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AUCTION_OWNER_NOTIFICATION&& obj) {
        opcode = Opcode::SMSG_AUCTION_OWNER_NOTIFICATION;
        new (&this->SMSG_AUCTION_OWNER_NOTIFICATION) wrath::SMSG_AUCTION_OWNER_NOTIFICATION (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PROCRESIST&& obj) {
        opcode = Opcode::SMSG_PROCRESIST;
        new (&this->SMSG_PROCRESIST) wrath::SMSG_PROCRESIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DISPEL_FAILED&& obj) {
        opcode = Opcode::SMSG_DISPEL_FAILED;
        new (&this->SMSG_DISPEL_FAILED) wrath::SMSG_DISPEL_FAILED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELLORDAMAGE_IMMUNE&& obj) {
        opcode = Opcode::SMSG_SPELLORDAMAGE_IMMUNE;
        new (&this->SMSG_SPELLORDAMAGE_IMMUNE) wrath::SMSG_SPELLORDAMAGE_IMMUNE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AUCTION_BIDDER_LIST_RESULT&& obj) {
        opcode = Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT;
        new (&this->SMSG_AUCTION_BIDDER_LIST_RESULT) wrath::SMSG_AUCTION_BIDDER_LIST_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SET_FLAT_SPELL_MODIFIER&& obj) {
        opcode = Opcode::SMSG_SET_FLAT_SPELL_MODIFIER;
        new (&this->SMSG_SET_FLAT_SPELL_MODIFIER) wrath::SMSG_SET_FLAT_SPELL_MODIFIER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SET_PCT_SPELL_MODIFIER&& obj) {
        opcode = Opcode::SMSG_SET_PCT_SPELL_MODIFIER;
        new (&this->SMSG_SET_PCT_SPELL_MODIFIER) wrath::SMSG_SET_PCT_SPELL_MODIFIER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CORPSE_RECLAIM_DELAY&& obj) {
        opcode = Opcode::SMSG_CORPSE_RECLAIM_DELAY;
        new (&this->SMSG_CORPSE_RECLAIM_DELAY) wrath::SMSG_CORPSE_RECLAIM_DELAY (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_LIST_STABLED_PETS_Server&& obj) {
        opcode = Opcode::MSG_LIST_STABLED_PETS;
        new (&this->MSG_LIST_STABLED_PETS) wrath::MSG_LIST_STABLED_PETS_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_STABLE_RESULT&& obj) {
        opcode = Opcode::SMSG_STABLE_RESULT;
        new (&this->SMSG_STABLE_RESULT) wrath::SMSG_STABLE_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_QUEST_PUSH_RESULT&& obj) {
        opcode = Opcode::MSG_QUEST_PUSH_RESULT;
        new (&this->MSG_QUEST_PUSH_RESULT) wrath::MSG_QUEST_PUSH_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PLAY_MUSIC&& obj) {
        opcode = Opcode::SMSG_PLAY_MUSIC;
        new (&this->SMSG_PLAY_MUSIC) wrath::SMSG_PLAY_MUSIC (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PLAY_OBJECT_SOUND&& obj) {
        opcode = Opcode::SMSG_PLAY_OBJECT_SOUND;
        new (&this->SMSG_PLAY_OBJECT_SOUND) wrath::SMSG_PLAY_OBJECT_SOUND (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELLDISPELLOG&& obj) {
        opcode = Opcode::SMSG_SPELLDISPELLOG;
        new (&this->SMSG_SPELLDISPELLOG) wrath::SMSG_SPELLDISPELLOG (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_QUERY_NEXT_MAIL_TIME_Server&& obj) {
        opcode = Opcode::MSG_QUERY_NEXT_MAIL_TIME;
        new (&this->MSG_QUERY_NEXT_MAIL_TIME) wrath::MSG_QUERY_NEXT_MAIL_TIME_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_RECEIVED_MAIL&& obj) {
        opcode = Opcode::SMSG_RECEIVED_MAIL;
        new (&this->SMSG_RECEIVED_MAIL) wrath::SMSG_RECEIVED_MAIL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_RAID_GROUP_ONLY&& obj) {
        opcode = Opcode::SMSG_RAID_GROUP_ONLY;
        new (&this->SMSG_RAID_GROUP_ONLY) wrath::SMSG_RAID_GROUP_ONLY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PVP_CREDIT&& obj) {
        opcode = Opcode::SMSG_PVP_CREDIT;
        new (&this->SMSG_PVP_CREDIT) wrath::SMSG_PVP_CREDIT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AUCTION_REMOVED_NOTIFICATION&& obj) {
        opcode = Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION;
        new (&this->SMSG_AUCTION_REMOVED_NOTIFICATION) wrath::SMSG_AUCTION_REMOVED_NOTIFICATION (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SERVER_MESSAGE&& obj) {
        opcode = Opcode::SMSG_SERVER_MESSAGE;
        new (&this->SMSG_SERVER_MESSAGE) wrath::SMSG_SERVER_MESSAGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_OFFER_CONTINUE&& obj) {
        opcode = Opcode::SMSG_LFG_OFFER_CONTINUE;
        new (&this->SMSG_LFG_OFFER_CONTINUE) wrath::SMSG_LFG_OFFER_CONTINUE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SHOW_MAILBOX&& obj) {
        opcode = Opcode::SMSG_SHOW_MAILBOX;
        new (&this->SMSG_SHOW_MAILBOX) wrath::SMSG_SHOW_MAILBOX (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CANCEL_AUTO_REPEAT&& obj) {
        opcode = Opcode::SMSG_CANCEL_AUTO_REPEAT;
        new (&this->SMSG_CANCEL_AUTO_REPEAT) wrath::SMSG_CANCEL_AUTO_REPEAT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_STANDSTATE_UPDATE&& obj) {
        opcode = Opcode::SMSG_STANDSTATE_UPDATE;
        new (&this->SMSG_STANDSTATE_UPDATE) wrath::SMSG_STANDSTATE_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOOT_ALL_PASSED&& obj) {
        opcode = Opcode::SMSG_LOOT_ALL_PASSED;
        new (&this->SMSG_LOOT_ALL_PASSED) wrath::SMSG_LOOT_ALL_PASSED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOOT_ROLL_WON&& obj) {
        opcode = Opcode::SMSG_LOOT_ROLL_WON;
        new (&this->SMSG_LOOT_ROLL_WON) wrath::SMSG_LOOT_ROLL_WON (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOOT_START_ROLL&& obj) {
        opcode = Opcode::SMSG_LOOT_START_ROLL;
        new (&this->SMSG_LOOT_START_ROLL) wrath::SMSG_LOOT_START_ROLL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOOT_ROLL&& obj) {
        opcode = Opcode::SMSG_LOOT_ROLL;
        new (&this->SMSG_LOOT_ROLL) wrath::SMSG_LOOT_ROLL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOOT_MASTER_LIST&& obj) {
        opcode = Opcode::SMSG_LOOT_MASTER_LIST;
        new (&this->SMSG_LOOT_MASTER_LIST) wrath::SMSG_LOOT_MASTER_LIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SET_FORCED_REACTIONS&& obj) {
        opcode = Opcode::SMSG_SET_FORCED_REACTIONS;
        new (&this->SMSG_SET_FORCED_REACTIONS) wrath::SMSG_SET_FORCED_REACTIONS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELL_FAILED_OTHER&& obj) {
        opcode = Opcode::SMSG_SPELL_FAILED_OTHER;
        new (&this->SMSG_SPELL_FAILED_OTHER) wrath::SMSG_SPELL_FAILED_OTHER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHAT_PLAYER_NOT_FOUND&& obj) {
        opcode = Opcode::SMSG_CHAT_PLAYER_NOT_FOUND;
        new (&this->SMSG_CHAT_PLAYER_NOT_FOUND) wrath::SMSG_CHAT_PLAYER_NOT_FOUND (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_TALENT_WIPE_CONFIRM_Server&& obj) {
        opcode = Opcode::MSG_TALENT_WIPE_CONFIRM;
        new (&this->MSG_TALENT_WIPE_CONFIRM) wrath::MSG_TALENT_WIPE_CONFIRM_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SUMMON_REQUEST&& obj) {
        opcode = Opcode::SMSG_SUMMON_REQUEST;
        new (&this->SMSG_SUMMON_REQUEST) wrath::SMSG_SUMMON_REQUEST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MONSTER_MOVE_TRANSPORT&& obj) {
        opcode = Opcode::SMSG_MONSTER_MOVE_TRANSPORT;
        new (&this->SMSG_MONSTER_MOVE_TRANSPORT) wrath::SMSG_MONSTER_MOVE_TRANSPORT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_BROKEN&& obj) {
        opcode = Opcode::SMSG_PET_BROKEN;
        new (&this->SMSG_PET_BROKEN) wrath::SMSG_PET_BROKEN (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_FEATHER_FALL_Server&& obj) {
        opcode = Opcode::MSG_MOVE_FEATHER_FALL;
        new (&this->MSG_MOVE_FEATHER_FALL) wrath::MSG_MOVE_FEATHER_FALL_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_WATER_WALK&& obj) {
        opcode = Opcode::MSG_MOVE_WATER_WALK;
        new (&this->MSG_MOVE_WATER_WALK) wrath::MSG_MOVE_WATER_WALK (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FEIGN_DEATH_RESISTED&& obj) {
        opcode = Opcode::SMSG_FEIGN_DEATH_RESISTED;
        new (&this->SMSG_FEIGN_DEATH_RESISTED) wrath::SMSG_FEIGN_DEATH_RESISTED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DUEL_COUNTDOWN&& obj) {
        opcode = Opcode::SMSG_DUEL_COUNTDOWN;
        new (&this->SMSG_DUEL_COUNTDOWN) wrath::SMSG_DUEL_COUNTDOWN (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AREA_TRIGGER_MESSAGE&& obj) {
        opcode = Opcode::SMSG_AREA_TRIGGER_MESSAGE;
        new (&this->SMSG_AREA_TRIGGER_MESSAGE) wrath::SMSG_AREA_TRIGGER_MESSAGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_ROLE_CHOSEN&& obj) {
        opcode = Opcode::SMSG_LFG_ROLE_CHOSEN;
        new (&this->SMSG_LFG_ROLE_CHOSEN) wrath::SMSG_LFG_ROLE_CHOSEN (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PLAYER_SKINNED&& obj) {
        opcode = Opcode::SMSG_PLAYER_SKINNED;
        new (&this->SMSG_PLAYER_SKINNED) wrath::SMSG_PLAYER_SKINNED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DURABILITY_DAMAGE_DEATH&& obj) {
        opcode = Opcode::SMSG_DURABILITY_DAMAGE_DEATH;
        new (&this->SMSG_DURABILITY_DAMAGE_DEATH) wrath::SMSG_DURABILITY_DAMAGE_DEATH (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_PETITION_RENAME&& obj) {
        opcode = Opcode::MSG_PETITION_RENAME;
        new (&this->MSG_PETITION_RENAME) wrath::MSG_PETITION_RENAME (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_INIT_WORLD_STATES&& obj) {
        opcode = Opcode::SMSG_INIT_WORLD_STATES;
        new (&this->SMSG_INIT_WORLD_STATES) wrath::SMSG_INIT_WORLD_STATES (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_UPDATE_WORLD_STATE&& obj) {
        opcode = Opcode::SMSG_UPDATE_WORLD_STATE;
        new (&this->SMSG_UPDATE_WORLD_STATE) wrath::SMSG_UPDATE_WORLD_STATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ITEM_NAME_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE;
        new (&this->SMSG_ITEM_NAME_QUERY_RESPONSE) wrath::SMSG_ITEM_NAME_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_ACTION_FEEDBACK&& obj) {
        opcode = Opcode::SMSG_PET_ACTION_FEEDBACK;
        new (&this->SMSG_PET_ACTION_FEEDBACK) wrath::SMSG_PET_ACTION_FEEDBACK (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHAR_RENAME&& obj) {
        opcode = Opcode::SMSG_CHAR_RENAME;
        new (&this->SMSG_CHAR_RENAME) wrath::SMSG_CHAR_RENAME (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_INSTANCE_SAVE_CREATED&& obj) {
        opcode = Opcode::SMSG_INSTANCE_SAVE_CREATED;
        new (&this->SMSG_INSTANCE_SAVE_CREATED) wrath::SMSG_INSTANCE_SAVE_CREATED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_RAID_INSTANCE_INFO&& obj) {
        opcode = Opcode::SMSG_RAID_INSTANCE_INFO;
        new (&this->SMSG_RAID_INSTANCE_INFO) wrath::SMSG_RAID_INSTANCE_INFO (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PLAY_SOUND&& obj) {
        opcode = Opcode::SMSG_PLAY_SOUND;
        new (&this->SMSG_PLAY_SOUND) wrath::SMSG_PLAY_SOUND (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEFIELD_STATUS&& obj) {
        opcode = Opcode::SMSG_BATTLEFIELD_STATUS;
        new (&this->SMSG_BATTLEFIELD_STATUS) wrath::SMSG_BATTLEFIELD_STATUS (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_INSPECT_HONOR_STATS_Server&& obj) {
        opcode = Opcode::MSG_INSPECT_HONOR_STATS;
        new (&this->MSG_INSPECT_HONOR_STATS) wrath::MSG_INSPECT_HONOR_STATS_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCE_WALK_SPEED_CHANGE&& obj) {
        opcode = Opcode::SMSG_FORCE_WALK_SPEED_CHANGE;
        new (&this->SMSG_FORCE_WALK_SPEED_CHANGE) wrath::SMSG_FORCE_WALK_SPEED_CHANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE&& obj) {
        opcode = Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE;
        new (&this->SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCE_TURN_RATE_CHANGE&& obj) {
        opcode = Opcode::SMSG_FORCE_TURN_RATE_CHANGE;
        new (&this->SMSG_FORCE_TURN_RATE_CHANGE) wrath::SMSG_FORCE_TURN_RATE_CHANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AREA_SPIRIT_HEALER_TIME&& obj) {
        opcode = Opcode::SMSG_AREA_SPIRIT_HEALER_TIME;
        new (&this->SMSG_AREA_SPIRIT_HEALER_TIME) wrath::SMSG_AREA_SPIRIT_HEALER_TIME (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_WARDEN_DATA&& obj) {
        opcode = Opcode::SMSG_WARDEN_DATA;
        new (&this->SMSG_WARDEN_DATA) wrath::SMSG_WARDEN_DATA (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GROUP_JOINED_BATTLEGROUND&& obj) {
        opcode = Opcode::SMSG_GROUP_JOINED_BATTLEGROUND;
        new (&this->SMSG_GROUP_JOINED_BATTLEGROUND) wrath::SMSG_GROUP_JOINED_BATTLEGROUND (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server&& obj) {
        opcode = Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS;
        new (&this->MSG_BATTLEGROUND_PLAYER_POSITIONS) wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BINDER_CONFIRM&& obj) {
        opcode = Opcode::SMSG_BINDER_CONFIRM;
        new (&this->SMSG_BINDER_CONFIRM) wrath::SMSG_BINDER_CONFIRM (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEGROUND_PLAYER_JOINED&& obj) {
        opcode = Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED;
        new (&this->SMSG_BATTLEGROUND_PLAYER_JOINED) wrath::SMSG_BATTLEGROUND_PLAYER_JOINED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEGROUND_PLAYER_LEFT&& obj) {
        opcode = Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT;
        new (&this->SMSG_BATTLEGROUND_PLAYER_LEFT) wrath::SMSG_BATTLEGROUND_PLAYER_LEFT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ADDON_INFO&& obj) {
        opcode = Opcode::SMSG_ADDON_INFO;
        new (&this->SMSG_ADDON_INFO) wrath::SMSG_ADDON_INFO (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_UNLEARN_CONFIRM&& obj) {
        opcode = Opcode::SMSG_PET_UNLEARN_CONFIRM;
        new (&this->SMSG_PET_UNLEARN_CONFIRM) wrath::SMSG_PET_UNLEARN_CONFIRM (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PARTY_MEMBER_STATS_FULL&& obj) {
        opcode = Opcode::SMSG_PARTY_MEMBER_STATS_FULL;
        new (&this->SMSG_PARTY_MEMBER_STATS_FULL) wrath::SMSG_PARTY_MEMBER_STATS_FULL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_WEATHER&& obj) {
        opcode = Opcode::SMSG_WEATHER;
        new (&this->SMSG_WEATHER) wrath::SMSG_WEATHER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_RAID_INSTANCE_MESSAGE&& obj) {
        opcode = Opcode::SMSG_RAID_INSTANCE_MESSAGE;
        new (&this->SMSG_RAID_INSTANCE_MESSAGE) wrath::SMSG_RAID_INSTANCE_MESSAGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_COMPRESSED_MOVES&& obj) {
        opcode = Opcode::SMSG_COMPRESSED_MOVES;
        new (&this->SMSG_COMPRESSED_MOVES) wrath::SMSG_COMPRESSED_MOVES (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHAT_RESTRICTED&& obj) {
        opcode = Opcode::SMSG_CHAT_RESTRICTED;
        new (&this->SMSG_CHAT_RESTRICTED) wrath::SMSG_CHAT_RESTRICTED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_SET_RUN_SPEED&& obj) {
        opcode = Opcode::SMSG_SPLINE_SET_RUN_SPEED;
        new (&this->SMSG_SPLINE_SET_RUN_SPEED) wrath::SMSG_SPLINE_SET_RUN_SPEED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED&& obj) {
        opcode = Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED;
        new (&this->SMSG_SPLINE_SET_RUN_BACK_SPEED) wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_SET_SWIM_SPEED&& obj) {
        opcode = Opcode::SMSG_SPLINE_SET_SWIM_SPEED;
        new (&this->SMSG_SPLINE_SET_SWIM_SPEED) wrath::SMSG_SPLINE_SET_SWIM_SPEED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_SET_WALK_SPEED&& obj) {
        opcode = Opcode::SMSG_SPLINE_SET_WALK_SPEED;
        new (&this->SMSG_SPLINE_SET_WALK_SPEED) wrath::SMSG_SPLINE_SET_WALK_SPEED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED&& obj) {
        opcode = Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED;
        new (&this->SMSG_SPLINE_SET_SWIM_BACK_SPEED) wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_SET_TURN_RATE&& obj) {
        opcode = Opcode::SMSG_SPLINE_SET_TURN_RATE;
        new (&this->SMSG_SPLINE_SET_TURN_RATE) wrath::SMSG_SPLINE_SET_TURN_RATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_UNROOT&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_UNROOT;
        new (&this->SMSG_SPLINE_MOVE_UNROOT) wrath::SMSG_SPLINE_MOVE_UNROOT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_FEATHER_FALL&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL;
        new (&this->SMSG_SPLINE_MOVE_FEATHER_FALL) wrath::SMSG_SPLINE_MOVE_FEATHER_FALL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_NORMAL_FALL&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL;
        new (&this->SMSG_SPLINE_MOVE_NORMAL_FALL) wrath::SMSG_SPLINE_MOVE_NORMAL_FALL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_SET_HOVER&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_SET_HOVER;
        new (&this->SMSG_SPLINE_MOVE_SET_HOVER) wrath::SMSG_SPLINE_MOVE_SET_HOVER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_UNSET_HOVER&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER;
        new (&this->SMSG_SPLINE_MOVE_UNSET_HOVER) wrath::SMSG_SPLINE_MOVE_UNSET_HOVER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_WATER_WALK&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_WATER_WALK;
        new (&this->SMSG_SPLINE_MOVE_WATER_WALK) wrath::SMSG_SPLINE_MOVE_WATER_WALK (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_LAND_WALK&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_LAND_WALK;
        new (&this->SMSG_SPLINE_MOVE_LAND_WALK) wrath::SMSG_SPLINE_MOVE_LAND_WALK (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_START_SWIM&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_START_SWIM;
        new (&this->SMSG_SPLINE_MOVE_START_SWIM) wrath::SMSG_SPLINE_MOVE_START_SWIM (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_STOP_SWIM&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_STOP_SWIM;
        new (&this->SMSG_SPLINE_MOVE_STOP_SWIM) wrath::SMSG_SPLINE_MOVE_STOP_SWIM (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE;
        new (&this->SMSG_SPLINE_MOVE_SET_RUN_MODE) wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE;
        new (&this->SMSG_SPLINE_MOVE_SET_WALK_MODE) wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_TIME_SKIPPED_Server&& obj) {
        opcode = Opcode::MSG_MOVE_TIME_SKIPPED;
        new (&this->MSG_MOVE_TIME_SKIPPED) wrath::MSG_MOVE_TIME_SKIPPED_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_ROOT&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_ROOT;
        new (&this->SMSG_SPLINE_MOVE_ROOT) wrath::SMSG_SPLINE_MOVE_ROOT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_INVALIDATE_PLAYER&& obj) {
        opcode = Opcode::SMSG_INVALIDATE_PLAYER;
        new (&this->SMSG_INVALIDATE_PLAYER) wrath::SMSG_INVALIDATE_PLAYER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_INSTANCE_RESET&& obj) {
        opcode = Opcode::SMSG_INSTANCE_RESET;
        new (&this->SMSG_INSTANCE_RESET) wrath::SMSG_INSTANCE_RESET (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_INSTANCE_RESET_FAILED&& obj) {
        opcode = Opcode::SMSG_INSTANCE_RESET_FAILED;
        new (&this->SMSG_INSTANCE_RESET_FAILED) wrath::SMSG_INSTANCE_RESET_FAILED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_UPDATE_LAST_INSTANCE&& obj) {
        opcode = Opcode::SMSG_UPDATE_LAST_INSTANCE;
        new (&this->SMSG_UPDATE_LAST_INSTANCE) wrath::SMSG_UPDATE_LAST_INSTANCE (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_RAID_TARGET_UPDATE_Server&& obj) {
        opcode = Opcode::MSG_RAID_TARGET_UPDATE;
        new (&this->MSG_RAID_TARGET_UPDATE) wrath::MSG_RAID_TARGET_UPDATE_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_RAID_READY_CHECK_Server&& obj) {
        opcode = Opcode::MSG_RAID_READY_CHECK;
        new (&this->MSG_RAID_READY_CHECK) wrath::MSG_RAID_READY_CHECK_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_ACTION_SOUND&& obj) {
        opcode = Opcode::SMSG_PET_ACTION_SOUND;
        new (&this->SMSG_PET_ACTION_SOUND) wrath::SMSG_PET_ACTION_SOUND (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_DISMISS_SOUND&& obj) {
        opcode = Opcode::SMSG_PET_DISMISS_SOUND;
        new (&this->SMSG_PET_DISMISS_SOUND) wrath::SMSG_PET_DISMISS_SOUND (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GM_TICKET_STATUS_UPDATE&& obj) {
        opcode = Opcode::SMSG_GM_TICKET_STATUS_UPDATE;
        new (&this->SMSG_GM_TICKET_STATUS_UPDATE) wrath::SMSG_GM_TICKET_STATUS_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_SET_DUNGEON_DIFFICULTY_Server&& obj) {
        opcode = Opcode::MSG_SET_DUNGEON_DIFFICULTY;
        new (&this->MSG_SET_DUNGEON_DIFFICULTY) wrath::MSG_SET_DUNGEON_DIFFICULTY_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP&& obj) {
        opcode = Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP;
        new (&this->SMSG_UPDATE_INSTANCE_OWNERSHIP) wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHAT_PLAYER_AMBIGUOUS&& obj) {
        opcode = Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS;
        new (&this->SMSG_CHAT_PLAYER_AMBIGUOUS) wrath::SMSG_CHAT_PLAYER_AMBIGUOUS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELLINSTAKILLLOG&& obj) {
        opcode = Opcode::SMSG_SPELLINSTAKILLLOG;
        new (&this->SMSG_SPELLINSTAKILLLOG) wrath::SMSG_SPELLINSTAKILLLOG (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS&& obj) {
        opcode = Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS;
        new (&this->SMSG_SPELL_UPDATE_CHAIN_TARGETS) wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPELLSTEALLOG&& obj) {
        opcode = Opcode::SMSG_SPELLSTEALLOG;
        new (&this->SMSG_SPELLSTEALLOG) wrath::SMSG_SPELLSTEALLOG (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DEFENSE_MESSAGE&& obj) {
        opcode = Opcode::SMSG_DEFENSE_MESSAGE;
        new (&this->SMSG_DEFENSE_MESSAGE) wrath::SMSG_DEFENSE_MESSAGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_INSTANCE_DIFFICULTY&& obj) {
        opcode = Opcode::SMSG_INSTANCE_DIFFICULTY;
        new (&this->SMSG_INSTANCE_DIFFICULTY) wrath::SMSG_INSTANCE_DIFFICULTY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOTD&& obj) {
        opcode = Opcode::SMSG_MOTD;
        new (&this->SMSG_MOTD) wrath::SMSG_MOTD (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_SET_CAN_FLY&& obj) {
        opcode = Opcode::SMSG_MOVE_SET_CAN_FLY;
        new (&this->SMSG_MOVE_SET_CAN_FLY) wrath::SMSG_MOVE_SET_CAN_FLY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_UNSET_CAN_FLY&& obj) {
        opcode = Opcode::SMSG_MOVE_UNSET_CAN_FLY;
        new (&this->SMSG_MOVE_UNSET_CAN_FLY) wrath::SMSG_MOVE_UNSET_CAN_FLY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ARENA_TEAM_COMMAND_RESULT&& obj) {
        opcode = Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT;
        new (&this->SMSG_ARENA_TEAM_COMMAND_RESULT) wrath::SMSG_ARENA_TEAM_COMMAND_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE;
        new (&this->SMSG_ARENA_TEAM_QUERY_RESPONSE) wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ARENA_TEAM_ROSTER&& obj) {
        opcode = Opcode::SMSG_ARENA_TEAM_ROSTER;
        new (&this->SMSG_ARENA_TEAM_ROSTER) wrath::SMSG_ARENA_TEAM_ROSTER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ARENA_TEAM_INVITE&& obj) {
        opcode = Opcode::SMSG_ARENA_TEAM_INVITE;
        new (&this->SMSG_ARENA_TEAM_INVITE) wrath::SMSG_ARENA_TEAM_INVITE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ARENA_TEAM_EVENT&& obj) {
        opcode = Opcode::SMSG_ARENA_TEAM_EVENT;
        new (&this->SMSG_ARENA_TEAM_EVENT) wrath::SMSG_ARENA_TEAM_EVENT (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_START_ASCEND&& obj) {
        opcode = Opcode::MSG_MOVE_START_ASCEND;
        new (&this->MSG_MOVE_START_ASCEND) wrath::MSG_MOVE_START_ASCEND (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_STOP_ASCEND&& obj) {
        opcode = Opcode::MSG_MOVE_STOP_ASCEND;
        new (&this->MSG_MOVE_STOP_ASCEND) wrath::MSG_MOVE_STOP_ASCEND (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ARENA_TEAM_STATS&& obj) {
        opcode = Opcode::SMSG_ARENA_TEAM_STATS;
        new (&this->SMSG_ARENA_TEAM_STATS) wrath::SMSG_ARENA_TEAM_STATS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_UPDATE_LFG_LIST&& obj) {
        opcode = Opcode::SMSG_UPDATE_LFG_LIST;
        new (&this->SMSG_UPDATE_LFG_LIST) wrath::SMSG_UPDATE_LFG_LIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_PROPOSAL_UPDATE&& obj) {
        opcode = Opcode::SMSG_LFG_PROPOSAL_UPDATE;
        new (&this->SMSG_LFG_PROPOSAL_UPDATE) wrath::SMSG_LFG_PROPOSAL_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_ROLE_CHECK_UPDATE&& obj) {
        opcode = Opcode::SMSG_LFG_ROLE_CHECK_UPDATE;
        new (&this->SMSG_LFG_ROLE_CHECK_UPDATE) wrath::SMSG_LFG_ROLE_CHECK_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_JOIN_RESULT&& obj) {
        opcode = Opcode::SMSG_LFG_JOIN_RESULT;
        new (&this->SMSG_LFG_JOIN_RESULT) wrath::SMSG_LFG_JOIN_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_QUEUE_STATUS&& obj) {
        opcode = Opcode::SMSG_LFG_QUEUE_STATUS;
        new (&this->SMSG_LFG_QUEUE_STATUS) wrath::SMSG_LFG_QUEUE_STATUS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_UPDATE_PLAYER&& obj) {
        opcode = Opcode::SMSG_LFG_UPDATE_PLAYER;
        new (&this->SMSG_LFG_UPDATE_PLAYER) wrath::SMSG_LFG_UPDATE_PLAYER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_UPDATE_PARTY&& obj) {
        opcode = Opcode::SMSG_LFG_UPDATE_PARTY;
        new (&this->SMSG_LFG_UPDATE_PARTY) wrath::SMSG_LFG_UPDATE_PARTY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_UPDATE_SEARCH&& obj) {
        opcode = Opcode::SMSG_LFG_UPDATE_SEARCH;
        new (&this->SMSG_LFG_UPDATE_SEARCH) wrath::SMSG_LFG_UPDATE_SEARCH (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE&& obj) {
        opcode = Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE;
        new (&this->SMSG_LFG_BOOT_PROPOSAL_UPDATE) wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_PLAYER_INFO&& obj) {
        opcode = Opcode::SMSG_LFG_PLAYER_INFO;
        new (&this->SMSG_LFG_PLAYER_INFO) wrath::SMSG_LFG_PLAYER_INFO (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_PARTY_INFO&& obj) {
        opcode = Opcode::SMSG_LFG_PARTY_INFO;
        new (&this->SMSG_LFG_PARTY_INFO) wrath::SMSG_LFG_PARTY_INFO (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TITLE_EARNED&& obj) {
        opcode = Opcode::SMSG_TITLE_EARNED;
        new (&this->SMSG_TITLE_EARNED) wrath::SMSG_TITLE_EARNED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ARENA_ERROR&& obj) {
        opcode = Opcode::SMSG_ARENA_ERROR;
        new (&this->SMSG_ARENA_ERROR) wrath::SMSG_ARENA_ERROR (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_INSPECT_ARENA_TEAMS_Server&& obj) {
        opcode = Opcode::MSG_INSPECT_ARENA_TEAMS;
        new (&this->MSG_INSPECT_ARENA_TEAMS) wrath::MSG_INSPECT_ARENA_TEAMS_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DEATH_RELEASE_LOC&& obj) {
        opcode = Opcode::SMSG_DEATH_RELEASE_LOC;
        new (&this->SMSG_DEATH_RELEASE_LOC) wrath::SMSG_DEATH_RELEASE_LOC (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCED_DEATH_UPDATE&& obj) {
        opcode = Opcode::SMSG_FORCED_DEATH_UPDATE;
        new (&this->SMSG_FORCED_DEATH_UPDATE) wrath::SMSG_FORCED_DEATH_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server&& obj) {
        opcode = Opcode::MSG_MOVE_SET_FLIGHT_SPEED;
        new (&this->MSG_MOVE_SET_FLIGHT_SPEED) wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED&& obj) {
        opcode = Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED;
        new (&this->MSG_MOVE_SET_FLIGHT_BACK_SPEED) wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE&& obj) {
        opcode = Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE;
        new (&this->SMSG_FORCE_FLIGHT_SPEED_CHANGE) wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE&& obj) {
        opcode = Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE;
        new (&this->SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_SET_FLIGHT_SPEED&& obj) {
        opcode = Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED;
        new (&this->SMSG_SPLINE_SET_FLIGHT_SPEED) wrath::SMSG_SPLINE_SET_FLIGHT_SPEED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED&& obj) {
        opcode = Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED;
        new (&this->SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FLIGHT_SPLINE_SYNC&& obj) {
        opcode = Opcode::SMSG_FLIGHT_SPLINE_SYNC;
        new (&this->SMSG_FLIGHT_SPLINE_SYNC) wrath::SMSG_FLIGHT_SPLINE_SYNC (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_REALM_SPLIT&& obj) {
        opcode = Opcode::SMSG_REALM_SPLIT;
        new (&this->SMSG_REALM_SPLIT) wrath::SMSG_REALM_SPLIT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TIME_SYNC_REQ&& obj) {
        opcode = Opcode::SMSG_TIME_SYNC_REQ;
        new (&this->SMSG_TIME_SYNC_REQ) wrath::SMSG_TIME_SYNC_REQ (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_RESET_FAILED_NOTIFY&& obj) {
        opcode = Opcode::SMSG_RESET_FAILED_NOTIFY;
        new (&this->SMSG_RESET_FAILED_NOTIFY) wrath::SMSG_RESET_FAILED_NOTIFY (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LFG_DISABLED&& obj) {
        opcode = Opcode::SMSG_LFG_DISABLED;
        new (&this->SMSG_LFG_DISABLED) wrath::SMSG_LFG_DISABLED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_UPDATE_COMBO_POINTS&& obj) {
        opcode = Opcode::SMSG_UPDATE_COMBO_POINTS;
        new (&this->SMSG_UPDATE_COMBO_POINTS) wrath::SMSG_UPDATE_COMBO_POINTS (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_START_DESCEND&& obj) {
        opcode = Opcode::MSG_MOVE_START_DESCEND;
        new (&this->MSG_MOVE_START_DESCEND) wrath::MSG_MOVE_START_DESCEND (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_DISMOUNT&& obj) {
        opcode = Opcode::SMSG_DISMOUNT;
        new (&this->SMSG_DISMOUNT) wrath::SMSG_DISMOUNT (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_UPDATE_CAN_FLY_Server&& obj) {
        opcode = Opcode::MSG_MOVE_UPDATE_CAN_FLY;
        new (&this->MSG_MOVE_UPDATE_CAN_FLY) wrath::MSG_MOVE_UPDATE_CAN_FLY_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_RAID_READY_CHECK_CONFIRM_Server&& obj) {
        opcode = Opcode::MSG_RAID_READY_CHECK_CONFIRM;
        new (&this->MSG_RAID_READY_CHECK_CONFIRM) wrath::MSG_RAID_READY_CHECK_CONFIRM_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GM_MESSAGECHAT&& obj) {
        opcode = Opcode::SMSG_GM_MESSAGECHAT;
        new (&this->SMSG_GM_MESSAGECHAT) wrath::SMSG_GM_MESSAGECHAT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CLEAR_TARGET&& obj) {
        opcode = Opcode::SMSG_CLEAR_TARGET;
        new (&this->SMSG_CLEAR_TARGET) wrath::SMSG_CLEAR_TARGET (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD&& obj) {
        opcode = Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD;
        new (&this->SMSG_CROSSED_INEBRIATION_THRESHOLD) wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_KICK_REASON&& obj) {
        opcode = Opcode::SMSG_KICK_REASON;
        new (&this->SMSG_KICK_REASON) wrath::SMSG_KICK_REASON (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_COMPLAIN_RESULT&& obj) {
        opcode = Opcode::SMSG_COMPLAIN_RESULT;
        new (&this->SMSG_COMPLAIN_RESULT) wrath::SMSG_COMPLAIN_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FEATURE_SYSTEM_STATUS&& obj) {
        opcode = Opcode::SMSG_FEATURE_SYSTEM_STATUS;
        new (&this->SMSG_FEATURE_SYSTEM_STATUS) wrath::SMSG_FEATURE_SYSTEM_STATUS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHANNEL_MEMBER_COUNT&& obj) {
        opcode = Opcode::SMSG_CHANNEL_MEMBER_COUNT;
        new (&this->SMSG_CHANNEL_MEMBER_COUNT) wrath::SMSG_CHANNEL_MEMBER_COUNT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GUILD_BANK_LIST&& obj) {
        opcode = Opcode::SMSG_GUILD_BANK_LIST;
        new (&this->SMSG_GUILD_BANK_LIST) wrath::SMSG_GUILD_BANK_LIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_GUILD_BANK_LOG_QUERY_Server&& obj) {
        opcode = Opcode::MSG_GUILD_BANK_LOG_QUERY;
        new (&this->MSG_GUILD_BANK_LOG_QUERY) wrath::MSG_GUILD_BANK_LOG_QUERY_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_USERLIST_ADD&& obj) {
        opcode = Opcode::SMSG_USERLIST_ADD;
        new (&this->SMSG_USERLIST_ADD) wrath::SMSG_USERLIST_ADD (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_USERLIST_REMOVE&& obj) {
        opcode = Opcode::SMSG_USERLIST_REMOVE;
        new (&this->SMSG_USERLIST_REMOVE) wrath::SMSG_USERLIST_REMOVE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_USERLIST_UPDATE&& obj) {
        opcode = Opcode::SMSG_USERLIST_UPDATE;
        new (&this->SMSG_USERLIST_UPDATE) wrath::SMSG_USERLIST_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_INSPECT_TALENT&& obj) {
        opcode = Opcode::SMSG_INSPECT_TALENT;
        new (&this->SMSG_INSPECT_TALENT) wrath::SMSG_INSPECT_TALENT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_LOOT_LIST&& obj) {
        opcode = Opcode::SMSG_LOOT_LIST;
        new (&this->SMSG_LOOT_LIST) wrath::SMSG_LOOT_LIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_GUILD_PERMISSIONS_Server&& obj) {
        opcode = Opcode::MSG_GUILD_PERMISSIONS;
        new (&this->MSG_GUILD_PERMISSIONS) wrath::MSG_GUILD_PERMISSIONS_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server&& obj) {
        opcode = Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN;
        new (&this->MSG_GUILD_BANK_MONEY_WITHDRAWN) wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_GUILD_EVENT_LOG_QUERY_Server&& obj) {
        opcode = Opcode::MSG_GUILD_EVENT_LOG_QUERY;
        new (&this->MSG_GUILD_EVENT_LOG_QUERY) wrath::MSG_GUILD_EVENT_LOG_QUERY_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MIRRORIMAGE_DATA&& obj) {
        opcode = Opcode::SMSG_MIRRORIMAGE_DATA;
        new (&this->SMSG_MIRRORIMAGE_DATA) wrath::SMSG_MIRRORIMAGE_DATA (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_QUERY_GUILD_BANK_TEXT_Server&& obj) {
        opcode = Opcode::MSG_QUERY_GUILD_BANK_TEXT;
        new (&this->MSG_QUERY_GUILD_BANK_TEXT) wrath::MSG_QUERY_GUILD_BANK_TEXT_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_OVERRIDE_LIGHT&& obj) {
        opcode = Opcode::SMSG_OVERRIDE_LIGHT;
        new (&this->SMSG_OVERRIDE_LIGHT) wrath::SMSG_OVERRIDE_LIGHT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TOTEM_CREATED&& obj) {
        opcode = Opcode::SMSG_TOTEM_CREATED;
        new (&this->SMSG_TOTEM_CREATED) wrath::SMSG_TOTEM_CREATED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE&& obj) {
        opcode = Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE;
        new (&this->SMSG_QUESTGIVER_STATUS_MULTIPLE) wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT&& obj) {
        opcode = Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT;
        new (&this->SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SEND_UNLEARN_SPELLS&& obj) {
        opcode = Opcode::SMSG_SEND_UNLEARN_SPELLS;
        new (&this->SMSG_SEND_UNLEARN_SPELLS) wrath::SMSG_SEND_UNLEARN_SPELLS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PROPOSE_LEVEL_GRANT&& obj) {
        opcode = Opcode::SMSG_PROPOSE_LEVEL_GRANT;
        new (&this->SMSG_PROPOSE_LEVEL_GRANT) wrath::SMSG_PROPOSE_LEVEL_GRANT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_REFER_A_FRIEND_FAILURE&& obj) {
        opcode = Opcode::SMSG_REFER_A_FRIEND_FAILURE;
        new (&this->SMSG_REFER_A_FRIEND_FAILURE) wrath::SMSG_REFER_A_FRIEND_FAILURE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_SET_FLYING&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_SET_FLYING;
        new (&this->SMSG_SPLINE_MOVE_SET_FLYING) wrath::SMSG_SPLINE_MOVE_SET_FLYING (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_UNSET_FLYING&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING;
        new (&this->SMSG_SPLINE_MOVE_UNSET_FLYING) wrath::SMSG_SPLINE_MOVE_UNSET_FLYING (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ENABLE_BARBER_SHOP&& obj) {
        opcode = Opcode::SMSG_ENABLE_BARBER_SHOP;
        new (&this->SMSG_ENABLE_BARBER_SHOP) wrath::SMSG_ENABLE_BARBER_SHOP (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BARBER_SHOP_RESULT&& obj) {
        opcode = Opcode::SMSG_BARBER_SHOP_RESULT;
        new (&this->SMSG_BARBER_SHOP_RESULT) wrath::SMSG_BARBER_SHOP_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_SEND_CALENDAR&& obj) {
        opcode = Opcode::SMSG_CALENDAR_SEND_CALENDAR;
        new (&this->SMSG_CALENDAR_SEND_CALENDAR) wrath::SMSG_CALENDAR_SEND_CALENDAR (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_SEND_EVENT&& obj) {
        opcode = Opcode::SMSG_CALENDAR_SEND_EVENT;
        new (&this->SMSG_CALENDAR_SEND_EVENT) wrath::SMSG_CALENDAR_SEND_EVENT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_FILTER_GUILD&& obj) {
        opcode = Opcode::SMSG_CALENDAR_FILTER_GUILD;
        new (&this->SMSG_CALENDAR_FILTER_GUILD) wrath::SMSG_CALENDAR_FILTER_GUILD (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_ARENA_TEAM&& obj) {
        opcode = Opcode::SMSG_CALENDAR_ARENA_TEAM;
        new (&this->SMSG_CALENDAR_ARENA_TEAM) wrath::SMSG_CALENDAR_ARENA_TEAM (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE&& obj) {
        opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE;
        new (&this->SMSG_CALENDAR_EVENT_INVITE) wrath::SMSG_CALENDAR_EVENT_INVITE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED&& obj) {
        opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED;
        new (&this->SMSG_CALENDAR_EVENT_INVITE_REMOVED) wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_EVENT_STATUS&& obj) {
        opcode = Opcode::SMSG_CALENDAR_EVENT_STATUS;
        new (&this->SMSG_CALENDAR_EVENT_STATUS) wrath::SMSG_CALENDAR_EVENT_STATUS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_COMMAND_RESULT&& obj) {
        opcode = Opcode::SMSG_CALENDAR_COMMAND_RESULT;
        new (&this->SMSG_CALENDAR_COMMAND_RESULT) wrath::SMSG_CALENDAR_COMMAND_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED&& obj) {
        opcode = Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED;
        new (&this->SMSG_CALENDAR_RAID_LOCKOUT_ADDED) wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED&& obj) {
        opcode = Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED;
        new (&this->SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT&& obj) {
        opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT;
        new (&this->SMSG_CALENDAR_EVENT_INVITE_ALERT) wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT&& obj) {
        opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT;
        new (&this->SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT&& obj) {
        opcode = Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT;
        new (&this->SMSG_CALENDAR_EVENT_REMOVED_ALERT) wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT&& obj) {
        opcode = Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT;
        new (&this->SMSG_CALENDAR_EVENT_UPDATED_ALERT) wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT&& obj) {
        opcode = Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT;
        new (&this->SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT (std::move(obj));
    }
    explicit ServerOpcode(wrath::CMSG_CALENDAR_GET_NUM_PENDING&& obj) {
        opcode = Opcode::CMSG_CALENDAR_GET_NUM_PENDING;
        new (&this->CMSG_CALENDAR_GET_NUM_PENDING) wrath::CMSG_CALENDAR_GET_NUM_PENDING (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_SEND_NUM_PENDING&& obj) {
        opcode = Opcode::SMSG_CALENDAR_SEND_NUM_PENDING;
        new (&this->SMSG_CALENDAR_SEND_NUM_PENDING) wrath::SMSG_CALENDAR_SEND_NUM_PENDING (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_SET_PITCH_RATE_Server&& obj) {
        opcode = Opcode::MSG_MOVE_SET_PITCH_RATE;
        new (&this->MSG_MOVE_SET_PITCH_RATE) wrath::MSG_MOVE_SET_PITCH_RATE_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_FORCE_PITCH_RATE_CHANGE&& obj) {
        opcode = Opcode::SMSG_FORCE_PITCH_RATE_CHANGE;
        new (&this->SMSG_FORCE_PITCH_RATE_CHANGE) wrath::SMSG_FORCE_PITCH_RATE_CHANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES&& obj) {
        opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES;
        new (&this->SMSG_CALENDAR_EVENT_INVITE_NOTES) wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT&& obj) {
        opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT;
        new (&this->SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE&& obj) {
        opcode = Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE;
        new (&this->SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TRIGGER_MOVIE&& obj) {
        opcode = Opcode::SMSG_TRIGGER_MOVIE;
        new (&this->SMSG_TRIGGER_MOVIE) wrath::SMSG_TRIGGER_MOVIE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ACHIEVEMENT_EARNED&& obj) {
        opcode = Opcode::SMSG_ACHIEVEMENT_EARNED;
        new (&this->SMSG_ACHIEVEMENT_EARNED) wrath::SMSG_ACHIEVEMENT_EARNED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CRITERIA_UPDATE&& obj) {
        opcode = Opcode::SMSG_CRITERIA_UPDATE;
        new (&this->SMSG_CRITERIA_UPDATE) wrath::SMSG_CRITERIA_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS&& obj) {
        opcode = Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS;
        new (&this->SMSG_RESPOND_INSPECT_ACHIEVEMENTS) wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL&& obj) {
        opcode = Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL;
        new (&this->SMSG_QUESTUPDATE_ADD_PVP_KILL) wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED&& obj) {
        opcode = Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED;
        new (&this->SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHAR_CUSTOMIZE&& obj) {
        opcode = Opcode::SMSG_CHAR_CUSTOMIZE;
        new (&this->SMSG_CHAR_CUSTOMIZE) wrath::SMSG_CHAR_CUSTOMIZE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SET_PHASE_SHIFT&& obj) {
        opcode = Opcode::SMSG_SET_PHASE_SHIFT;
        new (&this->SMSG_SET_PHASE_SHIFT) wrath::SMSG_SET_PHASE_SHIFT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ALL_ACHIEVEMENT_DATA&& obj) {
        opcode = Opcode::SMSG_ALL_ACHIEVEMENT_DATA;
        new (&this->SMSG_ALL_ACHIEVEMENT_DATA) wrath::SMSG_ALL_ACHIEVEMENT_DATA (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_POWER_UPDATE&& obj) {
        opcode = Opcode::SMSG_POWER_UPDATE;
        new (&this->SMSG_POWER_UPDATE) wrath::SMSG_POWER_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_HIGHEST_THREAT_UPDATE&& obj) {
        opcode = Opcode::SMSG_HIGHEST_THREAT_UPDATE;
        new (&this->SMSG_HIGHEST_THREAT_UPDATE) wrath::SMSG_HIGHEST_THREAT_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_THREAT_UPDATE&& obj) {
        opcode = Opcode::SMSG_THREAT_UPDATE;
        new (&this->SMSG_THREAT_UPDATE) wrath::SMSG_THREAT_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_THREAT_REMOVE&& obj) {
        opcode = Opcode::SMSG_THREAT_REMOVE;
        new (&this->SMSG_THREAT_REMOVE) wrath::SMSG_THREAT_REMOVE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_THREAT_CLEAR&& obj) {
        opcode = Opcode::SMSG_THREAT_CLEAR;
        new (&this->SMSG_THREAT_CLEAR) wrath::SMSG_THREAT_CLEAR (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CONVERT_RUNE&& obj) {
        opcode = Opcode::SMSG_CONVERT_RUNE;
        new (&this->SMSG_CONVERT_RUNE) wrath::SMSG_CONVERT_RUNE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_RESYNC_RUNES&& obj) {
        opcode = Opcode::SMSG_RESYNC_RUNES;
        new (&this->SMSG_RESYNC_RUNES) wrath::SMSG_RESYNC_RUNES (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ADD_RUNE_POWER&& obj) {
        opcode = Opcode::SMSG_ADD_RUNE_POWER;
        new (&this->SMSG_ADD_RUNE_POWER) wrath::SMSG_ADD_RUNE_POWER (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AUCTION_LIST_PENDING_SALES&& obj) {
        opcode = Opcode::SMSG_AUCTION_LIST_PENDING_SALES;
        new (&this->SMSG_AUCTION_LIST_PENDING_SALES) wrath::SMSG_AUCTION_LIST_PENDING_SALES (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MODIFY_COOLDOWN&& obj) {
        opcode = Opcode::SMSG_MODIFY_COOLDOWN;
        new (&this->SMSG_MODIFY_COOLDOWN) wrath::SMSG_MODIFY_COOLDOWN (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_UPDATE_COMBO_POINTS&& obj) {
        opcode = Opcode::SMSG_PET_UPDATE_COMBO_POINTS;
        new (&this->SMSG_PET_UPDATE_COMBO_POINTS) wrath::SMSG_PET_UPDATE_COMBO_POINTS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PRE_RESURRECT&& obj) {
        opcode = Opcode::SMSG_PRE_RESURRECT;
        new (&this->SMSG_PRE_RESURRECT) wrath::SMSG_PRE_RESURRECT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AURA_UPDATE_ALL&& obj) {
        opcode = Opcode::SMSG_AURA_UPDATE_ALL;
        new (&this->SMSG_AURA_UPDATE_ALL) wrath::SMSG_AURA_UPDATE_ALL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_AURA_UPDATE&& obj) {
        opcode = Opcode::SMSG_AURA_UPDATE;
        new (&this->SMSG_AURA_UPDATE) wrath::SMSG_AURA_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SERVER_FIRST_ACHIEVEMENT&& obj) {
        opcode = Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT;
        new (&this->SMSG_SERVER_FIRST_ACHIEVEMENT) wrath::SMSG_SERVER_FIRST_ACHIEVEMENT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_LEARNED_SPELL&& obj) {
        opcode = Opcode::SMSG_PET_LEARNED_SPELL;
        new (&this->SMSG_PET_LEARNED_SPELL) wrath::SMSG_PET_LEARNED_SPELL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_UNLEARNED_SPELL&& obj) {
        opcode = Opcode::SMSG_PET_UNLEARNED_SPELL;
        new (&this->SMSG_PET_UNLEARNED_SPELL) wrath::SMSG_PET_UNLEARNED_SPELL (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA&& obj) {
        opcode = Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA;
        new (&this->SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CRITERIA_DELETED&& obj) {
        opcode = Opcode::SMSG_CRITERIA_DELETED;
        new (&this->SMSG_CRITERIA_DELETED) wrath::SMSG_CRITERIA_DELETED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ACHIEVEMENT_DELETED&& obj) {
        opcode = Opcode::SMSG_ACHIEVEMENT_DELETED;
        new (&this->SMSG_ACHIEVEMENT_DELETED) wrath::SMSG_ACHIEVEMENT_DELETED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEGROUND_INFO_THROTTLED&& obj) {
        opcode = Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED;
        new (&this->SMSG_BATTLEGROUND_INFO_THROTTLED) wrath::SMSG_BATTLEGROUND_INFO_THROTTLED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PLAYER_VEHICLE_DATA&& obj) {
        opcode = Opcode::SMSG_PLAYER_VEHICLE_DATA;
        new (&this->SMSG_PLAYER_VEHICLE_DATA) wrath::SMSG_PLAYER_VEHICLE_DATA (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_PET_GUIDS&& obj) {
        opcode = Opcode::SMSG_PET_GUIDS;
        new (&this->SMSG_PET_GUIDS) wrath::SMSG_PET_GUIDS (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CLIENTCACHE_VERSION&& obj) {
        opcode = Opcode::SMSG_CLIENTCACHE_VERSION;
        new (&this->SMSG_CLIENTCACHE_VERSION) wrath::SMSG_CLIENTCACHE_VERSION (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ITEM_REFUND_INFO_RESPONSE&& obj) {
        opcode = Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE;
        new (&this->SMSG_ITEM_REFUND_INFO_RESPONSE) wrath::SMSG_ITEM_REFUND_INFO_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ITEM_REFUND_RESULT&& obj) {
        opcode = Opcode::SMSG_ITEM_REFUND_RESULT;
        new (&this->SMSG_ITEM_REFUND_RESULT) wrath::SMSG_ITEM_REFUND_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE&& obj) {
        opcode = Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE;
        new (&this->SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION&& obj) {
        opcode = Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION;
        new (&this->SMSG_CALENDAR_CLEAR_PENDING_ACTION) wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_EQUIPMENT_SET_LIST&& obj) {
        opcode = Opcode::SMSG_EQUIPMENT_SET_LIST;
        new (&this->SMSG_EQUIPMENT_SET_LIST) wrath::SMSG_EQUIPMENT_SET_LIST (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SET_PROJECTILE_POSITION&& obj) {
        opcode = Opcode::SMSG_SET_PROJECTILE_POSITION;
        new (&this->SMSG_SET_PROJECTILE_POSITION) wrath::SMSG_SET_PROJECTILE_POSITION (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TALENTS_INFO&& obj) {
        opcode = Opcode::SMSG_TALENTS_INFO;
        new (&this->SMSG_TALENTS_INFO) wrath::SMSG_TALENTS_INFO (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ARENA_UNIT_DESTROYED&& obj) {
        opcode = Opcode::SMSG_ARENA_UNIT_DESTROYED;
        new (&this->SMSG_ARENA_UNIT_DESTROYED) wrath::SMSG_ARENA_UNIT_DESTROYED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED&& obj) {
        opcode = Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED;
        new (&this->SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_GRAVITY_DISABLE&& obj) {
        opcode = Opcode::SMSG_MOVE_GRAVITY_DISABLE;
        new (&this->SMSG_MOVE_GRAVITY_DISABLE) wrath::SMSG_MOVE_GRAVITY_DISABLE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_GRAVITY_ENABLE&& obj) {
        opcode = Opcode::SMSG_MOVE_GRAVITY_ENABLE;
        new (&this->SMSG_MOVE_GRAVITY_ENABLE) wrath::SMSG_MOVE_GRAVITY_ENABLE (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_MOVE_GRAVITY_CHNG_Server&& obj) {
        opcode = Opcode::MSG_MOVE_GRAVITY_CHNG;
        new (&this->MSG_MOVE_GRAVITY_CHNG) wrath::MSG_MOVE_GRAVITY_CHNG_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE;
        new (&this->SMSG_SPLINE_MOVE_GRAVITY_DISABLE) wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE&& obj) {
        opcode = Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE;
        new (&this->SMSG_SPLINE_MOVE_GRAVITY_ENABLE) wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_EQUIPMENT_SET_USE_RESULT&& obj) {
        opcode = Opcode::SMSG_EQUIPMENT_SET_USE_RESULT;
        new (&this->SMSG_EQUIPMENT_SET_USE_RESULT) wrath::SMSG_EQUIPMENT_SET_USE_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CHAR_FACTION_CHANGE&& obj) {
        opcode = Opcode::SMSG_CHAR_FACTION_CHANGE;
        new (&this->SMSG_CHAR_FACTION_CHANGE) wrath::SMSG_CHAR_FACTION_CHANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE&& obj) {
        opcode = Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE;
        new (&this->SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_ENTERED&& obj) {
        opcode = Opcode::SMSG_BATTLEFIELD_MGR_ENTERED;
        new (&this->SMSG_BATTLEFIELD_MGR_ENTERED) wrath::SMSG_BATTLEFIELD_MGR_ENTERED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE&& obj) {
        opcode = Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE;
        new (&this->SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE&& obj) {
        opcode = Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE;
        new (&this->SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING&& obj) {
        opcode = Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING;
        new (&this->SMSG_BATTLEFIELD_MGR_EJECT_PENDING) wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_EJECTED&& obj) {
        opcode = Opcode::SMSG_BATTLEFIELD_MGR_EJECTED;
        new (&this->SMSG_BATTLEFIELD_MGR_EJECTED) wrath::SMSG_BATTLEFIELD_MGR_EJECTED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE&& obj) {
        opcode = Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE;
        new (&this->SMSG_BATTLEFIELD_MGR_STATE_CHANGE) wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE (std::move(obj));
    }
    explicit ServerOpcode(wrath::MSG_SET_RAID_DIFFICULTY_Server&& obj) {
        opcode = Opcode::MSG_SET_RAID_DIFFICULTY;
        new (&this->MSG_SET_RAID_DIFFICULTY) wrath::MSG_SET_RAID_DIFFICULTY_Server (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TOGGLE_XP_GAIN&& obj) {
        opcode = Opcode::SMSG_TOGGLE_XP_GAIN;
        new (&this->SMSG_TOGGLE_XP_GAIN) wrath::SMSG_TOGGLE_XP_GAIN (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GMRESPONSE_DB_ERROR&& obj) {
        opcode = Opcode::SMSG_GMRESPONSE_DB_ERROR;
        new (&this->SMSG_GMRESPONSE_DB_ERROR) wrath::SMSG_GMRESPONSE_DB_ERROR (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GMRESPONSE_RECEIVED&& obj) {
        opcode = Opcode::SMSG_GMRESPONSE_RECEIVED;
        new (&this->SMSG_GMRESPONSE_RECEIVED) wrath::SMSG_GMRESPONSE_RECEIVED (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_GMRESPONSE_STATUS_UPDATE&& obj) {
        opcode = Opcode::SMSG_GMRESPONSE_STATUS_UPDATE;
        new (&this->SMSG_GMRESPONSE_STATUS_UPDATE) wrath::SMSG_GMRESPONSE_STATUS_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE&& obj) {
        opcode = Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE;
        new (&this->SMSG_WORLD_STATE_UI_TIMER_UPDATE) wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_TALENTS_INVOLUNTARILY_RESET&& obj) {
        opcode = Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET;
        new (&this->SMSG_TALENTS_INVOLUNTARILY_RESET) wrath::SMSG_TALENTS_INVOLUNTARILY_RESET (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE&& obj) {
        opcode = Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE;
        new (&this->SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CORPSE_NOT_IN_INSTANCE&& obj) {
        opcode = Opcode::SMSG_CORPSE_NOT_IN_INSTANCE;
        new (&this->SMSG_CORPSE_NOT_IN_INSTANCE) wrath::SMSG_CORPSE_NOT_IN_INSTANCE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_CAMERA_SHAKE&& obj) {
        opcode = Opcode::SMSG_CAMERA_SHAKE;
        new (&this->SMSG_CAMERA_SHAKE) wrath::SMSG_CAMERA_SHAKE (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_SOCKET_GEMS_RESULT&& obj) {
        opcode = Opcode::SMSG_SOCKET_GEMS_RESULT;
        new (&this->SMSG_SOCKET_GEMS_RESULT) wrath::SMSG_SOCKET_GEMS_RESULT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_REDIRECT_CLIENT&& obj) {
        opcode = Opcode::SMSG_REDIRECT_CLIENT;
        new (&this->SMSG_REDIRECT_CLIENT) wrath::SMSG_REDIRECT_CLIENT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MOVE_SET_COLLISION_HGT&& obj) {
        opcode = Opcode::SMSG_MOVE_SET_COLLISION_HGT;
        new (&this->SMSG_MOVE_SET_COLLISION_HGT) wrath::SMSG_MOVE_SET_COLLISION_HGT (std::move(obj));
    }
    explicit ServerOpcode(wrath::SMSG_MULTIPLE_MOVES&& obj) {
        opcode = Opcode::SMSG_MULTIPLE_MOVES;
        new (&this->SMSG_MULTIPLE_MOVES) wrath::SMSG_MULTIPLE_MOVES (std::move(obj));
    }

    template<typename T>
    // NOLINTNEXTLINE
    WOW_WORLD_MESSAGES_CPP_EXPORT T& get(); // All possible types have been specialized

    template<typename T>
    // NOLINTNEXTLINE
    WOW_WORLD_MESSAGES_CPP_EXPORT T* get_if(); // All possible types have been specialized

    WOW_WORLD_MESSAGES_CPP_EXPORT const char* to_string() const;
};

template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_CREATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_CREATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_ENUM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_ENUM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_DELETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_DELETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NEW_WORLD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NEW_WORLD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRANSFER_PENDING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRANSFER_PENDING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRANSFER_ABORTED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRANSFER_ABORTED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHARACTER_LOGIN_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHARACTER_LOGIN_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGIN_SETTIMESPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGIN_SETTIMESPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_CANCEL_ACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_CANCEL_ACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NAME_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NAME_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_NAME_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_NAME_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CREATURE_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CREATURE_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WHO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WHO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WHOIS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WHOIS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CONTACT_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CONTACT_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FRIEND_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FRIEND_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_INVITE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_INVITE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_DECLINE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_DECLINE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_UNINVITE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_UNINVITE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_SET_LEADER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_SET_LEADER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_DESTROYED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_DESTROYED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_MEMBER_STATS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_MEMBER_STATS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_COMMAND_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_COMMAND_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_INVITE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_INVITE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_DECLINE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_DECLINE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_INFO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_INFO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_ROSTER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_ROSTER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_EVENT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_EVENT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_COMMAND_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_COMMAND_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MESSAGECHAT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MESSAGECHAT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_NOTIFY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_NOTIFY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_OBJECT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_OBJECT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DESTROY_OBJECT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DESTROY_OBJECT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_READ_ITEM_OK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_READ_ITEM_OK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_READ_ITEM_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_READ_ITEM_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_COOLDOWN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_COOLDOWN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_FORWARD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_FORWARD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_BACKWARD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_BACKWARD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_LEFT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_LEFT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_RIGHT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_RIGHT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_STRAFE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_STRAFE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_JUMP* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_JUMP& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_LEFT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_LEFT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_RIGHT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_RIGHT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_TURN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_TURN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_UP* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_UP& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_DOWN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_DOWN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_PITCH* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_PITCH& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_RUN_MODE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_RUN_MODE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_WALK_MODE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_WALK_MODE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_CHEAT_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_CHEAT_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_ACK_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_ACK_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FALL_LAND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FALL_LAND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_SWIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_SWIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_SWIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_SWIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FACING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FACING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WORLDPORT_ACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WORLDPORT_ACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MONSTER_MOVE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MONSTER_MOVE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_WATER_WALK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_WATER_WALK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_LAND_WALK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_LAND_WALK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_RUN_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_RUN_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_SWIM_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_SWIM_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_MOVE_ROOT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_MOVE_ROOT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_MOVE_UNROOT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_MOVE_UNROOT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_ROOT_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_ROOT_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_UNROOT_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_UNROOT_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HEARTBEAT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HEARTBEAT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_KNOCK_BACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_KNOCK_BACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_KNOCK_BACK_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_KNOCK_BACK_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_FEATHER_FALL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_FEATHER_FALL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_NORMAL_FALL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_NORMAL_FALL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_HOVER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_HOVER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_UNSET_HOVER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_UNSET_HOVER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HOVER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HOVER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRIGGER_CINEMATIC* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRIGGER_CINEMATIC& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TUTORIAL_FLAGS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TUTORIAL_FLAGS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EMOTE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EMOTE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TEXT_EMOTE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TEXT_EMOTE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INVENTORY_CHANGE_FAILURE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INVENTORY_CHANGE_FAILURE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRADE_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRADE_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRADE_STATUS_EXTENDED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRADE_STATUS_EXTENDED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INITIALIZE_FACTIONS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INITIALIZE_FACTIONS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FACTION_VISIBLE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FACTION_VISIBLE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FACTION_STANDING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FACTION_STANDING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PROFICIENCY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PROFICIENCY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACTION_BUTTONS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACTION_BUTTONS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INITIAL_SPELLS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INITIAL_SPELLS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LEARNED_SPELL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LEARNED_SPELL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SUPERCEDED_SPELL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SUPERCEDED_SPELL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CAST_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CAST_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_START* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_START& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_GO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_GO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_FAILURE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_FAILURE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_COOLDOWN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_COOLDOWN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COOLDOWN_EVENT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COOLDOWN_EVENT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_CAST_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_CAST_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CHANNEL_START_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CHANNEL_START_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CHANNEL_UPDATE_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CHANNEL_UPDATE_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AI_REACTION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AI_REACTION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSTART* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSTART& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSTOP* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSTOP& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_NOTINRANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_NOTINRANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_BADFACING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_BADFACING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_DEADTARGET* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_DEADTARGET& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_CANT_ATTACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_CANT_ATTACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKERSTATEUPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKERSTATEUPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CANCEL_COMBAT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CANCEL_COMBAT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLHEALLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLHEALLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLENERGIZELOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLENERGIZELOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BREAK_TARGET* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BREAK_TARGET& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BINDPOINTUPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BINDPOINTUPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYERBOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYERBOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLIENT_CONTROL_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLIENT_CONTROL_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESURRECT_REQUEST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESURRECT_REQUEST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_RELEASE_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_RELEASE_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_REMOVED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_REMOVED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_MONEY_NOTIFY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_MONEY_NOTIFY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_CLEAR_MONEY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_CLEAR_MONEY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_PUSH_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_PUSH_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_REQUESTED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_REQUESTED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_OUTOFBOUNDS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_OUTOFBOUNDS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_INBOUNDS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_INBOUNDS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_WINNER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_WINNER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOUNTRESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOUNTRESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOUNTSPECIAL_ANIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOUNTSPECIAL_ANIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_TAME_FAILURE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_TAME_FAILURE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_NAME_INVALID* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_NAME_INVALID& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_SPELLS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_SPELLS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_MODE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_MODE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_MESSAGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_MESSAGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NPC_TEXT_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NPC_TEXT_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_DETAILS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_DETAILS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_REQUEST_ITEMS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_REQUEST_ITEMS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_OFFER_REWARD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_OFFER_REWARD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_INVALID* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_INVALID& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTLOG_FULL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTLOG_FULL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_FAILEDTIMER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_FAILEDTIMER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_KILL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_KILL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_ITEM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_ITEM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_CONFIRM_ACCEPT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_CONFIRM_ACCEPT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LIST_INVENTORY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LIST_INVENTORY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SELL_ITEM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SELL_ITEM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_ITEM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_ITEM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOWTAXINODES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOWTAXINODES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TAXINODE_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TAXINODE_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACTIVATETAXIREPLY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACTIVATETAXIREPLY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NEW_TAXI_PATH* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NEW_TAXI_PATH& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_BUY_SUCCEEDED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_BUY_SUCCEEDED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_BUY_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_BUY_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOW_BANK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOW_BANK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_BANK_SLOT_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_BANK_SLOT_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SHOWLIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SHOWLIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SHOW_SIGNATURES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SHOW_SIGNATURES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SIGN_RESULTS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SIGN_RESULTS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_DECLINE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_DECLINE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TURN_IN_PETITION_RESULTS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TURN_IN_PETITION_RESULTS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FISH_NOT_HOOKED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FISH_NOT_HOOKED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FISH_ESCAPED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FISH_ESCAPED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NOTIFICATION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NOTIFICATION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYED_TIME* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYED_TIME& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUERY_TIME_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUERY_TIME_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOG_XPGAIN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOG_XPGAIN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LEVELUP_INFO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LEVELUP_INFO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MINIMAP_PING_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MINIMAP_PING_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENCHANTMENTLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENCHANTMENTLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_START_MIRROR_TIMER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_START_MIRROR_TIMER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PAUSE_MIRROR_TIMER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PAUSE_MIRROR_TIMER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STOP_MIRROR_TIMER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STOP_MIRROR_TIMER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PONG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PONG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLEAR_COOLDOWN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLEAR_COOLDOWN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_PAGETEXT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_PAGETEXT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_DELAYED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_DELAYED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_POI_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_POI_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_TIME_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_TIME_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUTH_CHALLENGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUTH_CHALLENGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUTH_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUTH_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SAVE_GUILD_EMBLEM_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SAVE_GUILD_EMBLEM_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TABARDVENDOR_ACTIVATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TABARDVENDOR_ACTIVATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SPELL_VISUAL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SPELL_VISUAL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTYKILLLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTYKILLLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPRESSED_UPDATE_OBJECT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPRESSED_UPDATE_OBJECT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SPELL_IMPACT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SPELL_IMPACT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EXPLORATION_EXPERIENCE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EXPLORATION_EXPERIENCE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RANDOM_ROLL_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RANDOM_ROLL_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PLAYER_REWARD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PLAYER_REWARD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_TELEPORT_DENIED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_TELEPORT_DENIED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REMOVED_SPELL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REMOVED_SPELL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_CREATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_CREATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_UPDATETEXT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_UPDATETEXT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACCOUNT_DATA_TIMES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACCOUNT_DATA_TIMES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_ACCOUNT_DATA* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_ACCOUNT_DATA& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_GETTICKET* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_GETTICKET& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CORPSE_QUERY_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CORPSE_QUERY_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_DELETETICKET* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_DELETETICKET& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_WRONG_FACTION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_WRONG_FACTION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_SYSTEMSTATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_SYSTEMSTATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_FORCE_REMOVE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_FORCE_REMOVE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPIRIT_HEALER_CONFIRM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPIRIT_HEALER_CONFIRM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_POI* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_POI& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGIN_VERIFY_WORLD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGIN_VERIFY_WORLD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SEND_MAIL_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SEND_MAIL_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MAIL_LIST_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MAIL_LIST_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLLOGMISS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLLOGMISS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLLOGEXECUTE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLLOGEXECUTE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PERIODICAURALOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PERIODICAURALOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLDAMAGESHIELD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLDAMAGESHIELD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLNONMELEEDAMAGELOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLNONMELEEDAMAGELOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESURRECT_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESURRECT_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ZONE_UNDER_ATTACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ZONE_UNDER_ATTACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_AUCTION_HELLO_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_AUCTION_HELLO_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_COMMAND_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_COMMAND_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_LIST_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_LIST_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_OWNER_LIST_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_OWNER_LIST_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_BIDDER_NOTIFICATION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_BIDDER_NOTIFICATION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_OWNER_NOTIFICATION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_OWNER_NOTIFICATION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PROCRESIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PROCRESIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DISPEL_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DISPEL_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLORDAMAGE_IMMUNE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLORDAMAGE_IMMUNE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_BIDDER_LIST_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_BIDDER_LIST_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FLAT_SPELL_MODIFIER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FLAT_SPELL_MODIFIER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PCT_SPELL_MODIFIER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PCT_SPELL_MODIFIER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_RECLAIM_DELAY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_RECLAIM_DELAY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_LIST_STABLED_PETS_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_LIST_STABLED_PETS_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STABLE_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STABLE_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUEST_PUSH_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUEST_PUSH_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_MUSIC* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_MUSIC& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_OBJECT_SOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_OBJECT_SOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLDISPELLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLDISPELLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_NEXT_MAIL_TIME_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_NEXT_MAIL_TIME_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RECEIVED_MAIL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RECEIVED_MAIL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_GROUP_ONLY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_GROUP_ONLY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PVP_CREDIT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PVP_CREDIT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_REMOVED_NOTIFICATION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_REMOVED_NOTIFICATION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SERVER_MESSAGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SERVER_MESSAGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_OFFER_CONTINUE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_OFFER_CONTINUE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOW_MAILBOX* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOW_MAILBOX& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CANCEL_AUTO_REPEAT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CANCEL_AUTO_REPEAT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STANDSTATE_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STANDSTATE_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ALL_PASSED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ALL_PASSED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ROLL_WON* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ROLL_WON& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_START_ROLL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_START_ROLL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ROLL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ROLL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_MASTER_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_MASTER_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FORCED_REACTIONS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FORCED_REACTIONS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_FAILED_OTHER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_FAILED_OTHER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_PLAYER_NOT_FOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_PLAYER_NOT_FOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TALENT_WIPE_CONFIRM_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TALENT_WIPE_CONFIRM_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SUMMON_REQUEST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SUMMON_REQUEST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MONSTER_MOVE_TRANSPORT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MONSTER_MOVE_TRANSPORT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_BROKEN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_BROKEN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FEATHER_FALL_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FEATHER_FALL_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WATER_WALK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WATER_WALK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FEIGN_DEATH_RESISTED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FEIGN_DEATH_RESISTED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_COUNTDOWN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_COUNTDOWN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AREA_TRIGGER_MESSAGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AREA_TRIGGER_MESSAGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_ROLE_CHOSEN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_ROLE_CHOSEN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYER_SKINNED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYER_SKINNED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DURABILITY_DAMAGE_DEATH* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DURABILITY_DAMAGE_DEATH& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_RENAME* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_RENAME& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INIT_WORLD_STATES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INIT_WORLD_STATES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_WORLD_STATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_WORLD_STATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_NAME_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_NAME_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_ACTION_FEEDBACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_ACTION_FEEDBACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_RENAME* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_RENAME& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_SAVE_CREATED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_SAVE_CREATED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_INSTANCE_INFO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_INSTANCE_INFO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_HONOR_STATS_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_HONOR_STATS_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_WALK_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_WALK_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_TURN_RATE_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_TURN_RATE_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AREA_SPIRIT_HEALER_TIME* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AREA_SPIRIT_HEALER_TIME& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WARDEN_DATA* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WARDEN_DATA& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_JOINED_BATTLEGROUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_JOINED_BATTLEGROUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BINDER_CONFIRM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BINDER_CONFIRM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_PLAYER_JOINED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_PLAYER_JOINED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_PLAYER_LEFT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_PLAYER_LEFT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ADDON_INFO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ADDON_INFO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UNLEARN_CONFIRM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UNLEARN_CONFIRM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_MEMBER_STATS_FULL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_MEMBER_STATS_FULL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WEATHER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WEATHER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_INSTANCE_MESSAGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_INSTANCE_MESSAGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPRESSED_MOVES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPRESSED_MOVES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_RESTRICTED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_RESTRICTED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_RUN_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_RUN_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_SWIM_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_SWIM_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_WALK_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_WALK_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_TURN_RATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_TURN_RATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNROOT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNROOT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_FEATHER_FALL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_FEATHER_FALL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_NORMAL_FALL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_NORMAL_FALL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_HOVER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_HOVER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNSET_HOVER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNSET_HOVER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_WATER_WALK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_WATER_WALK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_LAND_WALK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_LAND_WALK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_START_SWIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_START_SWIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_STOP_SWIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_STOP_SWIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TIME_SKIPPED_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TIME_SKIPPED_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_ROOT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_ROOT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INVALIDATE_PLAYER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INVALIDATE_PLAYER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_RESET* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_RESET& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_RESET_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_RESET_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_LAST_INSTANCE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_LAST_INSTANCE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_TARGET_UPDATE_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_TARGET_UPDATE_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_ACTION_SOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_ACTION_SOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_DISMISS_SOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_DISMISS_SOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GM_TICKET_STATUS_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GM_TICKET_STATUS_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_DUNGEON_DIFFICULTY_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_DUNGEON_DIFFICULTY_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_PLAYER_AMBIGUOUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_PLAYER_AMBIGUOUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLINSTAKILLLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLINSTAKILLLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLSTEALLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLSTEALLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DEFENSE_MESSAGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DEFENSE_MESSAGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_DIFFICULTY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_DIFFICULTY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOTD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOTD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_CAN_FLY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_CAN_FLY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_UNSET_CAN_FLY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_UNSET_CAN_FLY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_COMMAND_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_COMMAND_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_ROSTER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_ROSTER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_INVITE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_INVITE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_EVENT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_EVENT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_ASCEND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_ASCEND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_ASCEND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_ASCEND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_STATS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_STATS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_LFG_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_LFG_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PROPOSAL_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PROPOSAL_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_ROLE_CHECK_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_ROLE_CHECK_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_JOIN_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_JOIN_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_QUEUE_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_QUEUE_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_PLAYER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_PLAYER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_PARTY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_PARTY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_SEARCH* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_SEARCH& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PLAYER_INFO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PLAYER_INFO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PARTY_INFO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PARTY_INFO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TITLE_EARNED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TITLE_EARNED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_ERROR* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_ERROR& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_ARENA_TEAMS_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_ARENA_TEAMS_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DEATH_RELEASE_LOC* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DEATH_RELEASE_LOC& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCED_DEATH_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCED_DEATH_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_FLIGHT_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_FLIGHT_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FLIGHT_SPLINE_SYNC* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FLIGHT_SPLINE_SYNC& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REALM_SPLIT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REALM_SPLIT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TIME_SYNC_REQ* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TIME_SYNC_REQ& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESET_FAILED_NOTIFY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESET_FAILED_NOTIFY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_DISABLED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_DISABLED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_COMBO_POINTS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_COMBO_POINTS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_DESCEND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_DESCEND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DISMOUNT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DISMOUNT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_UPDATE_CAN_FLY_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_UPDATE_CAN_FLY_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_CONFIRM_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_CONFIRM_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GM_MESSAGECHAT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GM_MESSAGECHAT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLEAR_TARGET* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLEAR_TARGET& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_KICK_REASON* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_KICK_REASON& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPLAIN_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPLAIN_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FEATURE_SYSTEM_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FEATURE_SYSTEM_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_MEMBER_COUNT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_MEMBER_COUNT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_BANK_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_BANK_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_LOG_QUERY_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_LOG_QUERY_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_ADD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_ADD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_REMOVE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_REMOVE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSPECT_TALENT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSPECT_TALENT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_PERMISSIONS_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_PERMISSIONS_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_EVENT_LOG_QUERY_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_EVENT_LOG_QUERY_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MIRRORIMAGE_DATA* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MIRRORIMAGE_DATA& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_GUILD_BANK_TEXT_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_GUILD_BANK_TEXT_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_OVERRIDE_LIGHT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_OVERRIDE_LIGHT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TOTEM_CREATED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TOTEM_CREATED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SEND_UNLEARN_SPELLS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SEND_UNLEARN_SPELLS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PROPOSE_LEVEL_GRANT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PROPOSE_LEVEL_GRANT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REFER_A_FRIEND_FAILURE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REFER_A_FRIEND_FAILURE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_FLYING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_FLYING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNSET_FLYING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNSET_FLYING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENABLE_BARBER_SHOP* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENABLE_BARBER_SHOP& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BARBER_SHOP_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BARBER_SHOP_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_CALENDAR* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_CALENDAR& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_EVENT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_EVENT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_FILTER_GUILD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_FILTER_GUILD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_ARENA_TEAM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_ARENA_TEAM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_COMMAND_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_COMMAND_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_NUM_PENDING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_NUM_PENDING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_NUM_PENDING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_NUM_PENDING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH_RATE_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH_RATE_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_PITCH_RATE_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_PITCH_RATE_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRIGGER_MOVIE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRIGGER_MOVIE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACHIEVEMENT_EARNED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACHIEVEMENT_EARNED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CRITERIA_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CRITERIA_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_CUSTOMIZE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_CUSTOMIZE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PHASE_SHIFT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PHASE_SHIFT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ALL_ACHIEVEMENT_DATA* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ALL_ACHIEVEMENT_DATA& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_POWER_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_POWER_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_HIGHEST_THREAT_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_HIGHEST_THREAT_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_REMOVE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_REMOVE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_CLEAR* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_CLEAR& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CONVERT_RUNE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CONVERT_RUNE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESYNC_RUNES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESYNC_RUNES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ADD_RUNE_POWER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ADD_RUNE_POWER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_LIST_PENDING_SALES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_LIST_PENDING_SALES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MODIFY_COOLDOWN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MODIFY_COOLDOWN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UPDATE_COMBO_POINTS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UPDATE_COMBO_POINTS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PRE_RESURRECT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PRE_RESURRECT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AURA_UPDATE_ALL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AURA_UPDATE_ALL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AURA_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AURA_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SERVER_FIRST_ACHIEVEMENT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SERVER_FIRST_ACHIEVEMENT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_LEARNED_SPELL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_LEARNED_SPELL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UNLEARNED_SPELL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UNLEARNED_SPELL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CRITERIA_DELETED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CRITERIA_DELETED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACHIEVEMENT_DELETED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACHIEVEMENT_DELETED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_INFO_THROTTLED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_INFO_THROTTLED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYER_VEHICLE_DATA* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYER_VEHICLE_DATA& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_GUIDS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_GUIDS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLIENTCACHE_VERSION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLIENTCACHE_VERSION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_REFUND_INFO_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_REFUND_INFO_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_REFUND_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_REFUND_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EQUIPMENT_SET_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EQUIPMENT_SET_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PROJECTILE_POSITION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PROJECTILE_POSITION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TALENTS_INFO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TALENTS_INFO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_UNIT_DESTROYED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_UNIT_DESTROYED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_GRAVITY_DISABLE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_GRAVITY_DISABLE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_GRAVITY_ENABLE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_GRAVITY_ENABLE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_GRAVITY_CHNG_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_GRAVITY_CHNG_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EQUIPMENT_SET_USE_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EQUIPMENT_SET_USE_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_FACTION_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_FACTION_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_ENTERED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_ENTERED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_EJECTED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_EJECTED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_RAID_DIFFICULTY_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_RAID_DIFFICULTY_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TOGGLE_XP_GAIN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TOGGLE_XP_GAIN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_DB_ERROR* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_DB_ERROR& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_RECEIVED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_RECEIVED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_STATUS_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_STATUS_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TALENTS_INVOLUNTARILY_RESET* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TALENTS_INVOLUNTARILY_RESET& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_NOT_IN_INSTANCE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_NOT_IN_INSTANCE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CAMERA_SHAKE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CAMERA_SHAKE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SOCKET_GEMS_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SOCKET_GEMS_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REDIRECT_CLIENT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REDIRECT_CLIENT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_COLLISION_HGT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_COLLISION_HGT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MULTIPLE_MOVES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MULTIPLE_MOVES& ServerOpcode::get();

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_opcode(const ServerOpcode& opcode);

WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode read_server_opcode(Reader& reader);

} // namespace wrath
} // namespace wow_world_messages
#endif /* WOW_WORLD_MESSAGES_CPP_WRATH_HPP */
